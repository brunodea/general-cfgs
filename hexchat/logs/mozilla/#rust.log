**** BEGIN LOGGING AT Sun Mar 27 19:43:43 2016

Mar 27 19:43:43 *	Now talking on #rust
Mar 27 19:43:43 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 27 19:43:43 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 27 19:43:59 <bluss>	I've done 10 by hand :D
Mar 27 19:44:02 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 19:44:14 <bluss>	the rest of the functions are not so important.. with some tool support they could get done though
Mar 27 19:44:17 <eddyb>	I'll have to see if I can work on that some time in the next few months
Mar 27 19:44:32 <eddyb>	whitequark gave me the idea to have both C -> MIR and MIR -> C
Mar 27 19:45:20 <eddyb>	probably easier than maintaining a LLVM backend and a Rust backend myself
Mar 27 19:46:16 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 27 19:46:20 *	zz_NameNotFound is now known as NameNotFound
Mar 27 19:46:42 <eddyb>	(you could have a -sys crate compiled directly from header or even source files and it would look like a Rust crate even if there is no original Rust source for it :P)
Mar 27 19:47:20 <phaazon>	hey
Mar 27 19:47:35 <phaazon>	I’d like to iterate by enumerating over a Vec without mutating
Mar 27 19:47:38 <phaazon>	any idea?
Mar 27 19:47:55 *	mada (mariano@moz-hrb.nhi.170.181.IP) has joined
Mar 27 19:47:55 <phaazon>	for (i, v) in (&v).iter().enumerate() { } doesn’t seem to work
Mar 27 19:47:55 <bluss>	phaazon: .enumerate() is an iterator adaptor
Mar 27 19:48:16 <bluss>	phaazon: doesn't work is so vague
Mar 27 19:48:26 <phaazon>	bluss: I get a move semantic on i and v
Mar 27 19:48:33 <phaazon>	well, v
Mar 27 19:48:34 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 27 19:48:34 <phaazon>	not i
Mar 27 19:48:42 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 27 19:48:49 <bluss>	v is a reference, so it has Copy semantics just like integer i
Mar 27 19:48:57 <bluss>	v the iterator element
Mar 27 19:49:18 <phaazon>	yeah so what do I get this erro:
Mar 27 19:49:21 <phaazon>	error*
Mar 27 19:49:28 <phaazon>	src/gl33/tessellation.rs:73:44: 73:51 error: cannot move out of borrowed content [E0507]
Mar 27 19:49:40 <eddyb>	phaazon: what line is that error on?
Mar 27 19:49:42 <bluss>	please pastebin the code for the loop, and we can see
Mar 27 19:49:52 <eddyb>	I bet it's not the for loop header
Mar 27 19:50:06 <eddyb>	or it doesn't look like what you pasted
Mar 27 19:50:07 *	Salvakiya (Salvakiya@moz-76g180.range109-157.btcentralplus.com) has joined
Mar 27 19:50:56 <phaazon>	https://gist.github.com/phaazon/666101305473afc013cf
Mar 27 19:51:03 <phaazon>	line 5
Mar 27 19:51:18 *	icefall has quit (Ping timeout: 121 seconds)
Mar 27 19:51:28 <phaazon>	oops I forgot the asterisk
Mar 27 19:51:29 *	Salvakiya has quit (Quit: Leaving)
Mar 27 19:51:39 <phaazon>	gist updated
Mar 27 19:51:41 <eddyb>	phaazon: the asterisk is the whole problem
Mar 27 19:51:43 <phaazon>	so hey
Mar 27 19:51:45 <phaazon>	I get that:
Mar 27 19:51:52 <WindowsBunnies>	eddyb: Well, even if you can get C to MIR, I'd still want some way to get Rust out of it
Mar 27 19:51:57 <phaazon>	src/gl33/tessellation.rs:73:44: 73:51 error: cannot move out of borrowed content [E0507]
Mar 27 19:51:58 <eddyb>	WindowsBunnies: yes, lifting
Mar 27 19:52:00 <phaazon>	src/gl33/tessellation.rs:73     set_component_format(i as u32, stride, *format);
Mar 27 19:52:01 <WindowsBunnies>	because I'd want to be able to tweak the result and stuff
Mar 27 19:52:09 <eddyb>	phaazon: yeah you can't move out of a reference
Mar 27 19:52:17 <phaazon>	with the issue on *format
Mar 27 19:52:24 <phaazon>	eddyb: what does it mean?
Mar 27 19:52:28 <eddyb>	nothing to do with the loop
Mar 27 19:52:45 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 27 19:52:46 <phaazon>	ah, that I need to copy?
Mar 27 19:52:47 <eddyb>	phaazon: what type is format?
Mar 27 19:52:56 <phaazon>	see the last line
Mar 27 19:53:00 <phaazon>	cf: VertexComponentFormat
Mar 27 19:53:13 <talchas>	which is presumably not Copy, which is the problem
Mar 27 19:53:17 *	mneumann (Thunderbird@moz-00qv32.rz.uni-karlsruhe.de) has joined
Mar 27 19:53:20 <phaazon>	ah
Mar 27 19:53:25 <phaazon>	so I should implement copy then?
Mar 27 19:53:35 <bluss>	simply .clone() it if it's made to be cloned
Mar 27 19:53:48 <bluss>	it's your type? Implement Copy if it's a simple enough type
Mar 27 19:53:51 *	mneumann has quit (Client exited)
Mar 27 19:53:53 <talchas>	clone it, have it impl Copy, pass &VCF instead, whichever
Mar 27 19:54:06 <phaazon>	ok, thans
Mar 27 19:54:08 <phaazon>	thanks
Mar 27 19:54:12 <talchas>	(also you don't need to write (&formats).iter() rather than just formats.iter()
Mar 27 19:54:15 *	dhole_ (dhole@moz-9nmg0r.dynamic.jazztel.es) has joined
Mar 27 19:55:32 *	cbrewster has quit (Quit: )
Mar 27 19:55:59 <phaazon>	I thought it was a destructive Iterator in that case
Mar 27 19:56:00 *	dhole has quit (Ping timeout: 121 seconds)
Mar 27 19:57:00 <bluss>	that would be formats.into_iter()
Mar 27 19:57:16 *	ShaRose has quit (Ping timeout: 121 seconds)
Mar 27 19:57:28 <eddyb>	phaazon: the error is on the *format, which means *that* operation is the problem
Mar 27 19:57:37 <talchas>	and if you don't write anything (ie, for x in some_container), it will call into_iter() for you
Mar 27 19:57:57 <eddyb>	phaazon: the "borrowed" part is about what the iterator gives you, which is what you wanted, presumably
Mar 27 19:57:59 *	SuperFluffy has quit (Ping timeout: 121 seconds)
Mar 27 19:58:06 <phaazon>	yeah, problem fixed
Mar 27 19:58:13 <phaazon>	I still find it hard what a deref does
Mar 27 19:58:14 <phaazon>	like
Mar 27 19:58:19 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 27 19:58:24 <phaazon>	dereferencing a ref gives a plain value
Mar 27 19:58:30 <phaazon>	so do we take ownership of it?
Mar 27 19:58:30 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 27 19:58:42 <phaazon>	I guess not but that’s vague
Mar 27 19:58:43 <eddyb>	phaazon: lvalues and rvalues are non-trivial
Mar 27 19:58:45 <talchas>	no, which is why you can't actually deref a plain value unless it's Copy
Mar 27 19:58:50 <eddyb>	ehm
Mar 27 19:58:56 <talchas>	(unless you're going to wind up remaking the reference)
Mar 27 19:59:02 <talchas>	(which is the nontrivial part)
Mar 27 19:59:02 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 27 19:59:12 <phaazon>	I don’t get it
Mar 27 19:59:22 <eddyb>	talchas: you're overcomplicating it I think
Mar 27 19:59:23 <phaazon>	if I pass a reference to a function
Mar 27 19:59:24 <eddyb>	phaazon: the gist of it is that if something *needs* to be a value and you pass it *foo, it *has* to move out of foo
Mar 27 19:59:34 <phaazon>	and try to access a value in the field
Mar 27 19:59:42 <phaazon>	why would it moved out?
Mar 27 19:59:54 <phaazon>	eddyb: why?
Mar 27 20:00:07 <eddyb>	phaazon: you weren't passing a reference, you were trying to pass the value behind that reference
Mar 27 20:00:10 <phaazon>	if foo is a reference
Mar 27 20:00:14 <eddyb>	i.e. if a function takes T you cannot pass &T
Mar 27 20:00:15 <phaazon>	there’s nothing to move out
Mar 27 20:00:24 <phaazon>	eddyb: yeah
Mar 27 20:00:25 <eddyb>	you have to give it an owned T
Mar 27 20:00:34 *	Jackneill has quit (Ping timeout: 121 seconds)
Mar 27 20:00:36 *	StarLight has quit (Quit: Lost terminal)
Mar 27 20:00:43 <eddyb>	cannot be shared, the function must be able to do whatever it wants with it
Mar 27 20:00:59 <phaazon>	ok ok
Mar 27 20:01:01 <phaazon>	I think I got it
Mar 27 20:01:10 <phaazon>	even though it’s still very vague to me
Mar 27 20:01:12 *	ShaRose (ShaRose@moz-bluree.am.sharo.se) has joined
Mar 27 20:01:23 <phaazon>	I don’t really understand when I get dereference a referenc
Mar 27 20:01:26 <phaazon>	without moving things out
Mar 27 20:01:26 <eddyb>	what I wanted to add, and what talchas sort of mentioned is that:
Mar 27 20:02:04 <eddyb>	&expr doesn't need expr to be a value so &*reference gives you reference back, unchanged and &reference.field doesn't move out/copy the field value but gives you a reference to the field
Mar 27 20:02:33 <eddyb>	(you can also write the latter as &(*reference).field and still no copying/moving happens)
Mar 27 20:02:47 <phaazon>	yeah yeah
Mar 27 20:02:48 <phaazon>	I got that
Mar 27 20:03:01 <phaazon>	what I’m not used to is when I can actually deref something
Mar 27 20:03:02 <phaazon>	like
Mar 27 20:03:04 *	sankha has quit (Ping timeout: 121 seconds)
Mar 27 20:03:05 <phaazon>	let x = 3;
Mar 27 20:03:11 <eddyb>	let x = *y;?
Mar 27 20:03:14 <phaazon>	let y = &x;
Mar 27 20:03:17 <phaazon>	let z = *x;
Mar 27 20:03:20 <phaazon>	what happens there?
Mar 27 20:03:28 <phaazon>	does x just lose its owning over 5?
Mar 27 20:03:30 <eddyb>	so that works always if the type is copyable
Mar 27 20:03:35 <phaazon>	ok 
Mar 27 20:03:41 <eddyb>	types that impl Copy never get "moved away"
Mar 27 20:03:44 <phaazon>	so the underlying type has to be Copy
Mar 27 20:03:51 <eddyb>	*or* you have a Box<T>
Mar 27 20:04:00 <eddyb>	which is special cased so you can move out of a *boxed_value
Mar 27 20:04:07 <phaazon>	yeah
Mar 27 20:04:07 <phaazon>	ok
Mar 27 20:04:10 <phaazon>	that makes sense
Mar 27 20:04:16 *	qrlpx has quit (Ping timeout: 121 seconds)
Mar 27 20:04:16 *	qrlpx_ (smuxi@moz-spp4u3.dip0.t-ipconnect.de) has joined
Mar 27 20:04:52 <talchas>	(at some point maybe there will be DerefMove so that Box<T> isn't a special case anymore, but that's not relevant yet)
Mar 27 20:05:24 *	bytewise_ has quit (Quit: Leaving)
Mar 27 20:05:50 *	doener has quit (Quit: leaving)
Mar 27 20:06:23 <dprien>	Is there some way to make this code work? http://is.gd/L7DFFK (I already asked in #rust-beginners, but asking here too to maybe get some more ideas)
Mar 27 20:06:26 *	vadix_ has quit (Ping timeout: 121 seconds)
Mar 27 20:07:24 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 27 20:08:11 <talchas>	I don't think so
Mar 27 20:08:25 <talchas>	that needs like HKT for E<'a> or something like that
Mar 27 20:08:46 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 27 20:09:03 *	xiinotulp (q@moz-iq18bq.dynamic.totbb.net) has joined
Mar 27 20:10:40 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 27 20:11:02 *	plutoniix has quit (Ping timeout: 121 seconds)
Mar 27 20:12:11 <dprien>	talchas: I thought about some kind of syntax extension for "for<>" like "for<'a> fn(&'a str) -> T where T: 'a". But it's good to know that I didn't overlook something totally obvious. Thanks.
Mar 27 20:13:08 <talchas>	yeah, though the obvious interpretation of that would still be basically T: 'static
Mar 27 20:13:25 *	blackgoat (blackgoat@moz-stj.iu0.157.221.IP) has joined
Mar 27 20:13:37 <talchas>	(though you could change the rules to make it not be the case)
Mar 27 20:15:52 <Witchsong>	I get &'a [u8] from a method, how can I most easily convert this to a String object? String::from_utf8() doesn't seem to like a slice as input.
Mar 27 20:16:11 *	tim______ (tim_____@moz-ht6ast.dip0.t-ipconnect.de) has joined
Mar 27 20:16:18 *	Fanaen has quit (Quit: Leaving.)
Mar 27 20:16:58 <talchas>	str::from_utf().to_owned()
Mar 27 20:17:19 <talchas>	(or make a Vec and then String::from_utf8 that, but you might as well do the utf-8 check before copying)
Mar 27 20:18:20 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 27 20:18:21 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 27 20:18:38 *	tim_____ has quit (Ping timeout: 121 seconds)
Mar 27 20:18:44 *	Aaronepower has quit (Client exited)
Mar 27 20:18:45 <Witchsong>	Cheers. :)
Mar 27 20:19:22 *	Aaronepower (Thunderbird@moz-sgf.dch.101.89.IP) has joined
Mar 27 20:19:43 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 27 20:19:52 *	pczarn has quit (Ping timeout: 121 seconds)
Mar 27 20:20:33 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 27 20:21:05 *	kfpratt (kfpratt@moz-52j7lo.abhsia.telus.net) has joined
Mar 27 20:22:23 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 27 20:22:23 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 27 20:23:52 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 27 20:24:15 *	eibwen has quit (Ping timeout: 121 seconds)
Mar 27 20:24:25 *	zhoeon (fc@moz-apprsk.cpe.teksavvy.com) has joined
Mar 27 20:25:07 *	kfpratt has quit (Ping timeout: 121 seconds)
Mar 27 20:25:32 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 27 20:25:49 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 27 20:26:21 *	NameNotFound is now known as zz_NameNotFound
Mar 27 20:27:35 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 27 20:27:48 *	brson has quit (Quit: leaving)
Mar 27 20:27:50 *	badon has quit (Ping timeout: 121 seconds)
Mar 27 20:29:10 *	daze has quit (Connection closed)
Mar 27 20:30:06 *	badon_ is now known as badon
Mar 27 20:30:25 *	zz_NameNotFound is now known as NameNotFound
Mar 27 20:30:35 *	SneakySnake has quit (Quit: Leaving)
Mar 27 20:31:06 *	s_kunk_ (s_kunk@moz-snjcf1.fbx.proxad.net) has joined
Mar 27 20:31:25 *	icefall (tyler@moz-hud.3ra.116.199.IP) has joined
Mar 27 20:31:48 *	s_kunk has quit (Connection closed)
Mar 27 20:32:09 *	goyox86 (textual@moz-rvv.00r.255.109.IP) has joined
Mar 27 20:35:29 *	icefall has quit (Ping timeout: 121 seconds)
Mar 27 20:36:14 *	Amaranth (travis@moz-rrrpsq.cpe.cableone.net) has joined
Mar 27 20:36:26 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 27 20:36:34 *	gopar has quit (A TLS packet with unexpected length was received.)
Mar 27 20:36:40 *	niemal has quit (Connection closed)
Mar 27 20:37:41 *	niemal (nl@moz-aqj1vc.218.tellas.gr) has joined
Mar 27 20:38:27 *	Pursuit has quit (Quit: ZNC - 1.6.0 - http://znc.in)
Mar 27 20:38:44 *	plutoniix (q@moz-iq18bq.dynamic.totbb.net) has joined
Mar 27 20:39:02 *	p has quit (Ping timeout: 121 seconds)
Mar 27 20:39:50 *	vadix_ (vadix@moz-ogk666.li8q.e9lr.b400.2607.IP) has joined
Mar 27 20:40:49 *	xiinotulp has quit (Ping timeout: 121 seconds)
Mar 27 20:44:09 <ehiggs>	is there a way to disable pie in rustc?
Mar 27 20:44:22 *	stephanbuys has quit (Connection closed)
Mar 27 20:45:14 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 20:45:53 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 27 20:45:54 *	mvtmrs has quit (Ping timeout: 121 seconds)
Mar 27 20:47:36 *	Altazimuth_ has quit (Ping timeout: 121 seconds)
Mar 27 20:49:02 *	vmesons (rmacleod@moz-hs5cri.cable.teksavvy.com) has joined
Mar 27 20:49:04 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 27 20:49:08 *	vmeson has quit (Ping timeout: 121 seconds)
Mar 27 20:49:16 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 27 20:49:16 *	fl3 has quit (Connection closed)
Mar 27 20:49:19 *	niemal has quit (Connection closed)
Mar 27 20:49:37 *	arfy has quit (Connection closed)
Mar 27 20:49:44 <Soni>	am I doing this right? http://sprunge.us/LPZX
Mar 27 20:49:47 <Soni>	it compiles, at least
Mar 27 20:51:44 *	kerrick (kerrick@moz-fh9utp.ca.comcast.net) has joined
Mar 27 20:51:46 *	Azy8BsKXVko has quit (A TLS packet with unexpected length was received.)
Mar 27 20:52:31 *	eckhardt has quit (Connection closed)
Mar 27 20:54:03 *	futile has quit (Quit: WeeChat 1.4)
Mar 27 20:54:47 <kazagistar>	Can I use ? with Option?
Mar 27 20:55:13 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 27 20:55:16 *	niemal (nl@moz-aqj1vc.218.tellas.gr) has joined
Mar 27 20:56:06 *	woboats has quit (Client exited)
Mar 27 20:56:38 *	hokkos has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 27 20:57:19 *	samx has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 20:57:51 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 27 20:58:27 *	ARM9 has quit (Quit: Leaving)
Mar 27 20:59:12 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 27 20:59:26 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 27 20:59:27 *	mvtmrs (sachielatji@moz-4ae0f1.xtra.co.nz) has joined
Mar 27 20:59:29 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 27 20:59:57 *	arBmind1 has quit (Ping timeout: 121 seconds)
Mar 27 21:00:48 *	iiddnn__ has quit (Client exited)
Mar 27 21:00:53 *	crisco_ has quit (Ping timeout: 121 seconds)
Mar 27 21:01:18 *	arBmind (Andreas@moz-5aejb5.revision-party.vipri.net) has joined
Mar 27 21:01:38 *	crisco (me@moz-tj5n3n.revision-party.vipri.net) has joined
Mar 27 21:01:47 *	mvtmrs has quit (Connection closed)
Mar 27 21:01:53 *	Cyderize (Cyderize@moz-7iot5a.tpgi.com.au) has joined
Mar 27 21:02:17 *	qrlpx_ has quit (Ping timeout: 121 seconds)
Mar 27 21:02:17 *	qrlpx (smuxi@moz-p0d2se.dip0.t-ipconnect.de) has joined
Mar 27 21:03:02 <kazagistar>	… is this actually still open? https://github.com/serde-rs/serde/issues/1
Mar 27 21:03:05 *	kkus (kkus@moz-7u2hvh.fios.verizon.net) has joined
Mar 27 21:03:18 *	jo has quit (A TLS packet with unexpected length was received.)
Mar 27 21:03:35 *	futile (felix@moz-cursjl.unity-media.net) has joined
Mar 27 21:04:13 *	mvtmrs_ (sachielatji@moz-4ae0f1.xtra.co.nz) has joined
Mar 27 21:06:28 *	cruor99 has quit (Ping timeout: 121 seconds)
Mar 27 21:06:57 *	yw (yw@moz-e5c580.dodo.net.au) has joined
Mar 27 21:07:15 <Witchsong>	http://pastebin.com/EUbS2t4K <-- Trying to do this. But it keeps saying "Cannot move out of borrowed content" on unwrap(). into_inner() consumes self and returns the wrapped writer, then unwrap consumes self and returns the buffer. Why is it that it thinks it's borrowed at any point in that chain? :S
Mar 27 21:07:36 *	niconii (nicole@moz-f9rf10.jhek.me72.48f8.2001.IP) has joined
Mar 27 21:07:36 *	ChanServ sets mode +a on #rust niconii
Mar 27 21:07:36 *	ChanServ gives channel operator status to niconii
Mar 27 21:11:01 *	yw has quit (Ping timeout: 121 seconds)
Mar 27 21:12:51 *	AutomatedTester|AFK is now known as AutomatedTester
Mar 27 21:13:22 *	SiegeLord has quit (Quit: It's a joke, it's all a joke.)
Mar 27 21:13:35 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 27 21:15:17 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 27 21:17:49 *	yw (yw@moz-e5c580.dodo.net.au) has joined
Mar 27 21:18:42 *	Jayflux has quit (Quit: Leaving)
Mar 27 21:19:01 <Azy8BsKXVko>	I'm at the section on dynamic dispatch. Wish me luck.
Mar 27 21:19:16 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 27 21:20:08 <rphmeier>	Witchsong: looks like the writer struct holds a borrow of "mem", a local var, when it is being created?
Mar 27 21:21:13 <rphmeier>	If writer.into_inner() returns something which continues to hold that borrow, then you cannot return that struct since it would outlive the data it references
Mar 27 21:21:39 <tjdetwiler>	does anyone know the simplest way to tell cargo: 'cargo run all my integration tests (under tests/) but no unit tests'
Mar 27 21:21:40 <rphmeier>	(I don't know the API which you are using, if it's something on crates.io, could you link to the docs?)
Mar 27 21:21:50 <tjdetwiler>	it doesn't appear to like multiple --test $test arguments
Mar 27 21:21:53 *	yw has quit (Ping timeout: 121 seconds)
Mar 27 21:22:17 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 27 21:22:18 *	AutomatedTester is now known as AutomatedTester|AFK
Mar 27 21:22:24 <Witchsong>	https://crates.io/crates/xml-rs
Mar 27 21:22:58 <Witchsong>	And thsi is the memstream being wrapped: https://github.com/rustache/rust-memstream/blob/master/src/lib.rs
Mar 27 21:23:11 *	samx has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 21:23:18 *	Makoryu (malleus@moz-0de80j.dyn.optonline.net) has joined
Mar 27 21:23:19 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 27 21:23:54 <Witchsong>	The thing is, looking the code, into_inner() consumes self (i.e. self and not &self as argument), and returns the self.sink. Which means that the borrow should be gone too?
Mar 27 21:24:20 <rphmeier>	yeah, I would guess so
Mar 27 21:24:40 <rphmeier>	String and XmlError fully own their contents
Mar 27 21:24:49 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 27 21:25:19 <rphmeier>	where is the error exactly?
Mar 27 21:25:23 *	ksf has quit (Ping timeout: 121 seconds)
Mar 27 21:25:28 <Witchsong>	On the unwrap() call.
Mar 27 21:25:48 <Witchsong>	I tried to move it to it's own line, doing first the into_inner() and then the unwrap on a new line, and then passing that into the match.
Mar 27 21:25:58 <Witchsong>	And then it fails at the unwrap line.
Mar 27 21:27:05 *	JanC_ has quit (Ping timeout: 121 seconds)
Mar 27 21:27:09 *	KB5` (KB5@moz-rv9isk.dhcp.inet.fi) has joined
Mar 27 21:27:10 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 27 21:27:15 *	lala has quit (Quit: )
Mar 27 21:27:17 *	arfy (Miranda@moz-rvdeeo.iinet.net.au) has joined
Mar 27 21:27:49 <rphmeier>	figured it out
Mar 27 21:28:02 <Witchsong>	Oh?
Mar 27 21:28:11 <rphmeier>	Witchsong: the sink for your EventWriter is of type &mut Memstream
Mar 27 21:28:14 <Mutabah>	Witchsong: create_writer takes a W: Write
Mar 27 21:28:16 <Mutabah>	Yep
Mar 27 21:28:23 <rphmeier>	but Memstream::unwrap takes self by-value
Mar 27 21:28:24 <Mutabah>	And you're passing &mut mem
Mar 27 21:28:47 *	futile has quit (Quit: WeeChat 1.4)
Mar 27 21:28:57 <Mutabah>	So, .into_inner() is returning &mut MemStream, which you can't call .unwrap() on 
Mar 27 21:29:43 *	KB5 has quit (Ping timeout: 121 seconds)
Mar 27 21:33:39 <Witchsong>	Ah, I see.
Mar 27 21:33:39 <rphmeier>	I would guess that this implies that Write is automatically implemented for &mut T where T: Write?
Mar 27 21:33:39 <Witchsong>	So I need to send it in by value as well.
Mar 27 21:33:39 <Witchsong>	So I get a value back.
Mar 27 21:33:39 <Mutabah>	Or, just descope the writer an then you can use the original value
Mar 27 21:33:39 <rphmeier>	Witchsong: you could also create and use the writer in a nested scope
Mar 27 21:33:39 *	Eonil (Eonil@moz-2qo.kfq.238.218.IP) has joined
Mar 27 21:33:39 *	icefall (tyler@moz-410.3pk.170.166.IP) has joined
Mar 27 21:33:39 <rphmeier>	then you have full ownership of the memstream when it ends and you can just use mem.unwrap() like you are now
Mar 27 21:33:39 *	Eonil has quit (Quit: This computer has gone to sleep)
Mar 27 21:33:39 <Witchsong>	Is there any benefit from doing it that way compared to just sending in by value?
Mar 27 21:33:39 <rphmeier>	no, but it feels fancy so it must be better
Mar 27 21:33:39 <Witchsong>	And I am not sure I understood what you meant about Write being automatically implemented. :p
Mar 27 21:33:39 <Witchsong>	Fancy is always better. ;)
Mar 27 21:33:39 <Mutabah>	rphmeier: It is
Mar 27 21:33:39 *	funfunctor (edward@moz-a4atq6.bigpond.net.au) has joined
Mar 27 21:33:39 *	Quxxy2 (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 27 21:33:40 <Mutabah>	rphmeier: There's an impl for it in std
Mar 27 21:33:50 <rphmeier>	Mutabah: yeah, just went looking for it
Mar 27 21:34:21 <rphmeier>	Witchsong: what I mean is that you were able to use an &mut MemStream as something that satisfied Write, even though Write was only implemented for MemStream by-value
Mar 27 21:34:34 *	kmayes (Mibbit@moz-14bp83.tukrga.sbcglobal.net) has joined
Mar 27 21:34:43 <Witchsong>	Ah, okay.
Mar 27 21:34:52 <Witchsong>	This language is somewhat confusing. :p
Mar 27 21:35:02 *	kmayes has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 27 21:35:37 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 27 21:35:58 <vadix_>	is there any way to programmatically do a select! on a variable amount of channels
Mar 27 21:36:20 <vadix_>	like I have a vector of channels and I want to wait for a message on only certain ones
Mar 27 21:36:21 <rphmeier>	It's got a tough learning curve, but you'll get used to it
Mar 27 21:36:22 *	rovar has quit (Quit: Leaving)
Mar 27 21:36:24 <vadix_>	and get the number of which one
Mar 27 21:36:51 <Mutabah>	vadix_: select! is just a macro, so you can do what it does
Mar 27 21:36:54 <Witchsong>	http://pastebin.com/xuL0g5dX <-- So that's better than doing the into_inner() call?
Mar 27 21:37:13 <vadix_>	Mutabah: this thing: https://doc.rust-lang.org/std/sync/mpsc/struct.Select.html
Mar 27 21:37:16 <vadix_>	Mutabah: ?
Mar 27 21:37:42 <vadix_>	Mutabah: can this only be used on nightly?
Mar 27 21:37:52 *	badon has quit (Ping timeout: 121 seconds)
Mar 27 21:38:01 <Mutabah>	http://doc.rust-lang.org/src/std/macros.rs.html#164-172
Mar 27 21:38:23 <Mutabah>	Well, the select! macro is unstable so...
Mar 27 21:38:29 *	orospakr (orospakr@moz-s19ht2.cpe.teksavvy.com) has joined
Mar 27 21:38:51 <vadix_>	Mutabah: oh, is it going to be stable in the near future?
Mar 27 21:39:04 <rphmeier>	Witchsong: it will probably produce identical code to if you had the writer take mem by-value and used into-inner. it's up to you which you prefer, I would say they are both idiomatic
Mar 27 21:39:51 <Mutabah>	vadix_: I don't know, maybe look at the relevant tracking issue?
Mar 27 21:39:54 *	badon_ is now known as badon
Mar 27 21:40:02 *	spider-mario has quit (Connection closed)
Mar 27 21:40:28 <vadix_>	alright, ill look for it
Mar 27 21:40:28 *	jnicklas has quit (Client exited)
Mar 27 21:40:29 *	JanC_ (janc@moz-i9hj5b.dsl.scarlet.be) has joined
Mar 27 21:40:55 *	fmendez_ has quit (Quit: )
Mar 27 21:40:56 *	tim______ has quit (Connection closed)
Mar 27 21:42:08 <AionicDuck>	is there any "best" forum for reading on Rust? right now I'm googling for blogs and lurking around /r/rust and the rustlang site
Mar 27 21:42:39 *	doener (doener@moz-fnh.n4j.147.5.IP) has joined
Mar 27 21:42:42 <Mutabah>	No real best one :) There's the forum http://users.rust-lang.org/, reddit, and here that I know of
Mar 27 21:42:57 <Mutabah>	Each has its own unique flavour and utility
Mar 27 21:43:02 <_habnabit>	irc is better than forums anyway
Mar 27 21:44:29 *	Aceeri has quit (Quit: Connection closed for inactivity)
Mar 27 21:45:32 *	mexisme (mexisme@moz-4m7bio.broadband.telstraclear.net) has joined
Mar 27 21:45:43 *	ehiggs has quit (Ping timeout: 121 seconds)
Mar 27 21:45:58 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 21:47:46 *	GGist (Mibbit@moz-2n17l0.wa.comcast.net) has joined
Mar 27 21:49:27 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 27 21:50:00 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 27 21:50:03 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 21:51:26 *	crisco_ (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 27 21:52:47 <osa1>	borrow checker complains because Input has a ref to self: http://lpaste.net/157110 any ideas how to fix?
Mar 27 21:53:30 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 27 21:54:24 *	crisco has quit (Ping timeout: 121 seconds)
Mar 27 21:56:41 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 27 21:57:21 <vadix_>	does anybody know of a crate that provides a stable Select struct like the one in unstable rust?
Mar 27 21:57:39 *	BrickHouse (AndChat1494@moz-dgsr7q.49j8.kec7.1017.2600.IP) has joined
Mar 27 21:58:02 <vadix_>	the one in chan is not public
Mar 27 21:58:09 *	ytain (ytain@moz-0n9vu0.cpe.teksavvy.com) has joined
Mar 27 21:58:16 <BrickHouse>	Hey everyone, can you define traits on type aliases? 
Mar 27 21:58:18 *	tripped (trip@moz-i4845h.cable.mindspring.com) has joined
Mar 27 21:58:34 <mindtree>	osa1: does TUIRet borrow something from self?
Mar 27 21:58:41 <osa1>	yes
Mar 27 21:58:42 <BrickHouse>	For example if I wanted to have an alias for an integer that had reverse ordinality
Mar 27 21:58:43 <osa1>	mindtree: yes
Mar 27 21:58:44 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 27 21:58:51 <osa1>	mindtree: it should still work I think
Mar 27 21:59:12 <vadix_>	BrickHouse: you need to use a newtype
Mar 27 21:59:21 <vadix_>	BrickHouse: if you want to reverse ordinality
Mar 27 21:59:31 <vadix_>	BrickHouse: wrap it Rev(T)
Mar 27 21:59:42 <vadix_>	BrickHouse: I actually have a source file that does something similar for reverse ranking
Mar 27 22:00:00 <vadix_>	BrickHouse: https://github.com/vadixidav/evobots/blob/master/src/rank.rs
Mar 27 22:00:24 *	Witchsong has quit (Quit: )
Mar 27 22:01:43 *	fkaa has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 27 22:01:45 *	ThatOtherPerson (ThatOtherPe@moz-vrp2kb.ca.comcast.net) has joined
Mar 27 22:02:04 <BrickHouse>	Thank you so much vadix_
Mar 27 22:02:09 *	markstory (textual@moz-uhk7a8.home4.cgocable.net) has joined
Mar 27 22:04:40 *	klue has quit (Ping timeout: 121 seconds)
Mar 27 22:04:41 <BrickHouse>	Yeah this is basically exactly what the was looking for
Mar 27 22:05:22 *	vadix_ has quit (Ping timeout: 121 seconds)
Mar 27 22:05:56 *	eric_lagergren has quit (Quit: Leaving)
Mar 27 22:06:29 <osa1>	so I'm stuck. that has to be a bug
Mar 27 22:07:28 *	goyox86 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 22:08:04 *	kerrang (kerrang@moz-v622nr.fios.verizon.net) has left
Mar 27 22:08:53 *	annodomini has quit (Client exited)
Mar 27 22:10:06 *	sbw (Thunderbird@moz-gkj.r2e.173.59.IP) has joined
Mar 27 22:12:08 *	ubsan has quit (Connection closed)
Mar 27 22:13:31 *	ygrek (user@moz-8j9aeu.org.ua) has joined
Mar 27 22:13:34 *	arBmind has quit (Quit: Leaving.)
Mar 27 22:16:45 *	Malnormalulo has quit (Ping timeout: 121 seconds)
Mar 27 22:18:32 *	yw (yw@moz-e5c580.dodo.net.au) has joined
Mar 27 22:18:42 *	xiinotulp (q@moz-14sjlv.dynamic.totbb.net) has joined
Mar 27 22:20:11 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 27 22:20:20 *	msingle (mts001@moz-n19sp8.fios.verizon.net) has joined
Mar 27 22:21:05 *	ygrek has quit (Ping timeout: 121 seconds)
Mar 27 22:21:46 *	plutoniix has quit (Ping timeout: 121 seconds)
Mar 27 22:21:56 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 22:22:36 *	yw has quit (Ping timeout: 121 seconds)
Mar 27 22:24:14 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 27 22:42:15 *	Disconnected (No route to host)
**** ENDING LOGGING AT Sun Mar 27 22:42:15 2016

**** BEGIN LOGGING AT Sun Mar 27 22:42:27 2016

Mar 27 22:42:27 *	Now talking on #rust
Mar 27 22:42:27 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 27 22:42:27 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 27 22:42:38 *	indefini (indefini@moz-4p4v25.ucom.ne.jp) has joined
Mar 27 22:42:50 *	pseudo has quit (Ping timeout: 121 seconds)
Mar 27 22:43:17 *	nagisa_ has quit (Ping timeout: 121 seconds)
Mar 27 22:43:20 *	pseudo (pseudo@moz-bvvcvm.at.cox.net) has joined
Mar 27 22:44:33 *	ZX21T32K (ZX21T32K@moz-qir4sg.elisa-laajakaista.fi) has joined
Mar 27 22:45:18 *	g-andrade has quit (Ping timeout: 121 seconds)
Mar 27 22:48:40 *	eazar001 has quit (Quit: WeeChat 1.4)
Mar 27 22:48:59 *	rustyrazorblade has quit (Client exited)
Mar 27 22:50:12 *	ZX21T32K has quit (Quit: Goodbye!)
Mar 27 22:50:40 *	eckhardt (eckhardt@moz-0b0.bm2.248.98.IP) has joined
Mar 27 22:52:19 *	meh (meh@moz-u7v.08c.42.151.IP) has joined
Mar 27 22:52:24 *	eckhardt has quit (Quit: Leaving...)
Mar 27 22:52:50 <cbrewster>	Is it possible to do interior mutability for an element in a fixed array
Mar 27 22:54:45 *	zeebo has quit (Ping timeout: 121 seconds)
Mar 27 22:55:46 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 27 22:56:04 *	p (r00t@moz-ht65gk.austtx.sbcglobal.net) has joined
Mar 27 22:56:38 *	samx has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 22:56:58 *	dzbarsky (Adium@moz-v18mcd.ca.comcast.net) has joined
Mar 27 22:57:51 <_habnabit>	cbrewster, use a RefCell, like usual?
Mar 27 22:58:17 *	steffengy has quit (Ping timeout: 121 seconds)
Mar 27 22:58:34 <cbrewster>	_habnabit: ahh I was using Cell and it wasn't working. but it was due to copy not being implemented
Mar 27 22:58:56 *	steffengy (quassel@moz-crv3ba.dip0.t-ipconnect.de) has joined
Mar 27 23:01:35 *	dhole (dhole@moz-n9qqnd.dynamic.jazztel.es) has joined
Mar 27 23:02:05 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 27 23:02:57 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 27 23:04:16 *	dhole_ has quit (Ping timeout: 121 seconds)
Mar 27 23:04:17 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 27 23:04:26 <Azy8BsKXVko>	In dynamic dispatch, I'm assuming the &Foo The Book uses is just a placeholder and can be pretty much anything within reason?
Mar 27 23:04:53 <benh>	It's not very dynamic
Mar 27 23:05:05 <benh>	so it's just a trait
Mar 27 23:05:19 <Azy8BsKXVko>	I could do "&x as &TheGame" if I want to.
Mar 27 23:05:39 <Azy8BsKXVko>	(btw, you all just lost.)
Mar 27 23:05:43 <Havvy>	!lose
Mar 27 23:05:44 *	rustbot just lost the game. ( http://en.wikipedia.org/wiki/Game_%28mind_game%29 )
Mar 27 23:05:51 *	EsBe (EsBe@moz-j68r7f.res.rr.com) has joined
Mar 27 23:06:15 <tahnok>	>It is impossible to win most versions of The Game
Mar 27 23:06:40 <Azy8BsKXVko>	I like that that's an actual bot feature.
Mar 27 23:06:57 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 27 23:07:00 <Azy8BsKXVko>	This is a fun channel.
Mar 27 23:07:05 <Azy8BsKXVko>	Rust is a fun language.
Mar 27 23:07:44 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 27 23:07:46 <Havvy>	Azy8BsKXVko:  It just so happens that I put it in all of my bots. ;)
Mar 27 23:08:37 <Azy8BsKXVko>	Heh.
Mar 27 23:08:52 *	kimundi (kimundi@moz-pcpfug.otl6.ddq3.4fe2.2002.IP) has joined
Mar 27 23:16:39 *	dzbarsky has quit (Connection closed)
Mar 27 23:16:39 *	dzbarsky1 (Adium@moz-t6h9du.82pc.j76f.0646.2601.IP) has joined
Mar 27 23:17:15 *	cbrewster has quit (Connection closed)
Mar 27 23:17:47 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 27 23:19:53 *	brendan (brendaneich@moz-qa96cl.sub-70-213-5.myvzw.com) has joined
Mar 27 23:20:01 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 27 23:20:32 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 27 23:21:06 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 27 23:21:14 *	shackra (shackrasisl@moz-ufu.n20.196.201.IP) has joined
Mar 27 23:22:44 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 27 23:23:42 *	Ralith has quit (Quit: Lost terminal)
Mar 27 23:23:48 *	bitshifter (bitshifter@moz-nqgbo4.tpgi.com.au) has joined
Mar 27 23:25:09 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 27 23:25:59 *	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined
Mar 27 23:26:07 *	Ralith (ralith@moz-itpr0k.customer.broadstripe.net) has joined
Mar 27 23:28:44 *	rustyrazorblade (rustyrazorb@moz-ufqco7.or.comcast.net) has joined
Mar 27 23:30:01 *	robojeb (robojeb@moz-g4pd71.mi.comcast.net) has joined
Mar 27 23:31:59 *	gingermusketeer has quit (Connection closed)
Mar 27 23:32:01 *	gingermusketeer (gingermuske@moz-6o5frk.compute.amazonaws.com) has joined
Mar 27 23:32:30 *	nicholasf (nicholasf@moz-00v.4vm.152.1.IP) has joined
Mar 27 23:33:58 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 27 23:39:08 *	nowhere_man has quit (Ping timeout: 121 seconds)
Mar 27 23:39:20 *	nowhere_man (pierre@moz-66s12c.abo.wanadoo.fr) has joined
Mar 27 23:41:05 *	layl has quit (Quit: WeeChat 1.4)
Mar 27 23:42:25 *	FreeBird (FreeBird@moz-4mc401.9t5k.kgbt.120b.2a02.IP) has joined
Mar 27 23:42:47 *	cdidd has quit (Quit: Leaving)
Mar 27 23:44:07 *	dmilith has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 23:44:44 *	AngelOfSol (Angel@moz-h5l336.fios.verizon.net) has joined
Mar 27 23:44:48 *	AngelOfSol has quit (Connection closed)
Mar 27 23:45:25 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 27 23:46:29 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 27 23:46:32 *	rustyrazorblade has quit (Client exited)
Mar 27 23:47:27 *	cdidd (cdidd@moz-bnrl43.broadband.corbina.ru) has joined
Mar 27 23:48:14 *	ytain has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 27 23:49:00 *	mada has quit (Ping timeout: 121 seconds)
Mar 27 23:49:44 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 27 23:50:11 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 27 23:52:20 *	Guest5 (textual@moz-hnb58r.oc.cox.net) has joined
Mar 27 23:53:36 *	samx has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 23:53:41 *	brendan has quit (Client exited)
Mar 27 23:54:14 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 27 23:55:10 *	martin-li (martin-li@moz-1vb.79s.252.114.IP) has joined
Mar 27 23:55:21 *	Sandflies (Mibbit@moz-1fp.ngr.55.210.IP) has joined
Mar 27 23:55:43 *	bholley is now known as bholley_away
Mar 27 23:56:04 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 27 23:56:37 *	wixo (Zarathustra@moz-5h9ov2.66.brainstorminternet.net) has joined
Mar 27 23:56:58 *	stephanbuys (Adium@moz-iqes92.telkomadsl.co.za) has joined
Mar 27 23:57:59 <wixo>	Is there a way to match zero or one (but not more) items in a macro?
Mar 27 23:59:57 <Mutabah>	wixo: Sadly, no
Mar 28 00:00:04 <Mutabah>	Not without using multiple pattern tricks
Mar 28 00:00:34 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 28 00:00:58 *	fyolnish has quit (Quit: Bye)
Mar 28 00:01:13 <wixo>	Bah. Humbug. I guess my macros will have a few undocumented features brought about by zero or more.
Mar 28 00:01:13 *	icefall has quit (Ping timeout: 121 seconds)
Mar 28 00:02:04 *	weirdo (Mibbit@moz-js36o8.cable.rogers.com) has joined
Mar 28 00:02:29 <weirdo>	how does one do division on float types? http://ideone.com/CdyxF6
Mar 28 00:02:45 <Mutabah>	playbot: 123.0 / 5.0
Mar 28 00:02:46 -playbot/#rust-	24.6
Mar 28 00:02:55 *	munchies (AndChat4674@moz-1fp.ngr.55.210.IP) has joined
Mar 28 00:03:04 <Mutabah>	basically, you need a floating point literal
Mar 28 00:03:19 <wixo>	(without the `.0`, it's an int)
Mar 28 00:04:00 <weirdo>	i see, thanks
Mar 28 00:04:33 *	Sandflies has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 00:07:41 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 28 00:07:41 *	weirdo has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 00:08:52 *	bmaxa (bmaxa@moz-o4h.l47.72.109.IP) has joined
Mar 28 00:11:43 *	demilux has quit (Ping timeout: 121 seconds)
Mar 28 00:13:11 *	zhoeon has quit (Ping timeout: 121 seconds)
Mar 28 00:13:26 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 28 00:13:28 *	infynyxx has quit (Connection closed)
Mar 28 00:15:21 *	bjz_ (bjz@moz-puppgq.tpgi.com.au) has joined
Mar 28 00:15:59 *	bjz has quit (Ping timeout: 121 seconds)
Mar 28 00:16:45 *	gmorenz (normal@moz-os4.l2b.52.70.IP) has joined
Mar 28 00:17:18 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 28 00:19:53 *	icefall (tyler@moz-410.3pk.170.166.IP) has joined
Mar 28 00:21:23 *	samx has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 28 00:21:33 *	urcra has quit (Connection closed)
Mar 28 00:22:02 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 28 00:25:47 <kkus>	this is probably really simple but how do I convert something to i8? is there a something.to_integer like we have name.to_string()? 
Mar 28 00:26:05 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 28 00:27:04 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 28 00:27:23 <Mutabah>	kkus: From a string, there's .parse
Mar 28 00:27:24 <talchas>	for one integer type to another you do "x as i8", for string parsing there's "x.parse::<i8>()" or like "foo.some_i8 = x.parse()"
Mar 28 00:27:36 <Mutabah>	playbot: "123".parse::<i8>()
Mar 28 00:27:37 -playbot/#rust-	Ok(123)
Mar 28 00:28:36 *	martin-li has quit (Quit: This computer has gone to sleep)
Mar 28 00:28:47 <kkus>	I was hoping to just do something like Philosopher::new("Judith Butler", 1956), 
Mar 28 00:29:05 <Mutabah>	Why can you not?
Mar 28 00:29:17 <GGist>	Could anyone tell me why this wont work http://is.gd/1hbfUy I was thinking it may have to do with returning a 'static lifetime from Clone but I am not getting any compile errors.
Mar 28 00:29:55 <Mutabah>	GGist: You're returning a ByteContainer that contains a borrow of the current stack frame
Mar 28 00:29:56 <talchas>	GGist: let x = []; isn't statically allocated
Mar 28 00:30:08 <talchas>	(and doing something like &[] isn't either)
Mar 28 00:30:08 <GGist>	Mutabah: Clone copies the data
Mar 28 00:30:20 <Mutabah>	GGist: Not in this case
Mar 28 00:30:26 <Mutabah>	GGist: Clone on a &-ptr copyes the &ptr
Mar 28 00:30:38 <Mutabah>	oh
Mar 28 00:30:39 <Mutabah>	oooh
Mar 28 00:31:08 <Mutabah>	oooh
Mar 28 00:31:08 <talchas>	no, you're still correct Mutabah 
Mar 28 00:31:12 <SpaceManiac>	GGist: in `fn clone(&self) -> ByteContainer<'static>`, the 'static isn't actually doing much
Mar 28 00:31:12 <Mutabah>	Very interesting...
Mar 28 00:31:22 <Mutabah>	That's possibly a bug
Mar 28 00:31:26 <talchas>	Cow::borrow().clone() will return still return a Borrow
Mar 28 00:31:47 <kkus>	1925 is out of range of i8? 
Mar 28 00:31:47 <Mutabah>	talchas: Actually, I was wrong
Mar 28 00:31:48 <talchas>	no, it's perfectly sensible, especially given that you wouldn't be able to have clone() return with 'static
Mar 28 00:31:49 <GGist>	SpaceManiac: That is what I was starting to think, it shouldnt compile at that point right?
Mar 28 00:31:52 <Mutabah>	kkus: Well, yeah
Mar 28 00:32:09 <Mutabah>	talchas: Exactly, so that Clone impl is wrong, and should error
Mar 28 00:32:28 <SpaceManiac>	GGist: I would expect the clone() to warn or not compile, but the solution is to write an into_owned() method
Mar 28 00:32:32 <Mutabah>	`fn clone(&self) -> Self` is how it's defined, but here a different lifetiem param is used in the RV
Mar 28 00:32:42 <SpaceManiac>	(btw, Cow has an into_owned method that you can use rather than to_vec)
Mar 28 00:33:02 <Mutabah>	SpaceManiac: into_owned takes ownership
Mar 28 00:33:11 *	Quxxy (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 28 00:33:16 <GGist>	SpaceManiac: Yeah I saw that, the problem was I have a deeply nested type and would have to put into_owned method on all of them since the lifetime propogates all the way up
Mar 28 00:33:19 <talchas>	hmm, it /is/ a subtype, it is perfectly sound to do this, I just didn't think it was legal
Mar 28 00:33:29 <SpaceManiac>	Ah, so combine it with clone() then
Mar 28 00:33:52 <GGist>	Well I would get the same problem, the topmost type would go from Type<'a> to Type<'static>
Mar 28 00:34:20 <GGist>	Which I guess Clone does not allow
Mar 28 00:34:21 <Mutabah>	talchas: I suspect it's leading to the borrowck error, because borrowck is seeing that .clone() call as returning Self, not ByteContainer<'static>
Mar 28 00:34:26 <talchas>	(well, it's sound, but if it's not being applied at the call site, then it maybe should be an error)
Mar 28 00:34:49 <SpaceManiac>	Sorry, that was meant in response to Mutabah; but it seems like writing into_owned methods is no less convenient than writing manual Clone impls, and actuall works
Mar 28 00:35:13 <talchas>	yes, it's ignoring the stricter bound you've written: http://is.gd/SizvKr
Mar 28 00:35:21 <talchas>	and just using the one specified by Clone
Mar 28 00:35:28 <GGist>	Well I was hoping to derive Clone on the types that dont see the Cow structure, trying to cheat a little bit
Mar 28 00:35:36 *	Quxxy2 has quit (Ping timeout: 121 seconds)
Mar 28 00:35:48 *	rphmeier has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 28 00:36:03 *	bholley_away is now known as bholley
Mar 28 00:36:06 *	Mechanical_Man (chatzilla@moz-c52.6nj.200.104.IP) has joined
Mar 28 00:36:28 <Mutabah>	GGist: Well, derived clone will still work. But the thing is, cloning something with a lifetime param doesn't remove the lifetime param (or change it)
Mar 28 00:37:22 *	munchies has quit (Quit: Bye)
Mar 28 00:37:22 <kkus>	Mutabah, thank you. (: https://play.rust-lang.org/?gist=845240ed19ab3d44a897&version=stable 
Mar 28 00:37:30 *	annodomini (lambda@moz-qgii5v.ma.comcast.net) has joined
Mar 28 00:37:33 <GGist>	Yes that seems to be my problem, I guess Clone is not what I am looking for in my case. I will also file a bug as I think the error is a bit misleading. Thanks for the help.
Mar 28 00:37:37 *	munchies (AndChat4674@moz-1fp.ngr.55.210.IP) has joined
Mar 28 00:38:03 *	martin-li (martin-li@moz-1vb.79s.252.114.IP) has joined
Mar 28 00:38:20 <Mutabah>	kkus: Just in case you don't know - i8 is an 8-bit signed integer, capable of encoding -128 to 127
Mar 28 00:38:24 *	munchies has quit (Quit: Bye)
Mar 28 00:38:35 *	munchies (AndChat4674@moz-1fp.ngr.55.210.IP) has joined
Mar 28 00:38:38 *	Mechanical_Man_ (chatzilla@moz-aku.6nj.200.104.IP) has joined
Mar 28 00:38:44 <Mutabah>	GGist: There is a bug that the trait checker allowed that trait impl
Mar 28 00:38:52 <kkus>	I'm supposed to know that :C 
Mar 28 00:38:57 *	munchies has quit (Quit: Bye)
Mar 28 00:39:02 *	munchies (AndChat4674@moz-1fp.ngr.55.210.IP) has joined
Mar 28 00:39:35 <Mutabah>	kkus: Well, if you choose something other than the default i32, it's usually because you know why and what you're doing
Mar 28 00:39:37 <GGist>	Mutabah: Do you recall if this is a known issue, didnt want to submit a duplicate
Mar 28 00:39:59 <Mutabah>	GGist: Nerver encountered it myself
Mar 28 00:40:09 <GGist>	Ok
Mar 28 00:40:27 *	Mechanical_Man has quit (Ping timeout: 121 seconds)
Mar 28 00:40:34 *	Mechanical_Man_ is now known as Mechanical_Man
Mar 28 00:41:18 <osa1>	how do I use underscores in { ... } syntax? this doesn't work: { _, _, _ }
Mar 28 00:41:27 <osa1>	do I need to give names { f1: _, f2: _, f3: _ } ?
Mar 28 00:41:51 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 28 00:41:53 <Mutabah>	osa1: Is this matching a structure?
Mar 28 00:41:57 <osa1>	Mutabah: yes
Mar 28 00:42:03 <Mutabah>	osa1: The fields need to be named
Mar 28 00:42:15 <Mutabah>	osa1: but you can only name a small set, then use `..` to ignore the rest
Mar 28 00:42:22 <kkus>	It doesn't seem like rust has an alias to i32 from int or integer? by design? want people to specify i32? 
Mar 28 00:42:23 *	klue has quit (Ping timeout: 121 seconds)
Mar 28 00:42:29 <osa1>	Mutabah: but .. actually binds the names, right?
Mar 28 00:42:32 <osa1>	it's not exactly underscore
Mar 28 00:42:33 <Mutabah>	kkus: By design iirc
Mar 28 00:42:38 <Mutabah>	osa1: No, it doesn't bind
Mar 28 00:42:40 *	urodna has quit (Client exited)
Mar 28 00:42:42 <osa1>	oh
Mar 28 00:42:50 <osa1>	OK, thanks
Mar 28 00:42:55 <kkus>	Mutabah, interesting. makes sense now that I think about it. 
Mar 28 00:42:57 <Mutabah>	osa1: It acts like _ except applies to all unnamed fields/entries, instead of jsut one
Mar 28 00:43:06 <osa1>	nice
Mar 28 00:43:19 <Mutabah>	kkus: There are lots of hidden bugs in C and friends due to undefined or unknown integer type sizes
Mar 28 00:43:45 <kkus>	I'm just excited to use rust in visual studio :) 
Mar 28 00:44:24 *	brson (brson@moz-hrg.iuc.58.172.IP) has joined
Mar 28 00:44:25 *	ChanServ sets mode +a on #rust brson
Mar 28 00:44:25 *	ChanServ gives channel operator status to brson
Mar 28 00:44:37 *	Kingsqueeee has quit (Quit: Konversation terminated!)
Mar 28 00:44:50 *	martin-li has quit (Quit: This computer has gone to sleep)
Mar 28 00:45:02 *	Kingsqueeee (kingsley@moz-pa1fj1.bchsia.telus.net) has joined
Mar 28 00:46:56 *	Darfeel has quit (Client exited)
Mar 28 00:49:37 *	kroltan (kroltan@moz-lvkaq8.brasiltelecom.net.br) has joined
Mar 28 00:49:38 *	stephanbuys has quit (Connection closed)
Mar 28 00:50:03 <andor>	is there a convenient way to run tests without cargo?
Mar 28 00:51:03 *	anastiel (anastiel@moz-jk9nd6.telesp.net.br) has joined
Mar 28 00:51:15 *	ptc_ (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 28 00:52:16 *	James__ has quit (Ping timeout: 121 seconds)
Mar 28 00:52:22 *	blackgoat has quit (Ping timeout: 121 seconds)
Mar 28 00:52:34 *	ptc__ (textual@moz-e3qs71.compute-1.amazonaws.com) has joined
Mar 28 00:53:00 *	bholley is now known as bholley_away
Mar 28 00:53:23 *	Mechanical_Man_ (chatzilla@moz-s696b6.ed.shawcable.net) has joined
Mar 28 00:53:58 *	py1hon has quit (Ping timeout: 121 seconds)
Mar 28 00:54:43 *	Mechanical_Man has quit (Ping timeout: 121 seconds)
Mar 28 00:54:49 *	Mechanical_Man_ is now known as Mechanical_Man
Mar 28 00:55:17 *	ptc_ has quit (Ping timeout: 121 seconds)
Mar 28 00:55:34 *	kfpratt (kfpratt@moz-ri8co1.ipv6.telus.net) has joined
Mar 28 00:57:26 *	anjumkaiser has quit (Quit: Leaving.)
Mar 28 00:57:31 *	markstory has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 28 00:57:56 *	ptc__ has quit (Ping timeout: 121 seconds)
Mar 28 00:58:24 *	SiegeLord has quit (Connection closed)
Mar 28 01:00:34 *	mvtmrs_ has quit (Connection closed)
Mar 28 01:00:37 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 28 01:01:04 *	markstory (textual@moz-uhk7a8.home4.cgocable.net) has joined
Mar 28 01:01:43 *	martin-li (martin-li@moz-e0n.rub.250.103.IP) has joined
Mar 28 01:01:56 *	py1hon (kent@moz-ejrc1b.org) has joined
Mar 28 01:02:13 *	bjz_ has quit (Ping timeout: 121 seconds)
Mar 28 01:02:58 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 28 01:03:58 *	bjz (bjz@moz-784.r87.56.45.IP) has joined
Mar 28 01:04:39 *	Mannen has quit (Ping timeout: 121 seconds)
Mar 28 01:08:42 <Murarth>	andor: `rustc --test`, something something.
Mar 28 01:09:17 *	andor bangs head into table
Mar 28 01:09:24 <andor>	should have checked the most obvious, thanks
Mar 28 01:22:55 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 28 01:24:55 *	AngelOfSol (Angel@moz-h5l336.fios.verizon.net) has joined
Mar 28 01:25:01 *	AngelOfSol has quit (Connection closed)
Mar 28 01:25:20 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 28 01:26:06 *	osa1 has quit (Ping timeout: 121 seconds)
Mar 28 01:26:09 *	bholley_away is now known as bholley
Mar 28 01:26:58 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 28 01:28:51 *	crisco (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 01:31:51 *	crisco_ has quit (Ping timeout: 121 seconds)
Mar 28 01:33:59 *	Mechanical_Man has quit (Quit: ChatZilla 0.9.92 [Firefox 45.0.1/20160315153207])
Mar 28 01:34:12 <wixo>	In a macro, is it possible to create a nameless struct (or one with a procedural name) with named fields?
Mar 28 01:34:51 *	benhinchley (benhinchley@moz-df159d.bigpond.net.au) has joined
Mar 28 01:36:30 *	conrad has quit (Ping timeout: 121 seconds)
Mar 28 01:36:37 *	rustyrazorblade (rustyrazorb@moz-ufqco7.or.comcast.net) has joined
Mar 28 01:39:09 *	infynyxx has quit (Connection closed)
Mar 28 01:39:45 *	kerrick has quit (Ping timeout: 121 seconds)
Mar 28 01:42:48 *	tsutsumi (tsutsumi@moz-33u6gd.wa.comcast.net) has joined
Mar 28 01:42:50 *	Fishrock123 has quit (Quit: Leaving...)
Mar 28 01:44:18 <LambdaComplex>	Can anyone help me figure out how to use xcb::xproto::set_input_focus()? As far as I can tell, I'm passing it all the right things...but it's still not working
Mar 28 01:45:33 *	crisco_ (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 01:45:52 <talchas>	not working as in rust error, or not working as in compiles but does nothing?
Mar 28 01:45:59 <LambdaComplex>	The latter
Mar 28 01:46:20 <talchas>	yeaaaaaaah X11 do not want
Mar 28 01:46:39 <LambdaComplex>	Better than Wayland >.>
Mar 28 01:47:01 <talchas>	I have no idea what the wayland protocol looks like
Mar 28 01:47:09 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 28 01:47:12 <talchas>	if they didn't manage to make it better than x11, that is extremely impressive
Mar 28 01:47:16 <talchas>	and sad
Mar 28 01:47:31 *	crisco has quit (Ping timeout: 121 seconds)
Mar 28 01:47:32 <LambdaComplex>	Basically "Make the compositor do everything while making the applications unable to talk to each other to give the guise of security"
Mar 28 01:48:35 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 28 01:49:28 <talchas>	hmm, well XSetInputFocus certainly /looks/ simple, though I'm pretty sure it goes through the WM despite it not saying that
Mar 28 01:49:43 *	NameNotFound is now known as zz_NameNotFound
Mar 28 01:49:57 <LambdaComplex>	talchas: You sure you're looking at the right thing? That name looks like something from Xlib, not XCB
Mar 28 01:50:29 *	shackra has quit (A TLS packet with unexpected length was received.)
Mar 28 01:50:30 <talchas>	yeah, but xlib and xcb are often the same as far as messages to the X server go
Mar 28 01:50:56 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 28 01:50:57 <LambdaComplex>	Well, what are you looking at right now?
Mar 28 01:50:59 *	anastiel has quit (Quit: Leaving)
Mar 28 01:51:02 <LambdaComplex>	I guess it could help me out
Mar 28 01:51:27 <talchas>	(and indeed, the xcb_set_input_focus manpage is basically identical)
Mar 28 01:51:37 *	mexisme (mexisme@moz-4m7bio.broadband.telstraclear.net) has joined
Mar 28 01:51:50 <talchas>	except with a bunch of "(TODO)" added....
Mar 28 01:52:08 *	benhinchley has quit (Quit: WeeChat 1.4)
Mar 28 01:52:27 *	martin-li has quit (Quit: This computer has gone to sleep)
Mar 28 01:52:37 *	Mannen has quit (Ping timeout: 121 seconds)
Mar 28 01:52:37 <talchas>	you might want to see if you get an error?
Mar 28 01:52:50 *	benhinchley (benhinchley@moz-df159d.bigpond.net.au) has joined
Mar 28 01:52:53 *	crisco (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 01:53:07 <talchas>	also /can/ try xtrace/x11trace to see what messages are actually sent
Mar 28 01:54:07 *	agjacome (agjacome@moz-7dg.dc3.62.47.IP) has joined
Mar 28 01:54:30 *	kkus has quit (Connection closed)
Mar 28 01:54:31 *	crisco_ has quit (Ping timeout: 121 seconds)
Mar 28 01:54:48 *	Gamecubic has quit (Quit: Leaving)
Mar 28 01:54:54 <wixo>	Oh, hey, an ICE! I haven't encountered one of those in a while.
Mar 28 01:54:54 <LambdaComplex>	Hold on, I think I might've found the problem
Mar 28 01:54:56 <LambdaComplex>	Gimme a sec
Mar 28 01:54:59 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 28 01:55:11 *	martin-li (martin-li@moz-e0n.rub.250.103.IP) has joined
Mar 28 01:55:44 *	agjacome has quit (Quit: leaving)
Mar 28 01:56:32 <talchas>	hey, the rustdoc page is a copypasta of the manpage
Mar 28 01:56:42 <talchas>	(or the xml generating the manpage maybe, iono)
Mar 28 01:56:52 <LambdaComplex>	Yeah, it's generated from XML
Mar 28 01:57:37 *	agjacome (agjacome@moz-7dg.dc3.62.47.IP) has joined
Mar 28 01:57:38 <LambdaComplex>	So what I think is happening is rust is converting the hexadecimal input into decimal, which the function doesn't count as valid
Mar 28 01:57:44 <LambdaComplex>	So...how can I convert a u32 into hex?
Mar 28 01:58:32 <tsutsumi>	Hi, I'm having trouble running a match against an enum inside of an Rc. What's the syntax / correct method to do so?
Mar 28 01:58:32 <talchas>	well, integers aren't hex or decimal or anything like that
Mar 28 01:58:38 *	bjz_ (bjz@moz-tgc.as2.222.104.IP) has joined
Mar 28 01:58:40 *	anastiel (anastiel@moz-jk9nd6.telesp.net.br) has joined
Mar 28 01:58:49 <talchas>	if you're writing it by hand, you can write 0xstuff instead, if you're parsing it, umm
Mar 28 01:58:50 <tsutsumi>	I tried a couple of things, they don't seem to work: http://is.gd/cfSS1V
Mar 28 01:59:05 <talchas>	playbot: "0x10".parse::<i32>()
Mar 28 01:59:05 -playbot/#rust-	Err(ParseIntError { kind: InvalidDigit })
Mar 28 01:59:25 *	anastiel has quit (Quit: Leaving)
Mar 28 01:59:34 <LambdaComplex>	Well, I already wrote a thing to strip the 0x prefix
Mar 28 01:59:36 *	anastiel (anastiel@moz-jk9nd6.telesp.net.br) has joined
Mar 28 01:59:38 <LambdaComplex>	(if it's present)
Mar 28 01:59:46 *	kfpratt has quit (A TLS packet with unexpected length was received.)
Mar 28 02:00:00 *	woboats has quit (Client exited)
Mar 28 02:00:05 *	SiegeLord has quit (Quit: It's a joke, it's all a joke.)
Mar 28 02:00:05 *	agjacome has quit (Quit: leaving)
Mar 28 02:00:07 <LambdaComplex>	But that's still leaving something that rust won't parse into a u32
Mar 28 02:00:12 *	bjz has quit (Ping timeout: 121 seconds)
Mar 28 02:00:26 <talchas>	yes, you'll need to call from_str_radix instead of parse
Mar 28 02:00:28 *	anastiel has quit (Quit: Leaving)
Mar 28 02:00:46 <Sgeo>	Uh.
Mar 28 02:00:51 <Sgeo>	UB in safe Rust? https://www.reddit.com/r/rust/comments/4btthq/identity_equivalence/
Mar 28 02:00:56 *	beat has quit (Connection closed)
Mar 28 02:01:53 <ubsan>	Sgeo: there are many ways to cause UB in safe rust :P
Mar 28 02:01:59 <Sgeo>	:(
Mar 28 02:02:03 <talchas>	I don't think it's actually UB as usually mentioned
Mar 28 02:02:25 <talchas>	I think it's just that two ZSTs get put at the same address, and then your "identity" isn't
Mar 28 02:02:26 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 28 02:02:32 <talchas>	which seems fine to me?
Mar 28 02:02:45 <Sgeo>	The behavior differs between debug and release
Mar 28 02:03:11 *	crisco_ (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 02:03:25 <ubsan>	oh
Mar 28 02:03:27 <talchas>	sure, but so does println!("{}", &1 as *const _ as usize)
Mar 28 02:03:27 <ubsan>	that's not UB
Mar 28 02:03:33 <talchas>	and it's basically the same thing
Mar 28 02:03:37 <ubsan>	that's implementation defined behavior
Mar 28 02:03:40 <ubsan>	very different things
Mar 28 02:04:05 <ubsan>	UB means, anything could happen
Mar 28 02:04:18 <talchas>	now, if rust doesn't force llvm to be sane about pointer-<, then /that/ would be a problem
Mar 28 02:04:18 <ubsan>	IDB means, a strict number of things could happen
Mar 28 02:04:57 <LambdaComplex>	talchas: What exactly do I do with from_str_radix?
Mar 28 02:05:01 *	crisco has quit (Ping timeout: 121 seconds)
Mar 28 02:05:08 *	anastiel (anastiel@moz-jk9nd6.telesp.net.br) has joined
Mar 28 02:05:32 <talchas>	(according to the SO post linked, the C++ spec says "unspecified", which I dunno if it's a sane "true or false" or if it's "undef")
Mar 28 02:05:47 <talchas>	LambdaComplex: from_str_radix(string_minus_0x, 16)
Mar 28 02:05:55 <talchas>	will parse it from hex instead of from decimal
Mar 28 02:06:11 *	agjacome (agjacome@moz-7dg.dc3.62.47.IP) has joined
Mar 28 02:06:35 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 28 02:06:36 *	brt has quit (Ping timeout: 121 seconds)
Mar 28 02:07:35 *	agjacome has quit (Quit: leaving)
Mar 28 02:07:42 *	markstory has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 28 02:08:01 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 28 02:08:28 *	crisco (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 02:09:40 *	beat (beat@moz-ddkqql.cpe.netcabo.pt) has joined
Mar 28 02:09:59 *	nullvoid (Main@moz-0fc.5m3.218.104.IP) has joined
Mar 28 02:10:01 *	crisco_ has quit (Ping timeout: 121 seconds)
Mar 28 02:11:10 *	nullvoid (Main@moz-0fc.5m3.218.104.IP) has left
Mar 28 02:11:56 *	annodomini has quit (Client exited)
Mar 28 02:15:02 *	agjacome (agjacome@moz-7dg.dc3.62.47.IP) has joined
Mar 28 02:15:06 *	nullvoid (Main@moz-0fc.5m3.218.104.IP) has joined
Mar 28 02:15:08 <archshift>	how performant are rust's mpsc channels?
Mar 28 02:15:18 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 28 02:15:31 *	agjacome has quit (Quit: leaving)
Mar 28 02:15:42 *	agjacome (agjacome@moz-7dg.dc3.62.47.IP) has joined
Mar 28 02:15:51 *	crisco_ (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 02:17:09 <talchas>	https://aturon.github.io/blog/2015/08/27/epoch/ has some numbers for 2 producers
Mar 28 02:17:13 <ubsan>	archshift: afaik, fairly damned performant
Mar 28 02:17:31 *	crisco has quit (Ping timeout: 121 seconds)
Mar 28 02:17:35 <talchas>	and it's supposed to have a faster path for "being used as spsc"
Mar 28 02:17:48 *	benhinchley (benhinchley@moz-df159d.bigpond.net.au) has left ("WeeChat 1.4")
Mar 28 02:17:53 <ubsan>	it does have that
Mar 28 02:17:56 <ubsan>	I've read the code
Mar 28 02:18:03 *	anastiel has quit (Quit: Leaving)
Mar 28 02:18:30 <talchas>	yeah, I've read it too, I just have no idea if it's actually significantly faster :P
Mar 28 02:18:48 *	jas0 (jason@moz-ah9t0b.dyn.optonline.net) has joined
Mar 28 02:19:05 <jas0>	?
Mar 28 02:19:10 <ubsan>	ah
Mar 28 02:19:25 <archshift>	ah, great
Mar 28 02:19:28 *	}ls{ has quit (Quit: User terminated by real life interrupt)
Mar 28 02:19:37 *	nairware has quit (Quit: Leaving.)
Mar 28 02:19:40 <archshift>	is it competitive with Go's channels?
Mar 28 02:20:03 <jas0>	quick question. I'm testing code and have a let x = b"blah", but I need to make it a mutable slice &mut[u8], how?
Mar 28 02:20:24 <talchas>	well, context switch is probably slower, and more importantly it's definitely less pleasant to use, as select!() is kinda eww and is unstable
Mar 28 02:21:06 <talchas>	playbot: let x = &mut b"abc";
Mar 28 02:21:07 <jas0>	talchas, what would happen in rust if I called the longjump funcs?
Mar 28 02:21:07 -playbot/#rust-	()
Mar 28 02:21:23 *	Saevitus (Mibbit@moz-cale3e.bigpond.net.au) has joined
Mar 28 02:21:24 <jas0>	Oh, I have the &mut on the wrong side of the = sign. duh.
Mar 28 02:21:32 <talchas>	jas0: you need an extra keyword "very very unsafe"
Mar 28 02:21:36 <SpaceManiac>	talchas: isn't that just &mut &[u8]?
Mar 28 02:21:49 <talchas>	playbot: let x: &mut [u8] = &mut b"abc";
Mar 28 02:21:50 -playbot/#rust-	<anon>:9:28: 9:39 error: mismatched types:
Mar 28 02:21:50 -playbot/#rust-	 expected `&mut [u8]`,
Mar 28 02:21:50 -playbot/#rust-	output truncated; full output at: http://bit.ly/21OuQbU
Mar 28 02:22:00 <talchas>	bah, yeah
Mar 28 02:22:07 <jas0>	talchas, but how can a byte constant be mutable?
Mar 28 02:22:26 <jas0>	or am I thinking too much like C.
Mar 28 02:22:41 <talchas>	well, you can write it as [b'a', b'b', b'c'], and that'll work
Mar 28 02:22:54 <jas0>	oh no.. ong byte slices.
Mar 28 02:22:56 <jas0>	long
Mar 28 02:23:14 <jas0>	I tried clone, but still have issues
Mar 28 02:23:15 <talchas>	there was some feature request a while back for doing this better, I don't know what the result was
Mar 28 02:23:36 <jas0>	Clone doesn't seem to just me back a mutable copy though. strange
Mar 28 02:23:52 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 28 02:23:56 <talchas>	you could do let x = [0; 3]; x.clone_from_slice(b"abc") or whatever it was named
Mar 28 02:24:08 <Saevitus>	I've just found out how much I still have to learn, trying to get a basic gui has baffled me lol
Mar 28 02:24:18 <jas0>	playbot, let &mut t = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|".clone();
Mar 28 02:24:19 -playbot/#rust-	<anon>:9:13: 9:19 error: mismatched types:
Mar 28 02:24:19 -playbot/#rust-	 expected `&[u8; 39]`,
Mar 28 02:24:19 -playbot/#rust-	output truncated; full output at: http://bit.ly/1TdwmUH
Mar 28 02:24:38 *	elementalest has quit (Ping timeout: 121 seconds)
Mar 28 02:24:39 <talchas>	hmm, clone ought to be able to work
Mar 28 02:24:49 *	elementalest (elementales@moz-fp6smh.internode.on.net) has joined
Mar 28 02:25:03 *	orangeshark has quit (Quit: Leaving)
Mar 28 02:25:06 *	brson has quit (Quit: leaving)
Mar 28 02:25:31 <talchas>	jas0: ah, you're getting hit by the "Clone is only implemented up to N=32"
Mar 28 02:25:44 <talchas>	and thus hitting the &T: Clone impl
Mar 28 02:25:50 <jas0>	oh lmae
Mar 28 02:25:53 *	Saevitus (Mibbit@moz-cale3e.bigpond.net.au) has left
Mar 28 02:25:53 <jas0>	lame
Mar 28 02:25:56 <talchas>	yep
Mar 28 02:26:08 <jas0>	b"asdf" returns a slice, right?
Mar 28 02:26:24 <jas0>	&[u8] or &[u8;x] or [u8;x] ?
Mar 28 02:26:30 <talchas>	&'static [u8; N]
Mar 28 02:26:36 <jas0>	craptastic
Mar 28 02:26:39 <talchas>	so pointer-to-array if you call that different than slice
Mar 28 02:27:03 <jas0>	Making test code that operates on a mutable slice then is a pain in the butt
Mar 28 02:27:30 <jas0>	going from &'static[u8] to &mut[u8] seems to be non-trivial.
Mar 28 02:27:55 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 28 02:28:22 <talchas>	yes, it will require a copy
Mar 28 02:28:32 <jas0>	I understand that, but how?
Mar 28 02:28:38 <jas0>	Or do I really have to implement a copy?
Mar 28 02:29:13 <jas0>	there must be some fn for vec that will do this for me.
Mar 28 02:29:18 <talchas>	(re the original issue, see https://github.com/rust-lang/rust/issues/19749 et al)
Mar 28 02:29:39 <jas0>	and losing bytes! really hurts
Mar 28 02:29:41 <jas0>	bad move
Mar 28 02:29:54 <talchas>	clone_from_slice
Mar 28 02:30:07 *	m4b (user@moz-qfira3.dynamic.fusionbroadband.com) has joined
Mar 28 02:30:54 <jas0>	what's the diff b/w copy_ and clone_from_slice?
Mar 28 02:31:12 *	bitshifter has quit (Quit: Leaving)
Mar 28 02:31:35 *	danielwzd (danielwzd@moz-o1fflu.2rsv.salp.0306.2602.IP) has joined
Mar 28 02:31:42 <jas0>	still have to do some work, I need to make a vec of the correct size first, then copy into the emtpy array
Mar 28 02:31:49 <talchas>	well, ptr::copy() is unsafe, slice::bytes::copy_memory is deprecated
Mar 28 02:32:04 <jas0>	I can't believe there is no way to just copy a slice
Mar 28 02:32:26 <talchas>	well, you can allocate it on the stack if you want with "let mut x = [0; N];" and then copy it in with "x.clone_from_slice(whatever)"
Mar 28 02:32:30 *	colinsurprenant has quit (Client exited)
Mar 28 02:32:59 <talchas>	there's also probably .to_owned()
Mar 28 02:33:24 <m4b>	jas0: to_owned()?
Mar 28 02:33:27 <m4b>	yea
Mar 28 02:33:52 <talchas>	but that'll allocate, which it must for a slice &[T] rather than a fixed size array (which in theory should work via .clone(), but doesn't because lol type level integers plz)
Mar 28 02:33:56 <jas0>	let &mut t = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|".to_owned();
Mar 28 02:34:04 <jas0>	playbot, let &mut t = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|".to_owned();
Mar 28 02:34:05 -playbot/#rust-	<anon>:9:13: 9:19 error: mismatched types:
Mar 28 02:34:05 -playbot/#rust-	 expected `&[u8; 39]`,
Mar 28 02:34:05 -playbot/#rust-	output truncated; full output at: http://bit.ly/21OvwhA
Mar 28 02:34:15 <jas0>	no beuno
Mar 28 02:34:24 <talchas>	well, your lhs is wrong
Mar 28 02:34:36 <talchas>	let mut t: Vec<u8> = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|".to_owned();
Mar 28 02:34:40 <talchas>	playbot: let mut t: Vec<u8> = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|".to_owned();
Mar 28 02:34:41 -playbot/#rust-	<anon>:9:30: 9:83 error: mismatched types:
Mar 28 02:34:41 -playbot/#rust-	 expected `collections::vec::Vec<u8>`,
Mar 28 02:34:41 -playbot/#rust-	output truncated; full output at: http://bit.ly/1Tdx58B
Mar 28 02:34:59 *	Guest5 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 28 02:35:00 <jas0>	to_owned() returns a vec?
Mar 28 02:35:02 <talchas>	playbot: let mut t: Vec<u8> = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|"[..].to_owned();
Mar 28 02:35:04 -playbot/#rust-	<anon>:9:13: 9:18 warning: variable does not need to be mutable, #[warn(unused_mut)] on by default
Mar 28 02:35:04 -playbot/#rust-	<anon>:9         let mut t: Vec<u8> = b"8=FIX.4.4|9=24|35=A|12=a|456=ab|10=012|"[..].to_owned();
Mar 28 02:35:04 -playbot/#rust-	output truncated; full output at: http://bit.ly/21OvAxV
Mar 28 02:35:07 <jas0>	Docs say a Self::T
Mar 28 02:35:14 <jas0>	err Self::Owned
Mar 28 02:35:24 <talchas>	I'm not sure what the heck the first one is doing
Mar 28 02:35:34 <m4b>	let mut t: &[u8]
Mar 28 02:35:39 *	munchies has quit (Quit: Bye)
Mar 28 02:36:03 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 28 02:36:07 *	typelist has quit (Quit: Quit)
Mar 28 02:36:12 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 28 02:36:16 <jas0>	there is no vec::from_slice or anything?
Mar 28 02:36:31 <m4b>	jas0: http://is.gd/btAfrn
Mar 28 02:37:04 <talchas>	it is written either to_owned() or Vec::new().extend_from_slice()
Mar 28 02:37:18 <talchas>	or I guess .to_vec()
Mar 28 02:37:25 *	crisco (me@moz-rol1rh.revision-party.vipri.net) has joined
Mar 28 02:37:30 <jas0>	To to_owned need help with the type?
Mar 28 02:37:40 <talchas>	yeah, apparently
Mar 28 02:38:03 <jas0>	cool. thx.
Mar 28 02:38:12 <talchas>	because T: ToOwned if T: Clone, and &T: Clone
Mar 28 02:38:34 <talchas>	and while [T] has its own impl, [T; 39] does not
Mar 28 02:39:02 *	crisco_ has quit (Ping timeout: 121 seconds)
Mar 28 02:39:37 <talchas>	one of b"foo"[..].to_owned(), (*b"foo").to_owned(), b"foo".to_vec()
Mar 28 02:40:05 *	Mannen has quit (Ping timeout: 121 seconds)
Mar 28 02:40:35 <m4b>	you should be able to mess around and construct with vec! i think too
Mar 28 02:40:48 <jas0>	blah still doesn't get me where I need to be.
Mar 28 02:40:57 <talchas>	there isn't an easy vec![b"aoneth"] sort of constructor though
Mar 28 02:41:15 <m4b>	"wherever you go, there you are" --- Paul Thoreaux
Mar 28 02:41:16 <jas0>	The whole thing is I have that byte array and need to replace all the | with \x01
Mar 28 02:41:25 *	kroltan has quit (Connection closed)
Mar 28 02:41:57 <jas0>	fn replace_byte(buf: &mut [u8], from: u8, to: u8) -> &[u8] doesn't play well this that
Mar 28 02:42:08 <m4b>	why?
Mar 28 02:42:21 <talchas>	let mut foo = b"stuff".to_vec(); replace_byte(&mut foo, b'|', 1);
Mar 28 02:42:57 <m4b>	^
Mar 28 02:42:58 <jas0>	http://is.gd/bajy9y
Mar 28 02:43:46 <talchas>	http://is.gd/2l1mUv
Mar 28 02:44:47 <m4b>	:)
Mar 28 02:45:02 <m4b>	talchas is faster than me
Mar 28 02:45:37 FiSHLiM plugin unloaded
Mar 28 02:45:37 Python interface unloaded
**** ENDING LOGGING AT Mon Mar 28 02:45:37 2016

**** BEGIN LOGGING AT Mon Mar 28 23:51:17 2016

Mar 28 23:51:17 *	Now talking on #rust
Mar 28 23:51:17 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 28 23:51:17 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 28 23:51:45 *	lberezy has quit (Connection closed)
Mar 28 23:51:48 *	lberezy (lberezy@moz-qko8a8.oot8.dpcm.d501.2406.IP) has joined
Mar 28 23:52:46 *	gpoesia (poesia@moz-1ek3tf.ca.comcast.net) has joined
Mar 28 23:53:15 *	danielwzd (danielwzd@moz-o1fflu.2rsv.salp.0306.2602.IP) has joined
Mar 28 23:53:25 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 28 23:53:59 *	ljc (who@moz-svd.up4.174.101.IP) has joined
Mar 28 23:54:52 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 28 23:54:54 *	rustyrazorblade (rustyrazorb@moz-f589vv.static-ip.telepacific.net) has joined
Mar 28 23:55:21 *	KiChjang (KiChjang@moz-qn6t6b.2gp8.54kg.0101.2620.IP) has joined
Mar 28 23:56:08 *	gpoesia has quit (Client exited)
Mar 28 23:56:12 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 28 23:56:25 *	gpoesia (poesia@moz-1ek3tf.ca.comcast.net) has joined
Mar 28 23:56:40 *	ptc_ has quit (Ping timeout: 121 seconds)
Mar 28 23:57:48 *	gpoesia has quit (Client exited)
Mar 28 23:58:18 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 28 23:58:54 *	klue has quit (Ping timeout: 121 seconds)
Mar 28 23:59:26 *	gpoesia (poesia@moz-1ek3tf.ca.comcast.net) has joined
Mar 29 00:01:45 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 00:02:07 *	tschottdorf has quit (Client exited)
Mar 29 00:02:13 *	rustyrazorblade has quit (Client exited)
Mar 29 00:02:22 *	desophos has quit (Ping timeout: 121 seconds)
Mar 29 00:02:53 *	shackra (shackrasisl@moz-18s.i2m.202.201.IP) has joined
Mar 29 00:03:33 *	gpoesia has quit (Ping timeout: 121 seconds)
Mar 29 00:04:00 *	brendan has quit (Ping timeout: 121 seconds)
Mar 29 00:04:28 *	gpoesia (poesia@moz-ga0.9o0.201.199.IP) has joined
Mar 29 00:07:16 *	dpc (dpc@moz-0j08lf.vfrf.7c07.0647.2601.IP) has joined
Mar 29 00:08:00 <dpc>	What would be an iterator to go through [u8] 32 bytes at the time?
Mar 29 00:09:08 <SpaceManiac>	Probably .chunks(32)
Mar 29 00:09:26 <Mutabah>	dpc: 32-byte blocks, or 32-byte windows?
Mar 29 00:09:43 <dpc>	Mutabah, blocks; 0..32, 33..64, etc.
Mar 29 00:09:44 <Mutabah>	dpc: For distinct blocks, .chunks(32), for a sliding window 32-bytes long, use .windows(32)
Mar 29 00:09:53 *	khades_ (khades@moz-o6k.obl.212.176.IP) has joined
Mar 29 00:10:00 <dpc>	Mutabah, Thanks.
Mar 29 00:11:15 *	ljc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 00:11:53 *	colinsurprenant has quit (Client exited)
Mar 29 00:12:12 *	dzbarsky (Adium@moz-v18mcd.ca.comcast.net) has joined
Mar 29 00:12:22 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 29 00:12:26 *	ljc (who@moz-svd.up4.174.101.IP) has joined
Mar 29 00:12:49 *	martin-li (martin-li@moz-e0n.rub.250.103.IP) has joined
Mar 29 00:12:50 *	gpoesia has quit (Ping timeout: 121 seconds)
Mar 29 00:16:15 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 29 00:18:05 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 29 00:18:59 <archshift>	I wish rust did have gotos though :<
Mar 29 00:20:15 *	robotblake (robotblake@moz-8r3.nh4.49.209.IP) has joined
Mar 29 00:20:45 *	icefall has quit (Ping timeout: 121 seconds)
Mar 29 00:20:49 <Mutabah>	archshift: Possibly with MIR they could be added and be safe... but not sure
Mar 29 00:21:13 *	robotblake has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 29 00:21:21 *	robotblake (robotblake@moz-8r3.nh4.49.209.IP) has joined
Mar 29 00:21:41 <archshift>	well there's no reason besides hassle to the compiler devs that it couldn't be safe
Mar 29 00:22:14 <niconii>	stuff like `'foo: loop {  'bar: loop {  continue 'foo;  }  }` can alleviate the need for goto somewhat
Mar 29 00:22:17 <Mutabah>	reverse goto
Mar 29 00:22:28 <archshift>	but some optimizations *need* goto to work, in interpreter designs for example
Mar 29 00:22:35 *	GeorgeHahn (George@moz-ir6kj0.nj.comcast.net) has joined
Mar 29 00:22:37 <Mutabah>	or jumping into a block past initialisation of a value
Mar 29 00:22:50 <archshift>	where you can skip the dispatch and jump straight to the next "instruction"
Mar 29 00:23:17 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 29 00:23:41 <archshift>	Mutabah: sure (for the latter) but that's something that ideally the compiler would catch
Mar 29 00:23:57 <archshift>	C++, for example, doesn't allow you to goto past any variable declarations
Mar 29 00:24:14 *	rustyrazorblade (rustyrazorb@moz-f589vv.static-ip.telepacific.net) has joined
Mar 29 00:24:24 *	jxcl (jxcl@moz-0alsg0.co.comcast.net) has joined
Mar 29 00:24:35 *	eazar001 (ebrahim@moz-1fk3av.844f.vlo7.0306.2602.IP) has joined
Mar 29 00:24:47 *	tim______ has quit (Ping timeout: 121 seconds)
Mar 29 00:24:59 <Mutabah>	archshift: As said, with the borrowck imrpvodements from MIR, it could be shown to be safe (and useful)
Mar 29 00:25:09 <niconii>	tail calling with `become some_other_function();` might also reduce the need for goto, come to think of it
Mar 29 00:25:09 <Mutabah>	(not sure how hard it'd be though)
Mar 29 00:25:16 <Mutabah>	Yeah
Mar 29 00:26:10 <archshift>	ah, yeah, that would definitely be nice
Mar 29 00:26:45 *	sankha has quit (Ping timeout: 121 seconds)
Mar 29 00:29:24 *	martin-li has quit (Quit: Leaving)
Mar 29 00:30:32 *	slester (slester@moz-hqt6ns.7nqd.tocq.e000.2605.IP) has joined
Mar 29 00:32:11 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 00:33:11 *	BrickHouse (AndChat1494@moz-98u9gk.49j8.kec7.1017.2600.IP) has joined
Mar 29 00:33:12 *	johan_sun has quit (Quit: )
Mar 29 00:34:01 *	ljc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 00:34:46 *	Kingsqueeee (kingsley@moz-pa1fj1.bchsia.telus.net) has joined
Mar 29 00:34:48 *	slester has quit (Ping timeout: 121 seconds)
Mar 29 00:35:11 *	nyx (nyx@moz-b1g8f1.res.rr.com) has joined
Mar 29 00:36:23 *	Bonk has quit (Ping timeout: 121 seconds)
Mar 29 00:36:46 *	jimb (user@moz-6gkikn.or.comcast.net) has joined
Mar 29 00:37:18 *	robotblake has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 00:37:27 *	ygrek has quit (Ping timeout: 121 seconds)
Mar 29 00:37:40 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 29 00:38:14 *	robotblake (robotblake@moz-8r3.nh4.49.209.IP) has joined
Mar 29 00:39:34 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 29 00:40:43 *	cbrewster has quit (Connection closed)
Mar 29 00:40:50 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 00:42:02 *	eckhardt (eckhardt@moz-0b0.bm2.248.98.IP) has joined
Mar 29 00:43:38 *	urodna has quit (Client exited)
Mar 29 00:44:01 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 00:44:08 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 00:44:53 *	fl0w has quit (Ping timeout: 121 seconds)
Mar 29 00:45:11 *	robotblake has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 00:45:12 *	conrad has quit (Ping timeout: 121 seconds)
Mar 29 00:45:16 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 29 00:47:39 *	brendan (brendaneich@moz-0or.tdl.56.172.IP) has joined
Mar 29 00:48:05 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 00:51:28 *	rustyrazorblade has quit (Client exited)
Mar 29 00:53:36 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 29 00:55:21 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 29 00:55:27 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 29 00:56:33 *	brendan has quit (Ping timeout: 121 seconds)
Mar 29 00:56:38 *	brendan (brendaneich@moz-gkg7o7.ca.comcast.net) has joined
Mar 29 01:00:09 *	bmaxa has quit (Connection closed)
Mar 29 01:00:40 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 29 01:01:15 *	qrlpx has quit (Connection closed)
Mar 29 01:03:04 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 29 01:03:44 *	KiChjang has quit (Quit: Leaving)
Mar 29 01:04:42 *	Mannen has quit (Ping timeout: 121 seconds)
Mar 29 01:05:18 *	brendan has quit (Client exited)
Mar 29 01:05:31 *	LambdaComplex has quit (Quit: WeeChat 1.4)
Mar 29 01:07:58 <qDot>	Mutabah: So, um, from that problem I had earlier. While that open(&'a mut self, ...) method compiles, I can't figure out how to call it. I try in https://github.com/qdot/libtrancevibe-rs/blob/master/src/main.rs but I get "device does not live long enough", not really sure how to fix the lifetime there.
Mar 29 01:09:53 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 29 01:09:59 *	stephanbuys1 has quit (Quit: Leaving.)
Mar 29 01:11:52 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 01:14:19 *	gmorenz (normal@moz-os4.l2b.52.70.IP) has joined
Mar 29 01:15:04 *	woboats has quit (Client exited)
Mar 29 01:15:10 <daleee>	are there any issues with installing rust/cargo via homebrew? i've had issues in the past with using homebrew to update node/npm
Mar 29 01:15:55 <curtism>	!multirust
Mar 29 01:15:55 <rustbot>	A tool for managing multiple Rust installations. https://github.com/brson/multirust
Mar 29 01:16:04 <bstrie>	daleee: see ^
Mar 29 01:16:12 <mankyKitty>	daleee:  I don't think the homebrew version of rust has the same versioning issues, I've had issues with homebrew using a bleeding edge version instead of the lts node, homebrew rust is the stable version by default
Mar 29 01:16:18 <mankyKitty>	or multirust :)
Mar 29 01:17:53 *	bholley (bholley@moz-mehar5.ca.comcast.net) has joined
Mar 29 01:18:03 <Mutabah>	qDot: Hmm... this is the slight problem with self-borrowing structures
Mar 29 01:18:12 *	blackgoat has quit (Ping timeout: 121 seconds)
Mar 29 01:18:14 *	skeet70 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 01:18:27 *	mankyKitty just re-read what he wrote and is now convinced he is in dire need of a nap ><
Mar 29 01:18:39 <Mutabah>	qDot: It's also worth noting that a self-borrow triggered off a &mut makes the object basically unusuable
Mar 29 01:19:13 *	jn (nope@moz-ntfa6c.hsi12.unitymediagroup.de) has joined
Mar 29 01:19:16 *	Gamecubic has quit (Quit: Leaving)
Mar 29 01:19:40 *	anowell (uid81535@moz-64klnd.tooting.irccloud.com) has joined
Mar 29 01:21:02 <qDot>	Hmm, ok.
Mar 29 01:21:09 *	dmac__ (dmac@moz-2ig65r.ca.comcast.net) has joined
Mar 29 01:21:19 <qDot>	So I should probably find a different way of doing this heh.
Mar 29 01:21:22 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 29 01:21:48 *	orangeshark has quit (Quit: Leaving)
Mar 29 01:22:46 <daleee>	bstrie, mankyKitty: thanks! if i do run into issues, i'll definitely look into multirust
Mar 29 01:23:10 *	dellavg (dellavg@moz-hqm1hm.retail.telecomitalia.it) has joined
Mar 29 01:23:59 <Mutabah>	qDot: Yes, having an "open device" function which returns a handle would be better
Mar 29 01:24:30 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 29 01:24:57 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 29 01:25:16 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 29 01:25:38 *	spike (Mibbit@moz-5rr.539.4.186.IP) has joined
Mar 29 01:27:10 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 01:27:23 *	marc (marc@moz-pijsvi.wa.frontiernet.net) has joined
Mar 29 01:28:59 *	demilux has quit (Ping timeout: 121 seconds)
Mar 29 01:31:22 <qDot>	Ah, yeah, trying to make this OOP-alike is getting in the way here.
Mar 29 01:31:43 <marc>	anyone have a good resource for getting a random number within a range that works with the current stable?
Mar 29 01:31:52 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 01:31:55 <Mutabah>	"OOP" a really wide and ill-defined term :)
Mar 29 01:32:06 <Havvy>	As is FP.
Mar 29 01:32:18 <Mutabah>	marc: the crates.io crate rand
Mar 29 01:32:37 <qDot>	Less Alan Kay more "Why isn't this the C++ my brain wants it to be"
Mar 29 01:33:16 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 29 01:33:16 *	SiegeLord has quit (Connection closed)
Mar 29 01:34:39 <marc>	Mutabah: referring to https://doc.rust-lang.org/rand/rand/trait.Rng.html I don't see one that can specifiy a return val based on a min and max input
Mar 29 01:35:44 <Mutabah>	marc: gen_range?
Mar 29 01:36:12 *	dpc has quit (Ping timeout: 121 seconds)
Mar 29 01:36:23 <Mutabah>	marc: and linked from there - https://doc.rust-lang.org/rand/rand/distributions/range/struct.Range.html
Mar 29 01:37:06 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 29 01:37:16 *	markstory has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 01:37:18 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 29 01:38:35 <marc>	Mutabah: I guess I was looking at the trait, you were looking at the struct, ugggg, still trying to figure out how to nivigate rust docs, I will give yours a try
Mar 29 01:38:56 *	ZX21T32K (ZX21T32K@moz-qir4sg.elisa-laajakaista.fi) has joined
Mar 29 01:38:58 *	rustyrazorblade (rustyrazorb@moz-3nq.njc.196.12.IP) has joined
Mar 29 01:39:41 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 01:41:03 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 29 01:41:20 <Mutabah>	marc: It's referenced from the documentation for the gen_range method
Mar 29 01:41:47 <Mutabah>	(stating that it's a wrapper around that struct, and that if you're going to generate many numbers in that range, it's better to make your own instance)(
Mar 29 01:44:56 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 01:46:01 *	dpc (dpc@moz-t6gr4b.ca.comcast.net) has joined
Mar 29 01:46:02 *	dpc has quit (Quit: Leaving)
Mar 29 01:46:26 <marc>	Mutabah: got it, didnt realize that I should of clicked on "Distributions" in the pages before it
Mar 29 01:46:30 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 29 01:47:43 <sinclair>	anyone know if there are any editors with Rust intellisense ?
Mar 29 01:48:11 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 29 01:48:26 <sinclair>	id like to be able to hover over things, and see their signatures
Mar 29 01:48:29 <Havvy>	!crate racer
Mar 29 01:48:29 <rustbot>	racer (1.2.6) - Code completion for Rust -> https://crates.io/crates/racer
Mar 29 01:48:44 <sinclair>	Havvy: racer supports that?
Mar 29 01:48:53 <Havvy>	Uh, probably not.
Mar 29 01:48:59 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 01:49:46 <sinclair>	Havvy: that would make rust a lot more use friendly, just being able to hover over a function/combinator, and see its signature, especially its signature being type inferred
Mar 29 01:50:34 <Havvy>	If you don't mind a compile cycle, you can do `let _ = () = expr;` and it'll throw a type error.
Mar 29 01:51:20 <sinclair>	Havvy: eww 
Mar 29 01:51:22 <sinclair>	:)
Mar 29 01:51:34 <sinclair>	no, racer looks semi reasonable
Mar 29 01:51:54 <sinclair>	i havent tried it in a while, ill give it another shot
Mar 29 01:52:13 *	Mannen has quit (Ping timeout: 121 seconds)
Mar 29 01:53:31 *	joy (Adium@moz-m9m0do.dynamic.fusionbroadband.com) has joined
Mar 29 01:53:52 *	dellavg has quit (Ping timeout: 121 seconds)
Mar 29 01:54:54 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 01:56:09 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 29 01:56:20 *	starblue (juergen@moz-qgeleq.web.vodafone.de) has joined
Mar 29 01:57:27 *	pereba has quit (Quit: Logs, log everything don't forget. http://adiirc.com)
Mar 29 01:59:24 *	alicemaz (alice@moz-4nq892.PUBLIC.monkeybrains.net) has joined
Mar 29 02:01:03 *	musiKk (foobar@moz-55iqrf.pools.vodafone-ip.de) has joined
Mar 29 02:01:16 *	cbrewster has quit (Quit: )
Mar 29 02:06:23 *	starblue has quit (Ping timeout: 121 seconds)
Mar 29 02:06:45 <comex>	Havvy: unless expr is () :p
Mar 29 02:06:46 *	Cifram has quit (Ping timeout: 121 seconds)
Mar 29 02:07:29 *	sankha has quit (Connection closed)
Mar 29 02:09:16 *	p has quit (Ping timeout: 121 seconds)
Mar 29 02:09:56 <Havvy>	comex:  True.
Mar 29 02:10:08 <Havvy>	A void type could work.
Mar 29 02:12:22 *	Nilabhra (nilabhra@moz-2fl.rib.187.115.IP) has joined
Mar 29 02:16:27 *	futile (felix@moz-cursjl.unity-media.net) has joined
Mar 29 02:17:16 *	bholley is now known as bholley_away
Mar 29 02:18:20 *	annodomini has quit (Client exited)
Mar 29 02:18:24 *	infynyxx has quit (Connection closed)
Mar 29 02:18:48 *	Cifram (Cifram@moz-l63.9pu.126.76.IP) has joined
Mar 29 02:19:47 *	skade (skade@moz-oocafb.web.vodafone.de) has joined
Mar 29 02:20:46 *	aravindavk (aravinda@moz-m6j.f0d.244.121.IP) has joined
Mar 29 02:20:52 *	EsBe has quit (Ping timeout: 121 seconds)
Mar 29 02:20:56 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 29 02:21:28 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 02:23:17 *	free-store has quit (Quit: leaving)
Mar 29 02:23:52 *	bholley_away is now known as bholley
Mar 29 02:24:07 *	free-store (cerulean@moz-79lufs.stud.ntnu.no) has joined
Mar 29 02:24:56 *	free-store has quit (Quit: leaving)
Mar 29 02:24:58 *	Mannen has quit (Ping timeout: 121 seconds)
Mar 29 02:25:05 *	free-store (cerulean@moz-79lufs.stud.ntnu.no) has joined
Mar 29 02:25:32 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 02:25:34 *	stephanbuys (Adium@moz-iqes92.telkomadsl.co.za) has joined
Mar 29 02:25:42 *	free-store has quit (Quit: leaving)
Mar 29 02:25:45 *	free-store (cerulean@moz-79lufs.stud.ntnu.no) has joined
Mar 29 02:25:59 *	iu (iu@moz-f6pmt1.eduroam.liu.se) has joined
Mar 29 02:26:02 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 29 02:27:56 *	stephanbuys has quit (Quit: Leaving.)
Mar 29 02:27:57 *	jonmorehouse (jonmorehous@moz-0ivcoc.4to2.6baj.030a.2602.IP) has joined
Mar 29 02:28:03 *	rstuart (rstuart@moz-mnoemb.id.au) has left
Mar 29 02:28:42 <Azy8BsKXVko>	I've set the insane goal of going from a person who can barely understand closures to a core dev in about a month.
Mar 29 02:30:07 *	sankha has quit (Ping timeout: 121 seconds)
Mar 29 02:30:26 *	jonmorehouse has quit (Quit: WeeChat 1.3)
Mar 29 02:31:52 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 29 02:32:08 *	iiddnn_ (iacopodeeno@moz-sd1i4l.retail.telecomitalia.it) has joined
Mar 29 02:32:12 *	iiddnn_ is now known as iiddnn__
Mar 29 02:34:38 *	jimb has quit (Ping timeout: 121 seconds)
Mar 29 02:34:43 *	shackra has quit (A TLS packet with unexpected length was received.)
Mar 29 02:35:12 <marc>	Azy8BsKXVko: ok, good goal, but what does your nick mean?
Mar 29 02:36:02 *	slester has quit (Ping timeout: 121 seconds)
Mar 29 02:36:13 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 29 02:37:00 *	skade has quit (Ping timeout: 121 seconds)
Mar 29 02:37:52 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 29 02:39:04 *	skade (skade@moz-j855cp.web.vodafone.de) has joined
Mar 29 02:39:13 *	jimb (user@moz-6gkikn.or.comcast.net) has joined
Mar 29 02:40:34 *	will_sm has quit (Quit: Leaving)
Mar 29 02:40:39 *	fbegou (fbegou@moz-841.mmv.237.109.IP) has joined
Mar 29 02:42:24 *	jordanh (Mibbit@moz-rmkji4.fm.shawcable.net) has joined
Mar 29 02:43:13 *	Nehagup (uid120278@moz-ietjbc.brockwell.irccloud.com) has joined
Mar 29 02:45:21 *	danielwzd has quit (Connection closed)
Mar 29 02:45:51 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 02:45:54 *	cpup has quit (Ping timeout: 121 seconds)
Mar 29 02:46:22 *	martianwars (uid124042@moz-1flne0.brockwell.irccloud.com) has joined
Mar 29 02:46:25 *	skade has quit (Ping timeout: 121 seconds)
Mar 29 02:47:43 *	skade (skade@moz-rdo8um.web.vodafone.de) has joined
Mar 29 02:47:59 *	cpup (cpup@moz-r39.b21.218.32.IP) has joined
Mar 29 02:48:57 *	jxcl has quit (Ping timeout: 121 seconds)
Mar 29 02:48:58 *	nicholasf has quit (Ping timeout: 121 seconds)
Mar 29 02:49:38 *	jimb has quit (Ping timeout: 121 seconds)
Mar 29 02:49:54 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 02:50:23 <Azy8BsKXVko>	marc: it's just random.
Mar 29 02:50:46 <Azy8BsKXVko>	But it's also my GitHub, DigitalOcean, etc., username. So it's stuck.
Mar 29 02:52:13 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 29 02:52:13 *	Hail_Spacecake has quit (Connection closed)
Mar 29 02:52:30 *	Hail_Spacecake (greg@moz-djc.ktt.28.204.IP) has joined
Mar 29 02:52:49 *	sgiles is now known as sgiles|pto
Mar 29 02:52:58 *	GeorgeHahn has quit (Connection closed)
Mar 29 02:53:40 *	khades_ has quit (Ping timeout: 121 seconds)
Mar 29 02:54:05 *	dpc (dpc@moz-0j08lf.vfrf.7c07.0647.2601.IP) has joined
Mar 29 02:54:31 *	dpc_ (dpc@moz-0j08lf.vfrf.7c07.0647.2601.IP) has joined
Mar 29 02:55:34 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 29 02:56:16 *	sankha has quit (Ping timeout: 121 seconds)
Mar 29 03:00:24 <reem>	Hmm, cargo doc is failing for my crate because I depend on libc directly and through a dependency, but they’re the same version…
Mar 29 03:00:47 <durka42>	on nightly?
Mar 29 03:00:51 <reem>	yeah, https://github.com/reem/rust-http2parse
Mar 29 03:00:55 *	fabiand (fabiand@moz-u22vsl.dip0.t-ipconnect.de) has joined
Mar 29 03:01:07 *	dpc has quit (Client exited)
Mar 29 03:01:07 <durka42>	!gh 32532
Mar 29 03:01:07 <rustbot>	[Issue 32532] <closed> Rustdoc fails with info about symbol names <https://github.com/rust-lang/rust/issues/32532>
Mar 29 03:01:16 <durka42>	is that it?
Mar 29 03:01:53 *	arteme has quit (Ping timeout: 121 seconds)
Mar 29 03:02:21 *	Mannen (Mannen@moz-einjk9.bornet.net) has joined
Mar 29 03:02:25 *	Adals (Adals@moz-bfm.isk.186.95.IP) has joined
Mar 29 03:02:27 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 29 03:02:30 *	joy has quit (Quit: Leaving.)
Mar 29 03:02:53 FiSHLiM plugin unloaded
Mar 29 03:02:53 Python interface unloaded
**** ENDING LOGGING AT Tue Mar 29 03:02:53 2016

**** BEGIN LOGGING AT Tue Mar 29 15:45:27 2016

Mar 29 15:45:27 *	Now talking on #rust
Mar 29 15:45:27 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 29 15:45:27 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 29 15:45:28 *	hoopsnake has quit (Ping timeout: 121 seconds)
Mar 29 15:45:37 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 15:45:42 <CryZe>	the first parameter itself seems to be wrong though
Mar 29 15:45:47 <CryZe>	so maybe it is a reference
Mar 29 15:46:30 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 29 15:46:42 <CryZe>	doesn't seem like it's either
Mar 29 15:47:25 <mbrubeck>	what makes you say that?
Mar 29 15:48:23 <CryZe>	http://paste.ofcode.org/rmHfTGQ7y3E22Pki7xkWkb this calls malloc with like a million bytes
Mar 29 15:48:53 <CryZe>	even when I remove the file and line from the write!
Mar 29 15:49:01 <CryZe>	so the fmt itself is wrong
Mar 29 15:49:38 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 29 15:49:40 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 15:51:09 *	niemal_ (nl@moz-ub5.ean.107.79.IP) has joined
Mar 29 15:51:21 <mbrubeck>	CryZe: You might want to use write_fmt there
Mar 29 15:51:32 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 15:51:42 <mbrubeck>	http://doc.rust-lang.org/core/fmt/trait.Write.html#method.write_fmt
Mar 29 15:52:13 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 29 15:52:21 *	tromey has quit (Connection closed)
Mar 29 15:53:00 <CryZe>	mmh, same result
Mar 29 15:53:07 *	cruor99 has quit (Ping timeout: 121 seconds)
Mar 29 15:54:05 *	vadix_ has quit (Ping timeout: 121 seconds)
Mar 29 15:54:28 *	niemal has quit (Ping timeout: 121 seconds)
Mar 29 15:54:41 *	kazagistar (Adium@moz-br6.b81.207.205.IP) has joined
Mar 29 15:54:47 *	orospakr has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 15:55:18 *	woboats has quit (Client exited)
Mar 29 15:55:34 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 15:56:02 *	slester has quit (A TLS packet with unexpected length was received.)
Mar 29 15:56:35 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 29 15:56:52 *	orospakr (orospakr@moz-s8f.0pc.236.207.IP) has joined
Mar 29 15:57:31 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 15:59:19 *	untitaker_ (untitaker@moz-t7ala0.highway.telekom.at) has joined
Mar 29 16:01:18 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 29 16:01:31 *	griff has quit (Client exited)
Mar 29 16:01:33 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:01:56 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 29 16:01:58 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 16:02:10 *	untitaker has quit (Ping timeout: 121 seconds)
Mar 29 16:02:10 *	untitaker_ is now known as untitaker
Mar 29 16:02:11 *	bfrog (tburdick@moz-c831ha.62ps.u14a.0241.2601.IP) has joined
Mar 29 16:03:22 *	JagaJaga (JagaJaga@moz-ua8.hhl.62.178.IP) has joined
Mar 29 16:03:28 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:03:38 <tjpeden>	If I have a macro that takes a $name:ident is there some way to sort of interpolate that like $nameFoo to say name a helper struct?
Mar 29 16:04:00 <talchas>	no
Mar 29 16:04:34 *	jshs (jshs@moz-1q8aa4.dip0.t-ipconnect.de) has joined
Mar 29 16:04:36 <talchas>	you can do mod foo { struct $name {} } which might work if you don't need it exposed to the user of the macro
Mar 29 16:04:45 *	butts_butts (buttsbutts@moz-8e0js5.adsl.alicedsl.de) has joined
Mar 29 16:05:11 <talchas>	(but I'm not actually sure what happens then if you do this_macro!(abc); this_macro!(def);)
Mar 29 16:05:27 <talchas>	there is concat_idents!() which purports to do precisely what you want
Mar 29 16:05:49 *	MuffinPimp has quit (Quit: ZNC - http://znc.in)
Mar 29 16:05:52 <talchas>	but you'll find that it is useless because you can't write "struct concat_idents!()" or basically anything else using it
Mar 29 16:06:14 *	woboats has quit (Ping timeout: 121 seconds)
Mar 29 16:06:17 *	g-andrade has quit (Ping timeout: 121 seconds)
Mar 29 16:06:29 *	Frooxius (Frooxius@moz-7td.d1o.108.194.IP) has joined
Mar 29 16:06:51 *	icefall has quit (Ping timeout: 121 seconds)
Mar 29 16:06:53 *	MuffinPimp (MuffinPimp@moz-38jq04.muffinpi.mp) has joined
Mar 29 16:07:13 *	g-andrade (wat@moz-e51f7p.upd2.jg72.08a0.2001.IP) has joined
Mar 29 16:07:30 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:07:52 *	pcwalton has quit (Client exited)
Mar 29 16:08:01 *	karolis has quit (Quit: Konversation terminated!)
Mar 29 16:08:07 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 16:08:14 *	hoopsnake (zac@moz-8jfurb.whoi.edu) has joined
Mar 29 16:08:27 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:09:25 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 29 16:09:26 *	demilux has quit (Connection closed)
Mar 29 16:10:01 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 16:10:37 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:10:47 *	niconii (nicole@moz-s50lqo.midco.net) has joined
Mar 29 16:10:47 *	ChanServ sets mode +a on #rust niconii
Mar 29 16:10:47 *	ChanServ gives channel operator status to niconii
Mar 29 16:10:49 *	demilux has quit (Connection closed)
Mar 29 16:11:20 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 29 16:11:33 *	renderful has quit (Connection closed)
Mar 29 16:11:46 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:12:02 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:12:39 *	s_kunk_ (s_kunk@moz-1jmsti.rev.numericable.fr) has joined
Mar 29 16:12:59 *	demilux_ has quit (Connection closed)
Mar 29 16:13:44 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:13:54 *	MuffinPimp has quit (Quit: ZNC - http://znc.in)
Mar 29 16:13:58 *	gmorenz (normal@moz-5ttm37.nat.utoronto.ca) has joined
Mar 29 16:14:00 *	demilux has quit (Connection closed)
Mar 29 16:14:25 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:14:35 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 29 16:14:36 *	demilux has quit (Connection closed)
Mar 29 16:14:49 *	MuffinPimp (MuffinPimp@moz-38jq04.muffinpi.mp) has joined
Mar 29 16:15:03 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 16:15:19 <Mormur>	what's the proper way of defining a structure where some fields would be null in C, should I be using Option?
Mar 29 16:15:23 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 29 16:15:48 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:16:09 <XMPPwocky>	Mormur: null pointers? 
Mar 29 16:16:23 <pingveno>	Mormur: Are you going to be sending this through the FFI?
Mar 29 16:16:39 <Mormur>	Yes, through FFI
Mar 29 16:17:01 *	joy (Adium@moz-it5niu.2rkg.9kg1.0101.2620.IP) has joined
Mar 29 16:17:01 *	p_ (r00t@moz-ht65gk.austtx.sbcglobal.net) has joined
Mar 29 16:17:04 <Mormur>	The struct is just the rust representation of the struct in C
Mar 29 16:17:18 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:17:24 <pingveno>	Unless I am horribly mistaken, you should just use a pointer.
Mar 29 16:17:33 <Mormur>	my C function takes in a pointer to a struct, some of that structs fields are char* 's
Mar 29 16:17:34 *	demilux has quit (Connection closed)
Mar 29 16:17:43 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:17:44 <Mormur>	I'm getting a bit confused at this point
Mar 29 16:18:01 <talchas>	*const/mut u8/c_char is fine for those struct fields
Mar 29 16:18:38 <pingveno>	And those are nullable in Rust.
Mar 29 16:18:43 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:19:03 <Mormur>	using std::ptr::null()?
Mar 29 16:19:03 *	demilux has quit (Connection closed)
Mar 29 16:19:07 <pingveno>	yeha
Mar 29 16:19:09 <pingveno>	yeah*
Mar 29 16:19:19 <Mormur>	I'll give that a go, thanks!
Mar 29 16:19:27 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:19:40 *	p has quit (Ping timeout: 121 seconds)
Mar 29 16:19:40 *	demilux has quit (Connection closed)
Mar 29 16:20:55 <pingveno>	Mormur: It might be a good idea to make a wrapper struct around the FFI that converts to Option<&CStr>.
Mar 29 16:21:10 *	p_ has quit (Ping timeout: 121 seconds)
Mar 29 16:21:46 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:21:52 *	elyse (elyse@moz-dtjrv7.direct-adsl.nl) has joined
Mar 29 16:21:55 *	nicholasf (nicholasf@moz-a9dqgc.internode.on.net) has joined
Mar 29 16:21:57 <Mormur>	sorry?
Mar 29 16:22:01 *	p (r00t@moz-obq.5a1.14.204.IP) has joined
Mar 29 16:22:07 <pingveno>	std::ffi::CStr
Mar 29 16:22:22 <pingveno>	It gives you some convenience functions and safety guarentees at a low cost.
Mar 29 16:22:38 *	mhcerri has quit (Connection closed)
Mar 29 16:22:50 <pingveno>	You can isolate your unsafe code in a smaller section of your codebase as well.
Mar 29 16:23:32 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 16:23:41 <Mormur>	I'm currently using CString but my struct fields are &'a mut c_char
Mar 29 16:23:44 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:23:51 <Mormur>	will the FFI handle conversion from CString to char* for me?
Mar 29 16:24:40 <pingveno>	Not automatically.
Mar 29 16:25:08 <pingveno>	CString::as_ptr(&self) -> *const c_char
Mar 29 16:25:35 <pingveno>	Correction: CStr::as_ptr(&self) -> *const c_char
Mar 29 16:26:19 <Mormur>	I've been having a lot of trouble with conversion between types
Mar 29 16:26:27 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:26:41 <steveklabnik>	https://fnordig.de/2016/03/29/releasing-rust-projects-the-automatic-way/
Mar 29 16:26:41 *	demilux_ has quit (Connection closed)
Mar 29 16:26:42 <steveklabnik>	!!! :D
Mar 29 16:26:43 <pingveno>	Yeah, it's tricky, just like with any FFI.
Mar 29 16:27:13 *	pcwalton (pcwalton@moz-6kjabm.ca.comcast.net) has joined
Mar 29 16:27:13 *	ChanServ sets mode +a on #rust pcwalton
Mar 29 16:27:13 *	ChanServ gives channel operator status to pcwalton
Mar 29 16:27:15 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:27:47 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:27:47 *	demilux_ has quit (Connection closed)
Mar 29 16:28:19 <pingveno>	Mormur: Where is the memory being allocated, in C or in Rust?
Mar 29 16:29:36 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:30:22 <nixpulvi1>	Hmmm I can't find MetaNameValue anywhere in the ast docs.
Mar 29 16:30:27 <Mormur>	Rust. Eventually all of the code will be in Rust, just porting bits at a time which is why FFI is necessary.
Mar 29 16:30:56 <Mormur>	I'm creating a struct in Rust and passing it to a C function
Mar 29 16:31:02 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:31:35 *	hoopsnake has quit (Ping timeout: 121 seconds)
Mar 29 16:31:56 *	Matthias247 (Miranda@moz-pfeurg.hsi7.kabel-badenwuerttemberg.de) has joined
Mar 29 16:32:08 *	demilux has quit (Connection closed)
Mar 29 16:32:49 *	eric_lagergren (eric@moz-lr1hrn.wa.comcast.net) has joined
Mar 29 16:33:08 *	jnicklas has quit (Client exited)
Mar 29 16:33:38 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:35:55 *	orospakr has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 16:36:00 *	ob has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 16:36:03 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:36:13 *	ob (ob@moz-db2l7g.ca.comcast.net) has joined
Mar 29 16:36:13 *	demilux_ has quit (Connection closed)
Mar 29 16:37:00 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 16:37:04 *	durka42 has quit (Client exited)
Mar 29 16:37:37 *	orospakr (orospakr@moz-s8f.0pc.236.207.IP) has joined
Mar 29 16:37:49 *	ahal is now known as ahal|afk
Mar 29 16:38:15 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:38:32 *	demilux_ has quit (Connection closed)
Mar 29 16:38:54 <JagaJaga>	How to push to the beginning of the Vec?
Mar 29 16:39:24 *	mhcerri has quit (Connection closed)
Mar 29 16:39:34 <pingveno>	Vec::insert(index, element)
Mar 29 16:39:37 *	drew has quit (Ping timeout: 121 seconds)
Mar 29 16:39:41 <JagaJaga>	pingveno: thank you
Mar 29 16:40:04 <apajx>	JagaJaga: You might want to use a VecDeque if you're consistently inserting to the front
Mar 29 16:40:15 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 16:40:20 <JagaJaga>	apajx: nice! that's better
Mar 29 16:40:36 <pingveno>	Though it won't be contiguous
Mar 29 16:41:03 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 16:41:24 <Mormur>	pingveno: how would you recommend setting up this struct?
Mar 29 16:41:28 <kamalmarhubi>	is there a way to mark a #[test] as to be skipped?
Mar 29 16:42:15 *	TheAnachron (TheAnachron@moz-g0kvmj.dip0.t-ipconnect.de) has joined
Mar 29 16:42:19 <jorendorff>	TIL that methods which take `self` by value are compatible with trait objects
Mar 29 16:42:30 <jorendorff>	but associated functions (no `self`) are *not* compatible with trait objects
Mar 29 16:42:45 *	mhcerri has quit (Connection closed)
Mar 29 16:43:21 *	griff has quit (Client exited)
Mar 29 16:43:21 *	jschievink has quit (Client exited)
Mar 29 16:43:26 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 16:43:29 <hoverbear>	jorendorff: =D
Mar 29 16:43:51 <talchas>	jorendorff: you can put "where Self: sized" to deal with that
Mar 29 16:44:16 <talchas>	(and then you won't be able to call them on a trait object, but you'll be able to make a trait object)
Mar 29 16:44:20 <talchas>	: Sized that is
Mar 29 16:44:24 <jorendorff>	oh, right, because such methods don't count when determining trait-object-compatibility
Mar 29 16:45:02 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 16:45:15 *	mexisme (mexisme@moz-sdp.k7m.15.119.IP) has joined
Mar 29 16:45:26 *	vadix_ (vadix@moz-ogk666.li8q.e9lr.b400.2607.IP) has joined
Mar 29 16:45:57 *	TheAnachron has quit (Quit: Leaving)
Mar 29 16:45:57 *	elyse has quit (Quit: Leaving)
Mar 29 16:46:00 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:46:13 *	jdm is now known as jdm|away
Mar 29 16:46:30 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:47:14 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:47:14 *	demilux has quit (Connection closed)
Mar 29 16:48:42 *	arBmind has quit (Quit: Leaving.)
Mar 29 16:48:50 *	icefall (tyler@moz-hud.3ra.116.199.IP) has joined
Mar 29 16:49:00 *	TheAnachron (TheAnachron@moz-g0kvmj.dip0.t-ipconnect.de) has joined
Mar 29 16:49:16 *	demilux_ has quit (Connection closed)
Mar 29 16:49:21 *	jnicklas (jonasnickla@moz-qc69d7.bredband.comhem.se) has joined
Mar 29 16:49:36 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:49:48 *	starblue has quit (Ping timeout: 121 seconds)
Mar 29 16:50:03 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 16:50:04 *	rustyrazorblade has quit (Client exited)
Mar 29 16:50:43 <maurer>	Hrm, I feel like Trait Objects need a rework at some point. The number of times I"ve had to copy paste the same code is getting ridiculoust
Mar 29 16:50:45 <maurer>	ridiculous
Mar 29 16:50:50 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 29 16:50:51 <jaysonsantos>	Hey guys, I have an enum Something { Success = 0x00 } and I receive 0x00 thru the stream and I didn't find anyway to match status {Something::Success => Ok(())}, is that possible? I was trying to avoing some sort of hasmap duplicating all the enum values
Mar 29 16:50:52 *	tromey (tromey@moz-6di1m0.hlrn.qwest.net) has joined
Mar 29 16:51:07 *	cite-reader (ahill@moz-pv1j2k.swbr.surewest.net) has joined
Mar 29 16:51:36 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:51:37 *	iiv (Thunderbird@moz-8gc27m.bredband.telia.com) has left
Mar 29 16:51:37 <eddyb>	maurer: I agree, they shouldn't be a first-class feature but more like flexible existentials with monomorphic where clauses
Mar 29 16:51:59 <niconii>	jaysonsantos: enums can be kind of a pain to work with when it comes to this; it's easy to go from enum -> number, but to go from number -> enum requires matching
Mar 29 16:52:08 *	demilux_ has quit (Connection closed)
Mar 29 16:52:30 <niconii>	jaysonsantos: something like `match n { 0x00 => Something::Success, ... }`, which is annoying
Mar 29 16:52:45 <jaysonsantos>	niconii So, the only way is to use constanto to avoid duplicating values?
Mar 29 16:52:55 <niconii>	jaysonsantos: you can use a macro
Mar 29 16:52:58 <eddyb>	maurer: struct Curried(Box<(F, T) where F: Fn(T)>); sort of thing
Mar 29 16:52:59 <maurer>	eddyb: I'm typing https://gist.github.com/maurer/a6bdddccd2d22a500997fee17e09027a into like, every function
Mar 29 16:53:00 *	demilux__ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:53:02 <maurer>	err, every impl
Mar 29 16:53:05 <maurer>	of this particular trait
Mar 29 16:53:10 *	demilux__ has quit (Connection closed)
Mar 29 16:53:13 <niconii>	jaysonsantos: there's also some crate that deals with this, hang on
Mar 29 16:53:15 <maurer>	eddyb: I'm... not convinced that would solve my use case
Mar 29 16:53:26 <eddyb>	maurer: your usecase sounds very uniditiomatic :)
Mar 29 16:53:38 *	demilux has quit (Ping timeout: 121 seconds)
Mar 29 16:53:39 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 29 16:53:41 <maurer>	eddyb: I'm trying to make an extensible dynamic type for a database layer
Mar 29 16:53:45 <eddyb>	you have a form of dynamic typing
Mar 29 16:53:48 <niconii>	!crate enum_primitive
Mar 29 16:53:48 <rustbot>	enum_primitive (0.1.0) - Macro to generate num::FromPrimitive instances for enum that works in Rust 1.0 -> https://crates.io/crates/enum_primitive
Mar 29 16:53:51 <niconii>	jaysonsantos: ^
Mar 29 16:53:57 <eddyb>	maurer: yeah and that's considered unidiomatic in general
Mar 29 16:54:07 <eddyb>	maurer: it's not generally *bad* but for most problems there are static solutions
Mar 29 16:54:15 <jaysonsantos>	niconii: thanks! I have to dig on macros to get a better grip of it anyways
Mar 29 16:54:19 <maurer>	eddyb: I'd love to do this statically, but rust doesn't support doing what I'm doing statically
Mar 29 16:54:36 <maurer>	eddyb: (In fact, I don't think anything short of Agda or Coq would)
Mar 29 16:54:39 <eddyb>	maurer: I'd be curious to hear more about that, actually
Mar 29 16:54:52 *	lucian has quit (Ping timeout: 121 seconds)
Mar 29 16:55:21 <talchas>	maurer: can you make a macro to impl those functions for you? :/
Mar 29 16:55:21 <maurer>	eddyb: My library provides datalog (plus some other features) with the ability to define new types for slots in the predicates
Mar 29 16:55:24 <eddyb>	since I want to experiment with a DSL for data layout optimizations
Mar 29 16:55:34 <talchas>	(this is hardly a /great/ solution, but better than copypasta)
Mar 29 16:55:47 <maurer>	talchas: Yeah, I'll try that next
Mar 29 16:56:13 *	durka42 (durka42@moz-c3rb4b.wireless-pennnet.upenn.edu) has joined
Mar 29 16:56:19 <eddyb>	maurer: so you're binding a non-Rust library?
Mar 29 16:56:22 <maurer>	eddyb: no
Mar 29 16:56:23 <pcwalton>	is there a way to figure out where the top of the stack is?
Mar 29 16:56:27 <pcwalton>	acrichto: brson: ^
Mar 29 16:56:40 <maurer>	eddyb: https://github.com/maurer/holmes
Mar 29 16:56:46 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:56:51 <pcwalton>	I’m in LLDB and I have a suspected guard page collision inside C++ code
Mar 29 16:56:59 *	demilux_ has quit (Connection closed)
Mar 29 16:57:27 *	bionicrm has quit (Quit: o/)
Mar 29 16:57:29 *	Shibe has quit (Connection closed)
Mar 29 16:57:30 <eddyb>	pcwalton: /proc/self/maps?
Mar 29 16:57:35 <pcwalton>	Mac ;)
Mar 29 16:57:38 <eddyb>	or however LLDB exposes that
Mar 29 16:57:45 <pcwalton>	but maybe LLDB has something that’ll show this
Mar 29 16:57:49 <pcwalton>	Mach vm_whatever
Mar 29 16:57:53 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 16:58:06 <CryZe>	I still couldn't figure out panic_fmt
Mar 29 16:58:10 <talchas>	well, you can ask it to print the start of each page and find when it starts saying "doesn't exist"
Mar 29 16:58:13 <CryZe>	why is that not typechecked in the first place?
Mar 29 16:58:17 *	dardevelin (dardevelin@moz-nsbqhh.rev.vodafone.pt) has joined
Mar 29 16:58:34 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 16:58:34 <steveklabnik>	because ultimately it's a symbol
Mar 29 16:58:39 <steveklabnik>	which means it's not strongly typed
Mar 29 16:58:47 <steveklabnik>	(at least, that's my understanding)
Mar 29 16:59:12 <eddyb>	pcwalton: if you have a function std::sys_common::thread_info::stack_guard, you could call that
Mar 29 16:59:18 <talchas>	otoh it's a lang item, so it seems like it should be able to be?
Mar 29 16:59:35 *	junqed (junqed@moz-m12.7jq.70.178.IP) has joined
Mar 29 16:59:38 <CryZe>	yeah, I think lang_items should be checked as well, but they aren't
Mar 29 16:59:40 <mbrubeck>	CryZe: One confusing thing is that the "panic_fmt" lang item is not the same as the core::panicking::panic_fmt
Mar 29 16:59:44 <eddyb>	pcwalton: although it takes a return pointer because it's an Option<usize> :(
Mar 29 17:00:06 <CryZe>	indeed mbrubeck
Mar 29 17:00:06 <pcwalton>	eddyb: aha, there is a utility “vmmap PID” on Mac that does /proc/self/maps
Mar 29 17:00:09 <mbrubeck>	CryZe: `panicking::panic_fmt` calls the lang item, and the two have different signatures http://doc.rust-lang.org/nightly/src/core/up/src/libcore/panicking.rs.html#64-67
Mar 29 17:00:10 <eddyb>	and it uses std thread_local! so if you blew the stack :(
Mar 29 17:00:21 <pcwalton>	and the stack guards are helpfully labeled “STACK GUARD"
Mar 29 17:00:22 <Soni>	does this look like a good event system? event.rs: http://sprunge.us/KTBC main.rs: http://sprunge.us/aRHG (a non-static event bus would be better, but then I lose type safety)
Mar 29 17:00:28 <eddyb>	pcwalton: hehe
Mar 29 17:00:52 *	ofeldt (ofeldt@moz-6kqv2b.dip0.t-ipconnect.de) has joined
Mar 29 17:01:03 *	cbrewster (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 29 17:01:06 <pcwalton>	gotta love those Mach APIs
Mar 29 17:01:15 <pcwalton>	Mach really is better than POSIX in so many ways
Mar 29 17:01:17 <eddyb>	maurer: is datalog dynamic in nature?
Mar 29 17:01:31 <maurer>	eddyb: No, in fact this whole thing is intended to be statically checked
Mar 29 17:01:39 <maurer>	eddyb: the problem is the checking occurs when the program is defined
Mar 29 17:01:44 <maurer>	which is at _runtime_
Mar 29 17:01:45 <eddyb>	maurer: and that's at runtime?
Mar 29 17:01:50 <eddyb>	okay, why is that at runtime?
Mar 29 17:01:52 <maurer>	It's the same problem you'd have if you wrote a rust interpreter
Mar 29 17:01:56 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 17:02:06 <pczarn>	eddyb: datalog is a subset of prolog
Mar 29 17:02:12 <maurer>	pczarn: Not true
Mar 29 17:02:14 <mbrubeck>	CryZe: The builtin implementation of the lang item is I think https://github.com/rust-lang/rust/blob/master/src/libstd/sys/common/unwind/mod.rs#L173-L203
Mar 29 17:02:21 <maurer>	pczarn: Datalog is forward chaining, prolog is backward chaining
Mar 29 17:02:27 *	premysl has quit (A TLS packet with unexpected length was received.)
Mar 29 17:02:36 *	demilux has quit (Ping timeout: 121 seconds)
Mar 29 17:02:42 <maurer>	eddyb: It's at runtime because in a previous prototype, and later in the future, it's intended to function as a server, with new rules being added over rpc
Mar 29 17:02:45 <mbrubeck>	Note that you need `writer.write_fmt(fmt)` to use the fmt::Arguments
Mar 29 17:03:09 <maurer>	eddyb: Said rules would be checked according to static restrictions, then committed to the running program
Mar 29 17:03:19 <eddyb>	maurer: can that include new types?
Mar 29 17:03:23 <maurer>	eddyb: Yes
Mar 29 17:03:26 <eddyb>	or just rules using existing ty - oh
Mar 29 17:03:30 <eddyb>	maurer: there's your problem :(
Mar 29 17:03:35 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 17:03:40 <eddyb>	so you *want* dynamic typing
Mar 29 17:03:43 <maurer>	No
Mar 29 17:03:47 *	jdm|away is now known as jdm
Mar 29 17:03:48 <eddyb>	maurer: why do you use trait objects?
Mar 29 17:03:58 <eddyb>	those wouldn't work over RPC, would they?
Mar 29 17:04:04 <CryZe>	mbrubeck, that doesn't work either
Mar 29 17:04:13 <maurer>	eddyb: The RPC layer I intend to use can send objects
Mar 29 17:04:20 <CryZe>	I can't even seem to get the line number properly
Mar 29 17:04:21 <maurer>	eddyb: So yes, they do :P
Mar 29 17:04:22 <eddyb>	maurer: but not Rust objects
Mar 29 17:04:26 <eddyb>	with vtables
Mar 29 17:04:32 *	slester (slester@moz-7gh7m8.7nqd.tocq.e000.2605.IP) has joined
Mar 29 17:04:33 <maurer>	eddyb: It wouldn't send the vtables, it'd forward methods
Mar 29 17:04:42 *	jimb has quit (Ping timeout: 121 seconds)
Mar 29 17:04:42 *	blackgoat (blackgoat@moz-stj.iu0.157.221.IP) has joined
Mar 29 17:04:42 <eddyb>	but then you don't use trait objects
Mar 29 17:04:59 *	skeet70 (skeet70@moz-6un.5r9.145.104.IP) has joined
Mar 29 17:04:59 *	aidanhs has quit (Ping timeout: 121 seconds)
Mar 29 17:05:04 <eddyb>	you either have full-on dynamic typing with your implementation, or you have static Rust typing
Mar 29 17:05:04 <mbrubeck>	CryZe: What do you get if you just do `text.write_fmt(fmt)`?
Mar 29 17:05:18 <eddyb>	maurer: trait objects are kind of the worst of both worlds
Mar 29 17:05:25 *	kkus has quit (Connection closed)
Mar 29 17:05:32 <CryZe>	it crashes
Mar 29 17:05:37 *	aidanhs (aidanhs@moz-417.5v2.4.81.IP) has joined
Mar 29 17:05:43 <CryZe>	cause it wants to allocate billions of bytes
Mar 29 17:05:47 *	Donald-Trump (trump@moz-jro0ri.is.googolplex.ninja) has joined
Mar 29 17:06:01 <maurer>	eddyb: Look, do you have a suggestion, or are you just saying "You shouldn't want to implement the system you're trying to implement" ?
Mar 29 17:06:08 <mbrubeck>	CryZe: Can you paste the code that crashes?
Mar 29 17:06:09 <tromey>	jdm: around?
Mar 29 17:06:10 *	agile has quit (Ping timeout: 121 seconds)
Mar 29 17:06:13 <brson>	pczarn: there's a function in std called get_stack_start that might help
Mar 29 17:06:15 <eddyb>	maurer: my suggestion is to implement your own dynamic typing
Mar 29 17:06:15 <maurer>	Because yes, I'm frustrated with trait objects but I'm not hearing anything constructive here
Mar 29 17:06:20 <CryZe>	http://paste.ofcode.org/rmHfTGQ7y3E22Pki7xkWkb
Mar 29 17:06:22 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:06:22 <brson>	er pcwalton: there's a function in std called get_stack_start that might help
Mar 29 17:06:25 <eddyb>	maurer: without using trait objects
Mar 29 17:06:45 <eddyb>	maurer: you can't forward methods over RPC with trait objects
Mar 29 17:06:49 <mbrubeck>	CryZe: You might need to mark that `pub extern fn`
Mar 29 17:07:11 <maurer>	eddyb: Now you're just factually wrong? I had that working about a month ago
Mar 29 17:07:15 <mbrubeck>	The default one also is marked #[unwind]; I'm not sure what that does
Mar 29 17:07:19 <maurer>	eddyb: I temporarily removed the RPC to make development easier
Mar 29 17:07:22 <maurer>	eddyb: but it worked
Mar 29 17:07:38 <mbrubeck>	CryZe: Instead of `write!(text, "Panicked at '{}' {}:{}", fmt, file, line);` just do `text.write_fmt(fmt);`
Mar 29 17:07:39 <eddyb>	maurer: yeah but that skews the API away from RPC
Mar 29 17:07:40 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 17:07:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 29 17:07:57 <mbrubeck>	CryZe: `fmt` already contains the format string and the file and line by the time it gets here.
Mar 29 17:08:10 <eddyb>	maurer: what I'm saying is that if you have the dynamicity of an RPC you don't need to touch trait objects
Mar 29 17:08:10 *	agile (mike@moz-m71dqt.rcsntx.sbcglobal.net) has joined
Mar 29 17:08:22 <mbrubeck>	You should be using write_fmt on it, not Display
Mar 29 17:08:37 <eddyb>	unless you want some sort of hybrid that uses virtual dispatch locally and RPC remotely?
Mar 29 17:08:37 *	demilux has quit (Connection closed)
Mar 29 17:08:43 <eddyb>	but that sounds like a nightmare
Mar 29 17:08:43 <jdm>	tromey: yes
Mar 29 17:09:19 <CryZe>	mbrubeck the extern seems to have solved it (at least for the line_number)
Mar 29 17:09:24 <mbrubeck>	sweet!
Mar 29 17:09:31 <tromey>	jdm: for the return value problem - I tried the "String::new()" test case, which I understood to be using an out-param, and in my test at least this did the right thing already
Mar 29 17:09:39 *	andre_ has quit (Quit: leaving)
Mar 29 17:09:40 <eddyb>	maurer: what I'm saying is that if you use trait objects you have (virtual) dynamic dispatch on top of your own dynamic dispathc
Mar 29 17:09:48 <CryZe>	maybe that should be a compiler error (Lang Item not extern)
Mar 29 17:09:57 <jdm>	tromey: ok, if I come across an example of bad behaviour I'll let you know
Mar 29 17:10:01 <mbrubeck>	CryZe: Yeah, that sounds like a good idea
Mar 29 17:10:03 <eddyb>	CryZe: which lang item was this?
Mar 29 17:10:07 <CryZe>	panic_fmt
Mar 29 17:10:23 <eddyb>	nmatsakis: ^^ remember that testcase you had to add extern to so it compiles?
Mar 29 17:10:26 <tromey>	jdm: ok, thanks.  I think if this is just following the arch ABI rules, then it should generally be ok in gdb already
Mar 29 17:10:34 <eddyb>	nmatsakis: apparently extern is the correct ABI :/
Mar 29 17:10:50 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:10:50 <jdm>	tromey: any idea if that's a long-standing thing, or only in more recent versions of gdb?
Mar 29 17:11:04 <tromey>	as far as I know it's worked that way forever
Mar 29 17:11:04 *	demilux_ has quit (Connection closed)
Mar 29 17:11:21 *	renderful (renderful@moz-atg40s.co.comcast.net) has joined
Mar 29 17:11:26 <tromey>	it's possible there could be a target-dependent bug
Mar 29 17:11:37 <Soni>	does this look like a good event system? event.rs: http://sprunge.us/KTBC main.rs: http://sprunge.us/aRHG (a non-static event bus would be better, but then I lose type safety)
Mar 29 17:11:43 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 17:11:54 *	espadrine_ (tyl@moz-gtcb4e.dd79.arl0.0e35.2a01.IP) has joined
Mar 29 17:12:24 *	francisl (francis.lav@moz-f0g.ijh.161.107.IP) has joined
Mar 29 17:12:52 <eddyb>	Soni: the best event system is the one that doesn't exist at runtime :P
Mar 29 17:12:54 *	francisl has quit (Client exited)
Mar 29 17:12:54 <Mormur>	expected (), found i32 means expecting nothing but something was there, correct?
Mar 29 17:12:57 <CryZe>	nice, thanks everybody, I got it fully working now: 12:17:262 HLE\HLE_OS.cpp:47 N[OSREPORT]: 8050153c->800068ec| Panicked at 'called `Option::unwrap()` on a `None` value' ../src/libcore/option.rs:330
Mar 29 17:13:04 *	woboats has quit (Client exited)
Mar 29 17:13:25 *	TheAnachron has quit (Quit: Leaving)
Mar 29 17:13:26 <Soni>	eddyb, I want 1 event bus per connection, not 1 event bus for all connections
Mar 29 17:13:29 <talchas>	Mormur: well, () is a type like any other
Mar 29 17:13:38 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 17:13:47 <talchas>	but it's in particular the return type of like "fn foo(&self) {}"
Mar 29 17:13:48 <Soni>	so finding a way to make it non-static would be nice
Mar 29 17:14:01 <talchas>	which is probably the easiest way to see that sort of error
Mar 29 17:14:06 <eddyb>	Soni: passing contexts around gets too hairy?
Mar 29 17:14:27 <Soni>	eddyb, what do you mean?
Mar 29 17:14:40 <Mormur>	talchas: I'm calling an extern function to get that error
Mar 29 17:14:50 <eddyb>	Soni: well, usually the solution to global state is to put it in a context and pass that around
Mar 29 17:15:03 *	jgilbert (Jeff@moz-s5bn25.ujol.1ibb.0101.2620.IP) has joined
Mar 29 17:15:07 <Soni>	eddyb, uh, I want a WeakHashMap or something
Mar 29 17:15:07 <talchas>	Mormur: are you like passing *const i32 when it's expecting *const () or something?
Mar 29 17:15:16 <Soni>	with weak keys I mean
Mar 29 17:15:32 <eddyb>	Soni: that requires GC though
Mar 29 17:15:42 <JagaJaga>	How to filter by pattern from vector?
Mar 29 17:15:42 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:15:48 <eddyb>	Soni: fun fact: do you know how WeakMap is polyfilled in JS?
Mar 29 17:15:56 <Soni>	eddyb, requires GC?
Mar 29 17:15:56 *	demilux has quit (Connection closed)
Mar 29 17:15:57 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 17:16:02 <talchas>	it could also be like if you write fn foo() { ffi::function() } (note the lack of ;), and ffi::function() returns i32
Mar 29 17:16:02 <Soni>	since when does refcounting require a GC?
Mar 29 17:16:11 <eddyb>	Soni: you can't use refcounting for a WeakMap
Mar 29 17:16:12 *	mexisme has quit (Client exited)
Mar 29 17:16:14 <Mormur>	I'm trying to pass a rust struct to an FFI function that takes a pointer to a struct
Mar 29 17:16:15 <CryZe>	btw, is it supposed to be "extern fn" or "extern "C" fn"?
Mar 29 17:16:22 <Soni>	eddyb, why not?
Mar 29 17:16:32 *	mhcerri has quit (Connection closed)
Mar 29 17:16:34 <CryZe>	cause rustfmt puts the "C" there
Mar 29 17:16:40 <eddyb>	Soni: because when strong references goes away, all maps it's used in have to drop their associations
Mar 29 17:16:44 <eddyb>	*go away
Mar 29 17:16:56 <Soni>	eddyb, well yeah
Mar 29 17:16:58 <eddyb>	or I guess *the last strong reference
Mar 29 17:17:05 <Amanieu>	CryZe: the "C" is implicit when no ABI is given
Mar 29 17:17:05 *	iiddnn_ (iacopodeeno@moz-sd1i4l.retail.telecomitalia.it) has joined
Mar 29 17:17:09 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:17:09 *	iiddnn_ is now known as iiddnn__
Mar 29 17:17:19 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 17:17:21 *	demilux has quit (Connection closed)
Mar 29 17:17:23 <eddyb>	Soni: and you can't do that with refcounting, not without making a mess, anyway
Mar 29 17:17:24 <Soni>	eddyb, the stdlib has 2 Weak types, one rc::Weak and one sync::Weak
Mar 29 17:17:34 *	blackgoat has quit (Ping timeout: 121 seconds)
Mar 29 17:17:36 <eddyb>	Soni: Rc/Arc weakrefs
Mar 29 17:17:40 <CryZe>	Amanieu thanks :)
Mar 29 17:17:41 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 17:17:48 <Soni>	when you run out of strong refs, you need to cleanup the weak refs
Mar 29 17:17:52 <eddyb>	neither is enough for a weakmap
Mar 29 17:17:57 <eddyb>	Soni: that's not what they do
Mar 29 17:18:02 *	mexisme (mexisme@moz-sdp.k7m.15.119.IP) has joined
Mar 29 17:18:18 <Soni>	uh let me guess they use a pointer and set it to NULL? .-.
Mar 29 17:18:32 <eddyb>	no, that's the expensive approach that they don't do
Mar 29 17:18:45 <eddyb>	they have a strong counter and a weak counter: the strong counter controls the value, the weak counter controls the allocation
Mar 29 17:18:54 *	NameNotFound is now known as zz_NameNotFound
Mar 29 17:18:57 <Mormur>	ah okay, rust just doesn't like it when you don't assign the return value of a function to a variable
Mar 29 17:19:11 <Soni>	oh ok
Mar 29 17:19:16 <talchas>	Mormur: well, it's fine, as long as the type of the variable matches
Mar 29 17:19:16 <eddyb>	Soni: so if the strong counter is 0 but the weak counter isn't, you keep the allocation around but no initialized value
Mar 29 17:19:17 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:19:28 <eddyb>	Soni: anyway, do you know how you polyfill WeakMap in JS?
Mar 29 17:19:32 *	demilux_ has quit (Connection closed)
Mar 29 17:19:33 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 17:19:41 <eddyb>	Soni: the trick is pretty simple and sort of genius
Mar 29 17:20:04 *	hoopsnake (zac@moz-u938bf.whoi.edu) has joined
Mar 29 17:20:04 *	kaoD (Mibbit@moz-ie59si.staticip.rima-tde.net) has joined
Mar 29 17:20:05 *	demilux_ (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:20:16 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 17:20:20 <Soni>	eddyb, uh... since when does JS have weak keys?! I thought all keys were strings?
Mar 29 17:20:20 *	demilux_ has quit (Connection closed)
Mar 29 17:20:33 <eddyb>	Soni: ES6 added WeakMap which is object -> object
Mar 29 17:20:35 <kaoD>	hi, is there something like String but for pure ascii? or is it just Vec<u8>?
Mar 29 17:20:38 <eddyb>	or object -> value, I forget
Mar 29 17:20:44 <eddyb>	Soni: but you can polyfill it!
Mar 29 17:20:45 *	blackgoat (blackgoat@moz-stj.iu0.157.221.IP) has joined
Mar 29 17:20:49 *	meh (meh@moz-kkp.6fp.42.151.IP) has joined
Mar 29 17:20:53 <eddyb>	Soni: even though it requires special GC support
Mar 29 17:20:59 <Mormur>	my extern function was returning an i32, I was just calling the function but not doing anything with the return value
Mar 29 17:21:24 <eddyb>	kaoD: there's some methods with "ascii" around
Mar 29 17:21:24 <Soni>	meh
Mar 29 17:21:32 *	Haggus (Haggus@moz-g1noq7.dynamic.chello.pl) has joined
Mar 29 17:21:35 <Soni>	eddyb, so how do I get an ExpensiveWeakMap?
Mar 29 17:21:37 <eddyb>	Soni: you compute an unique property name for each map
Mar 29 17:21:52 <eddyb>	and assign it on the key
Mar 29 17:22:35 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 29 17:22:47 *	pcwalton has quit (Client exited)
Mar 29 17:23:01 <eddyb>	Soni: that's harder to pull off in Rust, but not impossible
Mar 29 17:23:26 <eddyb>	if you want the full ref-counted pointer chasing madness you'll have to write it yourself
Mar 29 17:23:31 *	arBmind (Andreas@moz-3m0l44.adsl.alicedsl.de) has joined
Mar 29 17:23:36 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 17:23:45 <qDot>	Ok, having to code review C++ after writing Rust, I am 100% ready for the robot to take my job. I don't like being a human borrow checker anymore.
Mar 29 17:23:52 <apajx>	Is the Add operation restricted to (T + T -> T)? If so is there anyway to get a natural (X + Y -> Z)?
Mar 29 17:23:57 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 29 17:24:00 <kmc>	apajx: it's not
Mar 29 17:24:14 <apajx>	kmc: well that solves that then :D thanks
Mar 29 17:24:15 <kmc>	apajx: the Add trait has a "RHS" parameter and an "Output" associated type
Mar 29 17:24:59 <Haggus>	I'm trying to get a stream from TcpListener, but can't get it as mutable, therefore I can't read from it. Anyone has a clue? http://is.gd/EZ1MdY
Mar 29 17:25:32 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 17:25:32 <kmc>	Haggus: try Ok(mut s) => ...
Mar 29 17:26:26 *	khades1 has quit (Client exited)
Mar 29 17:26:29 *	bholley is now known as bholley_away
Mar 29 17:26:31 *	_Vi has quit (Ping timeout: 121 seconds)
Mar 29 17:26:32 *	khades1 (Thunderbird@moz-opi.h6q.74.212.IP) has joined
Mar 29 17:26:44 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 29 17:27:57 *	musiKk has quit (Quit: Konversation terminated!)
Mar 29 17:28:26 *	cbrewste_ (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 29 17:29:19 <Haggus>	@kmc Thank you so much for your help!
Mar 29 17:29:35 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 29 17:29:51 <kmc>	Haggus: no problem :)
Mar 29 17:30:35 *	rustyrazorblade has quit (Client exited)
Mar 29 17:30:54 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 17:31:00 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 29 17:32:46 *	mhcerri has quit (Connection closed)
Mar 29 17:33:20 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 29 17:33:33 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 17:33:37 *	gopar has quit (A TLS packet with unexpected length was received.)
Mar 29 17:33:50 *	jshs has quit (Client exited)
Mar 29 17:35:21 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 17:35:23 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 29 17:35:37 *	eibwen (eibwen@moz-hgsmu2.dip0.t-ipconnect.de) has joined
Mar 29 17:35:51 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 29 17:35:56 *	SneakySnake has quit (Quit: Leaving)
Mar 29 17:37:21 *	crunchiebones (jy@moz-5uf.jl4.74.188.IP) has joined
Mar 29 17:37:27 <JagaJaga>	Guys. I have a Vec<A>. I did `vector.into_iter().filter(|&x| match x { A => true, e => false}).collect()`. But I'm getting "cannot move out of borrowed content"
Mar 29 17:37:36 <JagaJaga>	How to do this properly?..
Mar 29 17:38:20 <JagaJaga>	If I remove "&" I'm getting "ecpected:&A, found: A"
Mar 29 17:38:26 <talchas>	JagaJaga: |x| match *x { ... }
Mar 29 17:38:49 <JagaJaga>	error: cannot move out of borrowed content 
Mar 29 17:38:54 <talchas>	or match x { &A => true, ... }
Mar 29 17:38:55 <pingveno>	Doesn't |&x| match x { ... } only work with Copy types?
Mar 29 17:38:55 <JagaJaga>	talchas: ^^
Mar 29 17:39:07 <talchas>	one of those should work
Mar 29 17:39:26 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 17:39:32 <kmc>	JagaJaga: try _ => false instead of e => false
Mar 29 17:39:45 <talchas>	ah, yeah
Mar 29 17:39:46 *	dellavg has quit (Ping timeout: 121 seconds)
Mar 29 17:39:50 <talchas>	you'd need that for *x
Mar 29 17:39:56 *	nicholasf has quit (Connection closed)
Mar 29 17:40:05 <JagaJaga>	talchas: if I do &A => true, I'm getting "cannot move out of borrowed content"
Mar 29 17:40:20 <kmc>	JagaJaga: shouldn't it be like A::Foo? assuming A is an enum
Mar 29 17:40:27 <JagaJaga>	No, *x doesn't work too...
Mar 29 17:40:43 <JagaJaga>	kmc: No there are other types indeed, that was a mistake in my IRC message
Mar 29 17:40:57 <kmc>	JagaJaga: can you put this up on play.rust-lang.org
Mar 29 17:41:17 <talchas>	yeah, either *x (with _ => false instead of e => false), or &A should work as written
Mar 29 17:41:18 <JagaJaga>	kmc: Sure
Mar 29 17:41:28 <talchas>	but if it's more complicated than just "A", you may need to make other changes too
Mar 29 17:43:20 *	dzbarsky (Adium@moz-lvhmqo.82pc.j76f.0646.2601.IP) has joined
Mar 29 17:43:37 <JagaJaga>	http://is.gd/niJ9Bs line 54. I've deleted the parser and lexer function so that code wont compile :/
Mar 29 17:43:37 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 17:43:40 *	jdm has quit (Quit: )
Mar 29 17:44:15 <kmc>	it would be great if you can make a minimized example that does produce the expected error
Mar 29 17:45:01 <JagaJaga>	kmc: yeah, I understand you, but that's gonna be super hard.. Let me try to make code a little bit clear
Mar 29 17:45:12 <mbrubeck>	JagaJaga: Can you change the pattern to `ast::FunctionNode(ref f) => ...`
Mar 29 17:45:28 <mbrubeck>	assuming that's the line that's failing
Mar 29 17:45:33 *	colinsurprenant has quit (Ping timeout: 121 seconds)
Mar 29 17:45:52 <JagaJaga>	mbrubeck: you saved me!
Mar 29 17:46:15 <JagaJaga>	mbrubeck: that works. Thank you.
Mar 29 17:47:15 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 29 17:47:21 <wyvern>	What's the abstraction of choice for some sort of byte sink? I'm hoping there's something that would allow users to easily choose to write to a file, or network stream, or just a Vec<u8>, or what have you
Mar 29 17:47:28 <nixpulvi1>	How can I get a unique name for a function in a macro?
Mar 29 17:47:28 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 29 17:47:40 *	amyers has quit (Ping timeout: 121 seconds)
Mar 29 17:47:51 <nixpulvi1>	wyvern: Write
Mar 29 17:48:03 <wyvern>	Perfect, thanks.
Mar 29 17:48:56 *	J_Arcane (chatzilla@moz-f72bj8.bb.dnainternet.fi) has joined
Mar 29 17:49:16 *	brianloveswords (brianlovesw@moz-4la.d5m.14.107.IP) has joined
Mar 29 17:49:21 *	playbot-rs (playbot-rs@moz-ic72q7.dip0.t-ipconnect.de) has joined
Mar 29 17:49:22 *	playbot-rs has quit (Connection closed)
Mar 29 17:49:26 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 29 17:49:46 *	orospakr has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 17:49:48 *	arielby has quit (Ping timeout: 121 seconds)
Mar 29 17:49:48 *	tim_____ has quit (Quit: Leaving...)
Mar 29 17:50:19 *	playbot-rs (playbot-rs@moz-ic72q7.dip0.t-ipconnect.de) has joined
Mar 29 17:50:19 *	playbot-rs has quit (Connection closed)
Mar 29 17:50:34 *	jdm (jdm@moz-8lqbjh.cable.rogers.com) has joined
Mar 29 17:50:34 *	ChanServ gives channel operator status to jdm
Mar 29 17:51:11 *	ferjm has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 29 17:51:16 <durka42>	nixpulvi1: you can't :(
Mar 29 17:52:13 *	larhat (Adium@moz-b0j39j.proc.ru) has joined
Mar 29 17:52:44 *	Haggus has quit (Quit: Leaving)
Mar 29 17:55:19 <kaoD>	I need help with the borrow checker, simplified example here: http://is.gd/K4zdp6 <- I can't iterate over &tokens because then I can't return Err(x) (can't move out of borrowed value)... any ideas on how to do this?
Mar 29 17:55:35 *	msingle has quit (Ping timeout: 121 seconds)
Mar 29 17:55:48 <kaoD>	as I see it the core problem is the for loop is owning "tokens", but doesn't "release" it if it doesn't use it
Mar 29 17:56:48 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 17:57:55 *	griff has quit (Client exited)
Mar 29 17:58:14 *	bholley_away is now known as bholley
Mar 29 17:58:37 <talchas>	yes, though as you've written it it will free the entire vec in the process
Mar 29 17:59:34 <kaoD>	any way not to free the vec and be able to use it later, while still being able to access the inner Token to return early?
Mar 29 17:59:34 <talchas>	the smallest change would be to instead loop over &tokens, and have x => return Err(x.clone())
Mar 29 17:59:49 <kaoD>	hmm, IIRC I tried that, but I got a clone of the reference
Mar 29 17:59:55 <kaoD>	let me check again
Mar 29 18:00:00 <talchas>	you need to implement Clone for the tokens
Mar 29 18:00:21 <talchas>	if you can't clone the token, you could instead go over the indexes, and swap_remove
Mar 29 18:00:33 <talchas>	but at that point I might recommend not doing collect() to begin with
Mar 29 18:01:10 <nixpulvi1>	durka42: Can I make a syntax extension that generates N items each with a unique name in the form macro_name!(args...);
Mar 29 18:01:28 <nixpulvi1>	I was having trouble understanding how to get a macro like that expand into many items.
Mar 29 18:01:34 <durka42>	a syntax extension would be able to do something like that
Mar 29 18:01:46 <talchas>	and instead looping over the original iterator, doing match item { x@Token(whatever) => vec.push(x), x => return Err(x) }
Mar 29 18:01:52 <nixpulvi1>	I only saw MultiDecorator though.
Mar 29 18:01:55 *	kmicu has quit (Client exited)
Mar 29 18:01:56 *	p32blo (p32blo@moz-6rv.mm2.214.88.IP) has joined
Mar 29 18:02:07 <durka42>	I haven't written any myself :/
Mar 29 18:02:07 <nixpulvi1>	When I really don't want to decorate an existing item.
Mar 29 18:02:10 *	tromey has quit (Quit: ERC (IRC client for Emacs 25.0.92.3))
Mar 29 18:02:20 <talchas>	(this means you lose the size hinting to the vec constructor unless you carefully reproduce that code, but that's hardly the end of the world)
Mar 29 18:02:23 <nixpulvi1>	ah, yea I'm going down the rabbit hole right now./
Mar 29 18:02:28 *	crunchiebones has quit (Quit: WeeChat 1.4)
Mar 29 18:03:03 <kaoD>	talchas: thanks, I think I can derive Clone but your suggestion is probably the best option (and what I was doing in the beginning except I was using .map, which wouldn't let me return from the outer function)
Mar 29 18:03:17 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 29 18:03:22 <talchas>	I suppose you could also actually do an additional map(|x| match x { x@Whatever => Ok(x), x => Err(x) }) and then use the collect-into-Result<> to magically do it right for you
Mar 29 18:04:13 <talchas>	yeah, you can't return from the outer function, but if your map() closure returns Result<Token, Token>, you can collect that into Result<Vec<Token>, Token>
Mar 29 18:04:13 *	skeet70 has quit (Ping timeout: 121 seconds)
Mar 29 18:04:34 <kaoD>	I prefer returning early I think, since I'm going to fail on the first invalid token anyways
Mar 29 18:04:46 <kaoD>	thanks a lot for the ideas
Mar 29 18:05:05 <talchas>	kaoD: the trick is that that collect()-Result call will fail on the first on
Mar 29 18:05:07 <talchas>	one*
Mar 29 18:05:10 *	latk has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 29 18:06:00 *	sepp2k has quit (Quit: Leaving.)
Mar 29 18:06:35 <talchas>	collect::<Result<Collection, Err>>() basically does for x in iter { match x { Err(err) => return Err(err), Ok(ok) => Collection::collect_bits(ok) } }
Mar 29 18:06:39 *	LRN1986 (Miranda@moz-63ipbh.nationalcablenetworks.ru) has joined
Mar 29 18:06:46 <kaoD>	oh, I didn't know that
Mar 29 18:06:46 *	saml has quit (Quit: Leaving)
Mar 29 18:06:55 <kaoD>	I thought I'd just get a ton of Err() or Ok()
Mar 29 18:07:12 *	dwins has quit (A TLS packet with unexpected length was received.)
Mar 29 18:07:13 *	LRN has quit (Connection closed)
Mar 29 18:07:39 <talchas>	yeah, you have two choices, you can collect into Vec<Result<oktype, errortype>>, in which case that's what you get
Mar 29 18:07:54 *	jfo_ (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 29 18:07:58 <talchas>	or you can collect into Result<Vec<oktype>, errortype> in which case you just get the first error
Mar 29 18:07:58 <kaoD>	that's cool, I love Rust
Mar 29 18:08:11 *	NilSet has quit (Ping timeout: 121 seconds)
Mar 29 18:08:39 *	zokier` (zokier@moz-n8r372.fi) has left
Mar 29 18:09:28 *	drew has quit (Ping timeout: 121 seconds)
Mar 29 18:09:57 *	arielby (Ariel@moz-1hdjvc.cablep.bezeqint.net) has joined
Mar 29 18:11:12 *	jfo has quit (Ping timeout: 121 seconds)
Mar 29 18:12:00 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:12:06 *	starblue has quit (Ping timeout: 121 seconds)
Mar 29 18:12:32 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 29 18:12:35 *	jnicklas has quit (Client exited)
Mar 29 18:12:59 *	jnicklas (jonasnickla@moz-qc69d7.bredband.comhem.se) has joined
Mar 29 18:13:09 *	saml (saml@moz-0pt9vd.cst.lightpath.net) has joined
Mar 29 18:13:20 *	sankha has quit (Connection closed)
Mar 29 18:13:27 *	_Vi (vi@moz-bbs.vhj.131.104.IP) has joined
Mar 29 18:13:32 <wyvern>	The compiler warns about unused parameters when implementing traits. Is there a way to turn this off? It seems unhelpful to warn me about parameters that I have to take to satisfy the trait.
Mar 29 18:13:41 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 18:13:55 <joy>	hello, in the builder pattern example: https://doc.rust-lang.org/book/method-syntax.html#builder-pattern, if remove the finalize call, i get the error " error: borrowed value does not live long enough <anon>:45     let c = CircleBuilder::new()". If so, how does it long enough for the .x() and .y() calls ?
Mar 29 18:14:13 *	LRN1986 has quit (Connection closed)
Mar 29 18:14:31 *	premysl (premysl@moz-epv.2qn.30.217.IP) has joined
Mar 29 18:14:56 <kaoD>	wyvern: can you name the parameter "_" ?
Mar 29 18:15:19 *	LRN (Miranda@moz-63ipbh.nationalcablenetworks.ru) has joined
Mar 29 18:15:40 <kaoD>	wyvern: usually when you want to ignore anything, just call it _
Mar 29 18:16:23 <durka42>	joy: if you remove the finalize call, the result of .radius(2.0) is being saved by the let binding
Mar 29 18:16:34 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:16:34 *	bjz_ has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 18:16:45 *	jgallagher has quit (Client exited)
Mar 29 18:16:46 *	bjz (bjz@moz-hv8.as2.222.104.IP) has joined
Mar 29 18:16:48 <durka42>	joy: .finalize() returns a new Circle so the intermediate builders don't have to live past the expression
Mar 29 18:17:25 *	skade (skade@moz-pr5v7e.pools.vodafone-ip.de) has joined
Mar 29 18:17:35 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 29 18:17:56 *	rubdos has quit (Quit: Leaving)
Mar 29 18:18:05 *	fl3 (fl3@moz-ghm.6bs.172.109.IP) has joined
Mar 29 18:18:08 <durka42>	adding a destructor shows that the CircleBuilder is dropped at the end of the let expression http://is.gd/YPkHh2
Mar 29 18:19:00 *	hoopsnake (zac@moz-u938bf.whoi.edu) has left ("WeeChat 0.4.2")
Mar 29 18:19:02 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:19:15 <wyvern>	kaoD: ah, that does the trick. Thanks!
Mar 29 18:19:18 *	LRN has quit (Connection closed)
Mar 29 18:19:21 *	Kingsqueeee (kingsley@moz-pa1fj1.bchsia.telus.net) has joined
Mar 29 18:20:24 *	LRN (Miranda@moz-63ipbh.nationalcablenetworks.ru) has joined
Mar 29 18:20:35 *	skade (skade@moz-pr5v7e.pools.vodafone-ip.de) has joined
Mar 29 18:20:42 *	Vtec234 has quit (Quit: Bye!)
Mar 29 18:21:27 *	eddyb_ (eddyb@moz-97sdag.residential.rdsnet.ro) has joined
Mar 29 18:21:36 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 29 18:22:21 *	LRN has quit (Connection closed)
Mar 29 18:23:20 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:23:33 *	LRN (Miranda@moz-63ipbh.nationalcablenetworks.ru) has joined
Mar 29 18:24:06 *	klue has quit (Ping timeout: 121 seconds)
Mar 29 18:24:17 *	eddyb has quit (Ping timeout: 121 seconds)
Mar 29 18:25:13 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 18:25:40 *	scootaloo has quit (Ping timeout: 121 seconds)
Mar 29 18:27:35 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 29 18:27:49 *	burdges (burdges@moz-9oera5.rennes.inria.fr) has joined
Mar 29 18:28:25 *	butts_butts has quit (Ping timeout: 121 seconds)
Mar 29 18:29:32 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 29 18:29:47 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:29:57 *	cimes has quit (Quit: Leaving)
Mar 29 18:29:59 *	woboats has quit (Client exited)
Mar 29 18:30:23 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 18:30:32 *	skade (skade@moz-pr5v7e.pools.vodafone-ip.de) has joined
Mar 29 18:30:49 *	qrlpx (smuxi@moz-p9u60s.dip0.t-ipconnect.de) has joined
Mar 29 18:31:04 *	pbor has quit (Quit: Sto andando via)
Mar 29 18:31:16 *	Diggsey (uid120933@moz-ob9ou8.brockwell.irccloud.com) has joined
Mar 29 18:32:35 *	fl0w has quit (Client exited)
Mar 29 18:33:13 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:34:27 *	fl0w has quit (Client exited)
Mar 29 18:34:45 *	wldcordeiro (wldcordeiro@moz-806.5he.186.208.IP) has joined
Mar 29 18:35:03 *	tschottdorf has quit (Client exited)
Mar 29 18:35:17 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:35:43 <nixpulvi1>	Anyone know how to call a macro inside a syntax extension into an Item, this stuff is starting to get hard to track through the docs.
Mar 29 18:35:52 *	pereira_alex has quit (Quit: Konversation terminated!)
Mar 29 18:36:06 *	rustyrazorblade has quit (Client exited)
Mar 29 18:36:09 *	tschottdorf (tschottdorf@moz-ga3.afc.209.65.IP) has joined
Mar 29 18:36:14 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 18:36:19 *	fl0w has quit (Client exited)
Mar 29 18:37:01 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:37:15 *	gleb has quit (Ping timeout: 121 seconds)
Mar 29 18:37:17 *	kulakowski has quit (Quit: Connection closed for inactivity)
Mar 29 18:37:48 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 18:38:21 *	kzan (kzand@moz-qoo.ujr.97.32.IP) has joined
Mar 29 18:38:27 *	yota has quit (Quit: WeeChat 1.3)
Mar 29 18:38:43 *	tschottdorf has quit (Client exited)
Mar 29 18:38:53 <talchas>	nixpulvi1: format_args!() does new_parser_from_tts().parse_expr() to get at its arguments, if you constructed the macro in a tt and then did parse_item, maybe that exists and would work?
Mar 29 18:39:06 <talchas>	(there might also be an actually correct way to do this of course)
Mar 29 18:39:23 *	fl0w has quit (Client exited)
Mar 29 18:39:24 *	tschottdorf (tschottdorf@moz-ga3.afc.209.65.IP) has joined
Mar 29 18:39:53 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:39:59 *	peterjoel has quit (Ping timeout: 121 seconds)
Mar 29 18:40:19 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 18:41:04 *	peterjoel (peterjoel@moz-8gouil.range217-42.btcentralplus.com) has joined
Mar 29 18:41:18 *	ansible1 (kvirc@moz-0768k3.co.comcast.net) has joined
Mar 29 18:41:51 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 18:43:46 *	Dahrkael (Dahrkael@moz-r3vdpm.dynamicIP.rima-tde.net) has joined
Mar 29 18:45:02 *	amyers (amyers@moz-osiar4.md.comcast.net) has joined
Mar 29 18:45:27 *	iiddnn__ has quit (Client exited)
Mar 29 18:45:57 *	lizardo has quit (Ping timeout: 121 seconds)
Mar 29 18:46:04 *	jimb (user@moz-09a.i8g.126.207.IP) has joined
Mar 29 18:46:26 *	amyers has quit (Connection closed)
Mar 29 18:46:36 *	amyers (amyers@moz-08443u.8iss.sd5s.0145.2601.IP) has joined
Mar 29 18:47:19 *	ubsan (ubsan@moz-as7.8nj.56.172.IP) has joined
Mar 29 18:47:41 *	jnicklas has quit (Client exited)
Mar 29 18:50:46 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 18:51:34 *	stelarcf__ has quit (Client exited)
Mar 29 18:53:10 *	pcwalton (pcwalton@moz-l8ebtf.sfo1.mozilla.com) has joined
Mar 29 18:53:11 *	ChanServ sets mode +a on #rust pcwalton
Mar 29 18:53:11 *	ChanServ gives channel operator status to pcwalton
Mar 29 18:53:29 *	zz_NameNotFound is now known as NameNotFound
Mar 29 18:53:41 *	jnicklas (jonasnickla@moz-qc69d7.bredband.comhem.se) has joined
Mar 29 18:54:37 *	mneumann (Thunderbird@moz-00qv32.rz.uni-karlsruhe.de) has joined
Mar 29 18:54:45 <nixpulvi1>	talchas: I'm trying to find examples in the src where this happens and I'm failing.
Mar 29 18:55:09 <nixpulvi1>	stabilized syntax extensions would sure be nice.
Mar 29 18:55:12 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 29 18:55:47 *	scootaloo (arrem@moz-ud9h0v.bih.net.ba) has joined
Mar 29 18:55:53 <talchas>	https://github.com/rust-lang/rust/blob/d322f990b04e3b598afd6a47c09a0277f73031aa/src/libsyntax_ext/concat_idents.rs will invoke macros in its input
Mar 29 18:56:19 <talchas>	but I don't know how to construct the tokentree corresponding to a macro call
Mar 29 18:56:30 <talchas>	(and it would still be kinda ugly to do it that way if there's any better)
Mar 29 18:56:33 *	arfy has quit (Quit: Miranda NG! Smaller, Faster, Easier. http://miranda-ng.org/)
Mar 29 18:56:40 *	tycoon177 has quit (Connection closed)
Mar 29 18:56:45 <talchas>	I doubt there's anything /directly/ invoking a macro/syntax extension from another one
Mar 29 18:56:46 *	jnicklas has quit (Client exited)
Mar 29 18:57:05 <durka42>	presumably Quxxy's parse_generics thing knows how to do it
Mar 29 18:57:15 *	arfy (Miranda@moz-rvdeeo.iinet.net.au) has joined
Mar 29 18:57:17 <nixpulvi1>	I have a macro that creates a #[test] function, I want to call inside of a syntax extension.
Mar 29 18:57:26 <nixpulvi1>	unless you can think of a better way to do this.
Mar 29 18:57:37 *	drew has quit (Ping timeout: 121 seconds)
Mar 29 18:57:46 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 29 18:57:58 *	djcb has quit (Connection closed)
Mar 29 18:58:12 <durka42>	https://github.com/DanielKeep/rust-parse-generics-poc/blob/master/src/lib.rs#L267
Mar 29 18:58:36 *	jnicklas (jonasnickla@moz-qc69d7.bredband.comhem.se) has joined
Mar 29 18:58:44 *	REMqb (REMqb@moz-49022a.abo.wanadoo.fr) has joined
Mar 29 18:58:50 <durka42>	seems to be out of date... I dunno what a MacMac is
Mar 29 18:59:05 <nixpulvi1>	oh interesting EMPTY_CTXT
Mar 29 18:59:13 <nixpulvi1>	I was wondering about that
Mar 29 18:59:29 *	infynyxx has quit (Connection closed)
Mar 29 19:00:21 *	scootaloo has quit (Ping timeout: 121 seconds)
Mar 29 19:00:22 *	stephanbuys (Adium@moz-iqes92.telkomadsl.co.za) has joined
Mar 29 19:00:25 *	stephanbuys has quit (Quit: Leaving.)
Mar 29 19:00:43 *	areski has quit (Ping timeout: 121 seconds)
Mar 29 19:00:47 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 29 19:00:57 *	eddyb_ is now known as eddyb
Mar 29 19:00:58 *	canova (canova@moz-ehk.mir.45.92.IP) has joined
Mar 29 19:01:51 *	tycoon177 has quit (Ping timeout: 121 seconds)
Mar 29 19:02:50 <JagaJaga>	How to update a field in an existing structure?
Mar 29 19:03:23 <wyvern>	I'd like to include the float_cmp crate just for tests. I can use [target.'cfg(test)'.dependencies] in my Cargo.toml, but how do I do the extern crate declaration only for tests?
Mar 29 19:03:33 <bluss>	JagaJaga: you can replace the value by just using  obj.field = x
Mar 29 19:03:38 *	Nehagup has quit (Quit: Connection closed for inactivity)
Mar 29 19:03:49 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 19:04:00 <bluss>	wyvern: that sounds like it should be a [dev-dependencies]
Mar 29 19:04:06 <JagaJaga>	bluss: thank you.
Mar 29 19:04:12 *	bfrog has quit (Quit: WeeChat 1.4)
Mar 29 19:04:21 <durka42>	#[cfg(test)] extern crate float_cmp;
Mar 29 19:05:44 *	espadrine_ has quit (Ping timeout: 121 seconds)
Mar 29 19:05:50 *	tschottdorf has quit (Client exited)
Mar 29 19:06:19 <wyvern>	aha, and then another #[cfg(test)] on the use.
Mar 29 19:06:19 <kaoD>	I'm playing with macros, implementing enum with associated values: http://is.gd/EiDRlE can anyone help me handling comments preceding each variant?
Mar 29 19:06:59 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 29 19:07:00 <kaoD>	the obvious preceding $( #[$variant_attr:meta] )* fails due to ambiguity
Mar 29 19:07:18 <nixpulvi1>	What happened to quote_expr!
Mar 29 19:07:37 <durka42>	kaoD: two options, I guess
Mar 29 19:07:59 <kaoD>	durka42: "error: local ambiguity: multiple parsing options: built-in NTs ident ('variant_name') or 1 other option."
Mar 29 19:08:01 *	pczarn has quit (Ping timeout: 121 seconds)
Mar 29 19:08:03 <durka42>	kaoD: you can add support for a single comment/attribute, by splitting it into two rules, one with just the ident and one with an attr and then an ident
Mar 29 19:08:08 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 29 19:08:29 <durka42>	kaoD: the other option is to "go full recursive" -- have the macro call itself and build up a list of attributes until it hits the identifier
Mar 29 19:08:35 *	ubsan has quit (Connection closed)
Mar 29 19:08:58 *	woboats has quit (Ping timeout: 121 seconds)
Mar 29 19:09:06 *	orospakr (orospakr@moz-dj5.q91.158.69.IP) has joined
Mar 29 19:09:17 *	kkus (kkus@moz-7u2hvh.fios.verizon.net) has joined
Mar 29 19:09:20 <kaoD>	macros are *hard* :( durka42 any example of how to go recursive? I can't picture how to set up the recursion here
Mar 29 19:09:25 *	Sgeo (Sgeo@moz-cqm03c.dyn.optonline.net) has joined
Mar 29 19:09:29 *	Mermi has quit (Quit: Connection closed for inactivity)
Mar 29 19:10:03 <JagaJaga>	Are there lens for rust like for haskell?
Mar 29 19:10:13 <durka42>	the enum-derive crate probably has some examples, but that code is quite complex
Mar 29 19:10:50 *	mkoskar has quit (Client exited)
Mar 29 19:10:52 *	irrequietus has quit (Quit: )
Mar 29 19:10:53 <talchas>	kaoD: parse_one: ($(#[stuff])* $variant_name:ident = $variant_val:expr, $( $rest:tt )* )
Mar 29 19:11:00 *	jas0 has quit (Ping timeout: 121 seconds)
Mar 29 19:11:01 *	gmorenz (normal@moz-5ttm37.nat.utoronto.ca) has joined
Mar 29 19:11:17 <durka42>	JagaJaga: what functionality are you looking for?
Mar 29 19:12:00 <talchas>	that said, it's not clear to me why the parse is failing at all
Mar 29 19:12:23 <talchas>	as :ident vs # should be fine I would think
Mar 29 19:12:34 <JagaJaga>	durka42: I have a Vec<Foo>. Foo can be A(x) or B(z). z can be C(m). So I need to update m..
Mar 29 19:13:05 <talchas>	but apparently not, which makes no sense to me
Mar 29 19:13:08 <durka42>	talchas: it doesn't even consider trying to disambiguate "X vs :ident"
Mar 29 19:13:17 <talchas>	yeah
Mar 29 19:13:26 <durka42>	X vs a _particular_ ident it can do
Mar 29 19:13:26 <talchas>	even though X \notin :ident
Mar 29 19:13:30 <durka42>	right
Mar 29 19:13:38 <durka42>	so this macro could be fixed by changing the enum syntax
Mar 29 19:13:53 <durka42>	like $(#[$var_attr:meta])* variant $var:ident = $val:expr
Mar 29 19:13:57 <talchas>	yeah
Mar 29 19:14:02 <durka42>	but then it doesn't look like a regular enum anymore
Mar 29 19:14:11 <talchas>	or doing pushdown, which is annoying
Mar 29 19:14:14 <durka42>	right
Mar 29 19:14:24 <durka42>	and runs into the recursion limit
Mar 29 19:15:05 *	orospakr has quit (Ping timeout: 121 seconds)
Mar 29 19:15:20 <talchas>	yeah, but you're only doing one recursion per enum variant, so you're probably fine
Mar 29 19:15:32 <durka42>	the recursion limit is 64 by default
Mar 29 19:15:34 <talchas>	unless you're doing like all of winapi
Mar 29 19:15:42 <talchas>	hmm, I thought it was a bit higher than that
Mar 29 19:15:43 <durka42>	or any moderately large error enum for a library
Mar 29 19:15:48 *	kulakowski (uid101184@moz-6s2ifd.richmond.irccloud.com) has joined
Mar 29 19:15:50 <JagaJaga>	durka42: no idea? :(
Mar 29 19:15:55 *	jeffbradberry has quit (Ping timeout: 121 seconds)
Mar 29 19:16:05 <durka42>	JagaJaga: sorry, distracted. I don't understand your problem description at all
Mar 29 19:16:09 *	dmac__ (dmac@moz-vkslas.ca.comcast.net) has joined
Mar 29 19:16:14 <durka42>	A B and C are tuple structs?
Mar 29 19:16:34 <durka42>	and what is Foo? an enum?
Mar 29 19:17:10 <talchas>	though hmm, I'm not actually sure recursion helps here unless you do something really horrible
Mar 29 19:17:15 <durka42>	talchas: the recursion limit can be raised though, so it's just compilation speed at stake
Mar 29 19:17:22 <durka42>	how do you define "really horrible"? :)
Mar 29 19:17:55 <talchas>	parsing each attribute with a separate recurse
Mar 29 19:18:03 <talchas>	well, recursion limit changes are unstable, yes?
Mar 29 19:18:12 <talchas>	or was that changed?
Mar 29 19:18:18 <durka42>	it was always stable
Mar 29 19:18:44 *	pcwalton has quit (Client exited)
Mar 29 19:18:45 <durka42>	you "just" need to iterate through the enum body, collecting attributes, idents and exprs
Mar 29 19:19:04 <durka42>	so yeah, it's actually one recursion for each attribute, plus one per variant
Mar 29 19:19:06 *	Douman has quit (Connection closed)
Mar 29 19:19:21 <JagaJaga>	durka42: http://is.gd/7nAPmD I need to replace UnprocessedExpr with something.
Mar 29 19:19:35 *	dwins (dwins@moz-bjhr8m.u0fe.8986.014d.2601.IP) has joined
Mar 29 19:19:41 <durka42>	the way you have it with a match is what I'd do
Mar 29 19:20:46 <JagaJaga>	durka42: But I'm getting types mismatch, So I think that this way it tries to change FunctionNode, not f.body..
Mar 29 19:21:11 *	pcwalton (pcwalton@moz-l8ebtf.sfo1.mozilla.com) has joined
Mar 29 19:21:11 *	ChanServ sets mode +a on #rust pcwalton
Mar 29 19:21:11 *	ChanServ gives channel operator status to pcwalton
Mar 29 19:21:14 *	anastiel (anastiel@moz-k9v.b8f.23.191.IP) has joined
Mar 29 19:21:32 <durka42>	JagaJaga: so wrap the closure's return value in a FunctionNode
Mar 29 19:22:47 <JagaJaga>	durka42: there is no way to do that without explicit wrapping? So that's what do lens from haskell do :)
Mar 29 19:23:00 <nixpulvi1>	Macros are "fun": use of undeclared type name `u32`
Mar 29 19:23:01 <durka42>	I don't know of any way
Mar 29 19:23:06 *	hokkos_ has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 29 19:23:06 <durka42>	nixpulvi1: lol
Mar 29 19:23:07 <nixpulvi1>	my `u32` isn't the "right" u32
Mar 29 19:23:08 <JagaJaga>	durka42: or simply like a.b = 1;
Mar 29 19:23:24 <durka42>	of course a.b=1 you can do
Mar 29 19:23:37 <nixpulvi1>	I suppose I shouldn't have expected  gensym_ident("u32") to work
Mar 29 19:23:44 *	plutoniix has quit (Quit: จรลี จรลา)
Mar 29 19:23:45 <JagaJaga>	durka42: I need to search for special elements firstly :)
Mar 29 19:24:08 *	FrozenCow has quit (Connection closed)
Mar 29 19:24:17 *	dwins has quit (Quit: Leaving...)
Mar 29 19:25:07 *	aatch (james@moz-uhn.omt.54.210.IP) has joined
Mar 29 19:25:47 *	wldcordeiro has quit (Ping timeout: 121 seconds)
Mar 29 19:26:00 <nixpulvi1>	wow I have no idea how to get the Ident of a u32
Mar 29 19:26:05 <maurer>	What's the preferred way to derive a json repr atm?
Mar 29 19:26:06 *	bluss_ (bluss@moz-rip51k.cust.bredbandsbolaget.se) has joined
Mar 29 19:26:13 <maurer>	rustc-serialise? serde? Which/why?
Mar 29 19:27:03 *	aatch has quit (Quit: Leaving)
Mar 29 19:27:11 *	aatch (james@moz-uhn.omt.54.210.IP) has joined
Mar 29 19:27:24 *	niemal_ has quit (Connection closed)
Mar 29 19:27:34 <nixpulvi1>	let ret_type = cx.ty_path(cx.path(DUMMY_SP, vec![Ident::with_empty_ctxt(intern("u32"))]));
Mar 29 19:27:34 *	playbot-rs (playbot-rs@moz-ic72q7.dip0.t-ipconnect.de) has joined
Mar 29 19:27:35 *	playbot-rs has quit (Connection closed)
Mar 29 19:27:39 *	gingermusketeer has quit (Connection closed)
Mar 29 19:27:42 *	gingermusketeer (gingermuske@moz-cqosnq.compute.amazonaws.com) has joined
Mar 29 19:28:10 *	durka42 works on recursing through the body of an enum :)
Mar 29 19:28:47 *	burdges has quit (Quit: Leaving)
Mar 29 19:28:58 *	bluss has quit (Ping timeout: 121 seconds)
Mar 29 19:29:15 *	jfo_ has quit (Connection closed)
Mar 29 19:31:51 *	kerrang (kerrang@moz-v622nr.fios.verizon.net) has joined
Mar 29 19:32:57 *	amyers has quit (Ping timeout: 121 seconds)
Mar 29 19:33:06 *	futile has quit (Quit: WeeChat 1.4)
Mar 29 19:34:08 *	Eisfreak7 has quit (Quit: WeeChat 1.4)
Mar 29 19:34:59 <kaoD>	this macro is driving me crazy, I think variants will stay comment-less for now :(
Mar 29 19:35:29 *	khades1 has quit (Client exited)
Mar 29 19:35:35 *	khades1 (Thunderbird@moz-opi.h6q.74.212.IP) has joined
Mar 29 19:35:46 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 19:35:54 *	rustyrazorblade has quit (Client exited)
Mar 29 19:35:54 <kaoD>	definitely the roughest part of Rust, everything else is smooth and fun, but macros... :#
Mar 29 19:36:02 *	dagnir (dagnir@moz-0hm.jjv.122.166.IP) has joined
Mar 29 19:37:12 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 19:37:58 <talchas>	hmm, I'm trying to get it to work :P
Mar 29 19:38:11 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 19:39:38 *	RegulationD has quit (Connection closed)
Mar 29 19:40:03 *	DemonOne (Avi@moz-i0lhqp.red.bezeqint.net) has joined
Mar 29 19:40:41 *	rustyrazorblade has quit (Client exited)
Mar 29 19:40:45 *	bholley has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 19:41:16 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 19:41:27 *	bmaxa has quit (Connection closed)
Mar 29 19:42:37 <durka42>	I did it, but it's not pretty
Mar 29 19:43:18 *	James__ has quit (Ping timeout: 121 seconds)
Mar 29 19:43:56 *	eazar001 has quit (Quit: WeeChat 1.4)
Mar 29 19:43:57 <durka42>	kaoD: talchas: https://play.rust-lang.org/?gist=79ca87ff3060f0b3dea61453760f34e4&version=stable
Mar 29 19:44:01 <durka42>	I'm sure it can be made shorter :)
Mar 29 19:44:05 *	anastiel has quit (Quit: Leaving)
Mar 29 19:44:12 *	anastiel (anastiel@moz-k9v.b8f.23.191.IP) has joined
Mar 29 19:44:21 *	Dahrkael has quit (Ping timeout: 121 seconds)
Mar 29 19:44:24 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 29 19:44:30 <durka42>	you should read the rules starting at the end of the macro
Mar 29 19:44:39 <durka42>	(or you should run away screaming -- also acceptable)
Mar 29 19:44:56 *	kaoD runs away screaming
Mar 29 19:45:03 <kaoD>	ok I'll study this
Mar 29 19:45:22 <durka42>	!tlborm
Mar 29 19:45:22 <rustbot>	https://danielkeep.github.io/tlborm/
Mar 29 19:45:30 <durka42>	^ that's where I learned a lot of my tricks
Mar 29 19:45:51 <kaoD>	btw why macros don't accept quantification other than * and + ?
Mar 29 19:45:57 *	arfy has quit (Quit: Miranda NG! Smaller, Faster, Easier. http://miranda-ng.org/)
Mar 29 19:46:12 <kaoD>	aaah, I've seen this page before (but always manage to lose it, bookmarking it right now!)
Mar 29 19:48:21 <durka42>	kaoD: it would be real nice to have a one-or-zero quantifier
Mar 29 19:50:50 *	jdm has quit (Quit: )
Mar 29 19:51:10 *	frankmcsherry has quit (Connection closed)
Mar 29 19:52:16 *	LevelOneDev has quit (Ping timeout: 121 seconds)
Mar 29 19:53:19 *	jgallagher (john@moz-72l538.ga.comcast.net) has joined
Mar 29 19:54:12 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 29 19:54:38 <JagaJaga>	If I have uncovered patterns how can I tell rust what I need just skip everything not covered with pattern and leave as it is?
Mar 29 19:55:26 <kaoD>	JagaJaga: _ covers any pattern
Mar 29 19:55:38 *	joy has quit (Quit: Leaving.)
Mar 29 19:55:45 <JagaJaga>	kaoD: I know that. I need something like `a => a`
Mar 29 19:55:47 *	griff has quit (Client exited)
Mar 29 19:55:51 <kaoD>	actually, varname covers any pattern (and _ as var name discards it)
Mar 29 19:55:52 <durka42>	JagaJaga: the syntax is `a => a` :)
Mar 29 19:56:07 *	kkus has quit (Quit: Leaving)
Mar 29 19:56:13 *	kkus (kkus@moz-7u2hvh.fios.verizon.net) has joined
Mar 29 19:56:16 <kaoD>	that
Mar 29 19:56:24 <JagaJaga>	durka42: and if I have `ref a` on the left, I need to write `e.clone()` on the right?
Mar 29 19:56:32 <talchas>	ahah, there we go https://play.rust-lang.org/?gist=44ae147e3dafefded276bea35595457c&version=nightly
Mar 29 19:56:49 <talchas>	I was missing a $ in my pattern, had written variant_attr:meta instead of $variant_attr:meta
Mar 29 19:56:51 <talchas>	hate macros
Mar 29 19:58:28 <Zoxc>	How do you get an absolute path from PathBuf?
Mar 29 19:58:43 *	dmac__ (dmac@moz-h4nvlf.ca.comcast.net) has joined
Mar 29 19:59:02 <maurer>	Is there a way to get a ToJson instance derived for a type automatically, or do I have to write it by doing an encode to a string, followed by a partial decode?
Mar 29 19:59:10 <maurer>	(Encoders seem to want to produce strings, not Json)
Mar 29 20:00:27 <mbrubeck>	Zoxc: std::env::current_dir().unwrap().join(&pathbuf)
Mar 29 20:00:39 *	anastiel has quit (Quit: Leaving)
Mar 29 20:00:43 <durka42>	JagaJaga: yeah, but why the ref a?
Mar 29 20:00:47 <Zoxc>	mbrubeck: Will that get rid of . and ..?
Mar 29 20:00:54 *	Mormur has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 20:00:54 <durka42>	seems to me if there's a reference in there you could just pass it on through
Mar 29 20:00:59 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 20:01:12 *	wldcordeiro (wldcordeiro@moz-ul1rm9.ut.comcast.net) has joined
Mar 29 20:01:19 <sfackler>	Zoxc: you might want https://doc.rust-lang.org/std/path/struct.Path.html#method.canonicalize
Mar 29 20:01:46 *	urodna (urodna@moz-ogglgp.res.rr.com) has joined
Mar 29 20:01:49 *	Azy8BsKXVko has quit (Ping timeout: 121 seconds)
Mar 29 20:01:57 <Zoxc>	sfackler: I don't want to follow symlinks
Mar 29 20:02:27 <JagaJaga>	durka42: because with match *x and without ref a I'm getting `note: attempting to move value to here`
Mar 29 20:03:12 *	qbg (qbg@moz-9799i9.mncable.net) has joined
Mar 29 20:03:20 <sfackler>	Zoxc: you can't really eliminate ..'s if you don't want to follow symlinks iirc
Mar 29 20:03:37 <durka42>	well I guess if you gotta clone then you gotta clone
Mar 29 20:03:43 *	chris_99 has quit (Quit: Leaving)
Mar 29 20:03:50 *	ksad has quit (Quit: Leaving)
Mar 29 20:03:55 *	Cyderize (Cyderize@moz-7iot5a.tpgi.com.au) has joined
Mar 29 20:04:11 <JagaJaga>	durka42: https://github.com/jagajaga/syava-lang/blob/master/src/main.rs#L360 can you take a look and tell me where I'm wrong? I don't want to write bad code :(
Mar 29 20:04:20 *	dhole_ has quit (Quit: WeeChat 1.2)
Mar 29 20:04:27 *	Makoryu (malleus@moz-0de80j.dyn.optonline.net) has joined
Mar 29 20:05:01 <sfackler>	Zoxc: foo/bar/../baz isn't necessarily foo/baz if bar was a symlink
Mar 29 20:05:49 <Zoxc>	sfackler: That doesn't seem right
Mar 29 20:05:51 *	ville has quit (Ping timeout: 121 seconds)
Mar 29 20:06:56 *	oln has quit (A TLS packet with unexpected length was received.)
Mar 29 20:07:51 *	masonl has quit (Ping timeout: 121 seconds)
Mar 29 20:08:04 *	futile (felix@moz-cursjl.unity-media.net) has joined
Mar 29 20:09:28 <durka42>	JagaJaga: it seems right
Mar 29 20:12:09 *	ytain (ytain@moz-0n9vu0.cpe.teksavvy.com) has joined
Mar 29 20:12:30 <mbrubeck>	JagaJaga: One minor note: Vec<T> is already a pointer to an array, so &Vec<T> is a pointer to a pointer to an array
Mar 29 20:12:32 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 29 20:12:56 <mbrubeck>	JagaJaga: It's more common to either pass Vec<T> by value (if you want to consume it) or pass &[T] (if you only want to borrow it)
Mar 29 20:13:15 *	p_ (r00t@moz-ht65gk.austtx.sbcglobal.net) has joined
Mar 29 20:13:19 *	eckhardt has quit (Connection closed)
Mar 29 20:13:21 <aatch>	&mut Vec<T> is also acceptable at times.
Mar 29 20:13:22 <kmc>	and &Vec<T> will automatically turn into &[T] if passed to a function that expects &[T]
Mar 29 20:13:41 <aatch>	But &Vec<T> offers no advantages over &[T]
Mar 29 20:13:49 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 29 20:13:51 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 20:13:51 <kmc>	aatch: if you needed to query the capacity for some reason
Mar 29 20:13:57 <kmc>	it's a niche use case though
Mar 29 20:14:12 *	rustyrazorblade has quit (Client exited)
Mar 29 20:14:21 <mbrubeck>	JagaJaga: If you pass Vec<T> by value, then you can do `ast.into_iter().map(|x| ...)` and then `x` will have type ASTNode instead of &ASTNode
Mar 29 20:14:40 <mbrubeck>	JagaJaga: Then you can avoid the refs and I think get rid of the clones
Mar 29 20:15:06 *	colinsurprenant (colin@moz-8a0olr.89.electronicbox.net) has joined
Mar 29 20:15:37 *	arielby has quit (Quit: Leaving)
Mar 29 20:15:43 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 29 20:15:54 *	p has quit (Ping timeout: 121 seconds)
Mar 29 20:16:24 *	fl3 has quit (Connection closed)
Mar 29 20:16:29 *	dpc (dpc@moz-52v2l7.nvidia.com) has joined
Mar 29 20:16:53 *	dpc_ (dpc@moz-52v2l7.nvidia.com) has joined
Mar 29 20:17:51 *	eckhardt has quit (Ping timeout: 121 seconds)
Mar 29 20:18:26 *	dpc has quit (Client exited)
Mar 29 20:18:35 *	dpc (dpc@moz-52v2l7.nvidia.com) has joined
Mar 29 20:20:09 *	dfockler (dan@moz-rm6ima.wa.comcast.net) has joined
Mar 29 20:20:37 <mbrubeck>	Darn it, I want to `impl Borrow<UniCase<&str>> for UniCase<String>` so I can use the former to query a HashMap of the latter
Mar 29 20:20:44 <mbrubeck>	but Borrow returns a reference so I can't. :(
Mar 29 20:20:48 <comex>	thread 'rustc' has overflowed its stack
Mar 29 20:20:51 <comex>	fatal runtime error: stack overflow
Mar 29 20:20:53 <comex>	this wasn't even on purpose >_<
Mar 29 20:21:09 *	Quxxy (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 29 20:21:14 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 20:22:47 *	pcwalton has quit (Client exited)
Mar 29 20:23:02 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 20:23:10 *	Altonymous (Altonymous@moz-q9a.s9e.95.209.IP) has joined
Mar 29 20:24:07 *	bholley (bholley@moz-epe7mi.ca.comcast.net) has joined
Mar 29 20:24:11 *	masonl (masonl@moz-cnt.haj.125.74.IP) has joined
Mar 29 20:24:22 *	bholley has quit (Connection closed)
Mar 29 20:26:17 *	bkearns has quit (Quit: Leaving.)
Mar 29 20:28:17 *	NameNotFound is now known as zz_NameNotFound
Mar 29 20:29:08 *	Fishrock123 has quit (Connection closed)
Mar 29 20:29:10 *	ville (ville@moz-tv9ld2.bb.dnainternet.fi) has joined
Mar 29 20:29:22 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 29 20:29:22 *	chain_chan has quit (A TLS packet with unexpected length was received.)
Mar 29 20:29:47 *	orks has quit (Quit: rakede)
Mar 29 20:29:50 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 20:30:37 *	robotblake`alt (robotblake@moz-8r3.nh4.49.209.IP) has joined
Mar 29 20:30:42 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 29 20:30:53 *	dpc_ has quit (Connection closed)
Mar 29 20:30:56 *	dpc has quit (Client exited)
Mar 29 20:31:04 *	dpc_ (dpc@moz-52v2l7.nvidia.com) has joined
Mar 29 20:31:05 *	dpc (dpc@moz-52v2l7.nvidia.com) has joined
Mar 29 20:31:21 *	dpc has quit (Connection closed)
Mar 29 20:31:25 *	zz_NameNotFound is now known as NameNotFound
Mar 29 20:31:27 *	eckhardt has quit (Connection closed)
Mar 29 20:31:28 *	dpc_ has quit (Client exited)
Mar 29 20:31:42 *	icefall has quit (Ping timeout: 121 seconds)
Mar 29 20:31:51 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 29 20:32:01 *	detsak (detsak@moz-ajc.32g.191.107.IP) has joined
Mar 29 20:32:19 *	ParadoxSpiral_ has quit (Quit: cya)
Mar 29 20:32:52 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 29 20:33:36 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 29 20:34:19 *	masonl has quit (Ping timeout: 121 seconds)
Mar 29 20:34:25 *	bholley (bholley@moz-epe7mi.ca.comcast.net) has joined
Mar 29 20:34:48 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 29 20:35:22 *	JagaJaga has quit (Ping timeout: 121 seconds)
Mar 29 20:35:30 *	g-andrade has quit (Ping timeout: 121 seconds)
Mar 29 20:35:34 *	bholley has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 20:35:39 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 29 20:35:52 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 20:37:12 *	badon has quit (Ping timeout: 121 seconds)
Mar 29 20:38:04 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 20:38:35 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 20:39:06 *	badon_ is now known as badon
Mar 29 20:39:59 *	RegulationD (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 29 20:40:03 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 20:40:28 *	robotblake`alt has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 20:41:52 *	spider-mario has quit (A TLS packet with unexpected length was received.)
Mar 29 20:42:07 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 20:42:17 *	Guest37 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 20:42:35 *	icefall (tyler@moz-edrulj.static.monkeybrains.net) has joined
Mar 29 20:42:38 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 20:44:01 *	RegulationD has quit (Ping timeout: 121 seconds)
Mar 29 20:45:20 *	Pierre_M has quit (Quit: Leaving)
Mar 29 20:47:48 *	peterjoel has quit (Client exited)
Mar 29 20:49:09 *	ptc (textual@moz-qjn.9ii.88.38.IP) has joined
Mar 29 20:49:38 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 29 20:49:54 *	NameNotFound is now known as zz_NameNotFound
Mar 29 20:50:01 *	martianwars has quit (Quit: Connection closed for inactivity)
Mar 29 20:50:16 *	Matthias247 has quit (Connection closed)
Mar 29 20:50:36 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 20:50:46 *	rustyrazorblade has quit (Client exited)
Mar 29 20:51:02 *	EsBe (EsBe@moz-j68r7f.res.rr.com) has joined
Mar 29 20:51:45 *	masonl (masonl@moz-cnt.haj.125.74.IP) has joined
Mar 29 20:52:03 *	bholley (bholley@moz-mehar5.ca.comcast.net) has joined
Mar 29 20:53:16 *	smikims has quit (Ping timeout: 121 seconds)
Mar 29 20:54:18 *	mhcerri has quit (Connection closed)
Mar 29 20:54:51 *	acmcarther (alex@moz-n9m.q3k.194.69.IP) has joined
Mar 29 20:55:00 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 20:56:49 *	zz_NameNotFound is now known as NameNotFound
Mar 29 20:57:06 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 20:57:09 *	phil-opp has quit (Ping timeout: 121 seconds)
Mar 29 20:57:10 *	rschifflin (mark@moz-7gn2c6.compute-1.amazonaws.com) has joined
Mar 29 20:58:11 *	nicholasf2 (nicholasf@moz-r4g.qhj.136.1.IP) has joined
Mar 29 20:58:33 *	nicholasf has quit (Ping timeout: 121 seconds)
Mar 29 20:58:35 *	pcwalton (pcwalton@moz-l8ebtf.sfo1.mozilla.com) has joined
Mar 29 20:58:35 *	ChanServ sets mode +a on #rust pcwalton
Mar 29 20:58:35 *	ChanServ gives channel operator status to pcwalton
Mar 29 20:58:51 *	qrlpx_ (smuxi@moz-sqqvgv.dip0.t-ipconnect.de) has joined
Mar 29 20:58:52 *	qrlpx has quit (Ping timeout: 121 seconds)
Mar 29 21:00:44 *	slester has quit (Ping timeout: 121 seconds)
Mar 29 21:01:20 *	kzan has quit (Quit: Leaving)
Mar 29 21:01:31 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 21:01:35 *	cbrewster has quit (Connection closed)
Mar 29 21:01:37 *	ahal|afk has quit (A TLS packet with unexpected length was received.)
Mar 29 21:02:39 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 29 21:02:51 *	tomprogrammer has quit (Quit: WeeChat 1.4)
Mar 29 21:02:54 *	masonl has quit (Ping timeout: 121 seconds)
Mar 29 21:04:00 *	kfpratt has quit (A TLS packet with unexpected length was received.)
Mar 29 21:05:42 *	nixpulvi1 has quit (Quit: Lost terminal)
Mar 29 21:05:47 *	eibwen has quit (Ping timeout: 121 seconds)
Mar 29 21:05:47 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 29 21:06:02 *	infynyxx has quit (Connection closed)
Mar 29 21:06:36 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 29 21:06:58 <reem>	mbrubeck: needs HKT…
Mar 29 21:08:01 *	Jayflux has quit (Connection closed)
Mar 29 21:08:03 *	dhole (dhole@moz-q9bva0.dynamic.jazztel.es) has joined
Mar 29 21:08:04 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 29 21:08:12 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 21:08:53 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 29 21:09:08 *	jfo has quit (Connection closed)
Mar 29 21:09:31 *	mhcerri has quit (Connection closed)
Mar 29 21:10:03 *	Savago has quit (Client exited)
Mar 29 21:10:45 *	fl0w has quit (Client exited)
Mar 29 21:10:55 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 21:12:27 *	kfpratt (kfpratt@moz-peqs0n.ipv6.telus.net) has joined
Mar 29 21:12:27 *	eckhardt has quit (Connection closed)
Mar 29 21:12:34 <mbrubeck>	reem: yep. :(
Mar 29 21:12:41 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 29 21:12:57 *	NameNotFound is now known as zz_NameNotFound
Mar 29 21:13:14 *	blank_name2 (blank_name@moz-29ikj9.mi.frontiernet.net) has joined
Mar 29 21:13:24 *	tschottdorf (tschottdorf@moz-026.3db.128.88.IP) has joined
Mar 29 21:14:09 *	Kingsqueeee has quit (Quit: Konversation terminated!)
Mar 29 21:14:33 <mbrubeck>	I would happily go through the pain of a Rust 2.0 if it gives us HKT such that code can be generic over `&'a T` and `&'a mut T` and `CustomRef<'a, T>`, and upgrades all the standard APIs accordingly (no more separate `get` and `get_mut`?).
Mar 29 21:14:39 *	futile has quit (Quit: WeeChat 1.4)
Mar 29 21:14:40 <mbrubeck>	Not sure how that would interact with variance.
Mar 29 21:14:47 *	dardevelin has quit (Ping timeout: 121 seconds)
Mar 29 21:15:21 *	blank_name1 has quit (Ping timeout: 121 seconds)
Mar 29 21:16:16 *	will_sm (will-medran@moz-09s.dbi.142.75.IP) has joined
Mar 29 21:16:40 <Xion>	You mean being able to write something like   fn foo<R: Ref, T>(x: R<T>) -> R<T>   and invoke it for   foo(Rc::new(...)), foo(Box::new(...)), etc?
Mar 29 21:16:41 <rschifflin>	whats up will
Mar 29 21:16:51 *	cbrewster has quit (Quit: )
Mar 29 21:16:53 *	zz_NameNotFound is now known as NameNotFound
Mar 29 21:18:08 *	desophos has quit (Ping timeout: 121 seconds)
Mar 29 21:18:17 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 21:20:20 *	masonl (masonl@moz-cnt.haj.125.74.IP) has joined
Mar 29 21:21:16 *	peterjoel (peterjoel@moz-8gouil.range217-42.btcentralplus.com) has joined
Mar 29 21:21:20 *	bmaxa (bmaxa@moz-o4h.l47.72.109.IP) has joined
Mar 29 21:21:35 *	peterjoel has quit (Client exited)
Mar 29 21:21:44 *	kfpratt has quit (A TLS packet with unexpected length was received.)
Mar 29 21:23:01 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 21:23:41 *	rustyrazorblade has quit (Client exited)
Mar 29 21:24:10 *	nicholasf2 has quit (Ping timeout: 121 seconds)
Mar 29 21:25:25 <kirillkh>	is it possible to get a Vec of mutable references into another Vec? https://play.rust-lang.org/?gist=b1f19c582ae4a1078685ba5fb8cc5a83&version=stable
Mar 29 21:26:12 <mbrubeck>	Xion: yes, I think so.  I haven't thought about the solution much, just bumped into the problem repeatedly.  :)
Mar 29 21:26:18 <kirillkh>	I want to modify the first Vec through the second Vec and never modify the first one directly, so I figure it should be safe. but I can't see a way to express it
Mar 29 21:26:34 <mbrubeck>	kirillkh: You can use `split_at_mut()` to get mutable references into the same Vec
Mar 29 21:26:42 *	rschifflin has quit (Ping timeout: 121 seconds)
Mar 29 21:26:47 *	T60 (user@moz-gvb8qp.res.rr.com) has joined
Mar 29 21:26:57 <mbrubeck>	You'll need to call it repeatedly... let me see if I can make it work for your example.
Mar 29 21:27:09 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 29 21:27:12 <kmc>	playbot: let x = vec![1, 2, 3]; let y: Vec<_> = x.iter_mut().collect();
Mar 29 21:27:13 -playbot/#rust-	<anon>:9:48: 9:49 error: cannot borrow immutable local variable `x` as mutable
Mar 29 21:27:13 -playbot/#rust-	<anon>:9         let x = vec![1, 2, 3]; let y: Vec<_> = x.iter_mut().collect();
Mar 29 21:27:13 -playbot/#rust-	output truncated; full output at: http://bit.ly/22MEdyz
Mar 29 21:27:20 *	mneumann has quit (Client exited)
Mar 29 21:27:21 <kmc>	playbot: let mut x = vec![1, 2, 3]; let y: Vec<_> = x.iter_mut().collect();
Mar 29 21:27:23 -playbot/#rust-	()
Mar 29 21:27:31 <pingveno>	http://is.gd/xhnyWf
Mar 29 21:27:31 <mbrubeck>	oh right, that's the easy way
Mar 29 21:28:54 *	nicholasf has quit (Connection closed)
Mar 29 21:29:00 *	tschottdorf has quit (Client exited)
Mar 29 21:29:01 *	drew has quit (Ping timeout: 121 seconds)
Mar 29 21:29:30 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 29 21:29:45 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 29 21:30:28 *	masonl has quit (Ping timeout: 121 seconds)
Mar 29 21:31:01 <kirillkh>	thanks guys
Mar 29 21:33:02 <sinclair>	i don't really know how to work with references in rust
Mar 29 21:33:10 <sinclair>	which i did
Mar 29 21:33:12 <sinclair>	*wish
Mar 29 21:34:05 <sinclair>	if i have a struct, and i have some field of that struct with a &T, passing the struct a &T to hold onto is pretty much disallowed
Mar 29 21:34:17 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 29 21:34:40 *	vadix_ has quit (Ping timeout: 121 seconds)
Mar 29 21:35:23 <kirillkh>	sinclair, not sure I understand, better type out an example
Mar 29 21:38:19 <eddyb>	sinclair: a struct can very well hold a &T just like it can hold any other type
Mar 29 21:38:53 <sinclair>	eddyb: sure it can http://is.gd/Drv3Kt
Mar 29 21:38:57 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 21:38:58 *	bholley is now known as bholley_away
Mar 29 21:39:04 <sinclair>	kirillkh: 
Mar 29 21:39:11 <sinclair>	im sure there is some wrapping i can do here
Mar 29 21:39:26 <eddyb>	sinclair: like, read the error :D
Mar 29 21:39:32 <eddyb>	sinclair: 1 is shorter lived than foo
Mar 29 21:39:37 <sinclair>	i read the error
Mar 29 21:39:40 <sinclair>	i know the error
Mar 29 21:40:12 <eddyb>	sinclair: then you've seen the solution before, right? http://is.gd/0B1kL9
Mar 29 21:40:17 <sinclair>	eddyb: but, its a example where i want to create something, and ideally transfer ownership to the struct to hold onto (via reference)
Mar 29 21:40:25 <eddyb>	sinclair: oh, that's not a thing in Rust
Mar 29 21:40:37 <eddyb>	references specifically do not have ownership over the data they point to
Mar 29 21:40:38 <sinclair>	eddyb: i know
Mar 29 21:40:40 <aatch>	sinclair, "transfer ownership" and "via reference" are incompatible concepts
Mar 29 21:40:54 <eddyb>	the whole lifetime system is designed to make non-ownership safe
Mar 29 21:41:04 <sinclair>	eddyb: im just having trouble thinking outside the box
Mar 29 21:41:19 <eddyb>	sinclair: you just don't use references in these cases
Mar 29 21:41:20 <sinclair>	i don't know how to structure applications around not being able to do this
Mar 29 21:41:32 <sinclair>	eddyb: i could copy/clone instead
Mar 29 21:41:43 <sinclair>	rust seems to want to push me in that direction
Mar 29 21:41:49 <eddyb>	i.e. http://is.gd/9Fi8JQ
Mar 29 21:41:53 <aatch>	sinclair, what do you think references are? As in, what is your mental model of them?
Mar 29 21:42:16 <kaoD>	sinclair: you can copy/clone *and* move
Mar 29 21:42:27 *	CryZe has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 21:42:33 <kaoD>	moving is "transferring ownership"
Mar 29 21:42:36 <sinclair>	aatch: a reference to a thing allocated somewhere, i think my mental model of that a reference is is pretty on track with rust's interpretation of them
Mar 29 21:42:54 *	Altonymous has quit (Client exited)
Mar 29 21:42:55 *	will_sm has quit (Quit: Leaving)
Mar 29 21:43:00 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 21:43:10 <aatch>	sinclair, sure, but a thing allocated somewhere has to be freed somewhere too.
Mar 29 21:43:15 *	vadimcn has quit (Quit: Connection closed for inactivity)
Mar 29 21:43:29 <eddyb>	sinclair: references in Rust are pretty much modeled after the call stack, i.e. you can only point to something owned by a variable higher up on the stack
Mar 29 21:43:34 <kamalmarhubi>	is there a way to cause a #[test] test to be skipped?
Mar 29 21:43:39 <kamalmarhubi>	ie without commenting it out
Mar 29 21:43:47 <eddyb>	kamalmarhubi: in what conditions?
Mar 29 21:43:53 *	msingle (mts001@moz-n19sp8.fios.verizon.net) has joined
Mar 29 21:43:56 <eddyb>	kamalmarhubi: or just via the command line?
Mar 29 21:44:00 <sinclair>	eddyb: its not trivial tho, i have a more concrete example 
Mar 29 21:44:02 <eddyb>	I think there's a way to run only some tests
Mar 29 21:44:04 <sinclair>	1 tick
Mar 29 21:44:13 <eddyb>	I have this in my clipboard:
Mar 29 21:44:15 <eddyb>	sinclair: FWIW there is no general solution to ownership, it's all on a case-by-case basis
Mar 29 21:44:15 <Makoryu>	kamalmarhubi: With #[cfg] perhaps?
Mar 29 21:44:19 <kamalmarhubi>	eddyb: currently all
Mar 29 21:44:24 <kirillkh>	sinclair, if you want to transfer ownership, passing by reference will not work (only if you copy, but that't not transferral)
Mar 29 21:44:26 *	cpup has quit (Ping timeout: 121 seconds)
Mar 29 21:44:38 <eddyb>	kamalmarhubi: you can comment out the #[test], I guess?
Mar 29 21:44:43 <kamalmarhubi>	the test is broken under multiple threads, and I want to disable it until I fix the CI
Mar 29 21:44:59 *	dzbarsky (Adium@moz-8ldgnk.82pc.j76f.0646.2601.IP) has joined
Mar 29 21:45:45 *	cpup (cpup@moz-6od.jer.218.32.IP) has joined
Mar 29 21:45:56 <sinclair>	kirillkh: yes, i know
Mar 29 21:46:16 <sinclair>	eddyb: its hard to "think outside the box"
Mar 29 21:46:18 <kirillkh>	sinclair, I'm guessing you're used to some C++ objects that pretend to be references, but in fact own the content
Mar 29 21:46:32 *	detsak_ (detsak@moz-qhjdg0.dyn.optonline.net) has joined
Mar 29 21:46:44 <sinclair>	kirillkh: either references or pointers, i am familiar with both
Mar 29 21:46:46 <eddyb>	sinclair: it's pretty much a decision tree you learn from other people
Mar 29 21:46:48 <kirillkh>	sinclair, so remember those references are not real references
Mar 29 21:47:04 <sinclair>	eddyb: mmm
Mar 29 21:47:10 <eddyb>	there's no book on practical ownership models AFAIK :P
Mar 29 21:47:13 <kirillkh>	sinclair, in rust, the references are always just that, *real* references, they cannot own stuff
Mar 29 21:47:16 *	masonl (masonl@moz-cnt.haj.125.74.IP) has joined
Mar 29 21:47:17 <eddyb>	(and that would still be "learning from other people")
Mar 29 21:47:22 <eddyb>	kirillkh: the term is overloaded though
Mar 29 21:47:31 <sinclair>	eddyb: i keep trying to write various data structures, and keep running into similar problems
Mar 29 21:47:35 <eddyb>	references in Rust are references in Rust
Mar 29 21:47:46 <eddyb>	sinclair: what kind of data structures?
Mar 29 21:48:07 <kirillkh>	eddyb, I don't know, "reference" sounds pretty unambiguous to me, but let's not argue about words
Mar 29 21:48:13 <sinclair>	eddyb: atm, a user -> topic (which is a N -> N thing)
Mar 29 21:48:28 <sinclair>	eddyb: i have a concrete user, and a concrete topic (as structs)
Mar 29 21:48:40 <sinclair>	eddyb: between them, i want to link them via a pointer / reference
Mar 29 21:48:53 *	annodomini has quit (Client exited)
Mar 29 21:48:54 <sinclair>	so a left : &User and right: &Topic
Mar 29 21:49:02 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 29 21:49:03 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 29 21:49:05 <eddyb>	oh
Mar 29 21:49:10 <eddyb>	sinclair: this is where Rc comes in
Mar 29 21:49:14 <sinclair>	eddyb: that seems to suggest multiple references to the same thing
Mar 29 21:49:14 *	griff has quit (Client exited)
Mar 29 21:49:32 *	detsak has quit (Ping timeout: 121 seconds)
Mar 29 21:49:35 <eddyb>	sinclair: that is, if you want "shared ownership" you want Rc (or in a multi-threaded case, Arc)
Mar 29 21:49:52 <sinclair>	eddyb: yeah, i am very familiar with Arc
Mar 29 21:50:05 <eddyb>	right
Mar 29 21:50:38 <eddyb>	sinclair: you can also have, say, a vector of User and one of Topic and then create the map borrowing those vectors, but that brings two limitations
Mar 29 21:50:59 <eddyb>	you can't mutate the vectors or the elements (but you can have interior mutability in the elements)
Mar 29 21:51:00 *	REMqb has quit (Client exited)
Mar 29 21:51:05 <sinclair>	eddyb: that is effectively what i want
Mar 29 21:51:14 <eddyb>	aaaand you can't "allocate" new ones
Mar 29 21:51:30 <sinclair>	eddyb: its worth noting that both Topic and User can mutate
Mar 29 21:51:43 <eddyb>	sinclair: then you need interior mutability in them
Mar 29 21:51:51 <sinclair>	eddyb: but, they should mutate interior-ly
Mar 29 21:51:52 <sinclair>	yes
Mar 29 21:52:09 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 29 21:52:19 <eddyb>	do you need to create new User/Topic after you've started mapping them?
Mar 29 21:52:23 *	jxcl (jxcl@moz-0alsg0.co.comcast.net) has joined
Mar 29 21:53:05 <sinclair>	eddyb: of course
Mar 29 21:53:11 *	NameNotFound is now known as zz_NameNotFound
Mar 29 21:53:24 <sinclair>	eddyb: users / topics will be wrapped in a Vec<User>, Vec<Topic>
Mar 29 21:53:24 <eddyb>	sinclair: so you have approximately two options: arenas and Rc
Mar 29 21:53:35 <sinclair>	never heard of Arenas
Mar 29 21:54:00 *	brson has quit (Quit: leaving)
Mar 29 21:54:01 *	sinclair grabs his sword and shield
Mar 29 21:54:01 <eddyb>	so if you have a &'a TypedArena<T>, it can give you a &'a mut T
Mar 29 21:54:30 <eddyb>	and that's very useful, because you can keep allocating, even from a lower stack scope, as long as nothing in T is shorter than the arena
Mar 29 21:54:43 <sinclair>	ill have to read up about it
Mar 29 21:54:46 *	niconii has quit (Quit: brb)
Mar 29 21:54:47 <eddyb>	sinclair: the downside is that they only deallocate when dropping the arena itself, never earlier
Mar 29 21:54:49 *	SiegeLord has quit (Quit: It's a joke, it's all a joke.)
Mar 29 21:55:11 *	rovar has quit (Quit: Leaving)
Mar 29 21:55:17 <sinclair>	eddyb: mmm, alright
Mar 29 21:55:34 <eddyb>	sinclair: otherwise, you can just use Rc
Mar 29 21:55:42 <eddyb>	sinclair: oh and there's the best option :P
Mar 29 21:55:52 <sinclair>	eddyb: might just with Rc i guess
Mar 29 21:55:55 <eddyb>	but it requires a significantly different design
Mar 29 21:56:02 <eddyb>	sinclair: you can use integer indices
Mar 29 21:56:03 <sinclair>	im open to hearing about it
Mar 29 21:56:13 *	nagisa_ has quit (Ping timeout: 121 seconds)
Mar 29 21:56:20 <sinclair>	oh, that sounds reasonable
Mar 29 21:56:24 <eddyb>	struct UserId(usize); struct TopicId(usize); and them the map uses UserId and TopicId
Mar 29 21:56:43 *	niconii (USER@moz-qnllue.jhek.me72.48f8.2001.IP) has joined
Mar 29 21:56:44 *	ChanServ sets mode +a on #rust niconii
Mar 29 21:56:44 *	ChanServ gives channel operator status to niconii
Mar 29 21:56:54 *	indefini (indefini@moz-4p4v25.ucom.ne.jp) has joined
Mar 29 21:57:03 <sinclair>	eddyb: i suppose i could just use a HashMap
Mar 29 21:57:09 <sinclair>	then link with key -> key
Mar 29 21:57:11 *	MuffinPimp has quit (A TLS packet with unexpected length was received.)
Mar 29 21:57:35 <eddyb>	this gives you the linearity of the vectors, and it can scale better than pointers, especially if you can, e.g. reduce the index to u32 or u16, but it does require keeping the vectors around for any operation
Mar 29 21:58:11 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 29 21:58:20 *	niconii has quit (Quit: WeeChat 1.4)
Mar 29 21:58:21 *	niconii (nicole@moz-qnllue.jhek.me72.48f8.2001.IP) has joined
Mar 29 21:58:21 *	ChanServ sets mode +a on #rust niconii
Mar 29 21:58:21 *	ChanServ gives channel operator status to niconii
Mar 29 21:58:25 <sinclair>	mmm, i guess i kinda like that approach, eddyb it certainly steers away from using references
Mar 29 21:58:42 <sinclair>	ill give that a try eddyb 
Mar 29 21:59:15 <eddyb>	I'd definitely use it for dealing with large quantities of objects and/or stuff you might want to save to/load from disk
Mar 29 21:59:35 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 29 21:59:36 *	zz_NameNotFound is now known as NameNotFound
Mar 29 21:59:37 *	vadix_ (vadix@moz-ogk666.li8q.e9lr.b400.2607.IP) has joined
Mar 29 21:59:41 <sinclair>	eddyb: was just after a very efficient in memory data structure 
Mar 29 21:59:46 *	jnicklas has quit (Client exited)
Mar 29 21:59:48 *	dhole_ (dhole@moz-kar7ho.dynamic.jazztel.es) has joined
Mar 29 21:59:52 <kirillkh>	well, it seems to me that using indices means giving up the safety guarantees. now the compiler won't prevent you from using the wrong index (error at runtime)
Mar 29 22:00:06 <kirillkh>	data races, etc
Mar 29 22:00:11 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 29 22:00:17 <eddyb>	kirillkh: you can't get data races
Mar 29 22:00:23 <sinclair>	eddyb: the downside as far as i can see in learning of all the users in a topic, is that it involves a linear scan
Mar 29 22:00:24 <eddyb>	not without using an atomic yourself
Mar 29 22:00:38 <kirillkh>	eddyb, I'm not talking about multithreaded right now
Mar 29 22:00:39 *	badon has quit (Connection closed)
Mar 29 22:00:45 <sinclair>	eddyb: also, the inverse, learning all the topics a user belongs to also requires a linear scan
Mar 29 22:00:54 <eddyb>	sinclair: it can't have a non-constant slowdown compared to references though
Mar 29 22:01:14 <sinclair>	eddyb: a friend of mind suggested a two way hash
Mar 29 22:01:17 <sinclair>	something like...
Mar 29 22:01:19 <kirillkh>	eddyb, just about some piece of code assigning X else to the index whereas you expect Y to be there
Mar 29 22:01:30 <eddyb>	kirillkh: but that's what a data race is defined as. you need at least 2 threads accessing the same memory and at least one of them is writing
Mar 29 22:01:38 <sinclair>	left : HashMap<T, Vec<V>> and right HashMap<V, Vec<T>>
Mar 29 22:01:56 <eddyb>	kirillkh: that's just a logic error
Mar 29 22:02:04 *	dhole has quit (Ping timeout: 121 seconds)
Mar 29 22:02:07 <sinclair>	eddyb: with the intent that, if looking for one side verses the other, i could scan either left or right, reducing the number of things to scan
Mar 29 22:02:36 <sinclair>	eddyb: the downside tho, is that both left and right need to hold onto a copy of the data, and maintaining two hashmaps is really awkward
Mar 29 22:02:40 <eddyb>	sinclair: are you saying that's a difference between reference indices?
Mar 29 22:02:50 <eddyb>	*and indices
Mar 29 22:02:58 *	sully (sully@moz-qhc979.emarhavil.com) has joined
Mar 29 22:03:21 *	badon_ is now known as badon
Mar 29 22:03:29 <sinclair>	eddyb: yeah, if you need to ask the question (what users exist in this topic) and the inverse (what topics does this user belong), the above two hashmap approach makes some sense
Mar 29 22:03:33 *	Powersource has quit (Quit: Leaving)
Mar 29 22:03:45 <sinclair>	eddyb: i have been wondering about a generalized solution to this
Mar 29 22:03:55 *	albel727 has quit (Ping timeout: 121 seconds)
Mar 29 22:03:55 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 29 22:04:06 <sinclair>	eddyb: whatever the case, its a N:N relationship between entities
Mar 29 22:04:06 <eddyb>	sinclair: I'm still not clear if you're saying that one of the approaches is algorithmically inferior
Mar 29 22:04:09 <sinclair>	i think its common
Mar 29 22:04:14 <aatch>	sinclair, sounds like a job for a relational database.
Mar 29 22:04:26 <eddyb>	aatch: and how do those work, magic? :P
Mar 29 22:04:40 <aatch>	eddyb, obviously.
Mar 29 22:04:42 <sinclair>	aatch: ideally, I am not looking for farm this out to a rdbms, but yes, same notion
Mar 29 22:04:46 <eddyb>	(more accurately, BTreeMap is probably closer than ha- )
Mar 29 22:04:47 *	peschkaj has quit (Connection closed)
Mar 29 22:04:48 <eddyb>	sinclair: wait
Mar 29 22:04:53 <eddyb>	sinclair: you don't need a HashMap!
Mar 29 22:05:03 <eddyb>	sinclair: you have a Vec<User>
Mar 29 22:05:12 <eddyb>	sinclair: each user can have a Vec<TopicId>
Mar 29 22:05:24 <eddyb>	conversely, Vec<Topic> with each Topic having a Vec<UserId>
Mar 29 22:05:31 *	Altonymous (Altonymous@moz-q2m3mb.dhcp.embarqhsd.net) has joined
Mar 29 22:05:34 <eddyb>	sinclair: this is much better than the HashMaps
Mar 29 22:06:02 <eddyb>	assuming you can figure the logic for handling insertion/removal of nodes/edges :P
Mar 29 22:06:04 <sinclair>	eddyb: yes, thought about this too, but it makes some operations a bit more difficult
Mar 29 22:06:09 <eddyb>	sinclair: how so?
Mar 29 22:07:06 <sinclair>	eddyb: you just said, handling insertion and removal of nodes
Mar 29 22:07:26 <aatch>	sinclair, maybe look at how this kind of thing is done, in general, in a database?
Mar 29 22:07:26 <sinclair>	eddyb: its not a bad idea tho
Mar 29 22:08:07 *	Altonymous_ (Altonymous@moz-q9a.s9e.95.209.IP) has joined
Mar 29 22:08:25 <sinclair>	aatch: databases mandate keys/ids, i suppose i am more interested in how to achieve the same result without the need for keys at all
Mar 29 22:09:18 <sinclair>	aatch: in eddyb 's suggestion, he suggests holding onto ids, i wonder if the same is possible without ids (which would generalize the data structure, and not mandate keys for items)
Mar 29 22:09:33 *	Altonymous has quit (Ping timeout: 121 seconds)
Mar 29 22:09:33 *	Altonymous_ is now known as Altonymous
Mar 29 22:09:59 <eddyb>	sinclair: you can do this with Rc's, I guess? but you'd quickly run into cycles
Mar 29 22:10:10 <sinclair>	eddyb: perhaps instead of a Vec<TopicID> i keep a Vec<Rc<Topic>> instead?
Mar 29 22:10:30 <eddyb>	that's what using Rc's would imply, yes
Mar 29 22:10:42 *	Kilobyte_ (stephan@moz-t9m33e.dip0.t-ipconnect.de) has joined
Mar 29 22:10:44 <sinclair>	sorry, missed your previous statement
Mar 29 22:10:59 <eddyb>	can also do it with arenas, both Rc<Node> and &Node would need RefCell<Vec<...>> anyway
Mar 29 22:11:21 <sinclair>	eddyb: there is another way to look at this
Mar 29 22:11:26 <kirillkh>	eddyb, pretty sure I saw "data races" used in the sense I put in it, but I guess it was incorrect usage of the term. anyway, what I meant is that rust prevents you from having both read- and write-references to an object, but when you use manual indexing instead, you don't get the same safety
Mar 29 22:11:35 <sinclair>	eddyb: adjacency matrix !!
Mar 29 22:11:59 <eddyb>	sinclair: oh right
Mar 29 22:12:00 *	eddyb facepalms
Mar 29 22:12:10 <aatch>	sinclair, still needs ids to some extent.
Mar 29 22:12:12 <sinclair>	eddyb: bit memory heavy, but it works
Mar 29 22:12:31 <eddyb>	sinclair: you want effectively a set, not a list
Mar 29 22:12:44 <eddyb>	sinclair: it's not memory heavy if you use sparse bitsets :P
Mar 29 22:12:50 *	plutoniix (q@moz-uem.puq.249.43.IP) has joined
Mar 29 22:13:05 <mbrubeck>	kirillkh: I'm not sure what you mean... you need a unique reference to the array in order to mutably index into it.
Mar 29 22:13:06 <sinclair>	https://en.wikipedia.org/wiki/Adjacency_matrix
Mar 29 22:13:08 *	slester has quit (A TLS packet with unexpected length was received.)
Mar 29 22:13:26 <eddyb>	yeah I know what it is, it was hammered into my cortex in highschool, heh
Mar 29 22:13:31 *	Kilobyte has quit (Ping timeout: 121 seconds)
Mar 29 22:13:36 <mbrubeck>	So you know if you are reading from an index that no one else can be writing to that index
Mar 29 22:13:37 <eddyb>	I wasn't thinking of it when you said N:N
Mar 29 22:13:41 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 22:13:57 <sinclair>	eddyb: its always the last thing i think of when i do this kinda thing
Mar 29 22:13:58 <mbrubeck>	(or to any other slot that you have read access to)
Mar 29 22:14:14 *	sbw (Thunderbird@moz-gkj.r2e.173.59.IP) has joined
Mar 29 22:15:09 <kirillkh>	mbrubeck, well, you have a unique mut reference to the array, the thing is you can do stuff like add an object to vec X, write its index to vec Y, then remove the object from X, then attempt to read the object by the index you stored in Y... runtime error
Mar 29 22:15:21 <kirillkh>	(index out of bounds or, worse, you get the wrong object)
Mar 29 22:16:15 <kirillkh>	indexing is basically the same thing as referencing
Mar 29 22:16:21 *	avikpal (avikpal@moz-mek.mf2.194.117.IP) has joined
Mar 29 22:16:34 <kirillkh>	just with referencing you get compile-time safety
Mar 29 22:17:39 *	NameNotFound is now known as zz_NameNotFound
Mar 29 22:19:41 *	canova has quit (Quit: Leaving)
Mar 29 22:21:43 *	santiago has quit (Quit: Computer has gone to sleep.)
Mar 29 22:21:56 *	avikpal has quit (Ping timeout: 121 seconds)
Mar 29 22:22:50 *	qbg has quit (Quit: Konversation terminated!)
Mar 29 22:22:57 *	tycoon177 (tycoon177@moz-ib495f.client.mchsi.com) has joined
Mar 29 22:23:25 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 29 22:24:05 *	rustyrazorblade (rustyrazorb@moz-koi.pgo.39.156.IP) has joined
Mar 29 22:24:15 *	zz_NameNotFound is now known as NameNotFound
Mar 29 22:26:48 *	sp3d (s@moz-128.cdh.63.159.IP) has joined
Mar 29 22:26:55 *	jimb has quit (Ping timeout: 121 seconds)
Mar 29 22:27:33 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 22:28:50 *	tripped (trip@moz-i4845h.cable.mindspring.com) has joined
Mar 29 22:29:50 *	pcwalton has quit (Client exited)
Mar 29 22:30:37 *	rustyrazorblade has quit (Client exited)
Mar 29 22:30:54 *	dagnir has quit (Quit: Leaving)
Mar 29 22:31:13 <sp3d>	is there something lighter-weight than Arc<Mutex<T>> if T is, say, a simple 3-variant C-like enum?
Mar 29 22:31:45 *	JanC_ has quit (Ping timeout: 121 seconds)
Mar 29 22:31:49 <edunham>	l/win 31
Mar 29 22:32:06 *	tycoon177 has quit (Connection closed)
Mar 29 22:34:06 <bluss_>	sp3d: sounds like you could use an atomic integer, but there's no way to have it as an enum then
Mar 29 22:34:11 <Mutabah>	sp3d: Do you want multithread?
Mar 29 22:34:20 <Mutabah>	bluss_: Well, not stable way :)
Mar 29 22:34:31 <aatch>	sp3d, a wrapper around an AtomicUsize is probably the best bet.
Mar 29 22:34:57 <sp3d>	Mutabah: yes ;)
Mar 29 22:35:16 *	markstory (textual@moz-tb3ghu.cable.rogers.com) has joined
Mar 29 22:35:17 <sp3d>	how significant is the performance difference?
Mar 29 22:36:04 <aatch>	sp3d, compared to a mutex? probably noticable. How significant depends on how much contention there is for the mutex.
Mar 29 22:36:32 <sp3d>	there's only two threads which will both be reading/writing... at *mostly* disjoint times
Mar 29 22:36:34 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 29 22:36:58 <Mutabah>	Well, mutexes are pretty heavy, even with futex
Mar 29 22:36:58 *	kkus has quit (Connection closed)
Mar 29 22:37:00 *	Fishrock123 has quit (Quit: Leaving...)
Mar 29 22:37:18 <sp3d>	I'll have potentially tens-hundreds of thousands of these
Mar 29 22:37:27 <sp3d>	so I guess I'll go with atomics
Mar 29 22:37:33 *	saml_ (saml@moz-rkfmct.res.rr.com) has joined
Mar 29 22:37:54 <sp3d>	theoretically all this work could be done in one thread because the CPU load should be trivial
Mar 29 22:37:58 <aatch>	Yeah, an atomic integer is going to be faster no matter what, it's just a matter of whether its 10x or 1000x (I have no idea of the real differences, just giving an example)
Mar 29 22:38:07 <sp3d>	the main work of the program is disk and network syscalls
Mar 29 22:38:13 <sp3d>	and lots of both
Mar 29 22:38:48 <sp3d>	thanks for the info!
Mar 29 22:39:05 <aatch>	Well multiple threads can improve I/O performance if you are working with multiple, uh, I/O things.
Mar 29 22:39:06 <Yurume>	iiuc Mutex may involve the task switching (since the current thread has to put to stasis if the lock is going to be held longer) and it can be quite costly
Mar 29 22:39:16 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 29 22:39:20 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 29 22:39:49 <Yurume>	but if you are blocking for very small time or for very long time it might be less significant
Mar 29 22:39:54 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 22:41:20 *	RegulationD (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 29 22:41:57 <sp3d>	aatch: multiple threads should only improve IO performance if your IO is synchronous
Mar 29 22:42:06 <sp3d>	in the case of disk, it obviously is
Mar 29 22:42:43 *	kazagistar has quit (Quit: Leaving.)
Mar 29 22:42:44 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 22:43:08 <aatch>	sp3d, true. Async IO is generally better if you're working only with something like sockets.
Mar 29 22:43:24 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 29 22:43:45 <sp3d>	the universe would be so much better of a place if Linux had real async IO for disks
Mar 29 22:43:51 <sp3d>	or, really, for filesystems
Mar 29 22:43:57 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 22:44:04 <sp3d>	since raw disks are what the Linux AIO stuff actually applies to
Mar 29 22:44:04 *	will_sm (will-medran@moz-09s.dbi.142.75.IP) has joined
Mar 29 22:44:38 *	JanC_ (janc@moz-t5orpn.dsl.scarlet.be) has joined
Mar 29 22:44:51 *	partycoder (partycoder@moz-3mm.4lh.87.199.IP) has joined
Mar 29 22:45:22 *	RegulationD has quit (Ping timeout: 121 seconds)
Mar 29 22:45:30 *	fyolnish has quit (Quit: Bye)
Mar 29 22:45:44 *	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined
Mar 29 22:51:40 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 29 22:52:37 *	msingle has quit (Ping timeout: 121 seconds)
Mar 29 22:55:13 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 29 22:56:10 *	steffengy has quit (Ping timeout: 121 seconds)
Mar 29 22:56:26 *	mhcerri has quit (Connection closed)
Mar 29 22:56:42 *	steffengy (quassel@moz-u1r0rv.dip0.t-ipconnect.de) has joined
Mar 29 22:57:09 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 22:57:51 *	NameNotFound is now known as zz_NameNotFound
Mar 29 22:58:13 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 29 22:59:27 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 22:59:46 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 23:00:09 *	luc has quit (Ping timeout: 121 seconds)
Mar 29 23:00:13 <kirillkh>	can someone please explain what's the problem here? https://play.rust-lang.org/?gist=6f69c58b4bb335a94ebad9673fbba9b9&version=stable
Mar 29 23:01:59 <Mutabah>	kirillkh: You're trying to get a &mut (a unique/unmovable value) out of a shared borrow
Mar 29 23:01:59 <bluss_>	kirillkh: .iter() iterates by _shared_ reference
Mar 29 23:01:59 *	Altazimuth has quit (Ping timeout: 121 seconds)
Mar 29 23:02:30 <kirillkh>	"shared borrow"?
Mar 29 23:02:32 <durka42>	&mut T cannot be copied
Mar 29 23:02:33 <bluss_>	can't get something mutable out of &&mut X, since it's a shared reference on the outside
Mar 29 23:02:36 <Mutabah>	kirillkh: The reason it's saying a lifetime error is because 1. you're assigning to a lifetimed type, and 2. it's doing "reborrowing" (which is a feaure to make &mut-s a little easer to work with)
Mar 29 23:02:53 *	julienXX_ (julienXX@moz-vrdhjo.abo.wanadoo.fr) has joined
Mar 29 23:03:23 *	julienXX has quit (Ping timeout: 121 seconds)
Mar 29 23:03:31 <kirillkh>	"shared reference" = mutable reference?
Mar 29 23:03:37 <durka42>	no, shared = immutable
Mar 29 23:03:50 *	shackra (shackrasisl@moz-lo1.ph4.237.201.IP) has joined
Mar 29 23:03:51 <durka42>	&&mut i32 is an immutable reference to a mutable reference to an i32
Mar 29 23:04:00 *	_Vi has quit (Ping timeout: 121 seconds)
Mar 29 23:04:10 <aatch>	Mutabah, reborrowing makes using &mut easier... until it doesn't and makes things much harder...
Mar 29 23:04:19 <Mutabah>	:)
Mar 29 23:04:29 <kirillkh>	okay. so &(&mut i32) is a immutable reference. and I want to get what's inside...
Mar 29 23:04:50 <aatch>	Mutabah, it's a bit of a double-edged sword. I think that it's worth it though.
Mar 29 23:04:52 <durka42>	you want the i32?
Mar 29 23:04:56 <Mutabah>	aatch: Same
Mar 29 23:05:00 <kirillkh>	nope, I want the mutable reference
Mar 29 23:05:08 <aatch>	kirillkh, well you can't.
Mar 29 23:05:22 <durka42>	but what do you want to do with it? you can't use it to modify, because the outer reference is shared
Mar 29 23:05:31 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 29 23:05:46 <durka42>	&Vec<&mut i32> is rather useless
Mar 29 23:05:56 <Mutabah>	kirillkh: The only way to do what you're trying to do here is to accept Vec<&mut i32>
Mar 29 23:05:59 <kirillkh>	I want to throw the outer reference away, destroy it, just take the &mut i32 from inside and copy it to vec
Mar 29 23:05:59 *	KindOne_ (KindOne@moz-qdcvbk.ip.windstream.net) has joined
Mar 29 23:06:13 <durka42>	yeah take the Vec by value then
Mar 29 23:06:25 *	KindOne has quit (Ping timeout: 121 seconds)
Mar 29 23:06:25 *	KindOne_ is now known as KindOne
Mar 29 23:06:32 <durka42>	since you take it by reference here, rust knows there could be someone else with a reference to the same Vec, so it won't let you destroy or modify things
Mar 29 23:06:35 <Mutabah>	https://play.rust-lang.org/?gist=de1efdbfe7b382f8a4bc9a3366238efe&version=stable
Mar 29 23:06:51 *	Ketsuban has quit (Quit: Leaving)
Mar 29 23:06:53 <kirillkh>	ahh, okay
Mar 29 23:06:59 <kirillkh>	at least it makes sense now
Mar 29 23:06:59 *	anastiel (anastiel@moz-k9v.b8f.23.191.IP) has joined
Mar 29 23:07:34 *	bholley_away is now known as bholley
Mar 29 23:08:07 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 29 23:08:40 *	bluss_ has quit (Ping timeout: 121 seconds)
Mar 29 23:10:34 *	kimundi (kimundi@moz-kpiu20.dip0.t-ipconnect.de) has joined
Mar 29 23:10:56 *	nullvoid has quit (Quit: leaving)
Mar 29 23:11:20 *	_Vi (vi@moz-8kcf4a.3gli.01oh.0470.2001.IP) has joined
Mar 29 23:12:44 *	carols10cents (carolnichol@moz-1kh55q.fios.verizon.net) has joined
Mar 29 23:13:21 *	zz_NameNotFound is now known as NameNotFound
Mar 29 23:15:15 <Mutabah>	Sad thing about my command line parser code - Getting &mut str is hard
Mar 29 23:16:24 *	dfockler has quit (Ping timeout: 121 seconds)
Mar 29 23:17:17 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 23:17:46 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 23:19:33 *	_256Q (tastytentac@moz-b4behd.range86-130.btcentralplus.com) has joined
Mar 29 23:22:32 <Mutabah>	Actually, String now has a deref_mut, that's nice
Mar 29 23:22:48 <kirillkh>	Mutabah, durka42 aatch actually, can it work if I pass &mut Vec?
Mar 29 23:23:11 <aatch>	kirillkh, only if you use `drain`
Mar 29 23:23:46 <durka42>	aatch: not iter_mut?
Mar 29 23:24:17 <aatch>	durka42, still can't move out of a &mut
Mar 29 23:24:29 <durka42>	true
Mar 29 23:24:35 <durka42>	it would allow modifying the i32 though
Mar 29 23:24:39 <durka42>	still not sure what this function is supposed to do :p
Mar 29 23:24:47 <aatch>	durka42, so at best you could re-borrow your way to a &mut i32, but it wouldn't be able to outlive the function.
Mar 29 23:24:55 <durka42>	right
Mar 29 23:25:00 <kirillkh>	durka42, filter the vec mutable references according to a criterion
Mar 29 23:25:05 <kirillkh>	*vec of
Mar 29 23:25:14 *	carols10cents has quit (Quit: leaving)
Mar 29 23:25:27 <aatch>	kirillkh, are you aware of `retain`?
Mar 29 23:25:32 <durka42>	then listen to aatch :)
Mar 29 23:25:41 *	FreeBird (FreeBird@moz-n85d46.9t5k.kgbt.120b.2a02.IP) has joined
Mar 29 23:25:44 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 29 23:25:56 <kirillkh>	aatch, was not
Mar 29 23:26:22 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 29 23:26:41 <aatch>	kirillkh, basically though, you can't have multiple `&mut T`s pointing to the same place, at the same time. Rust is simply trying to enforce that.
Mar 29 23:27:07 *	khades1 has quit (Ping timeout: 121 seconds)
Mar 29 23:27:50 <kirillkh>	aatch, I understand that in principle, just it's hard for me to see it applying here because there are multiple layers on the way
Mar 29 23:28:01 *	khades has quit (Ping timeout: 121 seconds)
Mar 29 23:28:10 *	detsak_ has quit (Quit: Leaving)
Mar 29 23:28:50 *	durka42 has quit (Client exited)
Mar 29 23:28:51 *	mada has quit (Ping timeout: 121 seconds)
Mar 29 23:28:51 <comex>	oh great, these 25000 lines of generated code now take over a minute to type check
Mar 29 23:29:06 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 29 23:29:44 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 29 23:30:11 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 29 23:30:30 *	desophos has quit (Ping timeout: 121 seconds)
Mar 29 23:30:50 *	carols10cents (carols10cen@moz-1kh55q.fios.verizon.net) has joined
Mar 29 23:30:58 *	khades (Thunderbird@moz-opi.h6q.74.212.IP) has joined
Mar 29 23:31:48 <comex>	spending all its time in ObligationForest and InferCtxt::shallow_resolve
Mar 29 23:31:52 <kirillkh>	aatch, retain did the trick, thanks
Mar 29 23:32:26 *	luc has quit (Ping timeout: 121 seconds)
Mar 29 23:32:47 <kirillkh>	but it's a little problematic to remember all those little gems in the libraries though :(
Mar 29 23:33:31 *	carols10cents has quit (Quit: leaving)
Mar 29 23:33:34 *	carols10cents (carols10cen@moz-1kh55q.fios.verizon.net) has joined
Mar 29 23:33:39 <comex>	http://a.qoid.us/debug-dis-thumb2.txt
Mar 29 23:34:11 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 29 23:34:14 *	lucian has quit (Ping timeout: 121 seconds)
Mar 29 23:34:54 *	mhcerri has quit (Connection closed)
Mar 29 23:35:03 *	khades_ (khades@moz-opi.h6q.74.212.IP) has joined
Mar 29 23:35:05 *	carols10cents has quit (Quit: leaving)
Mar 29 23:35:12 <comex>	that's the code... any idea how i can get rustc to compile it faster? will it help to make it non-generic?
Mar 29 23:35:35 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 23:35:36 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 29 23:36:23 <aatch>	comex, making it non-generic probably won't help much, but you could try use suffixes on the integer literals.
Mar 29 23:36:44 <comex>	hmm, okay
Mar 29 23:37:01 <aatch>	comex, since it has to infer the appropriate integer type for each one.
Mar 29 23:37:36 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 23:37:57 <aatch>	comex, which isn't hard, it just has to do it ~100,000 times.
Mar 29 23:38:16 *	anjumkaiser has quit (Quit: Leaving.)
Mar 29 23:38:42 *	eckhardt has quit (Connection closed)
Mar 29 23:39:08 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 29 23:39:34 *	ptc (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 29 23:39:43 *	p (r00t@moz-ht65gk.austtx.sbcglobal.net) has joined
Mar 29 23:39:54 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 29 23:40:48 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 29 23:41:15 <archshift>	comex: decoding ARM's a bitch isn't it :P
Mar 29 23:41:45 *	p_ has quit (Ping timeout: 121 seconds)
Mar 29 23:42:01 *	housl has quit (Quit: WeeChat 1.4)
Mar 29 23:42:21 <aatch>	comex, though splitting the generic and non-generic parts isn't a bad idea anyway.
Mar 29 23:42:46 <comex>	archshift: that's why i wrote code to do it for me :p
Mar 29 23:43:10 *	eckhardt has quit (Ping timeout: 121 seconds)
Mar 29 23:43:29 *	Kilobyte_ has quit (Quit: WeeChat 1.4)
Mar 29 23:43:33 <aatch>	comex, if you can split it so the actual decoding is done in a non-generic function and returns the stuff you need to pass to the callback, that'll get you the best of both worlds.
Mar 29 23:43:43 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 29 23:43:48 <aatch>	comex, otherwise all the code will be replicated for each closure used.
Mar 29 23:43:57 <jwilm>	Manishearth: ping
Mar 29 23:43:58 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 29 23:44:07 <comex>	for this one i don't need it to be too fast so i can just use a trait object
Mar 29 23:44:13 <archshift>	comex: oh, that explains a lot of the redundancy there
Mar 29 23:44:17 <aatch>	comex, that works too.
Mar 29 23:44:19 <archshift>	did you parse the ARM ARM or something?
Mar 29 23:44:40 <comex>	archshift: LLVM .td files
Mar 29 23:44:51 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 29 23:44:55 *	Pierre_M (Pierre@moz-0k5bh2.slkc.qwest.net) has joined
Mar 29 23:45:05 <archshift>	o i c
Mar 29 23:45:35 <archshift>	lotsa possible ways to approach decoding ARM
Mar 29 23:45:43 *	dzbarsky (Adium@moz-ddcnhs.82pc.j76f.0646.2601.IP) has joined
Mar 29 23:45:52 <comex>	by the way, i did a thinko, the minute i mentioned is split across three files like that (arm, thumb, thumb2)
Mar 29 23:46:04 *	jimb (user@moz-6gkikn.or.comcast.net) has joined
Mar 29 23:46:55 <maurer>	Is there a way to do conditional compilation of an annotation?
Mar 29 23:47:11 <aatch>	maurer, `cfg_attr`
Mar 29 23:47:12 <archshift>	comex: the nicest decoder I've seen is this: https://github.com/MerryMage/citra/blob/jit2/src/core/arm/decoder/arm.cpp
Mar 29 23:47:26 <maurer>	Specifically, I want to do something like #[cfg(feature = "json")] on a #[deriving(RustcEncodable,RustcDecodable)]
Mar 29 23:47:30 <maurer>	aatch: ^
Mar 29 23:47:39 <comex>	ha, that's so cute
Mar 29 23:47:44 <maurer>	If I just do it blindly, the cfg will remove the type itself
Mar 29 23:47:54 <aatch>	maurer, `#[cfg_attr(feature="json", deriving(...))]`
Mar 29 23:47:58 <maurer>	Ah, OK
Mar 29 23:48:09 <comex>	anyway, now it takes only 33 seconds (aatch: thanks)
Mar 29 23:48:15 *	luc has quit (Ping timeout: 121 seconds)
Mar 29 23:48:59 *	NameNotFound is now known as zz_NameNotFound
Mar 29 23:49:13 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 23:49:16 <comex>	which is still like 10 times as much as a C compiler... maybe i should just have this part in C
Mar 29 23:49:28 *	monti (monti@moz-aidh09.broadband.corbina.ru) has joined
Mar 29 23:49:38 *	jfredett1 has quit (Connection closed)
Mar 29 23:49:44 *	jfredett (Adium@moz-qu294j.fios.verizon.net) has joined
Mar 29 23:49:46 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 29 23:49:49 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 23:50:05 <comex>	would be nice if i could more easily include LLVM IR in a crate so i could mix languages and still inline
Mar 29 23:51:38 *	jethrogb has quit (Ping timeout: 121 seconds)
Mar 29 23:51:43 *	jethrogb (jethrob@moz-p2iedd.scintilla.utwente.nl) has joined
Mar 29 23:52:07 *	anastiel has quit (Ping timeout: 121 seconds)
Mar 29 23:53:43 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 29 23:53:48 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 29 23:53:58 <comex>	archshift: in theory my approach is faster since i do some basic search for the most effective bit test order, but it might not be at all :)
Mar 29 23:54:13 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 29 23:54:56 *	gmorenz (normal@moz-os4.l2b.52.70.IP) has joined
Mar 29 23:56:04 *	mafrasi2 (quassel@moz-5gicl2.a0he.1gqb.04f8.2a01.IP) has joined
Mar 29 23:56:11 <archshift>	obviously you need to use 413 coroutines to divide and conquer the search :P
Mar 29 23:57:24 <mafrasi2>	is there a way to initialize a VecDeque with a single value?
Mar 29 23:58:14 *	partycoder has quit (Quit: zzz)
Mar 29 23:58:29 <Quxxy>	!collect-mac
Mar 29 23:58:32 <Quxxy>	Oops
Mar 29 23:58:34 <Quxxy>	!crate collect-mac
Mar 29 23:58:34 <rustbot>	collect-mac (0.1.0) - This crate provides the `collect!` macro, which can be used to easily construct arbitrary collections, including `Vec`, `String`, and `HashMap`.  It also endeavours to construct the collection with a single allocation, where possible. -> https://crates.io/crates/collect-mac
Mar 29 23:59:05 <mafrasi2>	thx, I will have a look at it
Mar 29 23:59:15 <aatch>	mafrasi2, otherwise, `let mut q = VecDequeue::new(); q.push(element);` works too.
Mar 29 23:59:28 *	ansible1 (kvirc@moz-top.s6n.185.66.IP) has joined
Mar 29 23:59:44 *	Quxxy resists the urge to golf
Mar 29 23:59:46 <archshift>	mafrasi2: https://doc.rust-lang.org/std/ptr/fn.write_bytes.html
Mar 29 23:59:51 *	kimundi- (kimundi@moz-7rgigm.480r.qpnh.4fe2.2002.IP) has joined
Mar 30 00:00:09 *	acmcarther has quit (Quit: Lost terminal)
Mar 30 00:00:25 *	bholley is now known as bholley_away
Mar 30 00:00:29 <archshift>	hm, single value is ambiguous :P
Mar 30 00:01:05 <mafrasi2>	It should contain exactly one element afterwards :D
Mar 30 00:01:17 *	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined
Mar 30 00:02:23 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 30 00:02:27 <mafrasi2>	aatch, ty, that seems more reasonable for that one time I need it
Mar 30 00:02:34 *	Kingsqueeee (kingsley@moz-pa1fj1.bchsia.telus.net) has joined
Mar 30 00:02:35 *	plutoniix has quit (Quit: จรลี จรลา)
Mar 30 00:02:37 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 30 00:02:37 *	kimundi- is now known as kimundi
Mar 30 00:02:47 *	urcra has quit (Connection closed)
Mar 30 00:03:15 *	larhat has quit (Ping timeout: 121 seconds)
Mar 30 00:03:28 *	marc has quit (Quit: WeeChat 1.4)
Mar 30 00:03:43 *	marc (marc@moz-pijsvi.wa.frontiernet.net) has joined
Mar 30 00:03:46 <archshift>	mafrasi2: if you want to avoid an extra allocation you can use VecDeque::with_capacity(1) instead of VecDeque::new()
Mar 30 00:03:52 *	Kingsqueeee has quit (Quit: Konversation terminated!)
Mar 30 00:04:22 *	zz_NameNotFound is now known as NameNotFound
Mar 30 00:04:27 <archshift>	at least I think...I'm not sure whether new() has a default capacity >0
Mar 30 00:04:59 *	waguan (waguan@moz-lb7.du9.34.174.IP) has joined
Mar 30 00:05:22 *	arfy (Miranda@moz-rvdeeo.iinet.net.au) has joined
Mar 30 00:05:51 <aatch>	archshift, assuming it works the same as Vec (which is likely), the default capacity will be 0 and wont allocate.
Mar 30 00:05:52 *	waguan has quit (Connection closed)
Mar 30 00:06:56 *	nullvoid (Main@moz-vb4fre.tn.comcast.net) has joined
Mar 30 00:07:07 *	larhat (Adium@moz-b0j39j.proc.ru) has joined
Mar 30 00:08:16 *	Altonymous has quit (Client exited)
Mar 30 00:08:29 <mafrasi2>	is there any downside if I do it like this? http://is.gd/T5gTGk
Mar 30 00:08:55 <aatch>	mafrasi2, not that I can think of.
Mar 30 00:09:41 *	Kingsqueeee (kingsley@moz-pa1fj1.bchsia.telus.net) has joined
Mar 30 00:14:58 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 00:15:08 *	johan_sun (johan_sun@moz-nlj.p28.187.111.IP) has joined
Mar 30 00:17:44 *	ptc (textual@moz-l2kuh6.compute-1.amazonaws.com) has joined
Mar 30 00:18:49 *	santiago (santiago@moz-ro2mm9.res.rr.com) has joined
Mar 30 00:19:07 *	bholley_away is now known as bholley
Mar 30 00:20:35 *	dmac__ (dmac@moz-2ig65r.ca.comcast.net) has joined
Mar 30 00:20:36 *	ptc_ (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 30 00:22:27 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 00:22:32 *	ptc (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 30 00:23:06 *	kaoD has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 00:23:21 *	samx has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 00:24:09 *	will_sm has quit (Quit: Leaving)
Mar 30 00:24:40 *	ptc_ has quit (Ping timeout: 121 seconds)
Mar 30 00:24:43 *	Diggsey has quit (Quit: Connection closed for inactivity)
Mar 30 00:24:45 *	klue has quit (Ping timeout: 121 seconds)
Mar 30 00:28:31 *	jgilbert has quit (Ping timeout: 121 seconds)
Mar 30 00:28:48 *	Guest5 (textual@moz-hnb58r.oc.cox.net) has joined
Mar 30 00:29:31 *	kerrang has quit (Quit: leaving)
Mar 30 00:31:44 *	nhirata_ has quit (Client exited)
Mar 30 00:33:49 *	nhirata_ (nhirata_@moz-5b2rpj.ca.comcast.net) has joined
Mar 30 00:34:51 *	anastiel (anastiel@moz-k9v.b8f.23.191.IP) has joined
Mar 30 00:35:58 *	bholley is now known as bholley_away
Mar 30 00:36:00 *	anastiel has quit (Quit: Leaving)
Mar 30 00:36:00 *	blackgoat has quit (Quit: WeeChat 1.4)
Mar 30 00:36:12 *	anastiel (anastiel@moz-k9v.b8f.23.191.IP) has joined
Mar 30 00:36:53 <anastiel>	how to programming rust in arch linux?
Mar 30 00:37:10 <Mutabah>	anastiel: Same as any other distro
Mar 30 00:37:20 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 30 00:37:32 <Mutabah>	anastiel: Download rustc (using rustup or multirust, or using the tarball)
Mar 30 00:37:52 <anastiel>	hum yes you have handbook for rust?
Mar 30 00:38:01 <aatch>	Or via the distro packages, this is Arch Linux after al.
Mar 30 00:38:03 <aatch>	all*
Mar 30 00:38:48 <anastiel>	yaourt
Mar 30 00:38:59 *	NameNotFound is now known as zz_NameNotFound
Mar 30 00:39:06 *	dmac (dmac@moz-2ig65r.ca.comcast.net) has joined
Mar 30 00:39:24 <aatch>	anastiel, rust is in the community repo, so pacman works too.
Mar 30 00:39:52 *	nhirata_ has quit (Ping timeout: 121 seconds)
Mar 30 00:40:05 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 00:41:02 <anastiel>	thanks i have downloading
Mar 30 00:41:45 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 00:42:19 *	luc has quit (Ping timeout: 121 seconds)
Mar 30 00:42:19 *	ytain has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 30 00:42:32 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 30 00:42:35 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 30 00:42:36 *	jxcl has quit (Quit: Leaving)
Mar 30 00:44:08 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 30 00:44:26 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 00:44:26 *	ptc (textual@moz-qh92n8.compute-1.amazonaws.com) has joined
Mar 30 00:44:43 *	nhirata_ (nhirata_@moz-5b2rpj.ca.comcast.net) has joined
Mar 30 00:44:49 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 30 00:44:51 *	infynyxx has quit (Connection closed)
Mar 30 00:45:32 *	zz_NameNotFound is now known as NameNotFound
Mar 30 00:45:49 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 30 00:45:58 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 30 00:46:06 *	tennix (vagrant@moz-kjb.7qo.39.106.IP) has joined
Mar 30 00:47:00 *	aatch has quit (Ping timeout: 121 seconds)
Mar 30 00:49:24 *	ygrek has quit (Ping timeout: 121 seconds)
Mar 30 00:51:34 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 30 00:52:16 *	arBmind1 (Andreas@moz-c58msi.dyn.telefonica.de) has joined
Mar 30 00:53:30 *	colinsurprenant has quit (Client exited)
Mar 30 00:54:04 *	arBmind has quit (Ping timeout: 121 seconds)
Mar 30 00:54:46 *	annodomini (lambda@moz-qgii5v.ma.comcast.net) has joined
Mar 30 00:54:49 *	dellavg (dellavg@moz-hqm1hm.retail.telecomitalia.it) has joined
Mar 30 00:56:01 *	plutoniix (q@moz-uem.puq.249.43.IP) has joined
Mar 30 01:01:02 *	saml_ has quit (Quit: Leaving)
Mar 30 01:01:45 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 30 01:02:15 *	monti has quit (Ping timeout: 121 seconds)
Mar 30 01:02:51 *	tycoon177 (tycoon177@moz-ib495f.client.mchsi.com) has joined
Mar 30 01:06:56 *	cteef (derrick@moz-14a.4dn.78.172.IP) has left
Mar 30 01:09:15 <Manishearth>	jwilm: pong
Mar 30 01:09:16 *	_Vi has quit (Ping timeout: 121 seconds)
Mar 30 01:09:46 *	eckhardt (eckhardt@moz-0b0.bm2.248.98.IP) has joined
Mar 30 01:10:40 *	markstory has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 01:11:56 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 01:12:23 *	renderful has quit (Quit: Leaving...)
Mar 30 01:12:49 *	}ls{ has quit (Ping timeout: 121 seconds)
Mar 30 01:13:17 *	p has quit (Ping timeout: 121 seconds)
Mar 30 01:13:35 *	frankmcsherry has quit (Connection closed)
Mar 30 01:13:43 *	ansible1 (kvirc@moz-top.s6n.185.66.IP) has joined
Mar 30 01:14:58 *	pseudo has quit (Ping timeout: 121 seconds)
Mar 30 01:15:26 *	ptc_ (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 30 01:17:09 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 01:17:25 *	chain_chan (chainChan@moz-f67ffr.slkc.qwest.net) has joined
Mar 30 01:18:05 *	urodna has quit (Client exited)
Mar 30 01:18:31 *	chain_kun (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 30 01:19:05 *	lika (lika@moz-hpg.2t0.139.14.IP) has joined
Mar 30 01:19:06 *	luc has quit (Connection closed)
Mar 30 01:20:12 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 01:21:40 *	chain_chan has quit (Ping timeout: 121 seconds)
Mar 30 01:22:17 *	nullvoid has quit (Connection closed)
Mar 30 01:23:08 *	eazar001 (ebrahim@moz-1fk3av.844f.vlo7.0306.2602.IP) has joined
Mar 30 01:23:44 <computerquip>	I'm trying to add an external crate which depends on a C library. I'm trying to describe in the cargo configuration file where to find this external library. 
Mar 30 01:23:51 <computerquip>	Can anybody direct me on how to do this?
Mar 30 01:24:14 *	wldcordeiro has quit (Ping timeout: 121 seconds)
Mar 30 01:24:17 *	sankha has quit (Connection closed)
Mar 30 01:24:32 <sfackler>	computerquip: http://doc.crates.io/build-script.html
Mar 30 01:24:39 <sfackler>	in general, I'd rely on pkg-config-rs when possible
Mar 30 01:25:31 <WindowsBunnies>	computerquip: http://doc.crates.io/build-script.html#overriding-build-scripts specifically is probably helpful
Mar 30 01:27:08 <Zoxc>	Can build script affect linker arguments on crates depending on the crate with the build script?
Mar 30 01:27:17 *	kulakowski has quit (Quit: Connection closed for inactivity)
Mar 30 01:27:34 <Mutabah>	Zoxc: The binding crate should handle the location of the library
Mar 30 01:27:47 <Mutabah>	computerquip: ^ What crate are you using?
Mar 30 01:27:52 *	anastiel has quit (Quit: Leaving)
Mar 30 01:28:31 <computerquip>	iup-rust
Mar 30 01:28:34 <durka42>	whoever it was that finally added a reverse dependencies link to the crates.io interface -- thanks!
Mar 30 01:29:17 <durka42>	Tari: ^
Mar 30 01:29:17 <WindowsBunnies>	durka42: oh, they finally added that?
Mar 30 01:29:32 <durka42>	yes
Mar 30 01:29:33 <durka42>	4 days ago
Mar 30 01:29:36 <WindowsBunnies>	oh shit they did
Mar 30 01:29:41 <durka42>	shows up if there is a nonzero number of reverse deps
Mar 30 01:29:56 <WindowsBunnies>	oh in other news, winapi hit 1 million downloads!
Mar 30 01:30:44 *	durka42 grumbles
Mar 30 01:30:47 <WindowsBunnies>	"Displaying             1-10             of 496 reverse dependencies             of winapi"
Mar 30 01:30:48 <sinclair>	WindowsBunnies: you're famous now bro
Mar 30 01:31:01 <WindowsBunnies>	Granted most of those are mine...
Mar 30 01:31:15 <sinclair>	so modest
Mar 30 01:31:30 *	sinclair throws a medal at WindowsBunnies
Mar 30 01:31:51 *	durka42 throws a [target.'cfg(windows)'.dependencies]
Mar 30 01:33:16 *	LucaRood has quit (Quit: Leaving)
Mar 30 01:33:25 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 30 01:36:02 *	pseudo (pseudo@moz-bvvcvm.at.cox.net) has joined
Mar 30 01:36:37 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 30 01:36:58 *	blackgoat (blackgoat@moz-8ev.85u.224.211.IP) has joined
Mar 30 01:37:15 *	lika has quit (Quit: Leaving)
Mar 30 01:37:16 *	NameNotFound is now known as zz_NameNotFound
Mar 30 01:37:21 <computerquip>	I dunno, nothing I seem to do seems to work. I've tried an override using [target.x86_64-unknown-linux-gnu.iup], I've tried adding the flags via a build script, I've tried adding it in under the [build] configuration key.
Mar 30 01:37:44 <Mutabah>	computerquip: Do you have iup's library installed to a non-standard location?
Mar 30 01:38:00 <computerquip>	Yes... I don't have it installed at all, I'm wanting to find it in a relative directory. 
Mar 30 01:38:04 <Mutabah>	(it looks like iup-sys doesn't use pkg-config)
Mar 30 01:38:53 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 30 01:38:59 <computerquip>	In my case, that location would be "../iup-3.18"
Mar 30 01:39:07 <computerquip>	relative to the root of my project. 
Mar 30 01:39:17 <Mutabah>	With `cargo rustc` you should be able to pass the library path
Mar 30 01:39:35 *	mexisme has quit (Client exited)
Mar 30 01:40:01 *	_Vi (vi@moz-8kcf4a.3gli.01oh.0470.2001.IP) has joined
Mar 30 01:40:27 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 01:41:38 <computerquip>	That works. 
Mar 30 01:42:38 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 01:43:00 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 30 01:43:01 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 30 01:44:09 <comex>	huh, why can't OsStr be sliced?
Mar 30 01:44:38 *	zz_NameNotFound is now known as NameNotFound
Mar 30 01:44:54 <Zoxc>	Where does cargo save build script output?
Mar 30 01:46:41 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 30 01:46:43 *	dzbarsky (Adium@moz-05164q.82pc.j76f.0646.2601.IP) has joined
Mar 30 01:47:00 <sfackler>	Zoxc: target/debug/build/<library_name>/output
Mar 30 01:47:15 <sfackler>	or target/release/...
Mar 30 01:47:15 <computerquip>	build = "build.rs"
Mar 30 01:47:30 <computerquip>	This doesn't seem to be causing build.rs to be compiled and run. 
Mar 30 01:47:42 <computerquip>	cargo build --verbose doesn't indicate anything about it... 
Mar 30 01:48:43 *	SiegeLord has quit (Connection closed)
Mar 30 01:48:50 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 30 01:49:48 *	_256Q has quit (Ping timeout: 121 seconds)
Mar 30 01:49:48 <comex>	or just get the damn codepoints on windows
Mar 30 01:49:54 *	jimb has quit (Ping timeout: 121 seconds)
Mar 30 01:50:46 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 30 01:51:17 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 30 01:51:53 <comex>	weird design that it's wtf-8 on windows
Mar 30 01:54:06 <comex>	(whine, whine)
Mar 30 01:54:07 *	NameNotFound is now known as zz_NameNotFound
Mar 30 01:54:50 *	shackra has quit (A TLS packet with unexpected length was received.)
Mar 30 01:54:58 *	dellavg has quit (Ping timeout: 121 seconds)
Mar 30 01:55:19 <durka42>	WTF, windows
Mar 30 01:55:46 *	Makoryu has quit (Quit: Fast travel activated)
Mar 30 01:55:56 *	jimb (user@moz-6gkikn.or.comcast.net) has joined
Mar 30 01:56:10 *	orangeshark has quit (Quit: Leaving)
Mar 30 01:56:53 <WindowsBunnies>	durka42: ?
Mar 30 01:57:06 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 30 01:57:09 <durka42>	just riffing on wtf-8
Mar 30 01:58:17 *	mindtree (Mitch@moz-frqig1.iprimus.net.au) has joined
Mar 30 01:58:54 <WindowsBunnies>	comex: Well, how else do you deal with wide strings on windows that are a superset of utf-16?
Mar 30 02:00:44 *	zz_NameNotFound is now known as NameNotFound
Mar 30 02:00:44 *	beat has quit (Connection closed)
Mar 30 02:01:19 *	futile (felix@moz-cursjl.unity-media.net) has joined
Mar 30 02:01:39 *	badon_ (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 30 02:02:57 <mindtree>	Does anyone know if there any serde macros (macro_rules, not decorators) that simplify doing manual serialize/deserialize implementations for types on stable? I'd like to do all my serialization in a single module so it's easy to feature gate
Mar 30 02:03:23 *	badon has quit (Ping timeout: 121 seconds)
Mar 30 02:03:53 *	skade (skade@moz-c1c8jq.pools.vodafone-ip.de) has joined
Mar 30 02:04:05 *	ptc_ has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 02:04:22 *	bjz (bjz@moz-uh0c9h.optusnet.com.au) has joined
Mar 30 02:04:35 *	beat (beat@moz-ddkqql.cpe.netcabo.pt) has joined
Mar 30 02:04:45 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 30 02:04:49 *	johan_sun has quit (Quit: )
Mar 30 02:05:57 *	badon_ is now known as badon
Mar 30 02:08:27 *	bjz has quit (Ping timeout: 121 seconds)
Mar 30 02:08:46 <comex>	WindowsBunnies: leave them as utf-16 codepoints rather than reencoding
Mar 30 02:09:08 <comex>	at the cost of encoding when converting to str, admittedly...
Mar 30 02:10:17 *	gopar has quit (A TLS packet with unexpected length was received.)
Mar 30 02:10:24 *	sankha has quit (Connection closed)
Mar 30 02:11:50 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 30 02:13:12 <Quxxy>	mindtree: I have some, but they depend on a compiler plugin for two parts
Mar 30 02:13:33 <Quxxy>	You could, in theory, strip those two parts out and they'd work on stable
Mar 30 02:13:51 *	bholley_away is now known as bholley
Mar 30 02:13:54 <Quxxy>	Unfortunately, those two parts are both related to generics :P
Mar 30 02:13:58 <durka42>	as long as there aren't any lifetimes in the types
Mar 30 02:14:53 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 30 02:15:16 <mindtree>	Quxxy: i'm very interested in a stable option! do you have a link? what about generics requires a compiler plugin?
Mar 30 02:15:57 <Quxxy>	mindtree: Actually, I only implemented one half; I think it only does serialisation
Mar 30 02:16:10 <durka42>	mindtree: it's impossible to differentiate between identifiers and lifetime parameters (without a syntax extension)
Mar 30 02:16:25 <Quxxy>	As for why, that boils down to a combination of lifetimes being impossible to parse, and generics in general being a *tremendous* pain in the backside
Mar 30 02:17:02 *	iiddnn_ (iacopodeeno@moz-1b6gea.retail.telecomitalia.it) has joined
Mar 30 02:17:06 *	iiddnn_ is now known as iiddnn__
Mar 30 02:17:49 *	NameNotFound is now known as zz_NameNotFound
Mar 30 02:18:31 *	Azy8BsKXVko has quit (A TLS packet with unexpected length was received.)
Mar 30 02:18:45 *	Gamecubic has quit (Quit: Leaving)
Mar 30 02:19:10 *	slester has quit (Ping timeout: 121 seconds)
Mar 30 02:19:34 *	slayerjain has quit (Quit: Connection closed for inactivity)
Mar 30 02:19:57 *	Nilabhra (nilabhra@moz-198.4ml.64.45.IP) has joined
Mar 30 02:20:15 *	scootaloo (arrem@moz-ud9h0v.bih.net.ba) has joined
Mar 30 02:21:26 *	Cyderize_ (Cyderize@moz-7iot5a.tpgi.com.au) has joined
Mar 30 02:21:28 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 30 02:21:58 *	slayerjain (uid117577@moz-kmas3q.brockwell.irccloud.com) has joined
Mar 30 02:22:33 *	infynyxx has quit (Connection closed)
Mar 30 02:23:29 *	Cyderize has quit (Ping timeout: 121 seconds)
Mar 30 02:23:57 *	niconii has quit (Quit: WeeChat 1.4)
Mar 30 02:24:07 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 30 02:25:12 *	zz_NameNotFound is now known as NameNotFound
Mar 30 02:29:16 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 30 02:31:55 *	vadix_ has quit (Ping timeout: 121 seconds)
Mar 30 02:32:22 <canndrew_>	is there a way to set the underlying int type used to represent a C-like enum?
Mar 30 02:32:31 *	nullvoid (Main@moz-vb4fre.tn.comcast.net) has joined
Mar 30 02:32:37 <canndrew_>	say I want an enum that's actually a u64 instead of an isize.
Mar 30 02:32:41 <durka42>	#[repr(u64)]
Mar 30 02:32:51 <canndrew_>	durka42: thatnk!
Mar 30 02:32:56 <canndrew_>	*thanks
Mar 30 02:35:18 *	ville has quit (Ping timeout: 121 seconds)
Mar 30 02:37:27 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 02:38:33 <archshift>	:o I didn't know you could do that
Mar 30 02:38:37 *	tycoon177 has quit (Connection closed)
Mar 30 02:41:57 *	EsBe has quit (Ping timeout: 121 seconds)
Mar 30 02:42:33 *	RegulationD (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 30 02:43:34 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 02:43:39 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 02:44:25 <woboats>	Just a specialization q: adding a provided impl of a trait method for all types which implement another trait would be partial impls, which weren’t included in the final RFC, right?
Mar 30 02:45:43 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 30 02:46:05 *	annodomini has quit (Client exited)
Mar 30 02:46:35 *	RegulationD has quit (Ping timeout: 121 seconds)
Mar 30 02:47:01 *	scootaloo has quit (Ping timeout: 121 seconds)
Mar 30 02:47:04 *	aravindavk (aravinda@moz-m6j.f0d.244.121.IP) has joined
Mar 30 02:47:09 <woboats>	Actually, partial impls are in the text of the merged RFC, but I thought they were postponed. Does anyone know?
Mar 30 02:47:37 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 30 02:48:02 <durka42>	they look to be postponed :p http://is.gd/bONVK6
Mar 30 02:48:31 *	J_Arcane has quit (Ping timeout: 121 seconds)
Mar 30 02:48:41 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 30 02:48:57 *	icefall has quit (Ping timeout: 121 seconds)
Mar 30 02:48:58 <sfackler>	partial impls haven't yet been implemented, but they should be landing soon I believe
Mar 30 02:49:32 <woboats>	Cool
Mar 30 02:50:41 <woboats>	I don’t need them like tonight, I just couldn’t figure out what had been decided. Is the syntax still ‘partial impl’?
Mar 30 02:50:52 <sfackler>	I believe so, yeah
Mar 30 02:50:55 *	J_Arcane (chatzilla@moz-f72bj8.bb.dnainternet.fi) has joined
Mar 30 02:51:18 <durka42>	one might say that specialization is currently... _partially implemented_
Mar 30 02:51:19 <keeper>	Just curious, what's a partial impl?
Mar 30 02:51:39 *	durka42 runs away
Mar 30 02:52:00 <durka42>	it's a trait impl that doesn't implement all the items
Mar 30 02:54:29 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 30 02:55:11 <woboats>	keeper: here’s an example (obviously it doesn’t work right now, and my syntax may not be correct) https://play.rust-lang.org/?gist=f706b04e0379f7af393617405a570b21&version=stable
Mar 30 02:55:29 <woboats>	keeper: now you can impl Foo for types which are Default without implementing the bar() method
Mar 30 02:55:29 *	Roomy (tlaziuk@moz-si2.ak0.231.109.IP) has joined
Mar 30 02:56:33 <woboats>	but for other types, you do need to implement the bar() method
Mar 30 02:58:29 *	pereba_ (pereba@moz-lbg.fpb.59.187.IP) has joined
Mar 30 02:58:59 *	pereba_ has quit (Quit: Quit Blocked by Ad Muncher.)
Mar 30 02:59:40 *	barometz has quit (Ping timeout: 121 seconds)
Mar 30 03:00:00 <keeper>	woboats: Interesting, is that in the specialisation RFC, or another? I'd love to read some of the rationale for that, seems a little weird just by itself.
Mar 30 03:00:26 <woboats>	keeper: its in the specialization RFC, which is very long
Mar 30 03:01:02 *	jkonecny (jkonecny@moz-vs8vb1.redhat.com) has joined
Mar 30 03:01:08 <woboats>	keeper: the advantage is allows you to create provided methods for types which implement the traits you need without making them supertraits of your trait
Mar 30 03:01:12 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 03:01:29 *	pereba has quit (Ping timeout: 121 seconds)
Mar 30 03:02:01 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 30 03:02:51 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 03:02:57 <keeper>	woboats: Thanks.
Mar 30 03:03:22 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 30 03:03:37 *	ontop (ontop@moz-qebb76.ipv6.telus.net) has joined
Mar 30 03:04:09 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 30 03:04:18 *	griff has quit (Client exited)
Mar 30 03:04:24 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 03:05:14 *	sankha has quit (Ping timeout: 121 seconds)
Mar 30 03:06:56 *	futile has quit (Quit: WeeChat 1.4)
Mar 30 03:07:20 *	NameNotFound is now known as zz_NameNotFound
Mar 30 03:07:36 *	barometz (dominic@moz-vot83i.ip.telfort.nl) has joined
Mar 30 03:10:14 *	joy (Adium@moz-m9m0do.dynamic.fusionbroadband.com) has joined
**** BEGIN LOGGING AT Wed Mar 30 09:17:33 2016

Mar 30 09:17:33 *	Now talking on #rust
Mar 30 09:17:34 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 30 09:17:34 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 30 09:18:58 *	nagisa_ (nagisa@moz-8t068g.static.zebra.lt) has joined
Mar 30 09:19:45 *	BrotherLy (BrotherDe@moz-5rol98.highway.telekom.at) has joined
Mar 30 09:19:57 <BrotherLy>	still no good IDE for rust.. i think its time to admit that this isnt going to work out
Mar 30 09:20:25 <JP||>	using Idea here
Mar 30 09:20:29 <JP||>	works pretty well
Mar 30 09:20:35 <JP||>	autocompletion works for some stuff
Mar 30 09:20:41 <Mutabah>	BrotherLy: VS code with the rust plugin
Mar 30 09:20:48 <BrotherLy>	im on linux
Mar 30 09:20:52 <Mutabah>	BrotherLy: Vim or emacs with racer
Mar 30 09:20:52 *	nicholasf has quit (Connection closed)
Mar 30 09:20:56 <SneakySnake>	Yeah, I'm still waiting for an IDE that has similar capabilities to something like Qt Creator for C++
Mar 30 09:21:01 <SneakySnake>	Code navigation, refactoring, etc
Mar 30 09:21:04 <BrotherLy>	exactly SneakySnake
Mar 30 09:21:12 <SneakySnake>	Hopefully it will come in time
Mar 30 09:21:15 <krl>	any editor projects in rust?
Mar 30 09:21:25 <BrotherLy>	it wont though, i waited on a Golang IDE for years
Mar 30 09:21:33 <BrotherLy>	in that time i could have written one 5 times over tbh, but im stupid
Mar 30 09:21:34 <Mutabah>	I'm looking forward to such a thing. The oracle RFC was recently accepted iirc, so here's possible work on a efficient backend for a code completion engine
Mar 30 09:21:37 <SneakySnake>	Who knows
Mar 30 09:21:41 <SneakySnake>	^
Mar 30 09:21:46 <SneakySnake>	Yeah, there is the oracle RFC
Mar 30 09:21:49 <SneakySnake>	It should help
Mar 30 09:21:52 <SuperFluffy>	krl: Not /quite/ the same :) https://github.com/mathall/rim
Mar 30 09:21:55 <BrotherLy>	what oracle rfc
Mar 30 09:22:01 <BrotherLy>	oracle is a java company
Mar 30 09:22:33 <Mutabah>	BrotherLy: "Oracle" is the name given to the infrastructure to have a rustc instance (or something using part of the compiler) running in the background, providing code information to a frontend IDE
Mar 30 09:22:56 <Mutabah>	BrotherLy: RFCs are how the development of the language, compiler, and standard library is governed
Mar 30 09:23:00 *	sankha has quit (Connection closed)
Mar 30 09:23:20 <BrotherLy>	ok so Rust shipped without even having the possibility of proper intellisense? !
Mar 30 09:23:32 *	NameNotFound is now known as zz_NameNotFound
Mar 30 09:23:40 <Mutabah>	BrotherLy: Don't assume 1.0 = complete
Mar 30 09:23:49 <Mutabah>	1.0 is the backwards compatible baseline
Mar 30 09:23:50 *	elementalest has quit (Ping timeout: 121 seconds)
Mar 30 09:23:51 <BrotherLy>	thats exactly what i assume though
Mar 30 09:24:27 *	ehiggs (ehiggs@moz-t7ohe9.1fqp.rav1.1812.2a02.IP) has joined
Mar 30 09:24:28 *	elementalest (elementales@moz-fp6smh.internode.on.net) has joined
Mar 30 09:24:34 <ehiggs>	Hi again.
Mar 30 09:24:43 <Mutabah>	Language and compiler features have been coming thick and fast since then, extending the language and standard library now that there's a concrete baseline to work off
Mar 30 09:25:29 *	chain_kun has quit (Connection closed)
Mar 30 09:25:51 <phaazon>	hey
Mar 30 09:25:54 <phaazon>	I have a Vec
Mar 30 09:25:57 <bluss>	BrotherLy: but 1.0 is the first real release, not the last
Mar 30 09:25:59 <phaazon>	like
Mar 30 09:26:01 <phaazon>	Vec<Foo>
Mar 30 09:26:09 <phaazon>	I need to .get(0)
Mar 30 09:26:15 <phaazon>	and take ownership of what’s in there
Mar 30 09:26:18 <phaazon>	what should I do?
Mar 30 09:26:21 <phaazon>	use remove?
Mar 30 09:26:26 <bluss>	phaazon: you must remove it yes
Mar 30 09:26:30 *	chain_chan (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 30 09:26:35 <phaazon>	ok, thans
Mar 30 09:26:36 <phaazon>	thanks
Mar 30 09:26:38 <bluss>	otherwise the Vec doesn't give up its ownership
Mar 30 09:26:38 <Mutabah>	phaazon: Depends, there's remove, drain, or just swap it with a cheap-to-construct value
Mar 30 09:26:56 <phaazon>	I guess I can just remove it
Mar 30 09:27:02 <bluss>	.swap_remove too, if the order in the Vec doesn't matter
Mar 30 09:27:15 <phaazon>	it doesn’t matter yeah
Mar 30 09:27:18 <Mutabah>	:) .swap_remove is an awesome method
Mar 30 09:27:20 *	vmesons (rmacleod@moz-hq5.1km.224.128.IP) has joined
Mar 30 09:27:25 <bluss>	yes
Mar 30 09:27:44 <ehiggs>	does that swap it with the last element and then make the length one shorter?
Mar 30 09:27:49 <Mutabah>	Yep
Mar 30 09:28:05 <ehiggs>	nice
Mar 30 09:28:29 <phaazon>	oh yeah
Mar 30 09:28:31 <phaazon>	so it’s way faster
Mar 30 09:28:37 <phaazon>	than the O(n) remove
Mar 30 09:28:39 <krl>	SuperFluffy: cool, but what i really want is something to make emacs obsolete
Mar 30 09:30:49 *	zz_NameNotFound is now known as NameNotFound
Mar 30 09:31:27 *	J_Arcane has quit (Ping timeout: 121 seconds)
Mar 30 09:31:50 *	minibot-rs (minibot-rs@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:31:53 *	minibot-rs has quit (Connection closed)
Mar 30 09:32:03 <phaazon>	hm
Mar 30 09:32:09 <phaazon>	is there a common pattern for that:
Mar 30 09:32:11 <phaazon>	let mut a = a;
Mar 30 09:32:16 <phaazon>	(a coming from a function argument)
Mar 30 09:32:20 *	sbw has quit (A TLS packet with unexpected length was received.)
Mar 30 09:32:27 <phaazon>	foo(a: Foo) { let mut a = a; … }
Mar 30 09:33:10 <ahihi>	foo(mut a: Foo) { ... }
Mar 30 09:33:23 *	playbot-rs (playbot-rs@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:33:23 *	playbot-rs-mini (playbot-rs-@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:33:44 *	romanlevin has quit (Quit: Leaving)
Mar 30 09:33:46 *	Gyro_ has quit (Connection closed)
Mar 30 09:33:57 *	Gyro_ (Gyro@moz-s88olm.gwi.net) has joined
Mar 30 09:34:16 <phaazon>	ahihi: does it change the trait implementation?
Mar 30 09:34:20 <phaazon>	foo comes from a trait
Mar 30 09:34:39 *	romanlevin (romanlevin@moz-jhq.qet.40.164.IP) has joined
Mar 30 09:35:07 <bluss>	it doesn't change the function/method signature
Mar 30 09:35:09 <TeXitoi>	phaazon: before the : it's not the type, so no, it does not change the interface
Mar 30 09:35:22 <phaazon>	oh
Mar 30 09:35:22 <phaazon>	<3
Mar 30 09:35:26 <chris_99>	Just wondering, does anyone who uses gtk-rs, know how to get TreeIter for a particular row in a ListStore?
Mar 30 09:35:26 <phaazon>	thanks!
Mar 30 09:37:13 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 09:37:40 *	playbot-rs-mini has quit (Connection closed)
Mar 30 09:37:40 *	playbot-rs has quit (Connection closed)
Mar 30 09:37:42 *	playbot-rs (playbot-rs@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:38:04 *	playbot-rs has quit (Connection closed)
Mar 30 09:39:23 *	playbot-rs (playbot-rs@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:39:23 *	playbot-rs-mini (playbot-rs-@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:39:55 *	playbot-rs-mini has quit (Connection closed)
Mar 30 09:39:56 *	playbot-rs has quit (Connection closed)
Mar 30 09:40:00 *	playbot-rs (playbot-rs@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:40:01 *	playbot-rs has quit (Connection closed)
Mar 30 09:40:13 *	klue has quit (Ping timeout: 121 seconds)
Mar 30 09:42:11 *	playbot-rs-mini (playbot-rs-@moz-m7nauj.dip0.t-ipconnect.de) has joined
Mar 30 09:42:19 *	playbot-rs-mini has quit (Connection closed)
Mar 30 09:42:25 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 30 09:43:35 <phaazon>	ok
Mar 30 09:43:58 <phaazon>	so, if I want to split my vectors in two, splitting ownership in two
Mar 30 09:44:04 <phaazon>	I can just use split_off
Mar 30 09:44:09 <phaazon>	I just want to hm
Mar 30 09:44:17 <phaazon>	destructurize the vec
Mar 30 09:44:21 *	Murtaugh (textual@moz-brrcio.fit.cvut.cz) has joined
Mar 30 09:44:24 <phaazon>	(removing the first element at each iteration)
Mar 30 09:44:32 <Murtaugh>	Is there a RFC for including a complexity field in the documentation?
Mar 30 09:44:34 <phaazon>	is there a better alternative than .split_off(1) ?
Mar 30 09:45:06 <Mutabah>	phaazon: Do you want to iterate by value?
Mar 30 09:45:16 <phaazon>	by move semantic, yeah
Mar 30 09:45:24 <phaazon>	but I don’t want to iterate
Mar 30 09:45:30 <phaazon>	I want to remove the head
Mar 30 09:45:34 *	msingle (mts001@moz-4bg68s.hr.cox.net) has joined
Mar 30 09:45:37 <phaazon>	and pass the rest of the vector to another function
Mar 30 09:45:55 *	fl0w has quit (Client exited)
Mar 30 09:46:33 *	drew has quit (Ping timeout: 121 seconds)
Mar 30 09:46:42 <jix>	phaazon: if you want to remove the first element, a VecDeque would be the better data structure
Mar 30 09:47:19 <phaazon>	ah
Mar 30 09:47:26 *	gleb (gleb@moz-3ir1e8.rusanovka-net.kiev.ua) has joined
Mar 30 09:47:28 <jix>	alternatively reversing the Vec once and removing elements from the back
Mar 30 09:47:48 <phaazon>	hm, or I guess…
Mar 30 09:47:53 <phaazon>	I can just swap_remove(0)
Mar 30 09:48:04 <jix>	if the order doesn't matter, yes
Mar 30 09:48:19 *	Sgeo has quit (Ping timeout: 121 seconds)
Mar 30 09:48:39 *	NameNotFound is now known as zz_NameNotFound
Mar 30 09:49:11 *	kefin has quit (Quit: Leaving)
Mar 30 09:49:14 *	kefin (kefin@moz-t5j.bbc.113.188.IP) has joined
Mar 30 09:49:34 *	slayerjain has quit (Quit: Connection closed for inactivity)
Mar 30 09:50:02 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 30 09:50:18 *	ubsan has quit (Connection closed)
Mar 30 09:50:35 *	stephanbuys has quit (Ping timeout: 121 seconds)
Mar 30 09:50:48 *	Emilgardis has quit (Ping timeout: 121 seconds)
Mar 30 09:51:23 *	yuja (yuja@moz-35nbdb.so-net.ne.jp) has joined
Mar 30 09:52:00 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 09:53:58 <SuperFluffy>	phaazon: Or combine it with what jix said before: reverse the vec, remove from the end
Mar 30 09:53:58 *	albel727 (albel727@moz-njmloa.academ.org) has joined
Mar 30 09:55:18 *	zz_NameNotFound is now known as NameNotFound
Mar 30 09:55:55 *	cpup has quit (Ping timeout: 121 seconds)
Mar 30 09:56:08 *	Oct (oct@moz-j9oakp.zoy.org) has left ("Textual IRC Client: www.textualapp.com")
Mar 30 09:56:14 *	LambdaComplex has quit (Ping timeout: 121 seconds)
Mar 30 09:56:53 *	cpup (cpup@moz-6od.jer.218.32.IP) has joined
Mar 30 09:58:02 *	BrotherLy has quit (Quit: Leaving)
Mar 30 09:59:09 *	bjz (bjz@moz-puppgq.tpgi.com.au) has joined
Mar 30 09:59:39 *	bjz_ has quit (Ping timeout: 121 seconds)
Mar 30 10:00:41 *	jgallagher has quit (Client exited)
Mar 30 10:01:14 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 30 10:02:53 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 30 10:05:07 *	dzbarsky (Adium@moz-v18mcd.ca.comcast.net) has joined
Mar 30 10:05:16 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 10:05:44 *	ptc (textual@moz-49qsuh.compute-1.amazonaws.com) has joined
Mar 30 10:06:55 *	apoelstra (username@moz-pvbasl.net) has joined
Mar 30 10:07:30 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 10:09:15 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 30 10:10:22 *	KingstonTime has quit (A TLS packet with unexpected length was received.)
Mar 30 10:10:40 *	amyers has quit (Quit: Leaving)
Mar 30 10:10:42 *	KingstonMe is now known as KingstonTime
Mar 30 10:10:59 *	nyx (nyx@moz-b1g8f1.res.rr.com) has joined
Mar 30 10:13:01 *	annodomini (lambda@moz-qgii5v.ma.comcast.net) has joined
Mar 30 10:13:22 *	NameNotFound is now known as zz_NameNotFound
Mar 30 10:13:33 *	Roomy has quit (Client exited)
Mar 30 10:14:45 *	amyers (amyers@moz-3e63aj.8iss.sd5s.0145.2601.IP) has joined
Mar 30 10:14:50 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 30 10:15:34 *	amyers has quit (Connection closed)
Mar 30 10:15:42 *	amyers (amyers@moz-3e63aj.8iss.sd5s.0145.2601.IP) has joined
Mar 30 10:16:16 *	aqiank (jacky@moz-3dq.8rh.156.175.IP) has joined
Mar 30 10:16:23 *	blackgoat has quit (Quit: WeeChat 1.4)
Mar 30 10:17:11 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 10:17:20 *	happy-dude_ (uid62780@moz-ljci7f.richmond.irccloud.com) has joined
Mar 30 10:17:25 <aqiank>	Hi guys, I have a Rust Iron server running in a docker container with its port exposed through "-p 80:8080". But I keep getting connection refused.
Mar 30 10:17:27 *	hiptobecubic (john@moz-gdk.apf.62.136.IP) has joined
Mar 30 10:17:52 <aqiank>	Is there something I'm missing?
Mar 30 10:17:57 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 30 10:18:03 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 30 10:18:52 *	demilux has quit (Ping timeout: 121 seconds)
Mar 30 10:19:35 *	Munksgaard (philip_munk@moz-26p.dgb.171.79.IP) has left
Mar 30 10:19:51 *	zz_NameNotFound is now known as NameNotFound
Mar 30 10:20:00 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 10:20:31 *	kanru` has quit (Ping timeout: 121 seconds)
Mar 30 10:20:42 *	gmorenz (normal@moz-os4.l2b.52.70.IP) has joined
Mar 30 10:21:30 *	ptc (textual@moz-e3qs71.compute-1.amazonaws.com) has joined
Mar 30 10:22:15 *	slester has quit (Ping timeout: 121 seconds)
Mar 30 10:24:17 *	ytain_ has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 30 10:26:18 *	liuchong has quit (Connection closed)
Mar 30 10:27:16 *	monti-2 (monti@moz-aidh09.broadband.corbina.ru) has joined
Mar 30 10:27:17 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 10:27:18 *	kkus (kkus@moz-7u2hvh.fios.verizon.net) has joined
Mar 30 10:27:32 *	sankha has quit (Connection closed)
Mar 30 10:27:36 *	ahal (ahal@moz-b8e0a0.cpe.pppoe.ca) has joined
Mar 30 10:29:02 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 30 10:30:22 *	romanlevin has quit (Quit: Leaving)
Mar 30 10:30:32 *	chris_99 has quit (Quit: Leaving)
Mar 30 10:30:43 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 10:31:12 *	fl0w has quit (Client exited)
Mar 30 10:31:32 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 10:31:49 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 10:33:06 *	skade (skade@moz-u1j.1t9.225.62.IP) has joined
Mar 30 10:33:39 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 10:34:27 *	colinsurprenant (colin@moz-8a0olr.89.electronicbox.net) has joined
Mar 30 10:34:38 *	plutoniix (q@moz-3ic7so.dynamic.totbb.net) has joined
Mar 30 10:34:55 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 30 10:36:01 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 30 10:36:02 *	sankha has quit (Ping timeout: 121 seconds)
Mar 30 10:36:18 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 30 10:36:49 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 30 10:36:58 *	NameNotFound is now known as zz_NameNotFound
Mar 30 10:37:21 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 30 10:38:16 *	jas0 (jason@moz-vvo.58k.122.38.IP) has joined
Mar 30 10:38:47 *	scootaloo (arrem@moz-ud9h0v.bih.net.ba) has joined
Mar 30 10:40:26 *	badon has quit (Ping timeout: 121 seconds)
Mar 30 10:40:32 <jas0>	I have two references (they are singletons, essentially), so I actually want to do a comparison of memory locations. Actually all instance of this struct should be a singleton. Is there a way to force pointer to pointer to pointer comparison evgery time?
Mar 30 10:40:57 *	drew has quit (Ping timeout: 121 seconds)
Mar 30 10:41:26 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 10:42:15 <jas0>	I didn' realize rust's == was a comparison of he values.
Mar 30 10:42:29 <jas0>	This is a horrible default behavior for a system language
Mar 30 10:42:43 *	_Vi (vi@moz-bbs.vhj.131.104.IP) has joined
Mar 30 10:42:47 *	SurpriseTRex has quit (Connection closed)
Mar 30 10:43:00 <icey>	can I match on a type? something like http://is.gd/mja1tE
Mar 30 10:43:13 <bluss>	jas0: references simply reflect (compare like) the underlying type
Mar 30 10:43:25 <bluss>	jas0: you can define PartialEq on your type
Mar 30 10:43:41 <jas0>	I rarely want to do that for non-native types. Like almost never.
Mar 30 10:43:49 *	badon (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 30 10:44:12 <jas0>	Especially for things like linked lists
Mar 30 10:44:20 *	zz_NameNotFound is now known as NameNotFound
Mar 30 10:44:23 <jas0>	or hashes, or really anyhing more than a few bytes.
Mar 30 10:44:34 *	aqiank has quit (Quit: Konversation terminated!)
Mar 30 10:45:08 <jas0>	Do the pointer holding types just compared memory locations?
Mar 30 10:45:14 <jas0>	Like box, ref, etc..
Mar 30 10:45:16 <bluss>	icey: no, can't match on a type. `f64` there is just an identifier (the name of the binding)
Mar 30 10:45:25 *	mib_6cnm9j (Mibbit@moz-vlon66.cable.virginm.net) has joined
Mar 30 10:45:27 <Mutabah>	jas0: &-ptrs compare the value, *-ptrs compare the pointer
Mar 30 10:45:28 *	mib_6cnm9j has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 10:45:30 <bluss>	jas0: they compare like the underlying value
Mar 30 10:45:34 <icey>	bluss: so no way to check type at runtime?
Mar 30 10:45:55 <jas0>	enum variants is about as close as you can get
Mar 30 10:46:00 <jas0>	icey ^^
Mar 30 10:46:01 <bluss>	jas0: since there's no function for it in libstd, write a simple compare by pointer equality function and use it
Mar 30 10:46:12 <Mutabah>	icey: The Any trait may be what you want
Mar 30 10:46:28 <jas0>	does vec == vec do a deep compare too?
Mar 30 10:46:31 <Mutabah>	icey: depends on _why_ you want to do runtime typing
Mar 30 10:46:36 <Mutabah>	jas0: Yes
Mar 30 10:46:37 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 10:46:39 <jas0>	GAH!
Mar 30 10:46:45 <Mutabah>	jas0: It does a slice comparison
Mar 30 10:46:48 <bluss>	jas0: it wouldn't work very well as a hash map key otherwise
Mar 30 10:46:52 <icey>	jas0 Mutabah thanks, I'm trying to basically implement very basic JSON output, numbers are bare, strings are quoted
Mar 30 10:46:59 <Mutabah>	jas0: It's impossible to have two Vec<T>s pointing to the same memory
Mar 30 10:47:03 <jas0>	Whoa... probably the biggest mistake I know of in rust then
Mar 30 10:47:12 <Mutabah>	jas0: Hence, if it compared the pointer it would be completely useless
Mar 30 10:47:22 <jas0>	I mean &vec == &vec the
Mar 30 10:47:22 <icey>	maybe I should just use the new specialization stuff
Mar 30 10:47:25 *	pczarn has quit (Ping timeout: 121 seconds)
Mar 30 10:47:38 <Mutabah>	jas0: For &, it's the same as any other &-ptr
Mar 30 10:47:46 <jas0>	That's really really REALLY bad
Mar 30 10:47:51 <Mutabah>	No, it isn't
Mar 30 10:47:52 <jas0>	horrible decision.
Mar 30 10:47:52 <bluss>	icey: using a trait without specialization should be fine too
Mar 30 10:47:57 <Mutabah>	Pointer comparisons are VERY rare
Mar 30 10:48:06 <bluss>	jas0: calm down and get to know rust
Mar 30 10:48:10 <Mutabah>	(Actual pointer comparisons, not using pointer arithmatic and comparing)
Mar 30 10:48:13 <jas0>	Deep coparisons are even more rate
Mar 30 10:48:22 *	jeffbradberry (jrb@moz-kpp3mi.biz.rr.com) has joined
Mar 30 10:48:23 <jas0>	In system code, you almost never do a deep compare
Mar 30 10:48:26 <bluss>	jas0: also, I prefer to define functions and helper traits to make the tools you need
Mar 30 10:48:29 <Mutabah>	[citation needed]
Mar 30 10:48:31 <jas0>	And if you do, you are doing something wrong
Mar 30 10:48:31 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 30 10:48:32 <keeper>	jas0: Rust has a bit of functional programming injected into it, so the by-value comparison does make a lot of sense in the language.
Mar 30 10:48:59 <jas0>	I really like functional programming, my first language was scheeme and lisp.
Mar 30 10:49:26 <jas0>	But I really despise procedural languages adding function behavior on it. They don't mix well.
Mar 30 10:49:43 <jas0>	It is so unlike what you would expect from a system's language.
Mar 30 10:49:50 <jas0>	And there is no easy way around it
Mar 30 10:49:54 *	chain_chan has quit (Connection closed)
Mar 30 10:50:01 *	infynyxx has quit (Connection closed)
Mar 30 10:50:06 <jas0>	having to constantly cast to do a compare?
Mar 30 10:50:06 <Mutabah>	jas0: So, you believe that comparing two &-ptrs (which are defined as always pointing to valid memory, and hence perfectly safe to dereference) should compare the memory location, not the actual value?
Mar 30 10:50:11 <jas0>	yes
Mar 30 10:50:14 <jas0>	like C
Mar 30 10:50:15 <jas0>	like C++
Mar 30 10:50:16 <jas0>	like Java
Mar 30 10:50:22 <Mutabah>	How often do you expect to have to compare pointers?
Mar 30 10:50:29 <jas0>	like almost EVERY other lower level lang
Mar 30 10:50:32 <Mutabah>	And better question - How often do you when writing rust code?
Mar 30 10:50:32 <SneakySnake>	You can just cast them to raw pointers and compare those if you want to do that
Mar 30 10:50:35 <jas0>	constantly
Mar 30 10:50:37 <bluss>	none of those have reference types that are exactly like Rust's
Mar 30 10:50:42 <Mutabah>	jas0: FYI - I've written a kernel, with malloc impl
Mar 30 10:50:43 <jas0>	I do it far more often than deep compares.
Mar 30 10:51:07 <wrl>	Mutabah: i compare raw pointers values in my string internment code
Mar 30 10:51:11 <Mutabah>	jas0: Rust has two pointer types, I will note
Mar 30 10:51:11 <wrl>	raw pointer values*
Mar 30 10:51:16 <jas0>	And you actualy do deep compares more often than ptr compares?
Mar 30 10:51:17 <tilpner>	playbot: let a = vec![1, 2, 3]; let b = a.clone(); &a as *const _ == &b as *const _ // feels short enough for the comparably rare case I need it
Mar 30 10:51:18 -playbot/#rust-	false
Mar 30 10:51:20 <SneakySnake>	I for one expect by-value comparison for == on two slices
Mar 30 10:51:23 <SneakySnake>	It makes sense
Mar 30 10:51:27 <SneakySnake>	They are slices, not raw pointers
Mar 30 10:51:37 *	sankha has quit (Connection closed)
Mar 30 10:51:39 <Mutabah>	jas0: &-ptrs are the reference-like ones, they compare the value (because it's a little bit more useful to do that, saves dereferencing all the time)
Mar 30 10:52:05 <jix>	jas0: do you disagree with c++ references comparing by value instead of by addr?
Mar 30 10:52:08 <Mutabah>	jas0: *-ptrs are the C-like raw pointers, and when you compare two of those it compares the pointer itself (ebcause these are not safe to derefence)
Mar 30 10:52:09 <jas0>	maybe a middle ground would be to not allow == on refernces.
Mar 30 10:52:12 <kirillkh>	what is the best way to achieve this? https://play.rust-lang.org/?gist=06151506d88fa3999f5395e0f258fe38&version=stable
Mar 30 10:52:25 <ticki>	jas0: That would be a breaking change.
Mar 30 10:52:26 <Mutabah>	jas0: That could be a possibility, but the language allows it, and it's stable behavior
Mar 30 10:52:43 <jas0>	The cognitive dissonence that rusrc goes through must really make it feel bad.
Mar 30 10:53:03 <Mutabah>	jas0: It definitely improves usablility, at the minor cost of confusing some new programmers from C-land who don't notice the two pointer types
Mar 30 10:53:29 <jas0>	It makes stuff very very slow by default too
Mar 30 10:53:37 <Mutabah>	[citation needed]
Mar 30 10:53:41 *	adhoc has quit (Ping timeout: 121 seconds)
Mar 30 10:53:44 <jas0>	&vec == &vec is basically a massive mistake now
Mar 30 10:53:56 <Mutabah>	And how often would you be doing that?
Mar 30 10:54:19 <jas0>	now have have to cast to comare and when I don't it becomes a very suble big
Mar 30 10:54:20 <jas0>	bug
Mar 30 10:54:24 *	jdm (jdm@moz-3eu2pc.cpe.teksavvy.com) has joined
Mar 30 10:54:24 *	ChanServ gives channel operator status to jdm
Mar 30 10:54:32 *	icefall has quit (Ping timeout: 121 seconds)
Mar 30 10:54:42 <bluss>	jas0: define a function, and call it. then there's no casting noise
Mar 30 10:54:43 <Mutabah>	jas0: Let's look at it from the other side
Mar 30 10:54:43 <jix>	jas0: only in code where the two vecs have the possibility to alias, which is rare
Mar 30 10:54:52 <jix>	*slices not ves
Mar 30 10:55:06 <Mutabah>	jas0: Strings are just special types of slices (vectors). String comparison in rust  is `string_ptr == "String valeu"`
Mar 30 10:55:19 <jas0>	jix, I comapre structs all the time to see if they are the same, and I almost NEVER want a deep compare.
Mar 30 10:55:20 <Quxxy>	identity != equality
Mar 30 10:55:28 <apajx>	Wasn't there a post on the subreddit about an Identity trait or soemthing that was related to this discussion?
Mar 30 10:55:30 <Mutabah>	jas0: For byte slices, it's the same `byte_slice == r"Hello world"`
Mar 30 10:55:51 <kirillkh>	/bump
Mar 30 10:55:52 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 10:56:01 <jas0>	Think of a struct for a Person, where each one is unique. I want a &Person == &Person to be a mem ref compare, not deep
Mar 30 10:56:11 <Murtaugh>	Is there a RFC for including a complexity field in the documentation?
Mar 30 10:56:20 <keeper>	jas0: pointer comparisons seems a bit weird for how rust works anyway. If you get a reference to something in rust, you can't modify the actual data structure until that & reference goes out of scope.
Mar 30 10:56:30 <ehiggs>	jas0: here you go: http://is.gd/98JrJQ
Mar 30 10:56:31 <jas0>	Almost every time I do a &strct == &struct, I can't think of once in my current code I want to do a deep compare
Mar 30 10:56:37 <Quxxy>	Murtaugh: Algorithmic complexity?
Mar 30 10:56:46 <Murtaugh>	Quxxy: Yup!
Mar 30 10:56:48 <keeper>	So if you have a Person from somewhere you want to compare, you're probably comparing on a specific sub-part of that struct, maybe an id number, or name.
Mar 30 10:56:50 <jas0>	this is truly a bad decision.
Mar 30 10:56:56 <Mutabah>	jas0: Are we talking rust code here, or C/C++ code?
Mar 30 10:57:00 <jas0>	rust
Mar 30 10:57:04 <Quxxy>	Murtaugh: No... what's wrong with just, y'know... writing it down in the docs? :P
Mar 30 10:57:17 <Mutabah>	jas0: Could I see an example?
Mar 30 10:57:22 <Murtaugh>	Quxxy: Oh, you mean like all the containers in the stdlib do? -.-
Mar 30 10:57:39 <Mutabah>	jas0: I'm curious as to what algorithm/structure requires so many pointer identity comparisons
Mar 30 10:57:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 30 10:57:50 <Murtaugh>	Quxxy: Having a field for it could make it better integrated with the rustdoc system and could prompt more developers to include them
Mar 30 10:57:54 <Quxxy>	Well, two things: having special magic support in the docs for complexity isn't going to compel people to specify it
Mar 30 10:58:18 <ehiggs>	Mutabah: every comparison operator in C++ generally compares to see if lhs and rhs are the same based on address and returning as appropriate.
Mar 30 10:58:22 <Quxxy>	Secondly, there's quite a few things I'd expect to see added *first*.  Like *arguments*.  And return types.
Mar 30 10:58:22 <jas0>	Eg. I have a list of tags in a protocl I'm parsing, I have one sstruct per tag that holds some info on it, and I want to return it and compare in the top level to see what I got.
Mar 30 10:58:27 <nox>	jas0: Nothing forbids you from implementing the Eq trait with pointer equality.
Mar 30 10:58:38 <Mutabah>	ehiggs: As a shortcut iirc?
Mar 30 10:58:44 *	jschievink has quit (Client exited)
Mar 30 10:58:48 <Quxxy>	Third, I'm under the impression the core devs don't particularly want to make hard complexity guarantees; I vaguely recall seeing some comments along those lines a little while ago
Mar 30 10:58:49 <jas0>	nox, nothing really prevents me from doing anything. We are talking about default behavior
Mar 30 10:58:57 <ehiggs>	Mutabah, sure.
Mar 30 10:59:00 <Murtaugh>	Quxxy: So? The need for one the doesn't nullify the need for another.
Mar 30 10:59:14 *	EsBe (EsBe@moz-j68r7f.res.rr.com) has joined
Mar 30 10:59:16 <jas0>	Least Surprise to me would dictate doing a ptr compare
Mar 30 10:59:21 <ehiggs>	in any event, http://is.gd/98JrJQ solves the problem. moving forward
Mar 30 10:59:30 <Quxxy>	I'm saying that if there was a desire for a more structured doc system, you're more likely to see it implemented for other things *first*
Mar 30 10:59:39 <jix>	jas0: also, even if you think it is a bad default for the code you're likely to write, it doesn't mean it is a bad decision in general
Mar 30 10:59:40 <Quxxy>	And I've never even seen it *suggested* for anything else
Mar 30 10:59:52 <jas0>	&Hash == &Hash is basically a synonym for "go and get coffee while I churn for a few millis"
Mar 30 10:59:56 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 30 11:00:01 <Murtaugh>	Quxxy: And I said that *first* has exactly zero relevance in this discussion.
Mar 30 11:00:11 <jas0>	jix, name another system lang that does that
Mar 30 11:00:15 <mib_dgeg91>	jas0, least surprise when accustomed to C++ maybe, but then again in Efficient C++, Meyer suggest that, when implementing types, deep-copy/deep-compared being done... So least surprise in C?
Mar 30 11:00:27 <bluss>	jas0: there's a lot of control in rust. You can choose to do the comparison in the way you want it
Mar 30 11:00:32 <layl>	is there a variation of .remove() on Vec that takes a closure instead
Mar 30 11:00:43 <Mutabah>	layl: filter?
Mar 30 11:00:45 <apajx>	jas0: why is it hard to accept that &a == &b is not an adder comparison? Why is that bad behavior, aside from it being different?
Mar 30 11:00:47 <jas0>	That argument sucks. I can wring a bunchof stuff in inline-asm too
Mar 30 11:00:52 <layl>	Mutabah: thanks, that's probably what I want
Mar 30 11:00:59 <Murtaugh>	Quxxy: This is not a discussion about what to implement next, but rather what to implement period.
Mar 30 11:01:10 <jas0>	nevermind. too many fanboys
Mar 30 11:01:11 <nox>	jas0: Default behaviour, I very rarely want pointer equality.
Mar 30 11:01:17 <nox>	Hah.
Mar 30 11:01:18 <jix>	jas0: rust does a lot of things different, for a reason ... so a call to authority (an existing language) is a weak argument.
Mar 30 11:01:23 <jas0>	in a system lang you would think it more appropriate
Mar 30 11:01:26 <apajx>	jas0: the problem is your only argument is "Other languages do it."
Mar 30 11:01:29 *	tennix has quit (Ping timeout: 121 seconds)
Mar 30 11:01:38 <Ms2ger>	I think it's time to end the discussion
Mar 30 11:01:45 <jix>	yeah
Mar 30 11:01:47 <jas0>	yea, because how often do you want to do a deep compare of a vec/hash/heap/struct of structs...
Mar 30 11:01:54 *	NameNotFound is now known as zz_NameNotFound
Mar 30 11:02:18 <jas0>	for every deep compare you see, I can probably show you 10 ptr compares in my code
Mar 30 11:02:24 <jas0>	and any code in the wild probably
Mar 30 11:02:34 <jas0>	(of non native types)
Mar 30 11:02:48 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 11:02:58 <mib_dgeg91>	jas0, but have you thought, that maybe, you are writing your code in a poor way as far as Rustceans does things?
Mar 30 11:03:04 <nox>	jas0: It would break *all* collections.
Mar 30 11:03:07 <Ms2ger>	mib_dgeg91, not helpful
Mar 30 11:03:11 <mib_dgeg91>	I can show you C-like C++ and then bash on C++ all I want
Mar 30 11:03:35 <mib_dgeg91>	And then C++'s moderator in freenode will kick me for being a troll :/
Mar 30 11:03:54 *	csoriano has quit (Client exited)
Mar 30 11:03:58 <jas0>	mib_dgeg91, maybe i should chose another lang if rust si going to go for the slow functional approach. I put some time in if bc I thought it would go for a C++ but better and faster approach
Mar 30 11:04:11 <apajx>	jas0: so basically you think it's signficantly more frequent to want addr comparison, so why is it not default behavior?
Mar 30 11:04:19 *	Nilabhra (nilabhra@moz-dj9.rib.187.115.IP) has joined
Mar 30 11:04:23 <jas0>	for non-native types, yes
Mar 30 11:04:28 <vfs>	jas0: more constructively, instead of comparing refs to singleton structures to get type, consider using enum and match.
Mar 30 11:04:32 <Mutabah>	And that doing value comparisons like this will be a very large speed penalty inherent to the language
Mar 30 11:04:36 <jas0>	vfs, can't
Mar 30 11:04:38 <apajx>	Well that sounds reasonable to me, so the question just becomes how frequent is it really
Mar 30 11:04:43 *	Murtaugh has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 11:04:50 *	sankha has quit (Connection closed)
Mar 30 11:04:50 *	bmaxa (bmaxa@moz-o4h.l47.72.109.IP) has joined
Mar 30 11:04:55 <jas0>	vfs, they a have constant data that needs to be setup, and enums don't allow that well
Mar 30 11:05:16 *	klue (foo@moz-ijksur.hfc.comcastbusiness.net) has joined
Mar 30 11:05:17 <jix>	another problem with making eq on references be by address is that it would break a lot of code that is generic over both
Mar 30 11:05:46 *	dwins (dwins@moz-9kg4ko.va.comcast.net) has joined
Mar 30 11:05:59 <IPoAC>	Is there a way to get rid of the unused warning variable warning in a `if let A{x,y} = z { ... }` when not using y in the code block?
Mar 30 11:06:04 <jas0>	jix, it was a bad decision to start with and now can't be fixed. I understand that. I have to go try to fix a bunch of code now.
Mar 30 11:06:17 <jas0>	#[allow(unused)] or something
Mar 30 11:06:18 <jix>	jas0: that is not what I was saying.
Mar 30 11:06:22 <nox>	jas0: Using pointer equality in Eq breaks all collections.
Mar 30 11:06:26 <keeper>	IPoAC: Put _ instead of y
Mar 30 11:06:32 <jas0>	#[allow)(dead_code)]
Mar 30 11:06:39 <jas0>	nox, how?
Mar 30 11:06:42 <nox>	books.remove("The Odyssey")
Mar 30 11:06:52 <SuperFluffy>	IPoAC: Or _y
Mar 30 11:06:55 <IPoAC>	keeper: that's what I thought, but I got error: expected ident, found `_`
Mar 30 11:06:55 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 11:06:55 <keeper>	_ is a place holder for no value.
Mar 30 11:07:05 <jas0>	nox, you shouldn't be doing that
Mar 30 11:07:09 <nox>	Ah ah.
Mar 30 11:07:14 *	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined
Mar 30 11:07:34 <jix>	jas0: I have a vector of references to some buffers, I want to sort them. that would break if Eq (and by extension Ord) would be by address.
Mar 30 11:07:35 <jas0>	rust basically decides to call itself fast, but then make writing fast code a pain in the butt
Mar 30 11:07:37 <IPoAC>	SuperFluffy: and _y leads to `A doesn't have a _y field`
Mar 30 11:07:44 <SuperFluffy>	IPoAC: Ah, I ran in this recently; this kind of pattern matching only works for unnamed variants. Try ..
Mar 30 11:07:45 *	staticassert (Mibbit@moz-dqq.uce.118.208.IP) has joined
Mar 30 11:07:48 *	fl0w has quit (Client exited)
Mar 30 11:07:59 <jas0>	jix, your comparitor can easily take that into account
Mar 30 11:07:59 <IPoAC>	SuperFluffy: nice, thanks :)
Mar 30 11:08:13 *	sankha has quit (Connection closed)
Mar 30 11:08:21 <Mutabah>	jas0: On the contrary, it is not hard to write fast code. There are some places where slowness may be slightly obscured... but nowhere near the number of places in C++
Mar 30 11:08:28 <jas0>	forcing a deep compare makes it impossible to go back to a shallow compare. the other way around still allows both.
Mar 30 11:08:35 <Mutabah>	(You've latched on to one of those places)
Mar 30 11:08:39 <apajx>	jas0: you could maybe do something like an Identity trait with identity : &A x &A -> bool, and have a macro that impls it for the types you care about?
Mar 30 11:08:39 <nox>	And when do you need both exactly?
Mar 30 11:08:41 <Quxxy>	IPoAC: y: _
Mar 30 11:08:42 <SuperFluffy>	IPoAC: Uh, I think my terminology is wrong... I mean tuple-like variants, not unnamed.
Mar 30 11:08:42 *	JagaJaga (JagaJaga@moz-ua8.hhl.62.178.IP) has joined
Mar 30 11:08:47 <Mutabah>	jas0: A shallow is still doable by using a helper function
Mar 30 11:09:09 <jas0>	Hrm.. could you make a Trait that did Eq by pointer val?
Mar 30 11:09:15 <Mutabah>	yep
Mar 30 11:09:16 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 11:09:35 <Mutabah>	It wouldn't be an operator like == is, but it could be a trait or even just a free function
Mar 30 11:09:38 <jix>	jas0: you could make a ByAddr<Foo> that wraps a  &Foo and does by addr comparision
Mar 30 11:09:40 <jas0>	so I could #[derive(EqByPointer)] or something?
Mar 30 11:09:57 <jas0>	that would actually make a good compromise
Mar 30 11:10:18 <jas0>	Mutabah, and possible pay a function call overhead, no way
Mar 30 11:10:27 <Mutabah>	jas0: no overhead when optimised
Mar 30 11:10:39 <apajx>	Can you do #[derive(MyTrait)]? I thought derive was for builtin traits?
Mar 30 11:10:45 <Mutabah>	apajx: Not yet
Mar 30 11:10:49 *	gleb has quit (Ping timeout: 121 seconds)
Mar 30 11:10:50 <jas0>	Mutabah, you think. I can probably find you cases that breaks, like potential vcalls
Mar 30 11:10:54 <apajx>	Mutabah: it's planned though? That'd be pretty cool
Mar 30 11:10:56 <Quxxy>	!crate custom_derive
Mar 30 11:10:56 <rustbot>	custom_derive (0.1.5) - This crate provides a macro that enables the use of custom derive attributes. -> https://crates.io/crates/custom_derive
Mar 30 11:11:12 <apajx>	neat
Mar 30 11:11:21 *	Roomy (tlaziuk@moz-si2.ak0.231.109.IP) has joined
Mar 30 11:11:29 *	psd (uid62508@moz-6soqq9.richmond.irccloud.com) has joined
Mar 30 11:11:38 <Mutabah>	jas0: vcalls are pretty obvious in rust
Mar 30 11:11:40 <bluss>	jas0: that can be ruled out statically
Mar 30 11:11:57 *	e_svedang has quit (Client exited)
Mar 30 11:12:23 <jas0>	have to go back to work... thinking of make a reddit post last asking for rust's biggest flaws in other people's opinions. I have list of about 3-4, but I this is now my top of the list (which isn't that bad if you think about it)
Mar 30 11:12:34 <bluss>	fn eq_by_ptr<T>(a: &T, b: &T) -> bool { a as *const T == b as *const T }  // no virtual calls possible
Mar 30 11:12:47 *	}ls{ (uhelp@moz-lbcfju.dip0.t-ipconnect.de) has joined
Mar 30 11:13:08 <Amanieu>	it seems the rust reference is misleading: target_arch = "x86" doesn't exist, it's target_arch = "i686"
Mar 30 11:13:13 *	skade_ (skade@moz-4eh.d50.201.212.IP) has joined
Mar 30 11:13:19 <Mutabah>	jas0: There was one about a week ago
Mar 30 11:13:21 <vfs>	jas0: there was one post like this just recently.
Mar 30 11:13:27 <bluss>	Amanieu: report a bug maybe
Mar 30 11:13:43 <Amanieu>	will do
Mar 30 11:13:46 <jas0>	Yeah, but that was for small things. I mean likethe BIG language things that are basically baked in now.
Mar 30 11:14:00 <jas0>	Or maybe slightly different: Worst Surprises in Rust
Mar 30 11:14:03 *	mneumann (Thunderbird@moz-00qv32.rz.uni-karlsruhe.de) has joined
Mar 30 11:14:22 *	fengshaun has quit (Quit: bye bye!)
Mar 30 11:14:25 <jas0>	Rust refs are actually much different from C/C++ pointers and even Java's references would now be my top
Mar 30 11:14:34 <Mutabah>	jas0: You appear to be very upset and set in your ways that rust has made a critical error
Mar 30 11:14:35 <jas0>	^^ Important lesson for devs
Mar 30 11:14:48 <jas0>	It is a critical error, I think.
Mar 30 11:14:48 <bluss>	jas0: yes they are pretty different, also different from C++ references
Mar 30 11:14:55 <jas0>	I'm not upset, just surprised.
Mar 30 11:14:59 <jas0>	And annoyed
Mar 30 11:15:04 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 11:15:06 <apajx>	You're vexed!
Mar 30 11:15:09 *	msingle has quit (Ping timeout: 121 seconds)
Mar 30 11:15:09 <apajx>	I love that word, vexed.
Mar 30 11:15:12 *	pereba (pereba@moz-fj0kj4.4ocf.u671.07f2.2804.IP) has joined
Mar 30 11:15:23 *	EsBe has quit (Ping timeout: 121 seconds)
Mar 30 11:15:34 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 30 11:16:41 *	skade has quit (Ping timeout: 121 seconds)
Mar 30 11:17:11 *	zz_NameNotFound is now known as NameNotFound
Mar 30 11:17:34 *	urodna (urodna@moz-ogglgp.res.rr.com) has joined
Mar 30 11:17:48 *	tschottdorf (tschottdorf@moz-sqs4n4.netcologne.de) has joined
Mar 30 11:17:56 *	dethos (dethos@moz-4u3337.dsl.telepac.pt) has joined
Mar 30 11:18:34 *	monti-2 has quit (Ping timeout: 121 seconds)
Mar 30 11:20:54 *	scootaloo has quit (Ping timeout: 121 seconds)
Mar 30 11:21:22 *	ehiggs has quit (Ping timeout: 121 seconds)
Mar 30 11:21:23 <kirillkh>	/bump is there a less terrible way to filter array by index? https://play.rust-lang.org/?gist=96c18eb392ea29ae18804840fe20307d&version=stable
Mar 30 11:22:14 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 30 11:22:35 <Mutabah>	kirillkh: Try the .retain method?
Mar 30 11:22:42 *	tschottdorf has quit (Client exited)
Mar 30 11:23:08 *	KiChjang (KiChjang@moz-qvgvf9.uwaterloo.ca) has joined
Mar 30 11:23:18 <KiChjang>	is rustbuild the default build system in rust now?
Mar 30 11:23:19 <kirillkh>	Mutabah, how does that help?
Mar 30 11:23:21 <staticassert>	It would be cool if we could just do like 'vecname[indices_vec]' and have it return a new vec of the elements in those indices
Mar 30 11:23:29 *	jdnavarro (danny@moz-9sfas9.dynamicIP.rima-tde.net) has joined
Mar 30 11:23:36 <staticassert>	Maybe something that could happen with specialization
Mar 30 11:23:54 <Mutabah>	kirillkh: well, ... I'm not 100% sure if it operates in order, but you can keep an external counter
Mar 30 11:23:57 <bluss>	staticassert: it could happen without specialization too
Mar 30 11:24:14 <staticassert>	bluss: Wouldn't you have to 'overload' the Index trait?
Mar 30 11:24:14 *	tschottdorf (tschottdorf@moz-sqs4n4.netcologne.de) has joined
Mar 30 11:24:20 *	bcasiello (Mibbit@moz-rno88s.ams.hpecore.net) has joined
Mar 30 11:24:28 <bluss>	staticassert: it's already massively "overloaded" (multidispatch)
Mar 30 11:24:40 <bluss>	Vec implements it for indexing with usize, Range<usize>, RangeTo<usize>, etc
Mar 30 11:24:46 <staticassert>	Oh, interesting. I thought it only took a usize.
Mar 30 11:24:49 <staticassert>	Ohhhh
Mar 30 11:24:53 <bluss>	also the inclusive ranges
Mar 30 11:24:56 <kirillkh>	Mutabah, you need a predicate for retain... in my case, the predicate would be to check in a hashset or something... is that what you're suggesting?
Mar 30 11:25:02 *	KiChjang (KiChjang@moz-qvgvf9.uwaterloo.ca) has left
Mar 30 11:25:10 <staticassert>	Yeah but how would you use that to do this? 
Mar 30 11:25:20 <Mutabah>	kirillkh: No, just have the predicate compare a counter it's maintaining with the desired set of indexes
Mar 30 11:25:38 <bluss>	staticassert: impl<'a, T> Index<&'a [usize]> for Vec<T>  for example
Mar 30 11:25:44 <bluss>	staticassert: it should be fine to do today
Mar 30 11:25:45 *	NilSet (levyt@moz-vsjj62.sub-70-209-173.myvzw.com) has joined
Mar 30 11:25:58 *	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has joined
Mar 30 11:26:09 <kirillkh>	Mutabah, umm, a stateful predicate?
Mar 30 11:26:11 <bluss>	staticassert: oh, what makes it impossible is that Index is only for returning references
Mar 30 11:26:28 <bluss>	staticassert: so it's not related to specialization
Mar 30 11:26:56 <Mutabah>	kirillkh: yes
Mar 30 11:27:04 <Mutabah>	https://play.rust-lang.org/?gist=ff803651b970e9b12d44fc7c37e982bf&version=stable
Mar 30 11:27:32 <Mutabah>	not the fastest thing... and retain's order isn't documented
Mar 30 11:27:43 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 11:27:50 <Mutabah>	but it should work iirc
Mar 30 11:28:02 *	nyx (nyx@moz-7o34ff.albyny.csvoip.net) has joined
Mar 30 11:28:14 *	ayonix has quit (Ping timeout: 121 seconds)
Mar 30 11:28:40 <kirillkh>	Mutabah, well, quadratic complexity. that's why I mentioned hashset
Mar 30 11:28:40 <Mutabah>	That said, since it's a FnMut, it's likely that it's indended to operate in order
Mar 30 11:28:46 <Mutabah>	*nod*
Mar 30 11:29:00 <kirillkh>	Mutabah, also seems like an overkill and a constant-factor slowdown
Mar 30 11:29:03 <Mutabah>	This could be reduced to linear by requiring the input be sorted
Mar 30 11:29:21 *	ayonix (quassel@moz-4i0eh6.xyz) has joined
Mar 30 11:29:39 *	demilux (demilux@moz-73qa6c.wa.comcast.net) has joined
Mar 30 11:29:45 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 30 11:30:03 <kirillkh>	pretty sure my current solution is faster than the one with a hashset
Mar 30 11:30:47 <Mutabah>	kirillkh: Your current version collects three times
Mar 30 11:31:11 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 30 11:31:45 *	msingle (mts001@moz-4bg68s.hr.cox.net) has joined
Mar 30 11:31:55 <kirillkh>	Mutabah, true, but 3 linear array walks probably still beat building a hashset
Mar 30 11:31:59 *	pczarn (piotr@moz-9un7t9.izacom.pl) has joined
Mar 30 11:32:12 <Mutabah>	and allocations
Mar 30 11:32:16 <Mutabah>	kirillkh: Anyway, no need for a hash set
Mar 30 11:32:25 <Mutabah>	Just require that the list of indexes to keep be linear
Mar 30 11:32:32 <staticassert>	bluss: But doesn't it normally return a reference to T, not &[T] ?
Mar 30 11:32:34 <Mutabah>	s/linear/sorted/
Mar 30 11:32:46 *	SpaceManiac has quit (Quit: ZNC - http://znc.in)
Mar 30 11:32:49 <Mutabah>	And voila, you can do it in O(size of vec)
Mar 30 11:33:15 <kirillkh>	Mutabah, well, I can't
Mar 30 11:33:28 <kirillkh>	Mutabah, the whole idea of this function is to take an unsorted array of indices
Mar 30 11:34:15 <kirillkh>	I use it as indexing for objects that are passed to a complex algorithm that doesn't preserve order. indices' whole purpose is so that I can reconstruct the order
Mar 30 11:34:32 *	djcb has quit (Ping timeout: 121 seconds)
Mar 30 11:34:37 <bluss>	staticassert: Index<usize> has Output=T and Index<Range<usize>> has Output = [T]
Mar 30 11:34:45 <bluss>	staticassert: so they both return reference to Self::Output
Mar 30 11:34:56 <bluss>	staticassert: (For Vec)
Mar 30 11:35:06 <apajx>	kirillkh: maybe sort the index inside the call, perform the filter, and use the old index to perserve order?
Mar 30 11:35:16 *	drew has quit (Ping timeout: 121 seconds)
Mar 30 11:35:31 <bluss>	Mutabah: there shouldn't be an uncertainty about the order produced by retain
Mar 30 11:35:50 <kirillkh>	apajx, still a complexity hit
Mar 30 11:35:56 <Mutabah>	bluss: It's not specified in the docs, but it's a pretty good assumption that it's in order
Mar 30 11:36:07 *	jdnavarro has quit (Quit: WeeChat 1.4)
Mar 30 11:36:16 <Mutabah>	kirillkh: Depends on the input set size
Mar 30 11:36:25 *	msingle has quit (Ping timeout: 121 seconds)
Mar 30 11:36:36 <kirillkh>	Mutabah, items.len() ~ indices.len(). same order
Mar 30 11:36:42 <Mutabah>	kirillkh: Three allocations (living for the same time) of 200 items would beat a single allocation of 50
Mar 30 11:37:07 <Mutabah>	Make that four allocations
Mar 30 11:37:11 *	wldcordeiro (wldcordeiro@moz-ul1rm9.ut.comcast.net) has joined
Mar 30 11:37:36 *	pereba_ (pereba@moz-lbg.fpb.59.187.IP) has joined
Mar 30 11:37:37 <kirillkh>	Mutabah, lost you there
Mar 30 11:37:43 <Mutabah>	kirillkh: Are those indexes used to prune a list, or to sort/shuffle it?
Mar 30 11:37:57 <staticassert>	bluss: I'm sort of confused. I'm going to have a look at the implementation.
Mar 30 11:38:04 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 30 11:38:07 <Mutabah>	kirillkh: Your version calls .collect() into a Vec three times
Mar 30 11:38:22 *	Eonil (Eonil@moz-2qo.kfq.238.218.IP) has joined
Mar 30 11:38:27 <Mutabah>	kirillkh: (sorry, it is three, miscounted)
Mar 30 11:38:41 <staticassert>	bluss: Oh, they're two separate traits.
Mar 30 11:38:44 <Mutabah>	leading to three allocations existing for the same time
Mar 30 11:38:53 <bluss>	staticassert: two separate trait impls
Mar 30 11:38:53 *	Kynes (Kynes@moz-j2us35.mit.edu) has joined
Mar 30 11:38:55 <kirillkh>	Mutabah, the indices are there to reconstruct the original order of the list of items (there was an original array with items given in some order, then an algorithm filtered out some items, and returned an array of (item,orig_index) pairs)
Mar 30 11:39:32 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 11:40:03 <kirillkh>	Mutabah, and how would that beat a single allocation of 50? and what do you mean by that?
Mar 30 11:40:36 *	pereba has quit (Ping timeout: 121 seconds)
Mar 30 11:40:37 *	pereba_ is now known as pereba
Mar 30 11:40:55 <Mutabah>	kirillkh: Creating three allocations and filling them with 200 elements each (of T, the value type) would be more expensive than doing a single allocation of ~150 or so usizes
Mar 30 11:41:10 *	Mermi (uid96745@moz-v9qrgi.richmond.irccloud.com) has joined
Mar 30 11:41:21 <Mutabah>	Granted, jemalloc probably makes the allocation itself pretty cheap...
Mar 30 11:41:24 <kirillkh>	Mutabah, that's the inverse of what you said (I guess typo)
Mar 30 11:41:43 <Mutabah>	Beat in expense... (sorry)
Mar 30 11:41:52 <staticassert>	bluss: I see now, thank you.
Mar 30 11:41:58 <Mutabah>	Anyway - I'd say you should profile this before deciding to what to do
Mar 30 11:42:03 *	ptc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 11:42:28 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 30 11:42:33 <Mutabah>	Hashmap, sorted index list, selection sort of elements, ...
Mar 30 11:42:44 <kirillkh>	well, I was hoping for some not-too-ugly solution with the same characteristics as the obvious solution in C...
Mar 30 11:43:20 <Mutabah>	if T: Default, then you could just do a selection sort with that
Mar 30 11:43:42 <kirillkh>	single allocation, 2 iterations
Mar 30 11:44:18 <Mutabah>	It should be possible... but it's nearly 11PM and I'm tired
Mar 30 11:44:36 <Mutabah>	and dont' fully grasp the requirements
Mar 30 11:44:54 *	jkonecny has quit (Quit: Leaving)
Mar 30 11:44:54 <apajx>	Maybe an example of a C solution would help?
Mar 30 11:45:12 <apajx>	Kind of an ideal measuring stick if you will
Mar 30 11:45:39 *	mvyskocil has quit (Ping timeout: 121 seconds)
Mar 30 11:46:23 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 11:46:25 *	dinfuehr has quit (Connection closed)
Mar 30 11:46:27 *	Arash-M_ has quit (Quit: Abbacadabra.... PoOoOof)
Mar 30 11:47:52 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 30 11:47:59 *	tycoon177 has quit (Connection closed)
Mar 30 11:48:06 *	kcking has quit (Client exited)
Mar 30 11:50:21 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 30 11:50:47 *	NameNotFound is now known as zz_NameNotFound
Mar 30 11:51:36 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 11:51:42 *	annodomini has quit (Client exited)
Mar 30 11:53:40 *	lipkab (the_new_lip@moz-ktjdl3.biatv.hu) has joined
Mar 30 11:53:54 *	ARM9 (ARM9@moz-0cvl51.customer.t3.se) has joined
Mar 30 11:54:04 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 11:55:07 *	RegulationD (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 30 11:55:28 <kirillkh>	apajx, 1 allocation, 3 iterations http://pastebin.com/zNupSSg9
Mar 30 11:55:45 *	gmorenz (normal@moz-os4.l2b.52.70.IP) has joined
Mar 30 11:55:50 *	niemal (nl@moz-ub5.ean.107.79.IP) has joined
Mar 30 11:56:01 *	fbegou has quit (Quit: leaving)
Mar 30 11:56:03 *	casey_ has quit (Connection closed)
Mar 30 11:56:12 *	agile has quit (Connection closed)
Mar 30 11:56:24 *	Gabriel_7 has quit (Connection closed)
Mar 30 11:57:28 *	kfpratt (kfpratt@moz-52j7lo.abhsia.telus.net) has joined
Mar 30 11:58:15 *	kefin has quit (Ping timeout: 121 seconds)
Mar 30 11:58:46 *	agile (mike@moz-m71dqt.rcsntx.sbcglobal.net) has joined
Mar 30 11:59:01 *	romanlevin (romanlevin@moz-rm5mc8.echostar.pl) has joined
Mar 30 11:59:24 *	tschottdorf has quit (Client exited)
Mar 30 12:00:02 *	tennix (vagrant@moz-m06.lfv.114.123.IP) has joined
Mar 30 12:05:08 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 12:05:13 *	dinfuehr has quit (Connection closed)
Mar 30 12:05:15 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 12:05:50 *	l3france (l3france@moz-tnt13h.csclub.uwaterloo.ca) has joined
Mar 30 12:06:21 *	dzbarsky (Adium@moz-c3elp2.82pc.j76f.0646.2601.IP) has joined
Mar 30 12:06:31 *	orks has quit (Quit: rakede)
Mar 30 12:07:03 *	hiptobecubic has quit (Quit: 00 PC LOAD LETTER)
Mar 30 12:08:11 *	daurnimator has quit (Quit: WeeChat 1.3)
Mar 30 12:08:18 *	cimes (cimes@moz-j8n.16c.135.128.IP) has joined
Mar 30 12:08:19 *	daurnimator (daurnimator@moz-tol6tm.8ht3.2og7.19f0.2001.IP) has joined
Mar 30 12:09:25 *	vmx has quit (Quit: Leaving)
Mar 30 12:09:43 *	cafeclimber (cafeclimber@moz-1jd3qq.tamulink.tamu.edu) has joined
Mar 30 12:10:14 *	Roomy has quit (Client exited)
Mar 30 12:10:22 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 30 12:10:24 *	cafeclimber (cafeclimber@moz-1jd3qq.tamulink.tamu.edu) has joined
Mar 30 12:10:25 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 30 12:11:42 *	skade_ has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 12:11:44 <l3france>	is the Syntax and Semantics (chapter 4) of the rust book meant to be read in order?
Mar 30 12:12:24 <l3france>	just wondering because Lifetimes (secontion 4.9) has headers about structs and the impl keyword before either of those things have been introduced
Mar 30 12:13:01 *	p32blo (p32blo@moz-gbnpoc.di.uminho.pt) has joined
Mar 30 12:13:11 <Noldorin>	l3france, the order is weird yeah. it's being rewritten apparently
Mar 30 12:13:24 *	kcking (kcking@moz-4o4scq.dyn.mit.edu) has joined
Mar 30 12:13:32 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 30 12:14:22 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 30 12:15:00 <julienw>	the documentation is not clear whether I should clone a Arc before downgrading it to a Weak, or if a clone is implicit ?
Mar 30 12:15:45 *	LRN has quit (Quit: Miranda NG! Smaller, Faster, Easier. http://miranda-ng.org/)
Mar 30 12:15:50 *	jfo has quit (Connection closed)
Mar 30 12:15:50 *	LRN (Miranda@moz-63ipbh.nationalcablenetworks.ru) has joined
Mar 30 12:15:56 *	ptc (textual@moz-qjn.9ii.88.38.IP) has joined
Mar 30 12:15:58 <l3france>	Noldorin: alright, thanks. I'll start jumping around : P
Mar 30 12:16:31 <Noldorin>	yep sure
Mar 30 12:16:33 *	chain_chan (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 30 12:16:59 <julienw>	the interface makes me think it's similar to a  clone so I should not clone beforehand
Mar 30 12:17:53 *	sankha has quit (Connection closed)
Mar 30 12:17:56 *	jas0 has quit (Quit: Leaving)
Mar 30 12:19:01 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 30 12:19:14 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 30 12:19:20 <talchas>	julienw: yes, the downgrade function takes a &Arc, so you don't need a clone or anything
Mar 30 12:19:23 *	skeithc (Thunderbird@moz-heu.21f.150.49.IP) has joined
Mar 30 12:19:25 *	SuperFluffy has quit (Quit: WeeChat 1.4)
Mar 30 12:19:27 *	fl0w has quit (Client exited)
Mar 30 12:19:54 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 12:20:36 <julienw>	talchas, thanks !
Mar 30 12:20:41 <vfs>	kirillkh: http://is.gd/mjaAH4
Mar 30 12:21:45 *	kefin (kefin@moz-bvv72q.cgn.ntnu.no) has joined
Mar 30 12:22:08 *	jincreator (jincreator@moz-mv2.45t.97.183.IP) has joined
Mar 30 12:22:17 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 12:23:23 *	jightuse (jightuse@moz-gon.baa.128.5.IP) has joined
Mar 30 12:23:28 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 30 12:24:20 <jmesmon>	Does anyone have a pattern for portably handling gcc-style bitfields in ffi code? (ie: not need seperate branches for le vs be)
Mar 30 12:24:37 *	fl0w has quit (Client exited)
Mar 30 12:26:03 *	kazagistar (Adium@moz-br6.b81.207.205.IP) has joined
Mar 30 12:26:39 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 12:26:49 *	tromey (tromey@moz-6di1m0.hlrn.qwest.net) has joined
Mar 30 12:26:56 *	fl0w has quit (Client exited)
Mar 30 12:27:39 *	brianloveswords (brianlovesw@moz-nu8.d5m.14.107.IP) has joined
Mar 30 12:28:50 <kirillkh>	vfs, thanks, that's the most idiomatic solution so far
Mar 30 12:29:24 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 12:29:35 <skeithc>	Hi. How would one convert an array of four u8s's into an i32? Thanks.
Mar 30 12:29:52 *	dbrgn (dbrgn@moz-qhkkt5.yourvserver.net) has joined
Mar 30 12:30:49 <apajx>	skeithc: if you want to reinterpret the bytes you can unsafe { transmute(...) }, there is probably a crate though that handles endianness and problems like that for you though
Mar 30 12:31:08 <apajx>	though though though though
Mar 30 12:31:56 *	seriyPS has quit (Quit: Leaving.)
Mar 30 12:32:20 <skeithc>	apajx: I see. Thanks. 
Mar 30 12:32:27 *	ToBeFree has quit (Quit: Ping timeout: 1337 seconds)
Mar 30 12:32:50 *	IPoAC has quit (Quit: WeeChat 1.4)
Mar 30 12:33:03 <vfs>	skeithc: crate is called byteorder
Mar 30 12:33:26 *	SiegeLord has quit (Quit: It's a joke, it's all a joke.)
Mar 30 12:33:36 <skeithc>	vfs: Thanks.
Mar 30 12:33:57 *	pczarn has quit (Connection closed)
Mar 30 12:34:21 *	Roomy (tlaziuk@moz-si2.ak0.231.109.IP) has joined
Mar 30 12:34:23 <jix>	I wonder if byteorder should be included in the stdlib, just to stop people from needlessly using transmute and accidentally writing endian-unsafe code
Mar 30 12:35:11 *	sankha has quit (Connection closed)
Mar 30 12:36:17 *	Eisfreak7 has quit (Ping timeout: 121 seconds)
Mar 30 12:36:23 <Quxxy>	Pfft; the stdlib doesn't even have the clearly *far* more useful and fundamental "boolinator" crate
Mar 30 12:36:30 <Quxxy>	I can't see them adding something as niche as byteorder
Mar 30 12:36:42 <vfs>	we need a stdext
Mar 30 12:36:47 <Quxxy>	!crate stdx
Mar 30 12:36:47 <rustbot>	stdx (0.0.1) - The missing batteries of Rust -> https://crates.io/crates/stdx
Mar 30 12:36:53 <Quxxy>	Everyone lost interest almost immediately
Mar 30 12:37:06 <Quxxy>	"Wow, this a *great* idea!"
Mar 30 12:37:12 <Quxxy>	(One week later) "std what now?"
Mar 30 12:37:25 *	romanlevin has quit (Ping timeout: 121 seconds)
Mar 30 12:37:36 <SneakySnake>	It's simple enough to add a specific dependency
Mar 30 12:38:07 *	junsli (junsli@moz-s5t2ef.o5d1.ogn4.0646.2601.IP) has joined
Mar 30 12:38:09 <apajx>	you would ideally want a stdx to not depend on anything else also wouldn't you?
Mar 30 12:38:31 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 12:38:44 *	ParadoxSpiral_ (ParadoxSpir@moz-0587or.dip0.t-ipconnect.de) has joined
Mar 30 12:38:45 *	lipkab has quit (Ping timeout: 121 seconds)
Mar 30 12:39:22 *	akarambir has quit (Quit: Leaving...)
Mar 30 12:39:31 <jix>	Quxxy: my argument was more about avoiding transmute, than about general usefulness...
Mar 30 12:39:32 <teratorn>	4,485 crates on crates.io - obviously some are crap or toys, but nonetheless, that is significant progress in the ecosystem. Rust might actually be a new language that "makes it to the Big Time"... not sure when the last time that happened
Mar 30 12:39:41 <teratorn>	C#?
Mar 30 12:39:48 <jix>	Go?
Mar 30 12:39:52 <teratorn>	oh, Go.
Mar 30 12:39:57 <jix>	when did scala start?
Mar 30 12:40:01 <teratorn>	sorry, memory repression <-
Mar 30 12:40:07 <teratorn>	is scala Big Time?
Mar 30 12:40:30 <feti>	Look on a job listing site and find a scala job
Mar 30 12:40:31 <Amanieu>	teratorn: oh, I helped! I just pushed my new crate 3 minutes ago :D
Mar 30 12:40:31 <teratorn>	I know it's kind of big
Mar 30 12:40:41 <teratorn>	Amanieu: cool!
Mar 30 12:40:57 <jix>	as much as Go from my impression... different sectors of the general industry though
Mar 30 12:41:04 <apajx>	What happens when Rust tries to go 2.0 and the ecosystem fractures and badly as python2 to 3? Maybe that's too far off in the distance to care about right now.
Mar 30 12:41:07 *	talchas has quit (Connection closed)
Mar 30 12:41:15 <teratorn>	apajx: never going to happen.
Mar 30 12:41:18 <Amanieu>	https://github.com/Amanieu/atomic-rs
Mar 30 12:41:22 *	shackra (shackrasisl@moz-lo1.ph4.237.201.IP) has joined
Mar 30 12:41:31 *	talchas (user@moz-i75sak.ca.comcast.net) has joined
Mar 30 12:41:36 <apajx>	teratorn: why can't it happen?
Mar 30 12:42:02 *	ParadoxSpiral has quit (Ping timeout: 121 seconds)
Mar 30 12:42:13 <teratorn>	apajx: because Rust hasn't made any of the same mistakes Python made that necessitated a new backward-incompatible language
Mar 30 12:42:24 <Amanieu>	because the rust team made a big deal about 1.0 being stable and forward-compatible
Mar 30 12:42:40 <teratorn>	people know a LOT more about language design today and pre 1.0-rust than they did in 1991
Mar 30 12:42:46 <jix>	and even for breaking changes... with statically checkable deprecation, feature gates, etc. rust is in a much better position than python was or is
Mar 30 12:42:50 *	robojeb has quit (Quit: ZNC 1.6.3 - http://znc.in)
Mar 30 12:42:52 <feti>	I believe the team is going to redo the macro system at some point. The documentation leads me to believe this. That could be a big headache.
Mar 30 12:43:05 <dseitz>	That pattern is exclusive to Swift. Only with Swift do you get to re-write your app with every new release of Xcode :)
Mar 30 12:43:12 <Amanieu>	well the old macro system will still be supported, just marked as deprecated
Mar 30 12:43:36 <jix>	also a tool like python's 2to3 would work much better in a statically typed language like rust
Mar 30 12:43:52 *	nox wants a Coccinelle tool for Rust. :(
Mar 30 12:43:55 <jix>	how many days was it from `?` landing to untry being released?
Mar 30 12:44:09 *	tycoon177 has quit (Connection closed)
Mar 30 12:44:13 *	sankha has quit (Connection closed)
Mar 30 12:44:25 *	brson (brson@moz-u3dg2t.sfo1.mozilla.com) has joined
Mar 30 12:44:26 *	ChanServ sets mode +a on #rust brson
Mar 30 12:44:26 *	ChanServ gives channel operator status to brson
Mar 30 12:44:31 *	skade (skade@moz-glo3te.dip0.t-ipconnect.de) has joined
Mar 30 12:44:48 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 30 12:45:03 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 12:45:05 *	dmilith (dmilith@moz-8dkrre.interkar.pl) has joined
Mar 30 12:45:09 *	kzan (kzand@moz-oecg7b.res.rr.com) has joined
Mar 30 12:45:22 <dmilith>	is there a way of reusing "use ... " from file when doing mod tests {} ?
Mar 30 12:45:35 <dmilith>	i can use super::*; for local functions
Mar 30 12:45:36 *	brianlov_ (brianlovesw@moz-n4t7m6.biz.rr.com) has joined
Mar 30 12:45:48 <dmilith>	do I need to copy & paste imports ?
Mar 30 12:45:54 <dmilith>	it's like 50 lines of "use ..."
Mar 30 12:46:30 <dmilith>	it's pointless if it has to be copied, then I don't see usability factor in mod tests {}
Mar 30 12:46:44 <vfs>	dmilith: you can put "pub use ..." into a `mod test_prelude` and `use test_prelude::*` in your tests;
Mar 30 12:46:58 <dmilith>	ah, interesting.
Mar 30 12:47:50 *	sankha has quit (Connection closed)
Mar 30 12:48:25 *	Zr40 (zr40@moz-92llkv.adsl.xs4all.nl) has joined
Mar 30 12:48:27 <Amanieu>	dmilith: wildcard use will only include public items
Mar 30 12:48:41 *	dethos has quit (Ping timeout: 121 seconds)
Mar 30 12:48:46 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 12:48:52 *	brianloveswords has quit (Ping timeout: 121 seconds)
Mar 30 12:48:59 <dmilith>	i see, thanks
Mar 30 12:49:07 *	dethos (dethos@moz-4u3337.dsl.telepac.pt) has joined
Mar 30 12:49:09 *	yuja has quit (Quit: Leaving)
Mar 30 12:49:11 *	cbrewster has quit (Connection closed)
Mar 30 12:49:37 *	vmesons has quit (Quit: Konversation terminated!)
Mar 30 12:49:48 *	vmeson (rmacleod@moz-hq5.1km.224.128.IP) has joined
Mar 30 12:50:04 *	durka42 has quit (Client exited)
Mar 30 12:50:14 *	sankha has quit (Connection closed)
Mar 30 12:52:00 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 12:52:18 *	jnicklas has quit (Client exited)
Mar 30 12:52:19 <JagaJaga>	If I try to do something like: `a.foo(); a.bar();` and I'm getting `use of moved value` in `bar()` what should I do?
Mar 30 12:54:17 *	sankha has quit (Connection closed)
Mar 30 12:54:51 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 12:54:57 *	gleb (gleb@moz-3ir1e8.rusanovka-net.kiev.ua) has joined
Mar 30 12:54:59 *	stelarcf__ has quit (Ping timeout: 121 seconds)
Mar 30 12:56:08 *	sankha has quit (Connection closed)
Mar 30 12:56:28 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 12:56:59 *	M6dEEp (M6dEEp@moz-v2q.jdh.210.66.IP) has joined
Mar 30 12:57:12 *	eibwen has quit (Ping timeout: 121 seconds)
Mar 30 12:57:18 *	dinfuehr has quit (Connection closed)
Mar 30 12:57:24 *	starblue has quit (Ping timeout: 121 seconds)
Mar 30 12:59:06 *	mkoskar has quit (Ping timeout: 121 seconds)
Mar 30 12:59:26 <Amanieu>	JagaJaga: don't take self by value
Mar 30 12:59:42 *	dwins has quit (A TLS packet with unexpected length was received.)
Mar 30 12:59:42 <Amanieu>	if you take self by value then it will be moved
Mar 30 12:59:54 *	dzbarsky (Adium@moz-gan52s.82pc.j76f.0646.2601.IP) has joined
Mar 30 13:00:05 <JagaJaga>	Amanieu: but I need to use self in foo()
Mar 30 13:00:06 <Amanieu>	but if you have 'fn foo(&self)' then self will only be borrowed, not moved
Mar 30 13:00:15 <JagaJaga>	Amanieu: oh!
Mar 30 13:00:19 <Amanieu>	use &self or &mut self
Mar 30 13:00:31 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 30 13:00:34 *	butts_butts (buttsbutts@moz-2fuk5v.dyn.telefonica.de) has joined
Mar 30 13:00:41 <JagaJaga>	Amanieu: nice! Thank you!
Mar 30 13:00:48 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 13:01:02 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 13:01:09 *	FreeBird has quit (Connection closed)
Mar 30 13:01:16 *	FreeBird (FreeBird@moz-jqkhkt.9t5k.kgbt.120b.2a02.IP) has joined
Mar 30 13:02:45 <wyvern>	I need to encode some data that has a variable length component prefixed by a 4-byte length. The most natural way would be to skip ahead, write out the data, then seek back and write the length. Would this be properly done by declaring a T: Write + Seek, or is there some better abstraction? Bonus points if it has helpers for handling endianness...
Mar 30 13:03:57 *	dikaiosune (aperry@moz-4qr287.egr.nau.edu) has joined
Mar 30 13:03:58 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 30 13:04:12 <hastake>	17:42 < teratorn> people know a LOT more about language design today and pre 1.0-rust than they did in 1991
Mar 30 13:04:15 <hastake>	they will know a lot more about language design in 20 years than now
Mar 30 13:04:30 <hastake>	i don't think it's a really strong argument :/
Mar 30 13:04:31 <teratorn>	hastake: well, sure.
Mar 30 13:04:54 *	frankmcsherry has quit (Connection closed)
Mar 30 13:05:08 <teratorn>	I think it's semi-strong... rust just isn't going to make the same dumb mistakes, we hope, that would necessitate a new backward-incompatible sorta-kinda-looks-the-same language
Mar 30 13:05:32 <teratorn>	there isn't any question of how you do unicode vs bytes, for instance
Mar 30 13:05:32 *	stelarcf__ (stelarcf@moz-t7t.cs4.138.178.IP) has joined
Mar 30 13:05:33 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 30 13:05:43 *	demilux (demilux@moz-153.u1a.99.70.IP) has joined
Mar 30 13:06:15 *	santiago has quit (Quit: Computer has gone to sleep.)
Mar 30 13:06:20 <teratorn>	much things are just implemented with Traits and not part of anything that would be language-breaking if deprecated and replaced in the future
Mar 30 13:06:45 <teratorn>	but that has nothing to do with the argument you were commenting on.
Mar 30 13:08:05 *	sankha has quit (Connection closed)
Mar 30 13:09:31 *	ahal is now known as ahal|afk
Mar 30 13:09:42 *	dwins (dwins@moz-9kg4ko.va.comcast.net) has joined
Mar 30 13:09:42 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 30 13:11:14 *	dwins has quit (A TLS packet with unexpected length was received.)
Mar 30 13:11:16 *	dwins (dwins@moz-9kg4ko.va.comcast.net) has joined
Mar 30 13:14:11 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 13:14:25 <mbrubeck>	wyvern: https://crates.io/crates/byteorder can handle the endianness, and works with any Write trait
Mar 30 13:14:40 <mbrubeck>	wyvern: Write + Seek should work fine.
Mar 30 13:15:22 <mbrubeck>	That'll let you encode to a File, or to a Cursor<&mut [u8]>
Mar 30 13:15:23 <wyvern>	OK. I presume in practice this will be done with a Vec<u8>; does it make sense to use Write + Seek anyway?
Mar 30 13:15:23 *	Emilgardis (Emilgardis@moz-j1r0h9.tbcn.telia.com) has joined
Mar 30 13:15:37 *	dardevelin has quit (Ping timeout: 121 seconds)
Mar 30 13:15:42 *	chris_99 has quit (Connection closed)
Mar 30 13:15:48 *	chris_ (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 30 13:15:51 <mbrubeck>	wyvern: If you don't want to support direct-to-filesystem encoding, then just taking `&mut [u8]` is also fine
Mar 30 13:16:45 <wyvern>	It looks like Write + Seek will let me do everything I need so I might as well allow users to write to more than just a byte slice, unless I'm missing something
Mar 30 13:17:13 *	stelarcf__ has quit (Connection closed)
Mar 30 13:17:31 *	junsli has quit (Quit: Be back later ...)
Mar 30 13:18:36 *	shellac has quit (Quit: Ex-Chat)
Mar 30 13:18:46 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:19:35 *	rovar (rovar@moz-fs6vtm.dyn.optonline.net) has joined
Mar 30 13:19:52 *	msingle (mts001@moz-4bg68s.hr.cox.net) has joined
Mar 30 13:20:00 *	sankha has quit (Connection closed)
Mar 30 13:20:04 *	arBmind has quit (Quit: Leaving.)
Mar 30 13:20:50 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 30 13:21:23 *	jas0 (jason@moz-vvo.58k.122.38.IP) has joined
Mar 30 13:21:57 *	Roomy has quit (Client exited)
Mar 30 13:22:08 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 30 13:22:09 <jas0>	Following up on my earlier questions: when is &type dereferenced and when is it not? &type == &type does dereference, but &type + &type does not. How do I know when it does?
Mar 30 13:22:21 *	e_svedang (erik@moz-j507bj.tbcn.telia.com) has joined
Mar 30 13:22:27 *	elyse (elyse@moz-dtjrv7.direct-adsl.nl) has joined
Mar 30 13:22:50 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 30 13:22:56 <Amanieu>	does anyone know an example of a type which is Sync but not Send?
Mar 30 13:23:54 <steveklabnik>	jas0: so, in this case, i believe it depends on the implementations. both of those end up being method calls, which do dereference
Mar 30 13:23:57 *	boopisaway is now known as boop
Mar 30 13:24:02 <steveklabnik>	but if it's implemented for references, then there's no need
Mar 30 13:24:17 *	sankha has quit (Connection closed)
Mar 30 13:24:47 <steveklabnik>	Amanieu: i always forget which one, but iirc, one is more primitive than the other
Mar 30 13:25:03 <pingveno>	jas0: Also, &type == &type isn't built into the compiler.
Mar 30 13:25:04 <steveklabnik>	so i think there are types which are send, but not sync, but i'm not sure if there are types that are sync but not send
Mar 30 13:25:05 *	larhat has quit (Quit: Leaving.)
Mar 30 13:25:27 <pingveno>	jas0: There's an implementation: impl<'a, A> Eq for &'a A where A: Eq + ?Sized
Mar 30 13:25:35 <pingveno>	And also: impl<'a, A> Eq for &'a mut A where A: Eq + ?Sized
Mar 30 13:25:47 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 30 13:26:11 <mbrubeck>	jas0: In general, if the operator has a corresponding trait (like PartialEq or Add), then if the trait method takes &self then (usually? always?) there will be generic impls for references
Mar 30 13:26:37 *	foser_ has quit (Client exited)
Mar 30 13:26:50 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 30 13:26:58 <mbrubeck>	jas0: In practice this means that comparison operators like < and == and >= etc. can always take references to types that support the operator
Mar 30 13:27:06 *	jincreator has quit (Ping timeout: 121 seconds)
Mar 30 13:27:59 <mbrubeck>	For operators whose methods take `self` (like the arithmetic and bitwise operators), a generic impl for references isn't possible
Mar 30 13:28:03 *	eibwen (eibwen@moz-hgsmu2.dip0.t-ipconnect.de) has joined
Mar 30 13:28:13 *	zrsmith92 (textual@moz-gehaap.sntcca.sbcglobal.net) has joined
Mar 30 13:28:16 <jas0>	this whole deref on compare is just broken behavior the more I think of it... sigh.
Mar 30 13:28:18 <mbrubeck>	so these ones can only take reference types that explicitly impl the trait
Mar 30 13:28:22 *	kcking has quit (Client exited)
Mar 30 13:29:07 <mbrubeck>	jas0: Note that `a == b` is really just sugar for `PartialEq::eq(&a, &b)`
Mar 30 13:29:27 <mbrubeck>	jas0: So it's not that `&a == &b` gets auto-deref.  It's that `a == b` does an auto-reference.
Mar 30 13:29:48 <mbrubeck>	It would be annoying to have to write `if &x == &0` all the time.
Mar 30 13:30:19 <jas0>	mbrubeck, we went in circles on this earlier here. I think compare by ptr is far more common for non native types.
Mar 30 13:30:28 <jas0>	If you are doing deep compares often, you are doing something wrong
Mar 30 13:30:52 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 30 13:30:56 <jas0>	&struct == &struct becomes massively expensive
Mar 30 13:31:23 <jas0>	and silent as to how you are deviating from the norm of c/C++/java/d/go/etc...
Mar 30 13:32:11 <jas0>	maybe rust should have used one of the special chars (~ maybe) for ptr-to-ptr compare
Mar 30 13:32:20 <jas0>	~~?
Mar 30 13:32:25 *	kmels (kmels@moz-d937o3.intelnet.net.gt) has joined
Mar 30 13:32:41 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 13:32:58 <jas0>	~=? pick one.. would make things more clear that having everybody write their one func to do it
Mar 30 13:33:11 *	avikpal (avikpal@moz-fa8.36b.194.117.IP) has joined
Mar 30 13:33:35 *	Donald-Trump (trump@moz-jro0ri.is.googolplex.ninja) has joined
Mar 30 13:33:46 *	ygrek_ (user@moz-8j9aeu.org.ua) has joined
Mar 30 13:33:55 *	hunt has quit (Ping timeout: 121 seconds)
Mar 30 13:34:05 <mbrubeck>	jas0: Yeah, it would be nice if there were a ptr-compare method/trait/operator/something for (smart) pointer types in the standard library.
Mar 30 13:34:13 <steveklabnik>	 I think 
Mar 30 13:34:13 <mbrubeck>	We have one in Servo
Mar 30 13:34:16 <steveklabnik>	              compare by ptr is far more common for non native types.
Mar 30 13:34:22 <steveklabnik>	that's the crux of it
Mar 30 13:34:23 <steveklabnik>	i think
Mar 30 13:34:31 *	foser (foser@moz-vchu7j.dynamic.ziggo.nl) has joined
Mar 30 13:34:35 *	foser is now known as foser_
Mar 30 13:36:05 <mbrubeck>	I'd note that in Servo we have only 16 uses of our `ptr_eq` method, and thousands of uses of the standard `==` operator.
Mar 30 13:36:30 <steveklabnik>	yeah, i don't think i've ever used pointer equality in rust
Mar 30 13:36:51 *	djcb (user@moz-8gluv9.elisa-laajakaista.fi) has joined
Mar 30 13:36:57 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 13:37:51 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 30 13:38:09 *	Eonil has quit (Quit: This computer has gone to sleep)
Mar 30 13:38:22 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:38:28 *	dzbarsky (Adium@moz-v18mcd.ca.comcast.net) has joined
Mar 30 13:39:23 *	psd has quit (Quit: Connection closed for inactivity)
Mar 30 13:39:42 *	hunt (hunt@moz-o0plju.range86-169.btcentralplus.com) has joined
Mar 30 13:39:57 *	dzbarsky has quit (Quit: Leaving.)
Mar 30 13:40:55 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 13:40:57 *	ixti has quit (Ping timeout: 121 seconds)
Mar 30 13:41:55 *	sankha has quit (Ping timeout: 121 seconds)
Mar 30 13:42:07 *	maximih (maximih@moz-43dnlt.tbcn.telia.com) has joined
Mar 30 13:42:36 <jas0>	mbrubeck, I guess a trait for PartialEqByPoiner might always work?
Mar 30 13:42:37 <kirillkh>	mbrubeck, how many of those thousands are misuses designed with pointer equality in mind? :)
Mar 30 13:42:38 <maximih>	Hi. Is there any drawback on using musl beside binary size?
Mar 30 13:42:45 *	arBmind (Andreas@moz-31k.srj.246.46.IP) has joined
Mar 30 13:42:46 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 30 13:43:00 *	lipkab (the_new_lip@moz-ktjdl3.biatv.hu) has joined
Mar 30 13:43:21 <jas0>	kirillkh, it's a system's language that should make system progamming easier, not protect ppl by making the default on everthing by value.
Mar 30 13:43:31 <jas0>	I'd use Haskell if I wanted that
Mar 30 13:43:34 *	J_Arcane (chatzilla@moz-f72bj8.bb.dnainternet.fi) has joined
Mar 30 13:43:56 <mbrubeck>	jas0: Note that raw pointers implement == using pointer equality.
Mar 30 13:44:37 <jas0>	I know, but always doing the casting and usafe blocks are a pain
Mar 30 13:44:38 <jmesmon>	maximih: it will probably be less tested that glibc configurations.
Mar 30 13:44:52 <mbrubeck>	You don't need any unsafe blocks to compare raw pointers
Mar 30 13:44:59 <jas0>	that's good at least.
Mar 30 13:45:02 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 30 13:45:09 *	carols10cents (carols10cen@moz-v0i.cad.89.208.IP) has joined
Mar 30 13:45:21 <jas0>	The common case is compare by pointer on structs though, so I would expect the operator== to do that
Mar 30 13:45:29 <jas0>	also the lest surprising case
Mar 30 13:45:46 <jas0>	I don't know many ppl that expect == to be a deep copy
Mar 30 13:45:46 <mbrubeck>	Again, I'm not sure this is the common case in idiomatic Rust.
Mar 30 13:45:57 <jas0>	why not?
Mar 30 13:46:04 *	elyse has quit (Quit: Leaving)
Mar 30 13:46:19 <mbrubeck>	Well, empirically we have only needed it a handful of times in Servo's tens (hundreds?) of thousands of lines of Rust
Mar 30 13:46:32 <maximih>	jmesmon: thanks
Mar 30 13:46:35 *	thills has quit (Quit: )
Mar 30 13:46:37 *	scootaloo (arrem@moz-6vk2fr.bih.net.ba) has joined
Mar 30 13:46:48 *	infynyxx has quit (Ping timeout: 121 seconds)
Mar 30 13:46:51 <mbrubeck>	If you have two &str and you want to compare them, I think comparing the referenced value is more common than comparing addresses
Mar 30 13:46:53 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 30 13:46:53 *	thills (thills@moz-2pruei.fios.verizon.net) has joined
Mar 30 13:46:57 *	thills has quit (Connection closed)
Mar 30 13:47:19 <mbrubeck>	and there's nothing special about &str here; the same is true for any other type that represents some comparable value
Mar 30 13:47:39 <jmesmon>	maximih: I've also run into some issues with musl on arm + rust (ie: fails to run built executables due to allocation failures)
Mar 30 13:47:39 <jas0>	mbrubeck, I almost never do that. I do a lot of pointer chasing for performance reaons and compare by mem loc is almost all I ever use on a user defined struct. Unless you are taking a functional approach, I can't see how that can possible be true
Mar 30 13:48:30 <jas0>	I guess is rust's focus is on being a faster functional language that would be a good decision. I don't think you'll get the systems/C people to move over to rust then
Mar 30 13:49:01 <jmesmon>	maximih: x86_64 should work find though (as it is a blessed triple)
Mar 30 13:49:30 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 30 13:49:55 *	nadirs (nadirs@moz-64sll0.retail.telecomitalia.it) has joined
Mar 30 13:50:53 <pingveno>	What is the idiomatic way to compare by memory location? I've never quite gotten that.
Mar 30 13:51:06 <maximih>	jmesmon: thanks, I am only planning to use it on x86_64
Mar 30 13:51:12 *	slayerjain (uid117577@moz-kmas3q.brockwell.irccloud.com) has joined
Mar 30 13:51:21 <pingveno>	Never really had the need to do so.
Mar 30 13:52:17 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 30 13:52:24 <mbrubeck>	pingveno: `a as *const T == b as *const T` (if `a` and `b` are `&T`)
Mar 30 13:52:32 <steveklabnik>	you can use _ instead of T
Mar 30 13:52:46 <pingveno>	That is a little bloody. :(
Mar 30 13:53:05 *	pingveno is used to Python's `a is b`
Mar 30 13:53:30 *	polyfractal has quit (Ping timeout: 121 seconds)
Mar 30 13:53:46 *	fjh has quit (Ping timeout: 121 seconds)
Mar 30 13:53:50 <dikaiosune>	good candidate for a macro maybe?
Mar 30 13:53:58 <steveklabnik>	just a regular function is fine
Mar 30 13:54:14 *	skade has quit (Connection closed)
Mar 30 13:54:15 *	skade_ (skade@moz-glo3te.dip0.t-ipconnect.de) has joined
Mar 30 13:54:23 <dikaiosune>	global namespace would be convenient for that check, though, right?
Mar 30 13:54:24 *	halabund has quit (Client exited)
Mar 30 13:54:32 <dikaiosune>	still waking up, don't mind me
Mar 30 13:54:32 *	tycoon177 has quit (Connection closed)
Mar 30 13:54:35 <mbrubeck>	I should note that we do have some types in Servo's DOM code where PartialEq is implemented as a pointer equality check
Mar 30 13:55:01 <steveklabnik>	dikaiosune: i know that feel :) you can also use use to make it as global as you'd like, so i don't think that's specific with the macro
Mar 30 13:55:23 <dikaiosune>	steveklabnik: fair enough, i haven't seen or tried that with a function
Mar 30 13:55:25 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 13:55:31 *	colinsurprenant has quit (Client exited)
Mar 30 13:55:45 *	jas0 has quit (Quit: Leaving)
Mar 30 13:55:50 *	fjh (fjh@moz-mof4p1.62vh.lq23.04f8.2a01.IP) has joined
Mar 30 13:55:51 <pingveno>	Oh, it gets more complicated in Rust because of zero sized types, no?
Mar 30 13:56:10 *	polyfractal (polyfractal@moz-gso118.7g24.1gqb.04f8.2a01.IP) has joined
Mar 30 13:56:15 <mbrubeck>	Well pointer equality for zero-sized types is always kind of questionable in terms of what semantics you want
Mar 30 13:56:41 *	tschottdorf (tschottdorf@moz-sqs4n4.netcologne.de) has joined
Mar 30 13:57:39 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 13:57:45 *	cbrewster has quit (Connection closed)
Mar 30 13:57:56 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:58:29 *	cbrewster has quit (Connection closed)
Mar 30 13:59:01 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:59:19 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 30 13:59:33 *	tycoon177 has quit (Ping timeout: 121 seconds)
Mar 30 14:01:24 *	Pierre_M has quit (Quit: Leaving)
Mar 30 14:01:36 *	jgilbert (Jeff@moz-gm6pod.ca.comcast.net) has joined
Mar 30 14:01:43 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 30 14:01:45 *	goldenbadger has quit (Quit: WeeChat 1.5-dev)
Mar 30 14:01:54 *	goldenbadger (GoldenBadge@moz-i7uquf.redbrick.dcu.ie) has joined
Mar 30 14:01:55 <maximih>	rust nightly seems to have some problems: thread 'rustc' panicked at 'internal error: entered unreachable code: Unexpected tail in unsized_info_ty: usize for ty=process::Core<isize, isize, isize>', ../src/librustc_trans/type_of.rs:135 
Mar 30 14:02:01 <maximih>	is this a known issue?
Mar 30 14:02:55 <steveklabnik>	hmmm
Mar 30 14:03:00 <steveklabnik>	check the tracker, but i don't think so?
Mar 30 14:03:00 *	hokkos_ (hokkos@moz-m17thb.rev.numericable.fr) has joined
Mar 30 14:03:51 *	amyers has quit (Connection closed)
Mar 30 14:04:01 *	joy (Adium@moz-jvbf8b.2rkg.9kg1.0101.2620.IP) has joined
Mar 30 14:04:01 *	amyers (amyers@moz-4ifg67.8iss.sd5s.0145.2601.IP) has joined
Mar 30 14:04:21 *	santiago (santiago@moz-okj.9vv.127.12.IP) has joined
Mar 30 14:05:02 <maximih>	seems to be reported already: https://github.com/rust-lang/rust/issues/32377
Mar 30 14:05:04 *	Haggus (Haggus@moz-g1noq7.dynamic.chello.pl) has joined
Mar 30 14:05:13 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 30 14:06:01 *	joy1 (Adium@moz-u3dg2t.sfo1.mozilla.com) has joined
Mar 30 14:06:11 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 30 14:06:44 *	lucian_ (lucian@moz-n1l.htl.74.194.IP) has joined
Mar 30 14:06:59 *	cpup has quit (Ping timeout: 121 seconds)
Mar 30 14:07:09 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 30 14:08:05 *	joy has quit (Ping timeout: 121 seconds)
Mar 30 14:08:35 *	cafeclimber (cafeclimber@moz-tifnb4.tamulink.tamu.edu) has joined
Mar 30 14:08:36 *	woboats has quit (Client exited)
Mar 30 14:08:45 *	cpup (cpup@moz-oj5.69g.218.32.IP) has joined
Mar 30 14:08:52 *	orangeshark (erik@moz-pdc35c.44tj.56ot.0306.2602.IP) has joined
Mar 30 14:09:36 <jaysonsantos>	Hey guys, I am writing a library to learn rust, I have no idea on publishing it on cargo because there are already some solutions. I was wondering if someone could just take a look so check if I am heading the right way on rust learning. You don't need to take a deep look, just scroll thru the main file is already ok :). I am also planning to create traits to implement cacheable types because for now I only do strings. https://github.com/
Mar 30 14:09:36 <jaysonsantos>	jaysonsantos/bmemcached-rs
Mar 30 14:09:50 *	lucian has quit (Ping timeout: 121 seconds)
Mar 30 14:10:13 *	FrozenCow (FrozenCow@moz-i2tvv4.chello.nl) has joined
Mar 30 14:10:47 *	lucian_ has quit (Ping timeout: 121 seconds)
Mar 30 14:11:11 *	sankha has quit (Ping timeout: 121 seconds)
Mar 30 14:11:20 *	espadrine_ has quit (Ping timeout: 121 seconds)
Mar 30 14:11:22 *	acmcarther (alex@moz-n9m.q3k.194.69.IP) has joined
Mar 30 14:13:05 *	s_kunk_ has quit (Ping timeout: 121 seconds)
Mar 30 14:13:40 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 14:14:02 *	p (r00t@moz-ht65gk.austtx.sbcglobal.net) has joined
Mar 30 14:14:22 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 30 14:15:07 <mbrubeck>	jaysonsantos: Looks pretty good. When you start implementing "flags" you should consider using https://crates.io/crates/bitflags
Mar 30 14:15:27 *	bholley (bholley@moz-mehar5.ca.comcast.net) has joined
Mar 30 14:15:41 *	skeithc has quit (Client exited)
Mar 30 14:15:57 <jaysonsantos>	good one, thanks
Mar 30 14:16:55 *	jeffdb (JeffDB@moz-fp3.7hu.21.199.IP) has joined
Mar 30 14:17:24 *	spider-mario (spidermario@moz-mbckgh.dynamic.hispeed.ch) has joined
Mar 30 14:18:04 *	eric_lagergren (eric@moz-qlh8v7.kern.f3ev.0600.2601.IP) has joined
Mar 30 14:18:18 *	ksad has quit (Quit: Leaving)
Mar 30 14:18:32 *	daze (daze@moz-tc29eq.static.zebra.lt) has joined
Mar 30 14:18:37 *	tamird (tamird@moz-rqcmg4.east.verizon.net) has joined
Mar 30 14:19:09 *	ahal|afk is now known as ahal
Mar 30 14:19:35 *	kulakowski (uid101184@moz-6s2ifd.richmond.irccloud.com) has joined
Mar 30 14:20:35 *	infynyxx has quit (Connection closed)
Mar 30 14:21:19 *	zz_NameNotFound is now known as NameNotFound
Mar 30 14:22:13 *	Quxxy has quit (Ping timeout: 121 seconds)
Mar 30 14:23:01 *	kmels has quit (Ping timeout: 121 seconds)
Mar 30 14:23:01 *	woboats has quit (Client exited)
Mar 30 14:23:07 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 14:24:52 *	lipkab has quit (Ping timeout: 121 seconds)
Mar 30 14:25:07 *	monti-2 (monti@moz-aidh09.broadband.corbina.ru) has joined
Mar 30 14:25:27 *	sepp2k has quit (Quit: Leaving.)
Mar 30 14:26:07 *	jeffbradberry has quit (Ping timeout: 121 seconds)
Mar 30 14:26:11 *	silven has quit (Ping timeout: 121 seconds)
Mar 30 14:26:22 *	icefall has quit (Ping timeout: 121 seconds)
Mar 30 14:26:50 *	silven (quassel@moz-28hrbk.priv.bahnhof.se) has joined
Mar 30 14:26:54 *	rschifflin (mark@moz-6uk.q3k.194.69.IP) has joined
Mar 30 14:26:54 *	dfockler (dan@moz-rm6ima.wa.comcast.net) has joined
Mar 30 14:27:11 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 30 14:27:18 *	dmac__ (dmac@moz-h4nvlf.ca.comcast.net) has joined
Mar 30 14:27:51 *	dirvine (dirvine@moz-2qsd3c.cable.virginm.net) has joined
Mar 30 14:31:09 *	scootaloo has quit (Ping timeout: 121 seconds)
Mar 30 14:31:23 *	maximih has quit (A TLS packet with unexpected length was received.)
Mar 30 14:31:41 *	jimb (user@moz-09a.i8g.126.207.IP) has joined
Mar 30 14:32:18 *	p_ (r00t@moz-jl9.5a1.14.204.IP) has joined
Mar 30 14:32:20 *	jgilbert has quit (Ping timeout: 121 seconds)
Mar 30 14:32:52 *	eckhardt (eckhardt@moz-up6.crj.56.172.IP) has joined
Mar 30 14:32:59 *	lipkab (the_new_lip@moz-ktjdl3.biatv.hu) has joined
Mar 30 14:34:07 <krl>	so, when implementing read, you get a &mut [u8] as an argument, can you write any amount of data to it? where does it come from? 
Mar 30 14:34:25 *	p has quit (Ping timeout: 121 seconds)
Mar 30 14:34:40 <mbrubeck>	krl: &mut [u8] has a length, which you can get with the .len() method
Mar 30 14:34:45 *	nullvoid has quit (Connection closed)
Mar 30 14:34:58 *	Eisfreak7 (Eisfreak7@moz-crikdn.pools.vodafone-ip.de) has joined
Mar 30 14:34:59 <krl>	so that's a max write limit kind of thing?
Mar 30 14:35:05 <mbrubeck>	krl: The caller of .read() can pass in any buffer; you can write any amount of data up to the buffer's length.
Mar 30 14:35:14 *	KarolisK (karolis@moz-hgf42b.access.telenet.be) has joined
Mar 30 14:35:18 *	KarolisK has quit (Quit: Konversation terminated!)
Mar 30 14:35:33 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 14:35:34 <mbrubeck>	yes, buf.len() is the max number of bytes you can write
Mar 30 14:36:11 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 30 14:36:27 *	chain_chan has quit (A TLS packet with unexpected length was received.)
Mar 30 14:36:57 <krl>	65536 it says, but you shouldn't assume anything about the number i presume?
Mar 30 14:37:48 <mbrubeck>	krl: Right.  For example I can do `let mut buf = [0u8; 64]; file.read(&mut buf);` to read up to 64 bytes
Mar 30 14:38:40 <krl>	ah, ok. i'm using copy(&mut x, &mut stdout()) at the moment
Mar 30 14:39:15 <mbrubeck>	Here's the source to `copy` if you're curious: http://doc.rust-lang.org/src/std/io/util.rs.html#46-61
Mar 30 14:39:19 *	kefin has quit (Ping timeout: 121 seconds)
Mar 30 14:39:38 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 30 14:39:52 *	pcwalton (pcwalton@moz-6kjabm.ca.comcast.net) has joined
Mar 30 14:39:52 *	ChanServ sets mode +a on #rust pcwalton
Mar 30 14:39:52 *	ChanServ gives channel operator status to pcwalton
Mar 30 14:40:00 *	Eisfreak7 has quit (Ping timeout: 121 seconds)
Mar 30 14:40:12 <krl>	ooooooh, you can match on values as well!
Mar 30 14:40:13 *	lucian has quit (Ping timeout: 121 seconds)
Mar 30 14:40:31 <krl>	wow i'm constantly surprised by cool things in this language
Mar 30 14:40:58 *	jeffbradberry (jrb@moz-kpp3mi.biz.rr.com) has joined
Mar 30 14:41:09 <mbrubeck>	note that you can only pattern-match `const` values and literals.  (If you want to compare to a variable, then you'll need to use an `if`)
Mar 30 14:41:20 <mbrubeck>	(This is a common pitfall.)
Mar 30 14:41:47 <krl>	thx for the tip :)
Mar 30 14:42:06 <krl>	but ok, i'll just pass in a buffer i know will be large enough, and panic otherwise
Mar 30 14:42:10 *	ygrek_ has quit (Ping timeout: 121 seconds)
Mar 30 14:42:17 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 14:43:25 *	areski has quit (Ping timeout: 121 seconds)
Mar 30 14:44:17 *	Kynes has quit (Quit: Leaving)
Mar 30 14:44:43 *	stelarcf__ (stelarcf@moz-3gh.lb8.81.92.IP) has joined
Mar 30 14:45:24 *	thills (thills@moz-2pruei.fios.verizon.net) has joined
Mar 30 14:46:03 *	khades has quit (Ping timeout: 121 seconds)
Mar 30 14:46:12 *	khades (Thunderbird@moz-opi.h6q.74.212.IP) has joined
Mar 30 14:46:30 <mafrasi2>	Is it possible to ensure that Output is T here, too? http://is.gd/wWnkuO
Mar 30 14:46:52 <talchas>	T: Sub<Output=T>
Mar 30 14:47:27 <mafrasi2>	Damn, that's simple, thx a lot :D
Mar 30 14:47:35 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 14:48:51 *	sepp2k (Sepp2k@moz-0q6a6p.dyn.telefonica.de) has joined
Mar 30 14:49:28 *	JanC_ has quit (Ping timeout: 121 seconds)
Mar 30 14:50:07 <mib_dgeg91>	.
Mar 30 14:51:42 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 30 14:51:55 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 30 14:52:36 *	julienw is now known as julienw_afk
Mar 30 14:53:19 *	tschottdorf has quit (Client exited)
Mar 30 14:53:25 *	nyx (nyx@moz-7o34ff.albyny.csvoip.net) has joined
Mar 30 14:53:27 *	GGist (Mibbit@moz-ijla36.seattleu.edu) has joined
Mar 30 14:53:50 *	woboats has quit (Client exited)
Mar 30 14:54:23 *	drc has quit (Ping timeout: 121 seconds)
Mar 30 14:55:37 *	gmorenz (normal@moz-r818og.nat.utoronto.ca) has joined
Mar 30 14:56:32 *	Matthias247 (Miranda@moz-pfeurg.hsi7.kabel-badenwuerttemberg.de) has joined
Mar 30 14:57:13 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 14:57:45 *	Roomy (tlaziuk@moz-si2.ak0.231.109.IP) has joined
Mar 30 14:57:52 *	monti-2 has quit (Ping timeout: 121 seconds)
Mar 30 14:58:33 *	rschiffl1n (mark@moz-7gn2c6.compute-1.amazonaws.com) has joined
Mar 30 14:58:55 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 15:00:29 *	rschifflin has quit (Ping timeout: 121 seconds)
Mar 30 15:01:16 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 30 15:01:17 *	ShadowIce (pyoro@moz-d6d775.hsi.kabel-badenwuerttemberg.de) has joined
Mar 30 15:01:50 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 15:02:15 *	jgallagher (john@moz-72l538.ga.comcast.net) has joined
Mar 30 15:02:33 *	JanC_ (janc@moz-k76t8i.dsl.scarlet.be) has joined
Mar 30 15:02:58 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 30 15:05:34 *	NameNotFound is now known as zz_NameNotFound
Mar 30 15:05:40 *	maximih (maximih@moz-43dnlt.tbcn.telia.com) has joined
Mar 30 15:05:57 *	icefall has quit (Ping timeout: 121 seconds)
Mar 30 15:08:01 *	s_kunk (s_kunk@moz-1jmsti.rev.numericable.fr) has joined
Mar 30 15:08:40 *	gmorenz has quit (Ping timeout: 121 seconds)
Mar 30 15:08:59 *	kcking (kcking@moz-o85r8g.dyn.mit.edu) has joined
Mar 30 15:09:14 *	ygrek_ (user@moz-8j9aeu.org.ua) has joined
Mar 30 15:09:22 *	kk has quit (Ping timeout: 121 seconds)
Mar 30 15:09:42 *	maximih has quit (Ping timeout: 121 seconds)
Mar 30 15:11:24 *	pcwalton has quit (Client exited)
Mar 30 15:12:05 *	kefin (kefin@moz-t5j.bbc.113.188.IP) has joined
Mar 30 15:12:32 *	hastake has quit (Ping timeout: 121 seconds)
Mar 30 15:12:39 *	hastake (ack@moz-hcov7m.214.coditel.net) has joined
Mar 30 15:13:18 *	Douman (Douman@moz-i70l3c.dynamic.mts-nn.ru) has joined
Mar 30 15:14:03 *	halabund (halabund@moz-3gn8bo.rev.sfr.net) has joined
Mar 30 15:14:10 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 30 15:14:37 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 30 15:14:37 <cholcombe>	what's the rust equiv to ruby transpose?
Mar 30 15:14:44 <cholcombe>	i'm looking in intertools but don't see something that matches
Mar 30 15:15:07 <cholcombe>	itertools*
Mar 30 15:17:29 <mbrubeck>	nalgebra has transpose for its matrix types
Mar 30 15:17:34 *	zz_NameNotFound is now known as NameNotFound
Mar 30 15:18:07 <mbrubeck>	for itertools you could maybe use itertools::Zip
Mar 30 15:18:15 *	Bonk (wbjohnston@moz-eb6i02.student.rit.edu) has joined
Mar 30 15:18:26 *	J_Arcane has quit (Ping timeout: 121 seconds)
Mar 30 15:18:59 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 30 15:20:24 *	skeet70 (skeet70@moz-bsd45u.sub-70-212-48.myvzw.com) has joined
Mar 30 15:20:30 *	Gabriel_7 (Gabriel@moz-bbis4e.mtgr.92aj.0e35.2a01.IP) has joined
Mar 30 15:20:42 *	J_Arcane (chatzilla@moz-f72bj8.bb.dnainternet.fi) has joined
Mar 30 15:21:01 *	icefall (tyler@moz-5nj2h7.ca.comcast.net) has joined
Mar 30 15:36:41 *	Disconnected (Network is unreachable)
**** ENDING LOGGING AT Wed Mar 30 15:36:41 2016

**** BEGIN LOGGING AT Wed Mar 30 19:38:17 2016

Mar 30 19:38:17 *	Now talking on #rust
Mar 30 19:38:17 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 30 19:38:17 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 30 19:38:25 <Mormur>	okay, so 'return CString::from_raw(...).to_str();' 
Mar 30 19:38:41 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 19:38:53 <Mormur>	trying to assign that return value to something would be out of scope since the CString doesn't exist anymore
Mar 30 19:38:58 *	amyers has quit (Ping timeout: 121 seconds)
Mar 30 19:38:58 <talchas>	yes
Mar 30 19:39:11 <talchas>	and the compiler will detect that one because it's &str rather than like *const str
Mar 30 19:39:48 <Mormur>	got it, thank you!
Mar 30 19:40:46 *	JoshTriplett (josh@moz-228j7s.or.frontiernet.net) has joined
Mar 30 19:40:47 *	dikaiosune has quit (Quit: Leaving)
Mar 30 19:41:49 *	dzbarsky (Adium@moz-36jnjr.82pc.j76f.0646.2601.IP) has joined
Mar 30 19:42:11 *	frankmcsherry has quit (Connection closed)
Mar 30 19:42:28 *	bholley_away is now known as bholley
Mar 30 19:42:36 *	Malnormalulo (Malnormalul@moz-83aus5.cable.rcn.com) has joined
Mar 30 19:42:41 *	tomprogrammer has quit (Quit: WeeChat 1.4)
Mar 30 19:43:26 *	exul (exul@moz-6si0dg.dynamic.hispeed.ch) has joined
Mar 30 19:44:00 *	freeman42 has quit (Quit: Leaving)
Mar 30 19:44:07 *	arfy has quit (Quit: Miranda NG! Smaller, Faster, Easier. http://miranda-ng.org/)
Mar 30 19:45:03 *	xrash (smuxi@moz-m1rclu.telesp.net.br) has joined
Mar 30 19:45:23 *	gingermusketeer has quit (Connection closed)
Mar 30 19:45:24 *	gingermusketeer18 (gingermuske@moz-shsql0.compute.amazonaws.com) has joined
Mar 30 19:45:30 <JoshTriplett>	Is there a way to declare a function as accepting Option<T> for some trait T, without getting a type ambiguity when the caller passes None?  The function always behaves the same way when given None, regardless of T.
Mar 30 19:45:53 <steveklabnik>	you end up having to say None::<Type>
Mar 30 19:45:53 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 30 19:46:03 *	chris_99 has quit (Quit: Leaving)
Mar 30 19:46:06 <JoshTriplett>	steveklabnik: That's what I'm trying to avoid making the caller ever do.
Mar 30 19:46:09 *	monti-2 has quit (Ping timeout: 121 seconds)
Mar 30 19:46:25 <steveklabnik>	yeah, there's no way around it, that i'm aware of. Just None on its own isn't enough context
Mar 30 19:46:27 <JoshTriplett>	Is there some way to declare "I don't care what the type is, I'll only ever call its trait function"?
Mar 30 19:46:29 *	dwrensha (chatzilla@moz-adj6c7.fios.verizon.net) has joined
Mar 30 19:46:35 <keeper>	JoshTriplett: None is an instance of a type.
Mar 30 19:46:43 <keeper>	Maybe do "as Option<()>"
Mar 30 19:46:55 <keeper>	"None as Option<()>" rather.
Mar 30 19:47:11 *	jgallagher has quit (Client exited)
Mar 30 19:47:12 <JoshTriplett>	keeper: () doesn't have the required trait, but I understand the nature of the problem.
Mar 30 19:47:29 <keeper>	Oh right sorry.
Mar 30 19:47:29 <talchas>	unfortunately, they even may have different representations
Mar 30 19:48:02 <JoshTriplett>	steveklabnik: Wasn't there some mechanism to declare a parameter or field as being of a type that holds a trait, without caring about representation?  Similar to what Haskell would call rank-2 polymorphism?
Mar 30 19:48:24 <talchas>	Option<Box<Stuff>> and Option<i32> aren't the same size
Mar 30 19:49:09 <talchas>	you can instead take like Option<Box<Trait>>, or Option<&Trait>
Mar 30 19:49:16 <JoshTriplett>	&Trait, that was it I think.
Mar 30 19:49:16 <pingveno>	talchas: They could be on 32 bit machines, no?
Mar 30 19:49:16 <steveklabnik>	that's a trait object, but my brain falls over when i hear 'rank-2', which is a personal failing
Mar 30 19:49:16 <talchas>	which makes it do virtual calls instead of generics
Mar 30 19:49:16 <steveklabnik>	:)
Mar 30 19:49:16 *	kaoD (Mibbit@moz-ie59si.staticip.rima-tde.net) has joined
Mar 30 19:49:36 *	Frooxius has quit (Quit: *bubbles away*)
Mar 30 19:49:37 <talchas>	pingveno: no, Option<i32> has to be > 4 bytes, while Option<Box<Stuff>> is going to be one word
Mar 30 19:50:10 <JoshTriplett>	Would Option<&Trait> prevent the caller from having to disambiguate the type of None?
Mar 30 19:50:10 <talchas>	(so actually on non-32bit they're more able to be the same size)
Mar 30 19:50:12 <talchas>	JoshTriplett: yes
Mar 30 19:50:12 *	ebvalaim has quit (Quit: Leaving.)
Mar 30 19:50:16 <kaoD>	hi
Mar 30 19:50:20 <pingveno>	talchas: Oh, yeah, of course
Mar 30 19:50:24 <mbrubeck>	hi, kaoD 
Mar 30 19:50:28 <dmilith>	anyone using Dash with Rust? It seems like documentation is old
Mar 30 19:51:32 <LambdaComplex>	dmilith: The POSIX shell? O.o
Mar 30 19:51:54 <talchas>	I'm guessing the osx documentation engine
Mar 30 19:51:57 <dmilith>	https://kapeli.com/dash
Mar 30 19:52:00 <talchas>	(or maybe not just osx?)
Mar 30 19:52:06 *	JoshTriplett (josh@moz-228j7s.or.frontiernet.net) has left
Mar 30 19:52:11 <dmilith>	mostly osx - yes
Mar 30 19:52:13 <LambdaComplex>	talchas: You win this round :P
Mar 30 19:52:53 <dmilith>	this software is dangerous. You start using it, and there's no way back..
Mar 30 19:53:05 <dmilith>	anyway, it looks like docs there are from rust 1.3 like
Mar 30 19:53:25 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 30 19:53:36 <kaoD>	is there any way to make a fn(param: &T) also accept T? I implemented From<&T> and I'm tired of doing (&val).into()
Mar 30 19:53:47 <dmilith>	anyway, Rust is the Mozilla's way of re-taking control over the world ;)
Mar 30 19:53:52 *	jfo has quit (Connection closed)
Mar 30 19:54:43 <LambdaComplex>	kaoD: i feel like that might cause some sort of issues with lifetimes
Mar 30 19:54:51 *	rezrov has quit (A TLS packet with unexpected length was received.)
Mar 30 19:54:59 *	rezrov (rezrov@moz-lks.nus.241.192.IP) has joined
Mar 30 19:55:03 <steveklabnik>	kaoD: i think AsRef is useful here
Mar 30 19:55:15 *	fengshaun (fengshaun@moz-0kerr5.ss.shawcable.net) has joined
Mar 30 19:55:40 *	cbrewste_ (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 19:55:44 <LambdaComplex>	if my understanding of lifetimes is correct, then the difference between an &T and a T in this case determines whether param gets removed from memory when it goes out of scope
Mar 30 19:55:51 <LambdaComplex>	which is kinda a really big deal
Mar 30 19:56:15 <LambdaComplex>	steveklabnik: do i actually know what i'm talking about? >.>
Mar 30 19:56:28 <Regexident>	Is there a way to run a single lint?
Mar 30 19:56:38 <steveklabnik>	kaoD: oh duh, i mean
Mar 30 19:56:40 <steveklabnik>	just do &val
Mar 30 19:56:43 <steveklabnik>	not &Val.into()?
Mar 30 19:56:48 <steveklabnik>	LambdaComplex: no, you're right
Mar 30 19:57:01 <LambdaComplex>	"do i know what i'm talking about?"
Mar 30 19:57:03 <LambdaComplex>	"no"
Mar 30 19:57:05 <steveklabnik>	LambdaComplex: but since referneces are values, T can be a reference too
Mar 30 19:57:05 <LambdaComplex>	"you're right"
Mar 30 19:57:09 <LambdaComplex>	mixed messages, steve D:
Mar 30 19:57:11 <steveklabnik>	hehe, sorry
Mar 30 19:57:18 <steveklabnik>	you do know
Mar 30 19:57:27 <steveklabnik>	but there's a subltely
Mar 30 19:57:33 *	Malnormalulo has quit (Ping timeout: 121 seconds)
Mar 30 19:57:39 <steveklabnik>	so like, for a &T and T, if you take T, it will be deallocated, but &T won't
Mar 30 19:57:43 <steveklabnik>	but &T is itself a value
Mar 30 19:57:44 <mbrubeck>	kaoD: So the issues is that you have `impl From<&T> for MyType` and you have a T, and you want a MyType?
Mar 30 19:57:45 <LambdaComplex>	right
Mar 30 19:57:50 <LambdaComplex>	(unless the function returns T)
Mar 30 19:57:53 <steveklabnik>	yeah
Mar 30 19:57:57 <kaoD>	mbrubeck: exactly that
Mar 30 19:57:57 *	pittaman has quit (Quit: ChatZilla 0.9.92 [Firefox 46.0/20160324011246])
Mar 30 19:58:19 <mbrubeck>	kaoD: does the "MyType" in this situation have a lifetime parameter?  i.e. does it borrow from the T that you pass?
Mar 30 19:58:34 <LambdaComplex>	steveklabnik: which reminds me, i think the new version of the book (on github) explains lifetimes and ownership better than the stable book. not sure if i remembered to tell you before
Mar 30 19:58:42 *	mexisme has quit (Client exited)
Mar 30 19:58:45 <steveklabnik>	thank you :)
Mar 30 19:58:53 <steveklabnik>	i think you might have, but also might not have
Mar 30 19:58:53 <kaoD>	mbrubeck: some of my types do, some don't
Mar 30 19:58:53 <steveklabnik>	but glad to hear it
Mar 30 19:59:08 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 19:59:32 <LambdaComplex>	steveklabnik: btw, were you posting on 4chan earlier today? or was someone just using your name?
Mar 30 19:59:33 <mbrubeck>	kaoD: For the ones that don't, you could just add an `impl From<T> for MyType` and then you can do `val.into()` as well as `(&val).into()`
Mar 30 19:59:41 <steveklabnik>	LambdaComplex: moving to /msg
Mar 30 20:00:19 *	peschkaj has quit (Ping timeout: 121 seconds)
Mar 30 20:00:19 *	Mormur has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 20:00:23 *	jfo has quit (Connection closed)
Mar 30 20:00:27 *	nyx (nyx@moz-b1g8f1.res.rr.com) has joined
Mar 30 20:00:41 <kaoD>	steveklabnik: sorry, what do you meant with &val and not &val.into()? I need to do (&val).into() because .into() takes &T (because I implemented From<&T>)
Mar 30 20:00:49 *	nowhere_man has quit (Connection closed)
Mar 30 20:01:09 <steveklabnik>	if a function takes &T
Mar 30 20:01:09 <steveklabnik>	and you have a T
Mar 30 20:01:11 <steveklabnik>	you should be able to pass &T to it
Mar 30 20:01:28 <steveklabnik>	as in, &val, where val is a T
Mar 30 20:01:42 *	dinfuehr_ (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 20:01:45 <steveklabnik>	but maybe i am missing a subtlely
Mar 30 20:02:19 <mbrubeck>	Here the function is `.into()` and it won't auto-borrow because its self type is generic.
Mar 30 20:03:03 <mbrubeck>	so if you have `val: T` and you want to call `MyType::from` you need to do `MyType::from(&val)` or `(&val).into()`
Mar 30 20:03:05 <steveklabnik>	yeha but it was describe das param: &T
Mar 30 20:03:30 <kaoD>	steveklabnik: I do .into() because I want to call from(x: &T) of trait From<&T> implemented for U
Mar 30 20:03:33 <mbrubeck>	I think the question was whether you can do something to allow `val.into()` to work, like it does for methods that auto-reference.
Mar 30 20:03:43 <kaoD>	that
Mar 30 20:04:46 *	shackra (shackrasisl@moz-46f.gid.203.201.IP) has joined
Mar 30 20:05:41 <mbrubeck>	You could add your own method and do something like `val.to_mytype()`
Mar 30 20:05:43 *	dinfuehr_ has quit (Ping timeout: 121 seconds)
Mar 30 20:05:47 *	klue has quit (Ping timeout: 121 seconds)
Mar 30 20:05:49 *	robojeb (Jeb@moz-vt9fre.4d09.d820.0401.2601.IP) has joined
Mar 30 20:05:58 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 30 20:06:13 *	Mormur (Mibbit@moz-11e.uta.251.216.IP) has joined
Mar 30 20:07:45 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 30 20:09:14 *	zrneely (zrneely@moz-ghpgn7.dyn.mit.edu) has joined
Mar 30 20:09:25 <mbrubeck>	kaoD: http://is.gd/K5c606
Mar 30 20:09:41 *	brandonw has quit (Ping timeout: 121 seconds)
Mar 30 20:10:55 *	skeet70 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 20:11:49 <mbrubeck>	kaoD: Or more generally http://is.gd/lfw7zm
Mar 30 20:11:57 *	brandonw (brandonw@moz-36sv6k.ma.charter.com) has joined
Mar 30 20:12:47 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 30 20:13:05 *	M6dEEp (M6dEEp@moz-u9e2d9.ok.cox.net) has joined
Mar 30 20:13:09 *	M6dEEp has quit (Connection closed)
Mar 30 20:13:42 *	M6dEEp (M6dEEp@moz-u9e2d9.ok.cox.net) has joined
Mar 30 20:13:51 *	M6dEEp has quit (Connection closed)
Mar 30 20:13:52 *	M6dEEp (M6dEEp@moz-u9e2d9.ok.cox.net) has joined
Mar 30 20:14:29 *	Aceeri has quit (Quit: Connection closed for inactivity)
Mar 30 20:14:49 *	zhoeon (fc@moz-0t3.hcj.48.199.IP) has joined
Mar 30 20:15:13 *	M6dEEp has quit (Quit: Leaving...)
Mar 30 20:15:31 *	espadrine_ has quit (Ping timeout: 121 seconds)
Mar 30 20:16:31 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 20:16:39 *	nixpulvis (nixpulvis@moz-6vf23u.ma.comcast.net) has joined
Mar 30 20:16:54 <nixpulvis>	Can someone explain why (or if) this is unsafe? http://is.gd/LYeVGc
Mar 30 20:16:59 *	vadix_ has quit (Ping timeout: 121 seconds)
Mar 30 20:17:02 *	NameNotFound is now known as zz_NameNotFound
Mar 30 20:17:06 *	skade (skade@moz-c1c8jq.pools.vodafone-ip.de) has joined
Mar 30 20:17:22 *	skade has quit (Connection closed)
Mar 30 20:17:25 <nixpulvis>	I'm trying to wrap my head around why/how to make Rust safely gave two mutable references to different elements of a vector.
Mar 30 20:17:44 *	LevelOneDev has quit (Ping timeout: 121 seconds)
Mar 30 20:18:31 <curtism>	nixpulvis: https://doc.rust-lang.org/std/primitive.slice.html#method.split_at_mut
Mar 30 20:18:40 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 20:18:44 <mbrubeck>	nixpulvis: You can do it using split_at_mut, or iter_mut
Mar 30 20:19:16 <curtism>	nixpulvis: Basically Rust isn't currently smart enough to know that you're taking two &muts to non-overlapping parts of a Vec
Mar 30 20:19:29 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 30 20:20:03 <mbrubeck>	nixpulvis: Your function is safe, too
Mar 30 20:20:22 *	jfo has quit (Connection closed)
Mar 30 20:21:01 <mbrubeck>	nixpulvis: Here's one way to write it in safe Rust: http://is.gd/oTiAeL
Mar 30 20:21:03 *	Cyderize (Cyderize@moz-7iot5a.tpgi.com.au) has joined
Mar 30 20:22:17 <nixpulvis>	Yea ok this is what I thought.
Mar 30 20:22:30 <nixpulvis>	I just wanted some validation I'm not off saying silly things.
Mar 30 20:22:56 <nixpulvis>	Solving this problem for the Rust type system would make life WAY better.
Mar 30 20:23:17 *	dfockler (dan@moz-rm6ima.wa.comcast.net) has joined
Mar 30 20:23:38 *	Nehagup has quit (Quit: Connection closed for inactivity)
Mar 30 20:23:48 *	zz_NameNotFound is now known as NameNotFound
Mar 30 20:24:42 *	jimb has quit (Ping timeout: 121 seconds)
Mar 30 20:24:57 <durka42>	I'm not sure how it can be solved
Mar 30 20:25:14 <nixpulvis>	Well in general seems like a hard question.
Mar 30 20:25:23 <durka42>	I can write a bad impl of Index for my vector type that sometimes returns refs to the same element for different indices
Mar 30 20:25:28 <nixpulvis>	but as a hack to just vectors even would be worth thinking about.
Mar 30 20:25:45 <durka42>	yeah maybe there could be some opt-in by an unsafe trait
Mar 30 20:26:04 <nixpulvis>	Why unsafe? Shouldn't this be safe?
Mar 30 20:26:21 <durka42>	I mean, say there was `unsafe trait DisjointIndexed {}` in std::marker
Mar 30 20:26:38 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 20:26:44 <durka42>	then a type can assert "my Index implementations are good" by implementing the trait
Mar 30 20:27:00 <mbrubeck>	nixpulvis: "slice patterns" are one solution that's coming
Mar 30 20:27:17 <nixpulvis>	mbrubeck: oooh! yea, this would be perfect.
Mar 30 20:27:23 *	ubsan_ (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 30 20:27:33 <nixpulvis>	does this part of them work atm? I forgot all about them.
Mar 30 20:27:49 <durka42>	they are implemented, unstable, and crash all the time AFAIK :)
Mar 30 20:30:02 <mbrubeck>	nixpulvis: http://is.gd/YnvHJ8
Mar 30 20:30:02 *	nagisa_ has quit (Connection closed)
Mar 30 20:30:02 <maurer>	Is there a trait/framework in rust for doing pretty printing?
Mar 30 20:30:02 <maurer>	(Display falls short by lacking indent management)
Mar 30 20:30:02 <maurer>	(since formatter seems to be for simpler things)
Mar 30 20:30:02 <mbrubeck>	maurer: Debug does indentation if you use {:#?}
Mar 30 20:30:02 *	teratorn (teratorn@moz-qiv.b6m.227.199.IP) has joined
Mar 30 20:30:02 <mbrubeck>	It's still pretty simplistic, though.
Mar 30 20:30:05 <maurer>	mbrubeck: I want to do a custom impl
Mar 30 20:31:10 <mbrubeck>	Yeah, I usually find that {:?} is too compressed but {:#?} is too expanded.
Mar 30 20:31:10 <maurer>	mbrubeck: I've got a values which are actually code in another language
Mar 30 20:31:10 <maurer>	and I want to print them in a readable wya
Mar 30 20:31:10 *	Guest81 (textual@moz-210.km7.158.104.IP) has joined
Mar 30 20:31:10 <maurer>	*way
Mar 30 20:31:10 <maurer>	but the data structure I store isn't great for showing to users
Mar 30 20:31:10 *	jfo has quit (Ping timeout: 121 seconds)
Mar 30 20:31:10 <maurer>	(or myself for debugging)
Mar 30 20:31:10 <curtism>	One way would be to implement Display for a newtype
Mar 30 20:31:10 <maurer>	curtism: Formatter doesn't contain the relevant state to store indentation level afaict
Mar 30 20:31:56 <maurer>	curtism: I control the type in question, I don't need a type wrapper to implement display
Mar 30 20:31:56 <maurer>	(I started implementing Display and realized it doesn't work right)
Mar 30 20:32:02 *	ubsan_ has quit (Ping timeout: 121 seconds)
Mar 30 20:32:38 <maurer>	I mean, I can just write a custom function if that's what's needed
Mar 30 20:32:54 <maurer>	but there were systems for this in haskell/ocaml, so I figured I'd check if one of them existed before cobbling together my own
Mar 30 20:33:35 *	Matthias247 has quit (Connection closed)
Mar 30 20:35:15 *	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined
Mar 30 20:35:36 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 20:35:51 *	joy has quit (Quit: Leaving.)
Mar 30 20:36:25 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 30 20:38:16 *	vadix_ (vadix@moz-3t1fp2.va.comcast.net) has joined
Mar 30 20:38:16 *	ytain has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 30 20:38:16 <mbrubeck>	I wonder what the derived Debug impl does for indentation
Mar 30 20:38:16 *	ptc (textual@moz-l2kuh6.compute-1.amazonaws.com) has joined
Mar 30 20:38:16 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 30 20:38:18 <curtism>	There's this private PadAdapter implementation somewhere in core
Mar 30 20:38:33 <curtism>	It wraps the formatter in one before formatting the nested structures
Mar 30 20:39:29 *	thewonderidiot has quit (Quit: ZNC - http://znc.in)
Mar 30 20:39:56 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 30 20:40:04 *	ptc__ (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 30 20:40:04 <nixpulvis>	Why doesn't this work: http://is.gd/hI3JxH
Mar 30 20:40:10 *	ptc_ has quit (Ping timeout: 121 seconds)
Mar 30 20:40:45 <nixpulvis>	Oh I know... The compiler doesn't reason about lifetimes inside of blocks. Correct?
Mar 30 20:40:53 <sfackler>	yep
Mar 30 20:40:53 <curtism>	nixpulvis: Shadowing doesn't actually end the scope of the shadowed binding
Mar 30 20:40:56 <mbrubeck>	Yeah, lifetimes currently always last to the end of a block.
Mar 30 20:41:02 <nixpulvis>	Gah... fuck that.
Mar 30 20:41:03 <curtism>	nixpulvis: Scopes only end on a close-brace
Mar 30 20:41:12 <nixpulvis>	right I recall.
Mar 30 20:41:14 *	cbrewste_ is now known as cbrewster
Mar 30 20:41:29 <nixpulvis>	This is being addressed with some of the work on MIR correct?
Mar 30 20:41:31 *	cbrewster has quit (Quit: )
Mar 30 20:41:35 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 30 20:41:39 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 20:42:01 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 30 20:42:01 <maurer>	mbrubeck: I looked into it and there's a specialized interface on Formatter basically (e.g. debug_tuple()) which isn't really extensible to this kind of behavior
Mar 30 20:42:08 <mbrubeck>	nixpulvis: It's not being addressed yet, but the plan is to address it after MIR is in use, since MIR will provide the tools for addressing it.
Mar 30 20:42:20 <mbrubeck>	so it's more "waiting on MIR" than "solved by MIR"
Mar 30 20:42:24 <mbrubeck>	IIUC
Mar 30 20:42:33 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 20:42:49 *	cc0_ (cc0_@moz-1bqsob.mn.comcast.net) has joined
Mar 30 20:42:50 <glendc>	How would one take ownership over an element, store it in a vec, and than at a later point, remove that element (and thus give ownership back), but without shifting all the other elements
Mar 30 20:43:27 *	thewonderidiot (thewonderid@moz-hut8kq.hcoop.net) has joined
Mar 30 20:43:39 <sp3d>	you'd have to swap something else into that location in the Vec, if you don't want to move the elements after it
Mar 30 20:43:49 <maurer>	mbrubeck: I'm looking for something like haskell's Text.PrettyPrint.HughesPJ or OCaml's Format module, or python's pprint if that helps any
Mar 30 20:44:00 <maurer>	mbrubeck: A bit more heavyweight than what I'd expect Display to want to be
Mar 30 20:44:06 <sp3d>	glendc: you may be able to get by with having a mutable pointer to the element rather than owning it
Mar 30 20:44:46 <mbrubeck>	I see there's some pretty-printing stuff on crates.io but I haven't looked any closer
Mar 30 20:45:05 <mbrubeck>	glendc: There's Vec::swap_remove if you don't care about ordering
Mar 30 20:45:16 <mbrubeck>	glendc: Or you can have a Vec<Option<T>>
Mar 30 20:45:17 *	Ralith has quit (Connection closed)
Mar 30 20:45:25 *	skade (skade@moz-c1c8jq.pools.vodafone-ip.de) has joined
Mar 30 20:45:52 *	nagisa_ (nagisa@moz-8t068g.static.zebra.lt) has joined
Mar 30 20:46:22 *	Ralith (ralith@moz-itpr0k.customer.broadstripe.net) has joined
Mar 30 20:46:34 *	demilux has quit (A TLS packet with unexpected length was received.)
Mar 30 20:47:01 <mbrubeck>	glendc: Also, consider that shifting elements in moderately-sized arrays can be very fast, and is not necessarily as expensive as you might intuitively think.
Mar 30 20:48:40 <glendc>	but I'm trying to make a circular buffer as an exercice to give me more confidence in rust, normally I would do that with an array in most languages, but here it seems like going with vec is the way to go, only I come into issues with borrowed content
Mar 30 20:49:56 *	cbrewster has quit (Connection closed)
Mar 30 20:49:58 <mbrubeck>	glendc: Ah, so you want to give the element back, and just shift some bounds pointers to say that the slot in the vec isn't used anymore?
Mar 30 20:50:01 *	martianwars has quit (Quit: Connection closed for inactivity)
Mar 30 20:50:03 <mbrubeck>	glendc: Have you seen this? https://doc.rust-lang.org/nomicon/vec.html
Mar 30 20:50:28 <glendc>	oh, that looks sexy, let me take a look at it :)
Mar 30 20:50:35 <dwrensha>	overheard: "lifetime Elysian"
Mar 30 20:50:59 <durka42>	lifetime lesion
Mar 30 20:51:16 <mbrubeck>	lifetime eel shin
Mar 30 20:51:45 *	sepp2k has quit (Connection closed)
Mar 30 20:52:06 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 30 20:52:15 <mbrubeck>	glendc: I think you could use http://doc.rust-lang.org/std/ptr/fn.read.html to get the value out of the buffer and return ownership of it.  Then you just need to be careful not to let the destructor when you reassign to the vec (use std::ptr::write) or when you drop the vec.
Mar 30 20:52:44 *	ShadowIce has quit (Quit: Leaving)
Mar 30 20:54:39 *	dfockler has quit (Quit: Leaving)
Mar 30 20:54:53 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 20:55:09 *	Ralith has quit (Connection closed)
Mar 30 20:55:12 *	Ralith (ralith@moz-itpr0k.customer.broadstripe.net) has joined
Mar 30 20:56:19 *	daze has quit (Connection closed)
Mar 30 20:57:06 *	qrlpx_ has quit (Ping timeout: 121 seconds)
Mar 30 20:57:11 <glendc>	I'm doing more and more in rust, like even production code, but I still feel like a baby in it, compared to my experience in C++ and other languages >.< So thx for the resources !:D Really need to step up the game
Mar 30 20:57:13 *	qrlpx (smuxi@moz-10v6hr.dip0.t-ipconnect.de) has joined
Mar 30 20:57:14 *	g-andrade has quit (Ping timeout: 121 seconds)
Mar 30 20:57:32 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 30 20:58:29 *	Excureo has quit (A TLS packet with unexpected length was received.)
Mar 30 21:01:09 *	dethos has quit (Ping timeout: 121 seconds)
Mar 30 21:02:09 *	rschiffl1n has quit (Ping timeout: 121 seconds)
Mar 30 21:02:09 *	Excureo (c@moz-7mf6lg.wa.charter.com) has joined
Mar 30 21:03:32 *	dinfuehr_ (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 30 21:03:32 *	orks has quit (Quit: rakede)
Mar 30 21:03:32 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 30 21:03:32 *	bjz_ (bjz@moz-7au.as2.222.104.IP) has joined
Mar 30 21:03:32 <Perceptes>	anyone tried compiling a rust program for x86_64-unknown-linux-musl from OS X? It requires musl-gcc but I'm not seeing an easy/safe way to install it. musl's website doesn't use HTTPS and the GPG signature on their latest release is bad. :( /cc acrichto
Mar 30 21:04:07 *	kaoD has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 21:04:53 *	bjz has quit (Ping timeout: 121 seconds)
Mar 30 21:05:36 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 30 21:06:05 *	stephank has quit (Ping timeout: 121 seconds)
Mar 30 21:06:12 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 21:06:18 *	NameNotFound is now known as zz_NameNotFound
Mar 30 21:06:19 <acrichto>	Perceptes: ah unfortunately I don't know of any linkers that run on OSX and target Linux (that's the missing piece you'll need basically)
Mar 30 21:06:34 *	dinfuehr_ has quit (Ping timeout: 121 seconds)
Mar 30 21:06:43 *	dmilith has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 21:07:13 <durka42>	how do you check a signature like that?
Mar 30 21:07:23 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 30 21:07:29 <Perceptes>	acrichto: orly. I think I tried running rustup in alpine linux a while back and got an error. I can check again to see what the exact error is.
Mar 30 21:07:36 *	James__ has quit (Ping timeout: 121 seconds)
Mar 30 21:07:46 <Perceptes>	durka42: gpg2 --verify musl-1.1.14.tar.gz.asc
Mar 30 21:07:47 <sinclair>	durka42: http://is.gd/26dDFz
Mar 30 21:07:52 *	fengshaun has quit (Quit: bye bye!)
Mar 30 21:07:57 <sinclair>	durka42: more hax mate
Mar 30 21:08:23 *	fengshaun (fengshaun@moz-0kerr5.ss.shawcable.net) has joined
Mar 30 21:09:09 *	fengshaun has quit (Quit: bye bye!)
Mar 30 21:09:22 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 21:09:26 <durka42>	Perceptes: it says "gpg: Good signature from "musl libc <musl@libc.org>" [unknown]"
Mar 30 21:09:27 *	fengshaun (fengshaun@moz-0kerr5.ss.shawcable.net) has joined
Mar 30 21:09:49 <Perceptes>	huh, I get "BAD signature"
Mar 30 21:10:13 <durka42>	corrupted download?
Mar 30 21:10:19 <Perceptes>	maybe... let me try again
Mar 30 21:10:45 *	stephank (stephank@moz-csb70m.1hdc.4dv7.0058.2a02.IP) has joined
Mar 30 21:10:55 <durka42>	sinclair: that's pretty cool
Mar 30 21:11:10 *	fengshaun has quit (Quit: bye bye!)
Mar 30 21:11:14 <sinclair>	durka42: yeah?
Mar 30 21:11:26 *	lucian has quit (Ping timeout: 121 seconds)
Mar 30 21:11:29 *	fengshaun (fengshaun@moz-0kerr5.ss.shawcable.net) has joined
Mar 30 21:11:32 <durka42>	I was just watching Eduard Bopp's talk on carboxyl, which is a crate for functional reactive programming
Mar 30 21:12:00 <Perceptes>	nope, same thing :(
Mar 30 21:12:05 <sinclair>	oh, you have a link to that?
Mar 30 21:12:25 <durka42>	https://www.youtube.com/watch?v=Gkz5_XvVEGs it's at the top of /r/rust
Mar 30 21:12:36 <sinclair>	durka42: im still exploring things, that code is just a basic subset of that smoke-rs lib
Mar 30 21:12:47 <sinclair>	durka42: i want lazy eval on the stream
Mar 30 21:13:00 *	FrozenCow has quit (Connection closed)
Mar 30 21:13:10 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 30 21:13:13 *	zz_NameNotFound is now known as NameNotFound
Mar 30 21:13:24 <sinclair>	durka42: atm, you have to iterate the stream and then apply combinators to it, ideally, id like to apply combinators prior to "read"
Mar 30 21:13:45 <durka42>	that sounds like the kind of thing carboxyl does actually
Mar 30 21:13:59 <durka42>	I guess you have to store the combinators and then apply them whenever a new value comes along
Mar 30 21:14:32 <sinclair>	durka42: yes and no
Mar 30 21:14:41 <sinclair>	durka42: atm, i have something like....
Mar 30 21:14:42 <durka42>	Perceptes: :( weird that it verifies for me
Mar 30 21:14:59 <Perceptes>	yeah, I wonder what is different for me
Mar 30 21:15:03 <sinclair>	stream.map(|n| n) is really, Stream<T> -> Stream<U>
Mar 30 21:15:14 *	nowhere_man (pierre@moz-66s12c.abo.wanadoo.fr) has joined
Mar 30 21:15:17 <sinclair>	durka42: so, a stream just maps to another stream
Mar 30 21:15:24 *	bkearns has quit (Quit: Leaving.)
Mar 30 21:15:33 <sinclair>	durka42: map also takes ownership of the first stream
Mar 30 21:15:54 <sinclair>	durka42: its only when you call read() on the stream, that it actually starts reading
Mar 30 21:15:56 <durka42>	Perceptes: well, there's three files, the tarball, sig and the key itself, maybe one of the other two got corrupted
Mar 30 21:16:10 <sinclair>	durka42: what id like to do is have stream.into_iter()
Mar 30 21:16:18 <durka42>	sinclair: yeah so if it's async then Stream::map has to store that closure |n| n somewhere, right?
Mar 30 21:16:38 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 30 21:16:41 <sinclair>	nah, its just another way to construct a new Stream
Mar 30 21:16:48 <Perceptes>	durka42: i've tried downloading the tarball and the sig multiple times, same thing. gpg downloaded the key itself, and i verified its fingerprint with what's listed on the site and on twitter.
Mar 30 21:16:54 <sinclair>	the closure is associated with the Stream itself
Mar 30 21:17:02 <durka42>	okay... dunno then
Mar 30 21:17:04 <durka42>	sinclair: right
Mar 30 21:17:17 *	jimb (user@moz-bhs.u4v.173.207.IP) has joined
Mar 30 21:17:36 <sinclair>	durka42: https://github.com/sinclairzx81/smoke-rs#stream_operators
Mar 30 21:17:44 <sinclair>	durka42: i manually coded 3 of them
Mar 30 21:17:57 <sinclair>	so, map() is Stream<T> -> Stream<U>
Mar 30 21:18:06 <sinclair>	filter() is Stream<T> Stream<T>
Mar 30 21:18:17 <sinclair>	and fold() is Stream<T> -> Task<T>
Mar 30 21:18:24 <sinclair>	*Task<U>
Mar 30 21:18:31 *	skeet70 (skeet70@moz-optjda.client.bresnan.net) has joined
Mar 30 21:18:49 *	bjz (bjz@moz-puppgq.tpgi.com.au) has joined
Mar 30 21:19:02 <sinclair>	durka42: so, i stopped at three operators/combinators and took a bit of time to explore other things, mostly observables
Mar 30 21:19:10 *	rschifflin (mark@moz-n9m.q3k.194.69.IP) has joined
Mar 30 21:19:20 *	bjz_ has quit (Ping timeout: 121 seconds)
Mar 30 21:19:30 <nixpulvis>	Woh I just thought of something I want your guys ideas about.
Mar 30 21:20:38 *	happy-dude_ has quit (Quit: Connection closed for inactivity)
Mar 30 21:20:38 *	ParadoxSpiral_ has quit (Quit: cya)
Mar 30 21:20:38 <nixpulvis>	If we make the lifetimes more granular than a whole block... Could we make a function move"
Mar 30 21:20:38 <nixpulvis>	the lifetime.
Mar 30 21:20:38 *	dwins (dwins@moz-59vrjk.dc.comcast.net) has joined
Mar 30 21:20:39 *	dwins has quit (A TLS packet with unexpected length was received.)
Mar 30 21:20:40 <durka42>	huh?
Mar 30 21:20:44 <nixpulvis>	Allowing vec.remove(&item) to end the lifetime of the ref.
Mar 30 21:20:47 *	Guest81 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 21:21:02 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 30 21:21:28 *	anastiel has quit (Connection closed)
Mar 30 21:21:48 <nixpulvis>	`let a = vec![1]; let r = &a[0]; a.remove(r);`
Mar 30 21:21:58 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 30 21:22:24 *	anastiel has quit (Connection closed)
Mar 30 21:22:45 <durka42>	I don't see how to make that code compile, because you need a &mut a to call remove
Mar 30 21:22:55 <nixpulvis>	exactly.
Mar 30 21:23:13 <durka42>	I mean even if the borrow checker gets smarter
Mar 30 21:23:22 <durka42>	a.remove(r) has a &mut and a & alive at the same time
Mar 30 21:23:46 *	soundwave_rk has quit (Ping timeout: 121 seconds)
Mar 30 21:24:00 <nixpulvis>	But they could be shown in this example to never actually mutate overlapping parts of memory internal to thier struture.
Mar 30 21:24:38 *	jfo has quit (Quit: Leaving...)
Mar 30 21:25:15 <Perceptes>	acrichto: I remember now. the rust compiler won't install on alpine linux because rustc depends on dynamic libraries for compiler plugins. does this mean the only way to compile a program for musl is to run the compiler on a glibc-based linux but targeting musl?
Mar 30 21:25:23 <nixpulvis>	I could then use a type like `(usize, &mut T)` as a wrapper for a reference to pass around objects.
Mar 30 21:25:43 <nixpulvis>	in vectors*
Mar 30 21:25:47 <Perceptes>	acrichto: the specific error rustup.sh gives is "install: WARNING: failed to run ldconfig. this may happen when not installing as root. run with --verbose to see the error" (and no more useful information even with --verbose on)
Mar 30 21:25:53 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 21:27:59 <durka42>	I'm still stuck on how removing an element that you've got a reference to doesn't invalidate the reference
Mar 30 21:27:59 <nixpulvis>	it should.
Mar 30 21:27:59 *	skeet70 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 21:27:59 <niconii>	nixpulvis: for that to work, &T could not be Copy or Clone
Mar 30 21:27:59 <nixpulvis>	Why not?
Mar 30 21:27:59 <nixpulvis>	those would just be new objects.
Mar 30 21:27:59 *	woboats has quit (Client exited)
Mar 30 21:27:59 <acrichto>	Perceptes: interesting, yeah I think there's been trouble with rustc on alpine in the past
Mar 30 21:27:59 *	dardevelin has quit (Ping timeout: 121 seconds)
Mar 30 21:27:59 <nixpulvis>	not part of the vector.
Mar 30 21:27:59 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 30 21:27:59 *	skeet70 (skeet70@moz-optjda.client.bresnan.net) has joined
Mar 30 21:27:59 <niconii>	nixpulvis: i could see moving r into a.remove() dropping r
Mar 30 21:28:13 <niconii>	nixpulvis: but what about `let a = vec![1]; let r = &a[0]; let s = r; a.remove(r); *s`
Mar 30 21:28:33 <nixpulvis>	This could be caught at compile time.
Mar 30 21:28:57 *	Quxxy (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 30 21:28:59 <nixpulvis>	s outlives the death of the lifetime of r.
Mar 30 21:29:09 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 30 21:29:30 <niconii>	nixpulvis: but `let a = vec![1]; let r = &a[0]; let s = r; drop(r); *s` is valid
Mar 30 21:29:40 <niconii>	nixpulvis: so how exactly do you catch this?
Mar 30 21:29:42 <Mutabah>	niconii: yes, dropping the &-ptr is valid
Mar 30 21:29:43 <nixpulvis>	oh interesting... &T can't be Copy. I understand now.
Mar 30 21:30:53 <Mutabah>	Oh, wait, I see
Mar 30 21:30:53 <nixpulvis>	Wow interesting.
Mar 30 21:30:53 <mbrubeck>	Yeah, I think the region checker or whatever could extend the lifetime of `r` to encompass the lifetimes of all its copies... but you'd need a new sort of annotation for the `remove` function
Mar 30 21:30:53 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 30 21:30:53 <mbrubeck>	like `a.remove(move r)` to pick something from Rust of ages past
Mar 30 21:30:53 <nixpulvis>	Yea I was thinking exactly that.
Mar 30 21:30:53 <mbrubeck>	for both human readers and the compiler
Mar 30 21:30:53 <niconii>	yeah
Mar 30 21:31:06 <mbrubeck>	I think current discussion of non-lexical borrows is more about single-entry multiple-exit (SEME) regions
Mar 30 21:31:20 *	fengshaun has quit (Quit: bye bye!)
Mar 30 21:31:23 *	fengshaun (fengshaun@moz-0kerr5.ss.shawcable.net) has joined
Mar 30 21:31:42 <mbrubeck>	so the compiler could check, for example, that a borrow only needs to continue into one branch of an `if...else` or a `match`
Mar 30 21:31:43 *	sankha has quit (Ping timeout: 121 seconds)
Mar 30 21:31:46 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 30 21:32:12 <nixpulvis>	The motivation here is due to this project I've been working on for class where I have deep logic inside a game. And the game has a variaty of vectors. players attacking other players etc. Being able to pass around reference instead of indecies would be huge.
Mar 30 21:32:42 <mbrubeck>	related: https://github.com/rust-lang/rfcs/issues/881 and https://github.com/rust-lang/rfcs/pull/396
Mar 30 21:33:24 <nixpulvis>	This actually lets people use references as the concept of a "name" universally in Rust.
Mar 30 21:33:33 *	msingle (mts001@moz-n19sp8.fios.verizon.net) has joined
Mar 30 21:33:45 <nixpulvis>	since we still right now have indices *aka aliasing* for talking about vectors.
Mar 30 21:34:01 *	mneumann has quit (Client exited)
Mar 30 21:34:09 <mbrubeck>	The thing about `a.remove(r)` is that it also invalidates all other references into the vector... so it may not be that helpful in practice...
Mar 30 21:34:09 *	mneumann (Thunderbird@moz-00qv32.rz.uni-karlsruhe.de) has joined
Mar 30 21:34:20 <mbrubeck>	It's only useable if only one item reference exists at a time.
Mar 30 21:34:33 <nixpulvis>	That happens easily in my code.
Mar 30 21:34:39 <mbrubeck>	cool
Mar 30 21:34:50 <nixpulvis>	the only reference is &mut self for the function doing the logic.
Mar 30 21:34:58 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 30 21:35:07 *	Mormur has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 21:35:12 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 21:35:18 *	Malnormalulo (Malnormalul@moz-83aus5.cable.rcn.com) has joined
**** BEGIN LOGGING AT Wed Mar 30 23:24:51 2016

Mar 30 23:24:51 *	Now talking on #rust
Mar 30 23:24:51 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 30 23:24:51 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 30 23:26:48 *	bholley_away is now known as bholley
Mar 30 23:27:03 *	NameNotFound is now known as zz_NameNotFound
Mar 30 23:27:03 <mankyKitty>	I must confess that this is mostly driven by my Haskell exp, I've not built an equivalently sized rust app yet :P
Mar 30 23:29:53 *	ptc (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 30 23:34:20 *	colinsurprenant (colin@moz-8a0olr.89.electronicbox.net) has joined
Mar 30 23:34:20 *	tschottdorf has quit (Client exited)
Mar 30 23:34:20 *	ptc_ (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 30 23:34:20 *	housl has quit (Quit: WeeChat 1.4)
Mar 30 23:34:20 *	tschottdorf (tschottdorf@moz-sqs4n4.netcologne.de) has joined
Mar 30 23:34:20 *	jimb has quit (Ping timeout: 121 seconds)
Mar 30 23:34:22 *	Darfeel has quit (Connection closed)
Mar 30 23:35:38 *	ptc has quit (Ping timeout: 121 seconds)
Mar 30 23:36:52 *	indefini (indefini@moz-4p4v25.ucom.ne.jp) has joined
Mar 30 23:38:48 *	gpoesia has quit (Client exited)
Mar 30 23:41:36 *	nullvoid has quit (Quit: leaving)
Mar 30 23:42:31 *	zz_NameNotFound is now known as NameNotFound
Mar 30 23:42:43 *	shadoi has quit (Quit: Leaving.)
Mar 30 23:43:00 *	bholley is now known as bholley_away
Mar 30 23:43:20 <tycoon177>	Is there a way to manually close a TcpStream?
Mar 30 23:43:30 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 23:43:32 <kamalmarhubi>	tycoon177: drop?
Mar 30 23:43:41 *	dzbarsky (Adium@moz-ssdjsj.82pc.j76f.0646.2601.IP) has joined
Mar 30 23:43:43 <kamalmarhubi>	or let it go out of scope
Mar 30 23:44:38 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 30 23:44:39 <tycoon177>	My problem is that the end of scope is the end of the program, so the stream never really closes gracefully..
Mar 30 23:45:04 *	pereba has quit (Quit: Hey folks, AdiIRC 2.0 is out! Good time to try it again. - www.adiirc.com)
Mar 30 23:45:17 <kamalmarhubi>	tycoon177: huh I think it should. destructors should run at program exit (assuming you mean end of main rather than calling process::exit())
Mar 30 23:45:42 <tycoon177>	The end of main didn't auto end it :
Mar 30 23:45:43 <tycoon177>	:/
Mar 30 23:46:24 <kamalmarhubi>	how does the non-graceful closing manifest?
Mar 30 23:46:25 *	gpoesia (poesia@moz-ga0.9o0.201.199.IP) has joined
Mar 30 23:46:45 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 30 23:46:47 <kamalmarhubi>	tycoon177: ^^^
Mar 30 23:47:05 *	duncan (paul@moz-83kscv.mi.charter.com) has joined
Mar 30 23:47:10 <kamalmarhubi>	is there a way to get `cargo build` not to define `stdbuild`?
Mar 30 23:47:27 <tycoon177>	kamalmarhubi, i'm making an irc library and I have been having issues closing the stream. It just doesnt register on freenode...just times out
Mar 30 23:47:48 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 30 23:48:08 *	nuvo (Main@moz-mmf.md4.23.217.IP) has joined
Mar 30 23:48:40 *	glendc has quit (Ping timeout: 121 seconds)
Mar 30 23:48:48 <kamalmarhubi>	can you check what happens if you call `libc::close(tcp_stream.as_raw_fd())` at the end, (and also then `drop(tcp_stream)` to avoid trying to close it again in the destructor)
Mar 30 23:49:20 <kamalmarhubi>	tycoon177: I am sort of suspicious that it's an IRC protocol issue rather than a TCP stream issue
Mar 30 23:49:44 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 30 23:49:52 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 30 23:49:54 <tycoon177>	If I add a small delay at the end, it closes on irc as well though kamalmarhubi 
Mar 30 23:50:27 <kamalmarhubi>	delay as in thread::sleep()?
Mar 30 23:50:42 *	JanC has quit (Ping timeout: 121 seconds)
Mar 30 23:50:49 *	desophos has quit (Ping timeout: 121 seconds)
Mar 30 23:51:05 *	urcra has quit (Ping timeout: 121 seconds)
Mar 30 23:51:06 <tycoon177>	Yes kamalmarhubi 
Mar 30 23:51:12 <tycoon177>	and dropping it worked
Mar 30 23:51:24 *	duncan has quit (Ping timeout: 121 seconds)
Mar 30 23:51:41 *	Pierre_M (Pierre@moz-0k5bh2.slkc.qwest.net) has joined
Mar 30 23:51:54 *	gmorenz has quit (Connection closed)
Mar 30 23:52:04 <kamalmarhubi>	curious; I thought constructors will run at program exit
Mar 30 23:52:12 <kamalmarhubi>	sounds like I might be wrong somehow
Mar 30 23:52:21 *	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined
Mar 30 23:52:49 *	gmorenz (normal@moz-os4.l2b.52.70.IP) has joined
Mar 30 23:53:26 *	Makoryu has quit (Ping timeout: 121 seconds)
Mar 30 23:54:18 *	Makoryu (malleus@moz-0de80j.dyn.optonline.net) has joined
Mar 30 23:54:49 *	peschkaj has quit (Quit: Leaving)
Mar 30 23:55:56 *	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined
Mar 30 23:55:57 *	mhcerri has quit (Connection closed)
Mar 30 23:56:50 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 30 23:57:17 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 30 23:57:31 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 23:57:55 *	jgallagher (john@moz-72l538.ga.comcast.net) has joined
Mar 30 23:59:33 *	obi_wan (Mibbit@moz-1ia13b.cc.cmu.edu) has joined
Mar 30 23:59:35 *	NameNotFound is now known as zz_NameNotFound
Mar 30 23:59:37 *	FreeBird (FreeBird@moz-d5lsh3.9t5k.kgbt.120b.2a02.IP) has joined
Mar 30 23:59:59 *	obi_wan has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 00:00:42 *	acmcarther (alex@moz-699d6d.lv.cox.net) has joined
Mar 31 00:01:17 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 31 00:01:47 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 31 00:03:42 *	FreeBird has quit (Ping timeout: 121 seconds)
Mar 31 00:03:53 *	ubsan_ (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 00:05:17 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 00:05:30 *	isomarcte has quit (Ping timeout: 121 seconds)
Mar 31 00:06:20 *	kimundi (kimundi@moz-n9cgd9.b49l.0hep.4fe2.2002.IP) has joined
Mar 31 00:07:00 *	zz_NameNotFound is now known as NameNotFound
Mar 31 00:07:45 *	JanC (janc@moz-rk8kj8.dsl.scarlet.be) has joined
Mar 31 00:08:16 *	ubsan_ has quit (Ping timeout: 121 seconds)
Mar 31 00:09:00 *	duncan (paul@moz-83kscv.mi.charter.com) has joined
Mar 31 00:09:20 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 00:09:52 <sinclair>	durka42: for the lolz http://is.gd/TeQkDN
Mar 31 00:11:08 *	markstory (textual@moz-tb3ghu.cable.rogers.com) has joined
Mar 31 00:12:05 <Kingsqueeee>	uhh
Mar 31 00:12:12 <Kingsqueeee>	https://gist.github.com/anonymous/8f38ce28fd79252712c04b5c9d7cae2e what exactly is going on D:
Mar 31 00:14:43 *	gpoesia has quit (Ping timeout: 121 seconds)
Mar 31 00:17:00 *	lurk_ has quit (Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805])
Mar 31 00:17:04 *	JanC has quit (Quit: 'k Zie weg)
Mar 31 00:17:19 *	Shibe (Shibe@moz-ps2.u5j.47.39.IP) has joined
Mar 31 00:17:23 *	JanC (janc@moz-rk8kj8.dsl.scarlet.be) has joined
Mar 31 00:17:24 <Shibe>	what? http://i.shibe.ml/QmTQZDSaZo6ArUDbTEsZvRJ8qvBJBhifEcK7487rMoCxw7.png
Mar 31 00:17:27 <Shibe>	T is Read
Mar 31 00:18:01 <Mutabah>	Shibe: Does that support unsizing?
Mar 31 00:18:11 <Shibe>	does what support unsizing
Mar 31 00:18:12 <Mutabah>	(that = HttpReader)
Mar 31 00:18:18 <Shibe>	no idea
Mar 31 00:18:20 <Shibe>	what is unsizing
Mar 31 00:18:24 <Mutabah>	Shibe: Basically, &mut T and &mut io::Read are different sizes
Mar 31 00:18:41 <Shibe>	so what do I do?
Mar 31 00:18:41 <Mutabah>	Actually... unsizing doesn't come into it
Mar 31 00:18:47 <Shibe>	they are the same thing though aren't they?
Mar 31 00:18:58 *	skeet70 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 00:18:59 <Mutabah>	That coercion just won't work
Mar 31 00:19:13 <Mutabah>	You'll have to construct the HttpReader with the &mut io::Read instead of &mut T
Mar 31 00:19:54 <Shibe>	and how would i do that?
Mar 31 00:20:14 <Mutabah>	When you construct the HttpReader, pass it a &mut std::io::Read instead of just a &mut T
Mar 31 00:20:22 *	zrneely has quit (Quit: Leaving)
Mar 31 00:20:41 *	jhelwig has quit (Ping timeout: 121 seconds)
Mar 31 00:20:48 <Shibe>	ok i will try
Mar 31 00:20:53 <Mutabah>	(let p: &mut ::std::io::Read = t_mut_ptr; HttpReader::new(p)
Mar 31 00:21:22 <sfackler>	Kingsqueeee: I believe you can only format a given argument with one format "type" (e.g "{}" or "{x}" but not both)
Mar 31 00:21:24 *	ptc (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 31 00:22:09 <Shibe>	Mutabah: seems to have built
Mar 31 00:22:20 *	jgilbert has quit (Ping timeout: 121 seconds)
Mar 31 00:22:55 <Kingsqueeee>	sfackler: yeah, this seems to work https://gist.github.com/anonymous/c11cbb4264d4ebad67086933fb987802
Mar 31 00:22:59 <Kingsqueeee>	which is..yucky
Mar 31 00:23:26 *	jhelwig (jhelwig@moz-l0ld78.or.frontiernet.net) has joined
Mar 31 00:24:24 *	NameNotFound is now known as zz_NameNotFound
Mar 31 00:26:07 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 00:26:25 *	bholley_away is now known as bholley
Mar 31 00:26:30 *	qrlpx has quit (Connection closed)
Mar 31 00:26:36 *	Aceeri (uid29649@moz-opi9bt.tooting.irccloud.com) has joined
Mar 31 00:27:44 *	mada has quit (Ping timeout: 121 seconds)
Mar 31 00:28:12 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 00:28:46 *	eric_lagergren (eric@moz-lr1hrn.wa.comcast.net) has joined
Mar 31 00:29:39 <gus>	I have a non-Sendable type, but I want to pass a Sendable "token" representing it to another thread, and that other thread will eventually pass the token back to the original thread, so that original thread can find the original object again.
Mar 31 00:30:10 *	Quxxy2 (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 31 00:30:51 <gus>	Has anyone already written that library?  (It doesn't sound hard, but seems like optimising it will be full of unsafe lifetime games that I rather just re-use :P )
Mar 31 00:31:19 <Shibe>	Mutabah: if i take a &mut Read as an argument then I can't pass it an object which implements read
Mar 31 00:31:27 <Shibe>	i need to pass it a Read object
Mar 31 00:31:52 <Mutabah>	Shibe: &mut Read does impl Read
Mar 31 00:32:08 <Shibe>	then what do i do?
Mar 31 00:32:13 <Shibe>	i cant pass it any reader
Mar 31 00:32:14 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 00:32:22 <Mutabah>	Why can you not?
Mar 31 00:32:32 *	Quxxy has quit (Ping timeout: 121 seconds)
Mar 31 00:32:53 *	zv (zv@moz-7g5pq3.ca.comcast.net) has joined
Mar 31 00:32:59 *	tennix (vagrant@moz-kjb.7qo.39.106.IP) has joined
Mar 31 00:34:10 *	GGist (Mibbit@moz-2n17l0.wa.comcast.net) has joined
Mar 31 00:34:37 *	blackgoat has quit (Ping timeout: 121 seconds)
Mar 31 00:34:38 *	waynr has quit (Quit: WeeChat 1.4)
Mar 31 00:34:44 *	waynr (waynr@moz-vmtvfl.net) has joined
Mar 31 00:35:40 *	zrsmith92 (textual@moz-pas.mfr.141.50.IP) has joined
Mar 31 00:37:23 <Shibe>	Mutabah: yeah i forgot &mut reference
Mar 31 00:38:10 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 00:39:17 *	Ketsuban has quit (Quit: Leaving)
Mar 31 00:39:59 *	zz_NameNotFound is now known as NameNotFound
Mar 31 00:41:49 *	zhoeon_ has quit (Quit: leaving)
Mar 31 00:41:57 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 00:42:15 *	urodna has quit (Client exited)
Mar 31 00:42:27 *	colinsurprenant has quit (Client exited)
Mar 31 00:43:35 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 31 00:44:45 *	skeet70 (skeet70@moz-optjda.client.bresnan.net) has joined
Mar 31 00:49:21 *	nicholasf has quit (Connection closed)
Mar 31 00:49:39 *	arBmind1 (Andreas@moz-p31bnh.dyn.telefonica.de) has joined
Mar 31 00:49:48 *	alicemaz (alice@moz-4nq892.PUBLIC.monkeybrains.net) has joined
Mar 31 00:50:58 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 31 00:51:47 *	arBmind has quit (Ping timeout: 121 seconds)
Mar 31 00:52:21 *	memorion has quit (Ping timeout: 121 seconds)
Mar 31 00:53:07 *	bholley is now known as bholley_away
Mar 31 00:53:11 *	memorion (memorion@moz-51aa3g.pools.vodafone-ip.de) has joined
Mar 31 00:57:03 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 00:57:37 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 00:57:49 *	NameNotFound is now known as zz_NameNotFound
Mar 31 00:57:59 *	Regulati_ (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 31 01:00:12 *	RegulationD has quit (Ping timeout: 121 seconds)
Mar 31 01:01:10 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 01:01:13 *	tschottdorf has quit (Ping timeout: 121 seconds)
Mar 31 01:04:27 *	zz_NameNotFound is now known as NameNotFound
Mar 31 01:06:11 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 01:07:49 *	jimb (user@moz-6gkikn.or.comcast.net) has joined
Mar 31 01:07:50 *	xrash has quit (Connection closed)
Mar 31 01:08:15 *	mexisme has quit (Client exited)
Mar 31 01:08:45 *	ptc_ has quit (Connection closed)
Mar 31 01:09:11 <sinclair>	Mutabah: can i get your thoughts on something?
Mar 31 01:09:12 *	Mutabah is away (Lunch)
Mar 31 01:09:55 <Mutabah>	sinclair: Sure
Mar 31 01:10:03 <Mutabah>	Lucky you, I just signed on
Mar 31 01:10:11 <sinclair>	Mutabah: been writing this thing https://github.com/sinclairzx81/smoke-rs/blob/master/examples/bench.rs
Mar 31 01:10:14 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 01:10:21 <sinclair>	Mutabah: wanted to know if this looks sensible or not
**** BEGIN LOGGING AT Thu Mar 31 09:22:44 2016

Mar 31 09:22:44 *	Now talking on #rust
Mar 31 09:22:46 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 31 09:22:46 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 31 09:22:47 <bluss>	phaazon: it's a type parameter, just put in a type there
Mar 31 09:22:47 <feliwir>	phaazon, so when i wanted to parse any programming language you'd do that how exactly? Using the regex crate?
Mar 31 09:22:53 *	chain_chan (chainChan@moz-f67ffr.slkc.qwest.net) has joined
Mar 31 09:23:00 <phaazon>	feliwir: definitely not
Mar 31 09:23:01 <bluss>	phaazon: say C = std::str::Chars<'x> for some 'x
Mar 31 09:23:03 <phaazon>	regex suck
Mar 31 09:23:12 <bluss>	phaazon: that type contains a reference that outlives 'x
Mar 31 09:23:14 <phaazon>	web developers use them because they’re simple and handy
Mar 31 09:23:23 <phaazon>	feliwir: do you know the Haskell parsec / attoparsec library?
Mar 31 09:23:34 *	chain_kun (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 31 09:23:39 <ehiggs>	Hi all. I have trait Foo<T> { fn foo(items; &[T]) -> Option<Self> { ...} which is option in case [T] is empty. But Sized is not implemented for Self. How might I convince it that I will only implement Foo on types that are sized?
Mar 31 09:23:39 <phaazon>	bluss: ok, I see it :)
Mar 31 09:23:39 <feliwir>	phaazon, definetly not
Mar 31 09:23:58 <phaazon>	feliwir: well, it’s a parser combinators API
Mar 31 09:24:10 <phaazon>	I guess rust might have one as well
Mar 31 09:24:13 <phaazon>	I’d use that
Mar 31 09:24:25 *	NameNotFound is now known as zz_NameNotFound
Mar 31 09:24:28 <phaazon>	or it should have an equivalent to alex / happy (flex / bison)
Mar 31 09:24:34 <feliwir>	isn't that the one i've linked? It says parser lexer combination
Mar 31 09:24:43 <phaazon>	companion_cube: Rust is really neat, it suits my needs pretty well :)
Mar 31 09:24:47 *	jo (user@moz-vg7f5t.cable.virginm.net) has joined
Mar 31 09:24:52 <ehiggs>	oh i see, I do trait Foo<T> where Self: Sized { ...}
Mar 31 09:24:53 <phaazon>	feliwir: I haven’t checked
Mar 31 09:24:56 <phaazon>	if so, go for it then
Mar 31 09:25:16 <phaazon>	ehiggs: 
Mar 31 09:25:20 *	OnVar has quit (Ping timeout: 121 seconds)
Mar 31 09:25:21 <phaazon>	trait Foo<T>: Sized {
Mar 31 09:25:29 <phaazon>	that’s super-trait syntax
Mar 31 09:25:32 *	Sgeo has quit (Ping timeout: 121 seconds)
Mar 31 09:25:39 <phaazon>	super-ultra-awesome trait syntax
Mar 31 09:25:42 <phaazon>	lazors and shit
Mar 31 09:25:42 <phaazon>	:)
Mar 31 09:25:55 <dbrgn>	in a compiler plugin, is there a way to create new types of identifiers? the docs for macro_rules contain a roman numerals example. would it be possible to use egyptian hieroglyphs (as utf8 characters) as identifiers?
Mar 31 09:26:03 <phaazon>	companion_cube: Rust is like a small Haskell, so it’s really simple to get used to it ;)
Mar 31 09:26:27 <dbrgn>	I'd like to annotate a function (e.g. main) and then recursively replace all occurrences of that unicode symbol with a regular ascii identifier.
Mar 31 09:26:37 <phaazon>	dbrgn: haha, use the greek exclamation point as an operator
Mar 31 09:26:42 <phaazon>	so that you can confuse people :D
Mar 31 09:26:49 <companion_cube>	:)
Mar 31 09:26:58 <dbrgn>	phaazon: hehe :)
Mar 31 09:26:59 *	chain_chan has quit (Ping timeout: 121 seconds)
Mar 31 09:27:10 <phaazon>	ah no
Mar 31 09:27:13 <phaazon>	it’s greek question mark
Mar 31 09:27:19 <dbrgn>	the question is, is this possible? if yes, using which syntax extension? probably MultiModifier, right?
Mar 31 09:27:23 *	OnVar (OnVar@moz-bm68qf.ca.comcast.net) has joined
Mar 31 09:27:30 <phaazon>	no idea
Mar 31 09:28:09 <ehiggs>	phaazon: omfg. we super-trait now
Mar 31 09:28:14 <dbrgn>	nrc or Manishearth would probably know :)
Mar 31 09:28:19 <ehiggs>	3rusty5u
Mar 31 09:28:49 <monti>	guys, is it possible to access the source file path from code? like __FILE__ or something else.
Mar 31 09:29:33 *	tomprogrammer (thomas@moz-dvgkdh.tr5r.qept.4dd0.2001.IP) has joined
Mar 31 09:29:39 <monti>	file!
Mar 31 09:29:42 <ehiggs>	monti: it is. that's how panic will give you a dump with lines
Mar 31 09:29:59 <Manishearth>	dbrgn: ?
Mar 31 09:30:04 <ehiggs>	https://doc.rust-lang.org/src/std/macros.rs.html#360
Mar 31 09:30:13 <Manishearth>	"new types of identifiers"? nope
Mar 31 09:30:43 <dbrgn>	Manishearth: so I can't create a compiler plugin that allows me to use unicode symbols as identifiers?
Mar 31 09:30:45 <Manishearth>	dbrgn: you can annotate a function and do a replacement though
Mar 31 09:30:56 <Manishearth>	dbrgn: "new type of identifiers" means something else :)
Mar 31 09:31:15 <Manishearth>	(languages like C++ let you create new types of literals for example via overloading)
Mar 31 09:31:16 <dbrgn>	Manishearth: ah :) it's hard to find the right terminology :)
Mar 31 09:31:25 <Manishearth>	dbrgn: multimodifier is what you want
Mar 31 09:31:41 *	daze (daze@moz-tc29eq.static.zebra.lt) has joined
Mar 31 09:31:41 <Manishearth>	actually, no
Mar 31 09:31:42 <Manishearth>	hm
Mar 31 09:31:50 <dbrgn>	Manishearth: ok. and from there I could recursively traverse the AST and replace certain unicode symbols (which aren't valid identifiers) with valid ones?
Mar 31 09:32:03 <Manishearth>	dbrgn: so.
Mar 31 09:32:19 <Manishearth>	the issue is that whilst bang-macros (e.g. println!) take in token trees
Mar 31 09:32:29 <Manishearth>	attributes (#[foo]) take in parsed items
Mar 31 09:32:30 *	zz_NameNotFound is now known as NameNotFound
Mar 31 09:32:45 <Manishearth>	do these unicode symbols parse as identifiers?
Mar 31 09:32:50 <dbrgn>	Manishearth: nope
Mar 31 09:32:55 <Manishearth>	then no
Mar 31 09:32:57 <dbrgn>	I'd need something pre-parsing.
Mar 31 09:33:02 <Manishearth>	dbrgn: I thought unicode was valid for idents htough
Mar 31 09:33:10 <dbrgn>	is that possible? I don't think bang-macros allow me to do that.
Mar 31 09:33:11 <Manishearth>	dbrgn: in that case, you need to define a bang-macro
Mar 31 09:33:19 <dbrgn>	Manishearth: the thing is, I'd like to use single-character unicode symbols.
Mar 31 09:33:24 *	deadc0de_ (chsitter@moz-lrh.035.31.94.IP) has joined
Mar 31 09:33:31 <Manishearth>	dbrgn: so?
Mar 31 09:33:31 <dbrgn>	with bang-macros, do you mean macro_rules?
Mar 31 09:33:40 <Manishearth>	no
Mar 31 09:33:40 <Manishearth>	http://manishearth.github.io/rust-internals-docs/syntax/ext/base/enum.SyntaxExtension.html
Mar 31 09:33:44 <Manishearth>	NormalTT
Mar 31 09:33:57 <Manishearth>	things like stringify! and format_args! are NormalTT
Mar 31 09:34:05 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 09:34:08 <Manishearth>	they operate exclusively on token trees
Mar 31 09:34:15 <Manishearth>	then just replace the tokens you find
Mar 31 09:34:38 <dbrgn>	Manishearth: 
Mar 31 09:34:39 <dbrgn>	https://play.rust-lang.org/
Mar 31 09:34:42 <Manishearth>	you'd have a syntax like heiroglyphify! { ... code here ...   }
Mar 31 09:34:54 <dbrgn>	Manishearth: ah, that helps :)
Mar 31 09:35:02 *	deadc0de has quit (Ping timeout: 121 seconds)
Mar 31 09:35:06 *	msingle (mts001@moz-4bg68s.hr.cox.net) has joined
Mar 31 09:37:24 *	feliwir has quit (Ping timeout: 121 seconds)
Mar 31 09:38:08 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 09:38:54 *	sankha has quit (Connection closed)
Mar 31 09:39:11 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 31 09:39:36 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 31 09:41:23 *	pwk has quit (Ping timeout: 121 seconds)
Mar 31 09:42:00 *	Eonil (Eonil@moz-2qo.kfq.238.218.IP) has joined
Mar 31 09:42:31 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 09:43:03 *	sankha has quit (Connection closed)
Mar 31 09:43:23 *	griff has quit (Client exited)
Mar 31 09:43:27 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 31 09:45:48 *	sankha has quit (Connection closed)
Mar 31 09:46:04 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 09:46:38 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 09:47:03 *	critiqjo has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 09:49:48 *	deadc0de_ has quit (Ping timeout: 121 seconds)
Mar 31 09:50:40 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 09:51:06 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 31 09:53:15 *	cpup has quit (Ping timeout: 121 seconds)
Mar 31 09:53:51 *	jgallagher has quit (Client exited)
Mar 31 09:54:54 *	skeithc (Thunderbird@moz-51v.4l0.207.112.IP) has joined
Mar 31 09:55:36 *	cpup (cpup@moz-m41.b21.218.32.IP) has joined
Mar 31 09:55:50 *	yuja (yuja@moz-35nbdb.so-net.ne.jp) has joined
Mar 31 09:57:44 *	NeverDie has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 09:57:56 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 09:57:57 *	ahal (ahal@moz-b8e0a0.cpe.pppoe.ca) has joined
Mar 31 09:58:24 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 09:59:56 *	kkus (kkus@moz-7u2hvh.fios.verizon.net) has joined
Mar 31 10:00:17 *	jo` (user@moz-vg7f5t.cable.virginm.net) has joined
Mar 31 10:00:19 *	jo has quit (A TLS packet with unexpected length was received.)
Mar 31 10:00:19 *	jo` has quit (A TLS packet with unexpected length was received.)
Mar 31 10:02:03 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 10:02:40 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 10:04:50 *	oln (smuxi@moz-h6kap0.customer.cdi.no) has joined
Mar 31 10:06:36 <dbrgn>	Manishearth: hm, even if I have something like "let ☃ = 42" inside a bang-macro (NormalTT), I get the "unknown start of token: \u{2603}" error.
Mar 31 10:06:56 <dbrgn>	ah, wait, maybe that's because I don't transform them yet...
Mar 31 10:07:02 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 31 10:07:04 *	sankha has quit (Connection closed)
Mar 31 10:07:48 *	p32blo (p32blo@moz-gbnpoc.di.uminho.pt) has joined
Mar 31 10:08:24 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 31 10:08:30 *	dzbarsky (Adium@moz-v18mcd.ca.comcast.net) has joined
Mar 31 10:09:29 *	pereira_alex has quit (Quit: Konversation terminated!)
Mar 31 10:09:48 *	deadc0de (chsitter@moz-lrh.035.31.94.IP) has joined
Mar 31 10:09:54 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 31 10:11:04 *	pereira_alex (alexandre@moz-e8vk60.rev.vodafone.pt) has joined
Mar 31 10:11:19 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 31 10:12:34 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 31 10:14:02 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 10:14:40 *	ytain has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 10:14:45 *	durka42 has quit (Client exited)
Mar 31 10:15:00 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 31 10:30:53 *	Disconnected (Invalid argument)
**** ENDING LOGGING AT Thu Mar 31 10:30:53 2016

**** BEGIN LOGGING AT Thu Mar 31 11:50:46 2016

Mar 31 11:50:46 *	Now talking on #rust
Mar 31 11:50:46 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 31 11:50:46 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 31 11:50:49 *	pachuco2 (Mibbit@moz-11mrf1.staticIP.rima-tde.net) has joined
Mar 31 11:51:00 <pachuco2>	it works?
Mar 31 11:51:11 <Mutabah>	I assume so?
Mar 31 11:51:17 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 11:52:13 *	sankha has quit (Connection closed)
Mar 31 11:52:22 *	sankha (sankha@moz-p75.u3k.143.114.IP) has joined
Mar 31 11:52:31 *	rubdos has quit (Ping timeout: 121 seconds)
Mar 31 11:52:40 *	Gamecubic (cubic@moz-bglmk5.mc.videotron.ca) has joined
Mar 31 11:52:41 *	bgamari has quit (Ping timeout: 121 seconds)
Mar 31 11:52:55 *	fyolnish has quit (Connection closed)
Mar 31 11:53:07 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 11:53:25 *	bgamari (bgamari@moz-0ea5qv.hsi14.kabel-badenwuerttemberg.de) has joined
Mar 31 11:53:26 *	rubdos (rubdos@moz-l7lf2c.access.telenet.be) has joined
Mar 31 11:53:31 *	futile has quit (Ping timeout: 121 seconds)
Mar 31 11:54:00 *	fyolnish has quit (Connection closed)
Mar 31 11:54:00 *	infynyxx has quit (Connection closed)
Mar 31 11:55:25 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 11:55:53 *	sevas_ has quit (Ping timeout: 121 seconds)
Mar 31 11:58:08 *	durka42 has quit (Client exited)
Mar 31 11:58:20 *	drew (drew@moz-uat273.vc.shawcable.net) has joined
Mar 31 11:58:54 *	FreeBird_ has quit (Connection closed)
Mar 31 11:59:01 *	FreeBird_ (FreeBird@moz-rig3bv.9t5k.kgbt.120b.2a02.IP) has joined
Mar 31 11:59:42 *	}ls{ (uhelp@moz-l4oe9n.dip0.t-ipconnect.de) has joined
Mar 31 12:00:21 *	pachuco2 has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 12:01:06 *	isomarcte (isomarcte@moz-th6q0p.albq.qwest.net) has joined
Mar 31 12:01:32 *	tennix (vagrant@moz-m06.lfv.114.123.IP) has joined
Mar 31 12:02:10 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 31 12:02:28 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 12:02:30 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 31 12:03:36 *	futile2 is now known as futile
Mar 31 12:05:55 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 12:06:37 *	joy (Adium@moz-a3u2ua.2rkg.9kg1.0101.2620.IP) has joined
Mar 31 12:07:39 *	joy has quit (Connection closed)
Mar 31 12:07:44 *	joy (Adium@moz-a3u2ua.2rkg.9kg1.0101.2620.IP) has joined
Mar 31 12:08:02 *	Noldorin has quit (Ping timeout: 121 seconds)
Mar 31 12:09:21 *	dzbarsky (Adium@moz-1metfq.82pc.j76f.0646.2601.IP) has joined
Mar 31 12:09:25 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:09:45 <LambdaComplex>	Is assuming that command-line arguments on Linux are UTF a safe assumption?
Mar 31 12:10:07 <Mutabah>	well.. it's usually a safe assumption...
Mar 31 12:10:20 <Mutabah>	Becuase it's hard to type something that isn't UTF-8 on a command line
Mar 31 12:10:30 *	ptc (textual@moz-qjn.9ii.88.38.IP) has joined
Mar 31 12:10:30 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:10:31 <Mutabah>	but if another program is calling your program, things get hazier
Mar 31 12:10:45 <sully>	it's really not that hard to do that, depending on what your terminal is?
Mar 31 12:10:55 *	orangeshark (erik@moz-pdc35c.44tj.56ot.0306.2602.IP) has joined
Mar 31 12:10:55 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 31 12:11:51 *	martianwars|afk is now known as martianwars
Mar 31 12:12:50 *	ob has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 12:13:25 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 31 12:13:27 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 12:13:54 *	jkonecny has quit (Connection closed)
Mar 31 12:14:00 *	nagisa_ (nagisa@moz-8t068g.static.zebra.lt) has joined
Mar 31 12:14:01 *	yuja has quit (Ping timeout: 121 seconds)
Mar 31 12:14:04 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 31 12:15:37 <maurer>	LambdaComplex: Notably, you should definitely not do something _unsafe_ if it's non-UTF-8
Mar 31 12:15:39 *	baransu (Mibbit@moz-vvg0vp.mynet.com.pl) has joined
Mar 31 12:15:54 <maurer>	LambdaComplex: if the argument parser panics on non-UTF-8 that's probably fine though
Mar 31 12:16:10 *	baransu has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 12:17:21 *	FreeBird_ has quit (Connection closed)
Mar 31 12:17:28 *	FreeBird_ (FreeBird@moz-rig3bv.9t5k.kgbt.120b.2a02.IP) has joined
Mar 31 12:17:38 *	kazagistar (Adium@moz-br6.b81.207.205.IP) has joined
Mar 31 12:17:47 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 31 12:18:08 *	raph1 (Adium@moz-9ng.fg7.77.192.IP) has joined
Mar 31 12:18:14 *	klue (foo@moz-ijksur.hfc.comcastbusiness.net) has joined
Mar 31 12:20:13 *	yourname (riginding@moz-19t.4pm.62.178.IP) has joined
Mar 31 12:20:56 *	yusukesuzuki has quit (Quit: ZNC - http://znc.in)
Mar 31 12:20:58 *	martianwars is now known as martianwars|afk
Mar 31 12:21:23 *	raph has quit (Ping timeout: 121 seconds)
Mar 31 12:21:38 *	yusukesuzuki (yusukesuzuk@moz-efpmf9.t-com.ne.jp) has joined
Mar 31 12:22:23 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 12:22:32 *	stelarcf__ (stelarcf@moz-3gh.lb8.81.92.IP) has joined
Mar 31 12:25:36 *	jgallagher has quit (Client exited)
Mar 31 12:25:53 *	kulakowski (uid101184@moz-6s2ifd.richmond.irccloud.com) has joined
Mar 31 12:26:15 *	khades (Thunderbird@moz-opi.h6q.74.212.IP) has joined
Mar 31 12:26:20 <Dtgr>	is it possible in rust (without itertools crate) to do similar of python's [(x,y,z) for x in range(0,4) for y in range(0,4) for z in range(0,4)]
Mar 31 12:26:22 *	yuja (yuja@moz-35nbdb.so-net.ne.jp) has joined
Mar 31 12:26:26 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 12:27:07 <Dtgr>	I can of course do three for loops and so forth but it would be nice to get an iterator that would produce those
Mar 31 12:27:25 <Ms2ger>	.zip()?
Mar 31 12:27:48 <dbrgn>	we really need an x509 implementation in pure rust :( the openssl bindings are still incredibly incomplete.
Mar 31 12:28:12 <Dtgr>	(0..4).zip(0..4) returns (0,0), (1,1) ...
Mar 31 12:28:19 <Ms2ger>	Er, duh
Mar 31 12:28:26 <Ms2ger>	You need a product
Mar 31 12:28:43 <Ms2ger>	I don't know if that exists outside itertools
Mar 31 12:29:02 <Ms2ger>	The nice thing is that pulling in itertools is trivial
Mar 31 12:29:34 *	cbrewste_ has quit (Connection closed)
Mar 31 12:29:48 <Dtgr>	seems to be unstable
Mar 31 12:30:15 *	griff has quit (Client exited)
Mar 31 12:30:19 *	durka42 (durka42@moz-emur8s.wireless-pennnet.upenn.edu) has joined
Mar 31 12:30:44 <Dtgr>	oh, but it's different
Mar 31 12:30:53 *	feliwir has quit (Connection closed)
Mar 31 12:30:55 <Dtgr>	maybe I'll just go with itertools then
Mar 31 12:30:56 *	JagaJaga has quit (Ping timeout: 121 seconds)
Mar 31 12:31:09 *	fl3 has quit (Connection closed)
Mar 31 12:31:55 *	crunchiebones has quit (Quit: WeeChat 1.4)
Mar 31 12:31:58 *	mada (mariano@moz-hrb.nhi.170.181.IP) has joined
Mar 31 12:32:40 *	SiegeLord has quit (Quit: It's a joke, it's all a joke.)
Mar 31 12:33:27 *	acmcarther (alex@moz-n9m.q3k.194.69.IP) has joined
Mar 31 12:33:30 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:35:35 *	Bobo1239 (Bobo1239@moz-g5n7pd.dip0.t-ipconnect.de) has joined
Mar 31 12:36:13 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:36:15 *	Noldorin (noldorin@moz-37pidj.skybroadband.com) has joined
Mar 31 12:38:37 *	jeffdb (JeffDB@moz-0cd5bo.bivu.mtfp.0306.2602.IP) has joined
Mar 31 12:38:55 *	ParadoxSpiral_ (ParadoxSpir@moz-8e0k3l.dip0.t-ipconnect.de) has joined
Mar 31 12:39:02 *	cbrewste_ has quit (Connection closed)
Mar 31 12:39:26 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 12:39:26 *	frankmcsherry has quit (Connection closed)
Mar 31 12:39:27 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 12:39:28 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:39:39 *	ygrek_ (user@moz-8j9aeu.org.ua) has joined
Mar 31 12:39:39 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 31 12:40:46 *	aravindavk has quit (Connection closed)
Mar 31 12:42:15 *	ParadoxSpiral has quit (Ping timeout: 121 seconds)
Mar 31 12:42:45 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 31 12:43:06 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 31 12:44:48 *	skade (skade@moz-pptnmg.pools.vodafone-ip.de) has joined
Mar 31 12:51:05 <_habnabit>	https://github.com/Manishearth/rust-clippy/wiki#mut_mut this doesn't apply to, say, &mut *mut T, right? since pointers and references are treated differently
Mar 31 12:51:09 *	Ms2ger has quit (Quit: nn)
Mar 31 12:51:39 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 12:53:38 *	kcking (kcking@moz-o85r8g.dyn.mit.edu) has joined
Mar 31 12:55:52 *	dzbarsky (Adium@moz-v18mcd.ca.comcast.net) has joined
Mar 31 12:57:09 *	arremsause (arrem@moz-gbg.sec.176.31.IP) has joined
Mar 31 12:57:36 <bluss>	Dtgr: .flat_map is pretty similar to .cartesian_product
Mar 31 12:57:44 *	dinfuehr has quit (Connection closed)
Mar 31 12:57:50 *	cbrewste_ has quit (Connection closed)
Mar 31 12:58:47 <bluss>	playbot: (0..4).flat_map(|i| (0..4).map(move |j| (i, j))).count() // something like that..
Mar 31 12:58:48 -playbot/#rust-	16
Mar 31 12:59:05 *	dikaiosune (aperry@moz-4qr287.egr.nau.edu) has joined
Mar 31 12:59:08 *	JelteF (Mibbit@moz-4pllul.wireless.uva.nl) has joined
Mar 31 12:59:49 *	LRN has quit (Quit: Miranda NG! Smaller, Faster, Easier. http://miranda-ng.org/)
Mar 31 12:59:52 *	LRN (Miranda@moz-63ipbh.nationalcablenetworks.ru) has joined
Mar 31 12:59:56 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 31 12:59:57 <bluss>	if it's super perf critical then nested loops must be recommended instead
Mar 31 13:00:06 *	scootaloo has quit (Ping timeout: 121 seconds)
Mar 31 13:01:37 <JelteF>	is there a way to checke if a type implements a certain trait
Mar 31 13:01:39 *	ArturoVM (ArturoVM@moz-1d7.tm6.207.189.IP) has joined
Mar 31 13:01:46 *	yuja has quit (Quit: Leaving)
Mar 31 13:01:48 <steveklabnik>	we are gonna have a little docs meeting in #rust-docs in an hour, if anyone is interested in attending. we don't have a docs team yet, so we're basically just going to pretend ;) this first one will be figuring out how to coordinate together
Mar 31 13:02:06 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 13:02:18 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 13:02:40 *	jgilbert (Jeff@moz-gm6pod.ca.comcast.net) has joined
Mar 31 13:02:51 <ArturoVM>	Hi, I think I found a bug in the Rust compiler, but I'm not sure. Valgrind detects some bytes leaked in an empty, no-dependencies bin crate, with an empty main fn.
Mar 31 13:03:07 <ArturoVM>	I just wanted to know if it's a known issue, or something strange with Valgrind before reporting it "officially".
Mar 31 13:03:35 <steveklabnik>	hm, i don't remember there being anything in the tracker about it, but there are a few valgrind issues
Mar 31 13:03:38 <steveklabnik>	might want to check them
Mar 31 13:03:49 *	xauth (vincent@moz-1qcs4a.xs4all.nl) has left ("Konversation terminated!")
Mar 31 13:03:52 <durka42>	ArturoVM: there may well be a bug but also valgrind has trouble with jemalloc, so maybe try it with the system allocator?
Mar 31 13:04:02 *	SuperZazu has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 13:04:06 <ArturoVM>	steveklabnik: Will do.
Mar 31 13:04:15 <durka42>	though, I'd expect valgrind to miss leaks that were leaked from jemalloc as opposed to reporting extra ones
Mar 31 13:04:16 <ArturoVM>	durka42: How do I switch to the system allocator?
Mar 31 13:04:35 <durka42>	like this https://doc.rust-lang.org/book/custom-allocators.html#switching-allocators
Mar 31 13:04:45 <durka42>	(on nightly)
Mar 31 13:04:46 *	infynyxx has quit (Connection closed)
Mar 31 13:04:51 <ArturoVM>	durka42: Alright, thanks :)
Mar 31 13:05:06 <durka42>	there's a way to make valgrind play nice with jemalloc, but I don't know it :)
Mar 31 13:06:00 *	Eisfreak1 (Eisfreak7@moz-crikdn.pools.vodafone-ip.de) has joined
Mar 31 13:06:12 *	chris_99 has quit (Quit: Leaving)
Mar 31 13:06:23 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 31 13:06:47 *	anty has quit (A TLS packet with unexpected length was received.)
Mar 31 13:07:21 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 31 13:07:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 31 13:08:41 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 13:08:46 *	jfhumann has quit (Quit: Leaving)
Mar 31 13:09:06 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 31 13:09:36 *	Eisfreak7 has quit (Ping timeout: 121 seconds)
Mar 31 13:10:04 *	Eisfreak1 has quit (Ping timeout: 121 seconds)
Mar 31 13:11:07 *	griff has quit (Client exited)
Mar 31 13:11:49 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 13:12:38 <JelteF>	I'm trying to make macros based on traits that types implement
Mar 31 13:12:43 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 13:13:03 <JelteF>	is it possible to somehow query if certain types implement certain traits?
Mar 31 13:13:21 *	J_Arcane has quit (Ping timeout: 121 seconds)
Mar 31 13:13:54 <durka42>	not possible unfortunately
Mar 31 13:13:59 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 13:14:10 <durka42>	macros run before type checking
Mar 31 13:15:02 <JelteF>	damn
Mar 31 13:16:06 *	jdnavarro has quit (Quit: WeeChat 1.4)
Mar 31 13:16:25 *	zz_NameNotFound is now known as NameNotFound
Mar 31 13:17:03 <JelteF>	then I'll just ignore it for now
Mar 31 13:17:44 *	santiago has quit (Quit: Computer has gone to sleep.)
Mar 31 13:17:54 *	kcking has quit (Client exited)
Mar 31 13:18:01 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 13:18:03 *	kzan has quit (Quit: Leaving)
Mar 31 13:18:05 <ArturoVM>	Speaking of valgrind and such, is there any tool in particular preferred by the community for checking memory leaks, etc.?
Mar 31 13:18:42 *	frankmcsherry has quit (Connection closed)
Mar 31 13:20:49 *	skeithc has quit (Client exited)
Mar 31 13:21:08 *	jimb (user@moz-09a.i8g.126.207.IP) has joined
Mar 31 13:22:14 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 13:22:19 *	rakm (rakm@moz-kda.r5m.132.65.IP) has joined
Mar 31 13:22:28 *	sankha has quit (Connection closed)
Mar 31 13:23:05 <glendc>	how come my function @ line 31-33 doesn't work? http://is.gd/VuW9JJ
Mar 31 13:23:07 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 13:23:10 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 13:23:53 <bluss>	glendc: like the compiler says, the trait Platform is not compatbile with being a trait object
Mar 31 13:24:04 <kali>	glendc: you can not have "static" methods in trait objects
Mar 31 13:24:18 <bluss>	the trait needs to follow some restrictions for that
Mar 31 13:24:21 *	fyolnish has quit (Connection closed)
Mar 31 13:24:39 <bluss>	if you move the new method to a different trait, then the rest is object compatible
Mar 31 13:25:07 <glendc>	oh ok, I guess I can move the new away from there as I will have a factory function for each platform anyhow
Mar 31 13:25:11 *	jimb has quit (Ping timeout: 121 seconds)
Mar 31 13:25:48 *	kcking (kcking@moz-fptfjd.dyn.mit.edu) has joined
Mar 31 13:26:17 *	shackra (shackrasisl@moz-46f.gid.203.201.IP) has joined
Mar 31 13:26:43 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 13:26:57 *	Eisfreak1 (Eisfreak7@moz-crikdn.pools.vodafone-ip.de) has joined
Mar 31 13:27:10 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 13:27:10 *	deadc0de has quit (Ping timeout: 121 seconds)
Mar 31 13:27:35 *	Eisfreak1 has quit (Quit: WeeChat 1.4)
Mar 31 13:27:55 <glendc>	hmm can't get this thing to compile though
Mar 31 13:28:19 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 31 13:28:55 *	SneakySnake has quit (Quit: Leaving)
Mar 31 13:29:29 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 31 13:30:15 *	csoriano has quit (Client exited)
Mar 31 13:30:28 *	sankha (sankha@moz-r93.cpm.64.45.IP) has joined
Mar 31 13:30:46 *	SneakySnake (snake@moz-i9is4u.pool.telekom.hu) has joined
Mar 31 13:31:13 *	jimb (user@moz-09a.i8g.126.207.IP) has joined
Mar 31 13:32:09 *	NSil (NSil@moz-qdurqa.red.bezeqint.net) has joined
Mar 31 13:32:20 *	jeffdb (JeffDB@moz-fp3.7hu.21.199.IP) has joined
Mar 31 13:32:49 *	Bobo1239 has quit (Quit: Leaving)
Mar 31 13:32:56 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 31 13:33:02 <glendc>	ah nvm forgot `impl T for X`
Mar 31 13:34:33 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 13:35:36 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 13:36:09 <ArturoVM>	durka42: Ok, so I tried with the system allocator, and it's still detecting leaked bytes. I guess I should report it :/
Mar 31 13:36:24 <durka42>	yeah
Mar 31 13:37:16 *	Donald-Trump (trump@moz-jro0ri.is.googolplex.ninja) has joined
Mar 31 13:38:50 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 31 13:39:16 <ArturoVM>	durka42: Do you (or the community) use anything other than Valgrind to check for leaks?
Mar 31 13:39:40 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 13:39:48 <durka42>	I don't but I don't usuallly check for leaks
Mar 31 13:39:50 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 13:39:58 *	eibwen (eibwen@moz-vkc2j6.dip0.t-ipconnect.de) has joined
Mar 31 13:40:27 <steveklabnik>	it's tough to leak in rust, unless you're doing a lot of unsafe
Mar 31 13:40:45 <steveklabnik>	still a useful tool, but i use it rarely compared to when i wrote c
Mar 31 13:41:13 <durka42>	I used it when doing my "leaky Index" trick
Mar 31 13:41:46 <ArturoVM>	steveklabnik: Yeah, I originally checked for leaks because I'm using the FFI, but couldn't pinpoint the issue valgrind was reporting. Did a quick test of an empty main fn, and here I am :P
Mar 31 13:42:05 *	ahal is now known as ahal|afk
Mar 31 13:42:07 *	jdm (jdm@moz-8ng1it.3t38.sij7.f0c8.2607.IP) has joined
Mar 31 13:42:07 *	ChanServ gives channel operator status to jdm
Mar 31 13:42:13 <steveklabnik>	:)
Mar 31 13:42:13 <kirillkh>	stupid question: given a tuple x=(i32, i32), how do you access x.i when i is only known at runtime? (other than by writing an if clause)
Mar 31 13:42:17 *	p (r00t@moz-ht65gk.austtx.sbcglobal.net) has joined
Mar 31 13:42:33 <durka42>	can't
Mar 31 13:42:35 <steveklabnik>	i don't think it's a stupid question; there's no simple way
Mar 31 13:42:50 <durka42>	if you need to, it's a sign you should be using an array
Mar 31 13:43:00 <kirillkh>	I just don't want to type an if, that's all
Mar 31 13:43:31 <steveklabnik>	there'd be no way to typecheck it, basically
Mar 31 13:43:39 <steveklabnik>	i might be different than 0 or 1
Mar 31 13:43:52 <kirillkh>	okay, thanks
Mar 31 13:43:59 <mbrubeck>	also, x.0 and x.1 can be different types in general
Mar 31 13:44:00 *	steveklabnik mumbles something about dependent types
Mar 31 13:44:05 <steveklabnik>	yeah, that too
Mar 31 13:44:37 *	schmo (mattschmoye@moz-tor.krt.104.38.IP) has joined
Mar 31 13:45:12 *	Guest37 (textual@moz-edsm98.res.rr.com) has joined
Mar 31 13:45:38 *	larhat has quit (Quit: Leaving.)
Mar 31 13:46:01 <Xion>	Tuples are shorthands for structs. You cannot access struct members by name either.
Mar 31 13:46:26 <Xion>	I used to think Rust's .i for tuple indexing was weird but it makes perfect sense actually.
Mar 31 13:46:59 *	cbrewster (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 13:48:26 *	dzbarsky (Adium@moz-cmfa2u.82pc.j76f.0646.2601.IP) has joined
Mar 31 13:48:50 *	dzbarsky1 (Adium@moz-3612ka.82pc.j76f.0646.2601.IP) has joined
Mar 31 13:49:05 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 13:49:19 <bluss>	arrays are nice
Mar 31 13:49:25 *	NameNotFound is now known as zz_NameNotFound
Mar 31 13:50:06 <bluss>	if you see { left: Option<Box<T>>, right: Option<Box<T>> } it can probably be an array instead, so you can take advantage of symmetries
Mar 31 13:50:42 *	schmo has quit (Client exited)
Mar 31 13:50:58 *	jgallagher has quit (Client exited)
Mar 31 13:52:08 *	kk has quit (Ping timeout: 121 seconds)
Mar 31 13:52:34 *	dzbarsky has quit (Ping timeout: 121 seconds)
Mar 31 13:52:51 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 13:53:20 *	tycoon177 has quit (Connection closed)
Mar 31 13:54:05 <kirillkh>	actually, it can be worked around by using a tuple struct. struct MatrixDim(dim, dim); impl MatrixDim { fn component(&self, i: usize) {...} }
Mar 31 13:54:05 *	bombela has quit (Ping timeout: 121 seconds)
Mar 31 13:54:48 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 13:55:02 <kirillkh>	then you can write let d = MatrixDim(2,3); d.component(0)
Mar 31 13:56:15 <mbrubeck>	you can also use a [dim; 2]
Mar 31 13:56:20 <mbrubeck>	array instead of tuple
Mar 31 13:56:27 <mbrubeck>	then you get indexing built in
Mar 31 13:56:29 *	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 13:56:29 *	ChanServ sets mode +a on #rust brson
Mar 31 13:56:29 *	ChanServ gives channel operator status to brson
Mar 31 13:56:58 *	Eisfreak7 (Eisfreak7@moz-crikdn.pools.vodafone-ip.de) has joined
Mar 31 13:57:16 *	Eisfreak7 has quit (Quit: WeeChat 1.4)
Mar 31 13:57:25 *	bholley_away is now known as bholley
Mar 31 13:58:07 *	kcking has quit (Client exited)
Mar 31 13:58:08 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 13:58:27 <kirillkh>	mbrubeck, true, but I also need to implement some traits on MatrixDim, so I need a custom struct anyway
Mar 31 13:59:12 <mbrubeck>	You could `impl Index<usize> for MatrixDim` too!
Mar 31 14:00:35 *	seriyPS has quit (Quit: Leaving.)
Mar 31 14:01:08 *	jgallagher has quit (Client exited)
Mar 31 14:01:44 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 14:02:12 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 14:02:12 *	sepp2k1 (Sepp2k@moz-06t0ee.dyn.telefonica.de) has joined
Mar 31 14:02:32 *	sepp2k has quit (Ping timeout: 121 seconds)
Mar 31 14:03:06 *	s_kunk has quit (Ping timeout: 121 seconds)
Mar 31 14:03:23 *	JelteF has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 14:03:25 <kirillkh>	mbrubeck, nice idea
**** BEGIN LOGGING AT Thu Mar 31 14:03:50 2016

Mar 31 14:03:50 *	Now talking on #rust
Mar 31 14:03:50 *	brunodea_ (brunodea@moz-cthdmd.gvt.net.br) has joined
Mar 31 14:03:50 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 31 14:03:50 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 31 14:03:56 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:03:56 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:05:24 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 14:05:24 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 14:06:07 *	dzbarsky1 has quit (Quit: Leaving.)
Mar 31 14:06:07 *	dzbarsky1 has quit (Quit: Leaving.)
Mar 31 14:06:27 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 31 14:06:27 *	slester (slester@moz-28gr00.res.rr.com) has joined
Mar 31 14:06:35 *	julienw is now known as julienw_afk
Mar 31 14:06:35 *	julienw is now known as julienw_afk
Mar 31 14:06:45 *	slester has quit (A TLS packet with unexpected length was received.)
Mar 31 14:06:45 *	slester has quit (A TLS packet with unexpected length was received.)
Mar 31 14:06:56 *	slester (slester@moz-oh7kdd.7nqd.tocq.e000.2605.IP) has joined
Mar 31 14:06:56 *	slester (slester@moz-oh7kdd.7nqd.tocq.e000.2605.IP) has joined
Mar 31 14:07:06 *	Pierre_M has quit (Quit: Leaving)
Mar 31 14:07:06 *	Pierre_M has quit (Quit: Leaving)
Mar 31 14:07:16 *	shellac has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 14:07:16 *	shellac has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 14:07:45 *	Canova (canova@moz-vh2.nb6.234.88.IP) has joined
Mar 31 14:07:45 *	Canova (canova@moz-vh2.nb6.234.88.IP) has joined
Mar 31 14:07:48 *	ksf (ksf@moz-pe1c5e.dyn.telefonica.de) has joined
Mar 31 14:07:48 *	ksf (ksf@moz-pe1c5e.dyn.telefonica.de) has joined
Mar 31 14:07:53 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 14:07:53 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 14:08:11 *	bombela (bombela@moz-tpsv8h.cm0f.8q7u.015c.2620.IP) has joined
Mar 31 14:08:11 *	bombela (bombela@moz-tpsv8h.cm0f.8q7u.015c.2620.IP) has joined
Mar 31 14:09:14 *	Canova has quit (Connection closed)
Mar 31 14:09:14 *	Canova has quit (Connection closed)
Mar 31 14:09:26 *	Canova (canova@moz-vh2.nb6.234.88.IP) has joined
Mar 31 14:09:26 *	Canova (canova@moz-vh2.nb6.234.88.IP) has joined
Mar 31 14:09:27 *	infynyxx has quit (Ping timeout: 121 seconds)
Mar 31 14:09:27 *	infynyxx has quit (Ping timeout: 121 seconds)
Mar 31 14:09:57 *	gpoesia (poesia@moz-q61.9o0.201.199.IP) has joined
Mar 31 14:09:57 *	gpoesia (poesia@moz-q61.9o0.201.199.IP) has joined
Mar 31 14:10:05 *	lucian_ (lucian@moz-n1l.htl.74.194.IP) has joined
Mar 31 14:10:05 *	lucian_ (lucian@moz-n1l.htl.74.194.IP) has joined
Mar 31 14:10:09 *	huseby has quit (Ping timeout: 121 seconds)
Mar 31 14:10:09 *	huseby has quit (Ping timeout: 121 seconds)
Mar 31 14:10:43 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 14:10:43 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 14:11:11 *	nyx (nyx@moz-7o34ff.albyny.csvoip.net) has joined
Mar 31 14:11:11 *	nyx (nyx@moz-7o34ff.albyny.csvoip.net) has joined
Mar 31 14:11:42 *	ville (ville@moz-kkm53k.rev.dnainternet.fi) has joined
Mar 31 14:11:42 *	ville (ville@moz-kkm53k.rev.dnainternet.fi) has joined
Mar 31 14:12:06 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 14:12:06 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 14:13:03 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 14:13:03 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 14:13:59 *	exul has quit (Ping timeout: 121 seconds)
Mar 31 14:13:59 *	exul has quit (Ping timeout: 121 seconds)
Mar 31 14:14:00 *	davedissian has quit (Quit: Connection closed for inactivity)
Mar 31 14:14:00 *	davedissian has quit (Quit: Connection closed for inactivity)
Mar 31 14:14:07 *	lucian_ has quit (Ping timeout: 121 seconds)
Mar 31 14:14:07 *	lucian_ has quit (Ping timeout: 121 seconds)
Mar 31 14:14:12 *	santiago (santiago@moz-okj.9vv.127.12.IP) has joined
Mar 31 14:14:12 *	santiago (santiago@moz-okj.9vv.127.12.IP) has joined
Mar 31 14:14:41 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:14:41 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:16:00 *	avikpal (avikpal@moz-2tj.meh.194.117.IP) has joined
Mar 31 14:16:00 *	avikpal (avikpal@moz-2tj.meh.194.117.IP) has joined
Mar 31 14:16:05 *	exul (exul@moz-6si0dg.dynamic.hispeed.ch) has joined
Mar 31 14:16:05 *	exul (exul@moz-6si0dg.dynamic.hispeed.ch) has joined
Mar 31 14:16:06 *	Quxxy2 has quit (Ping timeout: 121 seconds)
Mar 31 14:16:06 *	Quxxy2 has quit (Ping timeout: 121 seconds)
Mar 31 14:16:51 *	areski has quit (Ping timeout: 121 seconds)
Mar 31 14:16:51 *	areski has quit (Ping timeout: 121 seconds)
Mar 31 14:16:54 *	ville has quit (Ping timeout: 121 seconds)
Mar 31 14:16:54 *	ville has quit (Ping timeout: 121 seconds)
Mar 31 14:18:07 *	LevelOneDev (levelone@moz-ild.9e9.157.65.IP) has joined
Mar 31 14:18:07 *	LevelOneDev (levelone@moz-ild.9e9.157.65.IP) has joined
Mar 31 14:19:06 *	ygrek_ has quit (Ping timeout: 121 seconds)
Mar 31 14:19:06 *	ygrek_ has quit (Ping timeout: 121 seconds)
Mar 31 14:19:15 *	mhcerri has quit (Quit: Leaving)
Mar 31 14:19:15 *	mhcerri has quit (Quit: Leaving)
Mar 31 14:20:27 *	sevas (sevas@moz-i0a.pgj.128.109.IP) has joined
Mar 31 14:20:27 *	sevas (sevas@moz-i0a.pgj.128.109.IP) has joined
Mar 31 14:21:11 *	graycoder has quit (Quit: leaving)
Mar 31 14:21:11 *	graycoder has quit (Quit: leaving)
Mar 31 14:22:35 Mar 31 14:22:35 *	kzan (kzand@moz-qoo.ujr.97.32.IP) has joined
*	kzan (kzand@moz-qoo.ujr.97.32.IP) has joined
Mar 31 14:23:07 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 14:23:07 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 14:23:11 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 14:23:11 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 14:23:52 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 14:23:52 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 14:24:13 *	griff has quit (Client exited)
Mar 31 14:24:13 *	griff has quit (Client exited)
Mar 31 14:24:29 *	xiaoyu has quit (Ping timeout: 121 seconds)
Mar 31 14:24:29 *	xiaoyu has quit (Ping timeout: 121 seconds)
Mar 31 14:24:40 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 14:24:40 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 14:26:30 *	crunchiebones (jy@moz-anaq8e.ed.ac.uk) has joined
Mar 31 14:26:30 *	crunchiebones (jy@moz-anaq8e.ed.ac.uk) has joined
Mar 31 14:26:37 *	jschievink (jschievink@moz-qa21sf.dip0.t-ipconnect.de) has joined
Mar 31 14:26:37 *	jschievink (jschievink@moz-qa21sf.dip0.t-ipconnect.de) has joined
Mar 31 14:27:28 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 14:27:28 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 14:27:30 *	freeman42 (Freeeman42@moz-vi1.d0r.149.5.IP) has joined
Mar 31 14:27:30 *	freeman42 (Freeeman42@moz-vi1.d0r.149.5.IP) has joined
Mar 31 14:27:55 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 14:27:55 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 14:28:03 *	mib_9iecxg (Mibbit@moz-g3d.888.155.180.IP) has joined
Mar 31 14:28:03 *	mib_9iecxg (Mibbit@moz-g3d.888.155.180.IP) has joined
Mar 31 14:28:25 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 14:28:25 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 14:28:42 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 14:28:42 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 14:29:06 *	mib_9iecxg has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 14:29:06 *	mib_9iecxg has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 14:29:29 *	James__ (quassel@moz-hjag0s.range86-163.btcentralplus.com) has joined
Mar 31 14:29:29 *	James__ (quassel@moz-hjag0s.range86-163.btcentralplus.com) has joined
Mar 31 14:30:03 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:30:03 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:30:30 *	latk has quit (Ping timeout: 121 seconds)
Mar 31 14:30:30 *	latk has quit (Ping timeout: 121 seconds)
Mar 31 14:30:35 *	dmac__ (dmac@moz-h4nvlf.ca.comcast.net) has joined
Mar 31 14:30:35 *	dmac__ (dmac@moz-h4nvlf.ca.comcast.net) has joined
Mar 31 14:31:59 Mar 31 14:31:59 *	kcking (kcking@moz-7acb1m.csail.mit.edu) has joined
*	kcking (kcking@moz-7acb1m.csail.mit.edu) has joined
Mar 31 14:32:14 *	latk (textual@moz-q2tvtg.cable.virginm.net) has joined
Mar 31 14:32:14 *	latk (textual@moz-q2tvtg.cable.virginm.net) has joined
Mar 31 14:32:16 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 14:32:16 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 14:32:35 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 14:32:35 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 14:33:29 *	jschievink (jschievink@moz-qa21sf.dip0.t-ipconnect.de) has joined
Mar 31 14:33:29 *	jschievink (jschievink@moz-qa21sf.dip0.t-ipconnect.de) has joined
Mar 31 14:33:45 *	pcwalton (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 14:33:45 *	pcwalton (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 14:33:45 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 14:33:45 *	ChanServ gives channel operator status to pcwalton
Mar 31 14:33:45 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 14:33:45 *	ChanServ gives channel operator status to pcwalton
Mar 31 14:33:49 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 14:33:49 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 14:33:50 *	jgilbert has quit (Ping timeout: 121 seconds)
Mar 31 14:33:50 *	jgilbert has quit (Ping timeout: 121 seconds)
Mar 31 14:33:53 *	Guest37 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 14:33:53 *	Guest37 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 14:34:27 *	REMqb (REMqb@moz-cathc4.abo.wanadoo.fr) has joined
Mar 31 14:34:27 *	REMqb (REMqb@moz-cathc4.abo.wanadoo.fr) has joined
Mar 31 14:35:32 *	cbrewster (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 14:35:32 *	cbrewster (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 14:35:36 *	glaebhoerl (glaebhoerl@moz-3ans1o.catv.broadband.hu) has joined
Mar 31 14:35:36 *	glaebhoerl (glaebhoerl@moz-3ans1o.catv.broadband.hu) has joined
Mar 31 14:36:06 *	Guest37 (textual@moz-edsm98.res.rr.com) has joined
Mar 31 14:36:06 *	Guest37 (textual@moz-edsm98.res.rr.com) has joined
Mar 31 14:36:19 *	hokkos_ (hokkos@moz-m17thb.rev.numericable.fr) has joined
Mar 31 14:36:19 *	hokkos_ (hokkos@moz-m17thb.rev.numericable.fr) has joined
Mar 31 14:36:30 *	phil-opp has quit (Ping timeout: 121 seconds)
Mar 31 14:36:30 *	phil-opp has quit (Ping timeout: 121 seconds)
Mar 31 14:37:20 *	tycoon177 (tycoon177@moz-2c53mt.desm.netins.net) has joined
Mar 31 14:37:20 *	tycoon177 (tycoon177@moz-2c53mt.desm.netins.net) has joined
Mar 31 14:37:55 *	avikpal has quit (Ping timeout: 121 seconds)
Mar 31 14:37:55 *	avikpal has quit (Ping timeout: 121 seconds)
Mar 31 14:38:25 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:38:25 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:38:39 *	ArturoVM has quit (Ping timeout: 121 seconds)
Mar 31 14:38:39 *	ArturoVM has quit (Ping timeout: 121 seconds)
Mar 31 14:38:45 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 14:38:45 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 14:39:28 <glaebhoerl>	hello. I'm trying to get the you-complete-me plugin for Atom working w/ Rust support, and not having much success. is there anyone knowledgeable about it who could help me troubleshoot?
Mar 31 14:39:28 <glaebhoerl>	hello. I'm trying to get the you-complete-me plugin for Atom working w/ Rust support, and not having much success. is there anyone knowledgeable about it who could help me troubleshoot?
Mar 31 14:39:43 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 14:39:43 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 14:40:10 *	Guest37 has quit (Ping timeout: 121 seconds)
Mar 31 14:40:10 *	Guest37 has quit (Ping timeout: 121 seconds)
Mar 31 14:40:28 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 31 14:40:28 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 31 14:41:11 *	_Vi has quit (Ping timeout: 121 seconds)
Mar 31 14:41:11 *	_Vi has quit (Ping timeout: 121 seconds)
Mar 31 14:41:16 *	martianwars|afk is now known as martianwars
Mar 31 14:41:16 *	martianwars|afk is now known as martianwars
Mar 31 14:41:29 *	ArturoVM (ArturoVM@moz-1d7.tm6.207.189.IP) has joined
Mar 31 14:41:29 *	ArturoVM (ArturoVM@moz-1d7.tm6.207.189.IP) has joined
Mar 31 14:42:30 *	huseby (huseby@moz-m7l0au.d2vr.5em6.6400.2605.IP) has joined
Mar 31 14:42:30 *	huseby (huseby@moz-m7l0au.d2vr.5em6.6400.2605.IP) has joined
Mar 31 14:42:55 *	durka42 has quit (Client exited)
Mar 31 14:42:55 *	durka42 has quit (Client exited)
Mar 31 14:44:43 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 31 14:44:43 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 31 14:44:46 *	sankha has quit (Connection closed)
Mar 31 14:44:46 *	sankha has quit (Connection closed)
Mar 31 14:45:05 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 14:45:05 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 14:45:07 *	Frooxius (Frooxius@moz-7td.d1o.108.194.IP) has joined
Mar 31 14:45:07 *	Frooxius (Frooxius@moz-7td.d1o.108.194.IP) has joined
Mar 31 14:45:27 *	pcwalton_ (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 14:45:27 *	pcwalton_ (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 14:45:27 *	ChanServ sets mode +a on #rust pcwalton_
Mar 31 14:45:27 *	ChanServ gives channel operator status to pcwalton_
Mar 31 14:45:27 *	ChanServ sets mode +a on #rust pcwalton_
Mar 31 14:45:27 *	ChanServ gives channel operator status to pcwalton_
Mar 31 14:45:44 *	ahal|afk is now known as ahal
Mar 31 14:45:44 *	ahal|afk is now known as ahal
Mar 31 14:45:55 *	davidbm (Mibbit@moz-hmf.pr5.19.178.IP) has joined
Mar 31 14:45:55 *	davidbm (Mibbit@moz-hmf.pr5.19.178.IP) has joined
Mar 31 14:45:56 *	dinfuehr (dominik@moz-fflb3j.highway.telekom.at) has joined
Mar 31 14:45:56 *	dinfuehr (dominik@moz-fflb3j.highway.telekom.at) has joined
Mar 31 14:46:19 *	pcwalton_ has quit (Connection closed)
Mar 31 14:46:19 *	pcwalton_ has quit (Connection closed)
Mar 31 14:46:31 *	pcwalton has quit (Ping timeout: 121 seconds)
Mar 31 14:46:31 *	pcwalton has quit (Ping timeout: 121 seconds)
Mar 31 14:46:42 *	pcwalton (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 14:46:42 *	pcwalton (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 14:46:42 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 14:46:42 *	ChanServ gives channel operator status to pcwalton
Mar 31 14:46:42 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 14:46:42 *	ChanServ gives channel operator status to pcwalton
Mar 31 14:48:13 <jwilm>	glaebhoerl: I can speak to the YCM half of it
Mar 31 14:48:13 <jwilm>	glaebhoerl: I can speak to the YCM half of it
Mar 31 14:48:29 <jwilm>	glaebhoerl: I don't know anything about the Atom plugin, though
Mar 31 14:48:29 <jwilm>	glaebhoerl: I don't know anything about the Atom plugin, though
Mar 31 14:48:45 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 14:48:45 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 14:51:12 <bmaxa>	is there a way to tell cargo which compiler options to pass?
Mar 31 14:51:12 <bmaxa>	is there a way to tell cargo which compiler options to pass?
Mar 31 14:51:31 *	cbrewster has quit (Quit: )
Mar 31 14:51:31 *	cbrewster has quit (Quit: )
Mar 31 14:52:09 *	KarolisK (karolis@moz-hgf42b.access.telenet.be) has joined
Mar 31 14:52:09 *	KarolisK (karolis@moz-hgf42b.access.telenet.be) has joined
Mar 31 14:52:28 *	kcking has quit (Client exited)
Mar 31 14:52:28 *	kcking has quit (Client exited)
Mar 31 14:52:50 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 31 14:52:50 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 31 14:54:30 <talchas>	how you want to depends on which options you want to pass
Mar 31 14:54:30 <talchas>	how you want to depends on which options you want to pass
Mar 31 14:54:47 *	alexherbo2 (alex@moz-ka4.frr.132.104.IP) has joined
Mar 31 14:54:47 *	alexherbo2 (alex@moz-ka4.frr.132.104.IP) has joined
Mar 31 14:55:23 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 31 14:55:23 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 31 14:55:49 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 14:55:49 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 14:56:24 <talchas>	if you want to configure optimization/debug and a couple other things, there is http://doc.crates.io/manifest.html#the-profile-sections , if you want to specify ffi libraries, you generally are intended to put a #[link] attribute on the extern {} block
Mar 31 14:56:24 <talchas>	if you want to configure optimization/debug and a couple other things, there is http://doc.crates.io/manifest.html#the-profile-sections , if you want to specify ffi libraries, you generally are intended to put a #[link] attribute on the extern {} block
Mar 31 14:56:26 *	areski (areski@moz-p0vuav.user.ono.com) has joined
Mar 31 14:56:26 *	areski (areski@moz-p0vuav.user.ono.com) has joined
Mar 31 14:56:36 <talchas>	if you want something odder, especially as a one-off, there is cargo rustc
Mar 31 14:56:36 <talchas>	if you want something odder, especially as a one-off, there is cargo rustc
Mar 31 14:56:40 *	Waroong (textual@moz-o28ro6.res.rr.com) has joined
Mar 31 14:56:40 *	Waroong (textual@moz-o28ro6.res.rr.com) has joined
Mar 31 14:56:52 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 14:56:52 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 14:57:35 <talchas>	if you want to specify -L and such for ffi, the tendency appears to be to make a build.rs, which can do all sorts of things like call pkg-config and such
Mar 31 14:57:35 <talchas>	if you want to specify -L and such for ffi, the tendency appears to be to make a build.rs, which can do all sorts of things like call pkg-config and such
Mar 31 14:59:04 *	pczarn has quit (Ping timeout: 121 seconds)
Mar 31 14:59:04 *	pczarn has quit (Ping timeout: 121 seconds)
Mar 31 14:59:24 *	dinfuehr_ (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 14:59:24 *	dinfuehr_ (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 14:59:34 *	ville (ville@moz-3ijcgj.bb.dnainternet.fi) has joined
Mar 31 14:59:34 *	ville (ville@moz-3ijcgj.bb.dnainternet.fi) has joined
Mar 31 14:59:43 <bmaxa>	i have rust ibrary so file which I want to link and to pass some -C options
Mar 31 14:59:43 <bmaxa>	i have rust ibrary so file which I want to link and to pass some -C options
Mar 31 14:59:57 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 14:59:57 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 15:00:06 Mar 31 15:00:06 <glaebhoerl>	jwilm: hmm. not sure where to start! basically I got all of the pieces apparently installed, but no completion is happening and I haven't even managed to find any kind of debug or error log with usable info in it
<glaebhoerl>	jwilm: hmm. not sure where to start! basically I got all of the pieces apparently installed, but no completion is happening and I haven't even managed to find any kind of debug or error log with usable info in it
Mar 31 15:00:12 *	kcking (kcking@moz-7acb1m.csail.mit.edu) has joined
Mar 31 15:00:12 *	kcking (kcking@moz-7acb1m.csail.mit.edu) has joined
Mar 31 15:00:15 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 15:00:15 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 15:00:17 <glaebhoerl>	if "it's working", should I be able to see ycmd and racerd in ps?
Mar 31 15:00:17 <glaebhoerl>	if "it's working", should I be able to see ycmd and racerd in ps?
Mar 31 15:01:08 <jwilm>	glaebhoerl: So you're very much at the Atom plugin part of this =x. Let me take a look at the plugin real fast...
Mar 31 15:01:08 <jwilm>	glaebhoerl: So you're very much at the Atom plugin part of this =x. Let me take a look at the plugin real fast...
Mar 31 15:01:11 *	ygrek (user@moz-8j9aeu.org.ua) has joined
Mar 31 15:01:11 *	ygrek (user@moz-8j9aeu.org.ua) has joined
Mar 31 15:01:31 <glaebhoerl>	I'm using NixOS, and the ycmd version available is 2015-01-12 (from git). is this enough for Rust support? from what I've found it seems to probably, but not 100% sure
Mar 31 15:01:31 <glaebhoerl>	I'm using NixOS, and the ycmd version available is 2015-01-12 (from git). is this enough for Rust support? from what I've found it seems to probably, but not 100% sure
Mar 31 15:01:33 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:01:33 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:01:41 *	skeet70 (skeet70@moz-3v1o21.sub-70-212-39.myvzw.com) has joined
Mar 31 15:01:41 *	skeet70 (skeet70@moz-3v1o21.sub-70-212-39.myvzw.com) has joined
Mar 31 15:02:06 *	jgallagher has quit (Client exited)
Mar 31 15:02:06 *	jgallagher has quit (Client exited)
Mar 31 15:02:33 <jwilm>	glaebhoerl: Rust support was added in january this year
Mar 31 15:02:33 <jwilm>	glaebhoerl: Rust support was added in january this year
Mar 31 15:02:42 <glaebhoerl>	er sorry, 2016 :)
Mar 31 15:02:42 <glaebhoerl>	er sorry, 2016 :)
Mar 31 15:02:47 <jwilm>	glaebhoerl: You should be able to use the latest ycmd from github
Mar 31 15:02:47 <jwilm>	glaebhoerl: You should be able to use the latest ycmd from github
Mar 31 15:02:54 <jwilm>	ah ok
Mar 31 15:02:54 <jwilm>	ah ok
Mar 31 15:02:58 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 15:02:58 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 15:03:00 *	chris_99 has quit (Ping timeout: 121 seconds)
Mar 31 15:03:00 *	chris_99 has quit (Ping timeout: 121 seconds)
Mar 31 15:03:08 <jwilm>	glaebhoerl: did you configure the ycmd path and etc? https://github.com/Qusic/atom-youcompleteme/blob/master/lib/config.coffee
Mar 31 15:03:08 <jwilm>	glaebhoerl: did you configure the ycmd path and etc? https://github.com/Qusic/atom-youcompleteme/blob/master/lib/config.coffee
Mar 31 15:03:21 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 31 15:03:21 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 31 15:03:27 *	dinfuehr_ has quit (Ping timeout: 121 seconds)
Mar 31 15:03:27 *	dinfuehr_ has quit (Ping timeout: 121 seconds)
Mar 31 15:03:31 <jwilm>	rustSrcPath, enabledFileTypes, and ycmdPath seem like they need to be set
Mar 31 15:03:31 <jwilm>	rustSrcPath, enabledFileTypes, and ycmdPath seem like they need to be set
Mar 31 15:05:52 *	rakm has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 15:05:52 *	rakm has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 15:05:57 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 15:05:57 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 15:06:00 *	ygrek has quit (Ping timeout: 121 seconds)
Mar 31 15:06:00 *	ygrek has quit (Ping timeout: 121 seconds)
Mar 31 15:06:13 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 15:06:13 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 15:08:09 *	espadrine_ has quit (Ping timeout: 121 seconds)
Mar 31 15:08:09 *	espadrine_ has quit (Ping timeout: 121 seconds)
Mar 31 15:08:09 <glaebhoerl>	jwilm: the atom plugin has a GUI for this. here's what I have: http://i.imgur.com/OSzO02Y.png does that look right?
Mar 31 15:08:09 <glaebhoerl>	jwilm: the atom plugin has a GUI for this. here's what I have: http://i.imgur.com/OSzO02Y.png does that look right?
Mar 31 15:08:38 <panicbit>	I remember reading somewhere that << and >> do arithmetic shifts on i* types, but that doesn't seem to be the case. Is there a way to do arithmetic shifts in Rust without bit twiddling? http://is.gd/iGmZUu
Mar 31 15:08:38 <panicbit>	I remember reading somewhere that << and >> do arithmetic shifts on i* types, but that doesn't seem to be the case. Is there a way to do arithmetic shifts in Rust without bit twiddling? http://is.gd/iGmZUu
Mar 31 15:08:50 <glaebhoerl>	the descriptions aren't 100% clear like, am I supposed to write lib/ycmd/ycmd or just lib/ycmd, rust or rs, rustc-1.6.0/src or just rustc-1.6.0
Mar 31 15:08:50 <glaebhoerl>	the descriptions aren't 100% clear like, am I supposed to write lib/ycmd/ycmd or just lib/ycmd, rust or rs, rustc-1.6.0/src or just rustc-1.6.0
Mar 31 15:09:01 *	Pierre_M (Pierre@moz-0k5bh2.slkc.qwest.net) has joined
Mar 31 15:09:01 *	Pierre_M (Pierre@moz-0k5bh2.slkc.qwest.net) has joined
Mar 31 15:09:28 *	doener has quit (Quit: leaving)
Mar 31 15:09:28 *	doener has quit (Quit: leaving)
Mar 31 15:09:57 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 15:09:57 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 15:10:00 *	chris_99 has quit (Connection closed)
Mar 31 15:10:00 *	chris_99 has quit (Connection closed)
Mar 31 15:10:04 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 15:10:04 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 15:10:15 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 31 15:10:15 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 31 15:10:54 *	ville has quit (Ping timeout: 121 seconds)
Mar 31 15:10:54 *	ville has quit (Ping timeout: 121 seconds)
Mar 31 15:10:57 *	Nilabhra (nilabhra@moz-bor.c3k.24.103.IP) has joined
Mar 31 15:10:57 *	Nilabhra (nilabhra@moz-bor.c3k.24.103.IP) has joined
Mar 31 15:10:59 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 15:10:59 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 15:11:12 <jwilm>	glaebhoerl: looks right to me
Mar 31 15:11:12 <jwilm>	glaebhoerl: looks right to me
Mar 31 15:11:22 <glaebhoerl>	other question: Nix's ycmd doesn't compile with --racer-completer, and because Nix is rather "particular" about how things are compiled I ended up writing a package description to compile racerd directly from the racerd repo, instead of having ycmd's build process do it. is there any reason that shouldn't work?
Mar 31 15:11:22 <glaebhoerl>	other question: Nix's ycmd doesn't compile with --racer-completer, and because Nix is rather "particular" about how things are compiled I ended up writing a package description to compile racerd directly from the racerd repo, instead of having ycmd's build process do it. is there any reason that shouldn't work?
Mar 31 15:12:02 <jwilm>	glaebhoerl: that should work! There's a config option for that, but it sounds like the atom plugin doesn't expose it. You can set the racerd path in `ycmd/default_settings.json`
Mar 31 15:12:02 <jwilm>	glaebhoerl: that should work! There's a config option for that, but it sounds like the atom plugin doesn't expose it. You can set the racerd path in `ycmd/default_settings.json`
Mar 31 15:12:38 <pingveno>	panicbit: That's expected behavior for the code sample you gave.
Mar 31 15:12:38 <pingveno>	panicbit: That's expected behavior for the code sample you gave.
Mar 31 15:12:45 <jwilm>	glaebhoerl: I helped someone set up the sublime plugin the other day, and completions weren't showing up because the default sublime config required a key press to show the menu. We first established that ycmd/racerd was getting started by testing the GoTo function
Mar 31 15:12:45 <jwilm>	glaebhoerl: I helped someone set up the sublime plugin the other day, and completions weren't showing up because the default sublime config required a key press to show the menu. We first established that ycmd/racerd was getting started by testing the GoTo function
Mar 31 15:12:58 <panicbit>	pingveno: Why though?
Mar 31 15:12:58 <panicbit>	pingveno: Why though?
Mar 31 15:13:04 <glaebhoerl>	jwilm: does the ycmd build process do _anything_ with --racer-completer besides go into racerd submodule and build it? from build.py it didn't seem like it
Mar 31 15:13:04 <glaebhoerl>	jwilm: does the ycmd build process do _anything_ with --racer-completer besides go into racerd submodule and build it? from build.py it didn't seem like it
Mar 31 15:13:15 <pingveno>	The top bit shifts off the top.
Mar 31 15:13:15 <pingveno>	The top bit shifts off the top.
Mar 31 15:13:34 <pingveno>	So you get 0b10
Mar 31 15:13:34 <pingveno>	So you get 0b10
Mar 31 15:13:39 <panicbit>	pingveno: Well, sure, but it wouldn't in an arithmetic shift, wouldn't it?
Mar 31 15:13:39 <panicbit>	pingveno: Well, sure, but it wouldn't in an arithmetic shift, wouldn't it?
Mar 31 15:13:47 <pingveno>	<< is never arithmetic
Mar 31 15:13:47 <pingveno>	<< is never arithmetic
Mar 31 15:13:48 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 15:13:48 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 15:13:58 <panicbit>	Yeah, that's what I noticed
Mar 31 15:13:58 <panicbit>	Yeah, that's what I noticed
Mar 31 15:14:00 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 15:14:00 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 15:14:07 <pingveno>	>> is arithmetic to preserve signedness
Mar 31 15:14:07 <pingveno>	>> is arithmetic to preserve signedness
Mar 31 15:14:11 <panicbit>	Oooh
Mar 31 15:14:11 <panicbit>	Oooh
Mar 31 15:14:13 <panicbit>	Ok
Mar 31 15:14:13 <panicbit>	Ok
Mar 31 15:14:35 <pingveno>	Ok(i >> n) ? :P
Mar 31 15:14:35 <pingveno>	Ok(i >> n) ? :P
Mar 31 15:14:41 *	woboats has quit (Client exited)
Mar 31 15:14:41 *	woboats has quit (Client exited)
Mar 31 15:14:50 <glaebhoerl>	jwilm: I only did a new cargo project with a simple hello world file and some empty foo and bar functions which call each other, and everything just gets underlined in red and right-click Go To Decl/Def doesn't do anything at all
Mar 31 15:14:50 <glaebhoerl>	jwilm: I only did a new cargo project with a simple hello world file and some empty foo and bar functions which call each other, and everything just gets underlined in red and right-click Go To Decl/Def doesn't do anything at all
Mar 31 15:15:05 <panicbit>	pingveno: I wonder where that is documented
Mar 31 15:15:05 <panicbit>	pingveno: I wonder where that is documented
Mar 31 15:15:06 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 15:15:06 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 15:15:08 *	panicbit checks the reference again
Mar 31 15:15:08 *	panicbit checks the reference again
Mar 31 15:15:09 *	Fishrock123 has quit (Connection closed)
Mar 31 15:15:09 *	Fishrock123 has quit (Connection closed)
Mar 31 15:15:25 <panicbit>	Ah ok got it
Mar 31 15:15:25 <panicbit>	Ah ok got it
Mar 31 15:15:31 *	ygrek (user@moz-8j9aeu.org.ua) has joined
Mar 31 15:15:31 *	ygrek (user@moz-8j9aeu.org.ua) has joined
Mar 31 15:15:47 <pingveno>	Not sure. It's extremely common behavior.
Mar 31 15:15:47 <pingveno>	Not sure. It's extremely common behavior.
Mar 31 15:16:01 *	ptc_ (textual@moz-e3qs71.compute-1.amazonaws.com) has joined
Mar 31 15:16:01 *	ptc_ (textual@moz-e3qs71.compute-1.amazonaws.com) has joined
Mar 31 15:16:09 <panicbit>	I don't know, I haven't had to do this kind of stuff in another language before :P
Mar 31 15:16:09 <panicbit>	I don't know, I haven't had to do this kind of stuff in another language before :P
Mar 31 15:16:24 <glaebhoerl>	hmm, for that matter, the GoTo and other things in the YouCompleteMe submenu don't seem to do anything in C++ source either (there is some kind of completion but maybe that's a built-in Atom thing?)
Mar 31 15:16:24 <glaebhoerl>	hmm, for that matter, the GoTo and other things in the YouCompleteMe submenu don't seem to do anything in C++ source either (there is some kind of completion but maybe that's a built-in Atom thing?)
Mar 31 15:16:38 *	kcking has quit (Client exited)
Mar 31 15:16:38 *	kcking has quit (Client exited)
Mar 31 15:16:42 <jwilm>	glaebhoerl: can you send a screen of that?
Mar 31 15:16:42 <jwilm>	glaebhoerl: can you send a screen of that?
Mar 31 15:16:56 <glaebhoerl>	jwilm: which one?
Mar 31 15:16:56 <glaebhoerl>	jwilm: which one?
Mar 31 15:17:04 <jwilm>	glaebhoerl: the C++ completion
Mar 31 15:17:04 <jwilm>	glaebhoerl: the C++ completion
Mar 31 15:17:09 <glaebhoerl>	moment
Mar 31 15:17:09 <glaebhoerl>	moment
Mar 31 15:17:15 <pingveno>	I can't think of a systems language that doesn't have that behavior.
Mar 31 15:17:15 <pingveno>	I can't think of a systems language that doesn't have that behavior.
Mar 31 15:18:00 *	daze has quit (Connection closed)
Mar 31 15:18:00 *	daze has quit (Connection closed)
Mar 31 15:18:31 *	Matthias247 (Miranda@moz-pfeurg.hsi7.kabel-badenwuerttemberg.de) has joined
Mar 31 15:18:31 *	Matthias247 (Miranda@moz-pfeurg.hsi7.kabel-badenwuerttemberg.de) has joined
Mar 31 15:18:46 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 15:18:46 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 15:18:51 *	Proksima (Proksima@moz-5eq.fuj.157.142.IP) has joined
Mar 31 15:18:51 *	Proksima (Proksima@moz-5eq.fuj.157.142.IP) has joined
Mar 31 15:19:24 Mar 31 15:19:24 <glaebhoerl>	jwilm: http://i.imgur.com/m6KNggM.png
<glaebhoerl>	jwilm: http://i.imgur.com/m6KNggM.png
Mar 31 15:19:29 *	Mermi has quit (Quit: Connection closed for inactivity)
Mar 31 15:19:29 *	Mermi has quit (Quit: Connection closed for inactivity)
Mar 31 15:19:31 *	kmels has quit (Ping timeout: 121 seconds)
Mar 31 15:19:31 *	kmels has quit (Ping timeout: 121 seconds)
Mar 31 15:19:48 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 31 15:19:48 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 31 15:20:09 <glaebhoerl>	...do I need to do anything to let it know about projects or whatever besides just opening source files?
Mar 31 15:20:09 <glaebhoerl>	...do I need to do anything to let it know about projects or whatever besides just opening source files?
Mar 31 15:20:17 <jwilm>	glaebhoerl: not clear if that's ycm or not. YCM does have an identifer completion engine as well.. 
Mar 31 15:20:17 <jwilm>	glaebhoerl: not clear if that's ycm or not. YCM does have an identifer completion engine as well.. 
Mar 31 15:20:37 *	infynyxx has quit (Connection closed)
Mar 31 15:20:37 *	infynyxx has quit (Connection closed)
Mar 31 15:20:39 <jwilm>	glaebhoerl: Given that it asks for the ycmd path, I would expect the plugin to start the server as needed
Mar 31 15:20:39 <jwilm>	glaebhoerl: Given that it asks for the ycmd path, I would expect the plugin to start the server as needed
Mar 31 15:21:28 <glaebhoerl>	jwilm: if ps aux doesn't list ycmd, does that mean it's not even getting started? (or is it getting started & then shut down again?)
Mar 31 15:21:28 <glaebhoerl>	jwilm: if ps aux doesn't list ycmd, does that mean it's not even getting started? (or is it getting started & then shut down again?)
Mar 31 15:21:38 <jwilm>	glaebhoerl: I would expect ycmd to show up if it's running
Mar 31 15:21:38 <jwilm>	glaebhoerl: I would expect ycmd to show up if it's running
Mar 31 15:21:55 <jwilm>	glaebhoerl: if the Atom plugin does that, it needs a patch :P. 
Mar 31 15:21:55 <jwilm>	glaebhoerl: if the Atom plugin does that, it needs a patch :P. 
Mar 31 15:22:11 *	pereira_alex has quit (Quit: Konversation terminated!)
Mar 31 15:22:11 *	pereira_alex has quit (Quit: Konversation terminated!)
Mar 31 15:22:19 <jwilm>	glaebhoerl: do you have the very latest atomc plugin?
Mar 31 15:22:19 <jwilm>	glaebhoerl: do you have the very latest atomc plugin?
Mar 31 15:22:33 <jwilm>	saw this which could be related https://github.com/Qusic/atom-youcompleteme/pull/52/files
Mar 31 15:22:33 <jwilm>	saw this which could be related https://github.com/Qusic/atom-youcompleteme/pull/52/files
Mar 31 15:22:39 <glaebhoerl>	ok. so that at least narrows down the problem to "ycmd itself isn't starting, not anything particular to Rust support"
Mar 31 15:22:39 <glaebhoerl>	ok. so that at least narrows down the problem to "ycmd itself isn't starting, not anything particular to Rust support"
Mar 31 15:22:47 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 31 15:22:47 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 31 15:23:03 <panicbit>	pingveno: Hm, I may be interpreting this wrong
Mar 31 15:23:03 <panicbit>	pingveno: Hm, I may be interpreting this wrong
Mar 31 15:23:03 <glaebhoerl>	Atom is 1.5.3, you-complete-me is 0.7.4
Mar 31 15:23:03 <glaebhoerl>	Atom is 1.5.3, you-complete-me is 0.7.4
Mar 31 15:23:23 <panicbit>	pingveno: This document descrubes the SLA instruction as "Shift n right into Carry. MSB doesn't change."
Mar 31 15:23:23 <panicbit>	pingveno: This document descrubes the SLA instruction as "Shift n right into Carry. MSB doesn't change."
Mar 31 15:23:29 *	panitaliemom (Mibbit@moz-6c8bis.adsl-surfen.hetnet.nl) has joined
Mar 31 15:23:29 *	panitaliemom (Mibbit@moz-6c8bis.adsl-surfen.hetnet.nl) has joined
Mar 31 15:23:36 *	panitaliemom has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 15:23:36 *	panitaliemom has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 15:23:43 <panicbit>	pingveno: Er, sorry, the SLR
Mar 31 15:23:43 <panicbit>	pingveno: Er, sorry, the SLR
Mar 31 15:23:56 <panicbit>	pingveno: The SLA hasn't got the "MSB doesn't change" bit
Mar 31 15:23:56 <panicbit>	pingveno: The SLA hasn't got the "MSB doesn't change" bit
Mar 31 15:24:04 <panicbit>	>.>
Mar 31 15:24:04 <panicbit>	>.>
Mar 31 15:24:19 *	Eisfreak7 (Eisfreak7@moz-crikdn.pools.vodafone-ip.de) has joined
Mar 31 15:24:19 *	Eisfreak7 (Eisfreak7@moz-crikdn.pools.vodafone-ip.de) has joined
Mar 31 15:24:29 *	SneakySnake has quit (Connection closed)
Mar 31 15:24:29 *	SneakySnake has quit (Connection closed)
Mar 31 15:24:37 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 15:24:37 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 15:24:38 <panicbit>	And on closer inspection, there's no logical shift left
Mar 31 15:24:38 <panicbit>	And on closer inspection, there's no logical shift left
Mar 31 15:24:42 <jwilm>	glaebhoerl: is there anything in the atom console that might be helpful?
Mar 31 15:24:42 <jwilm>	glaebhoerl: is there anything in the atom console that might be helpful?
Mar 31 15:24:48 <panicbit>	TIL: I'm dumb :)
Mar 31 15:24:48 <panicbit>	TIL: I'm dumb :)
Mar 31 15:25:21 <pingveno>	panicbit: Yeah, there's no need for a distinction.
Mar 31 15:25:21 <pingveno>	panicbit: Yeah, there's no need for a distinction.
Mar 31 15:25:26 <panicbit>	(Though, calling it SLA is kind of a misnomer)
Mar 31 15:25:26 <panicbit>	(Though, calling it SLA is kind of a misnomer)
Mar 31 15:25:50 <pingveno>	Because left shift never needs to preserve the sign.
Mar 31 15:25:50 <pingveno>	Because left shift never needs to preserve the sign.
Mar 31 15:26:00 <panicbit>	Not sure why that is
Mar 31 15:26:00 <panicbit>	Not sure why that is
Mar 31 15:26:09 <panicbit>	But I don't need to care too much about it :)
Mar 31 15:26:09 <panicbit>	But I don't need to care too much about it :)
Mar 31 15:26:18 <panicbit>	I only need to implement this instruction set :P
Mar 31 15:26:18 <panicbit>	I only need to implement this instruction set :P
Mar 31 15:26:43 *	SneakySnake (snake@moz-i9is4u.pool.telekom.hu) has joined
Mar 31 15:26:43 *	SneakySnake (snake@moz-i9is4u.pool.telekom.hu) has joined
Mar 31 15:26:48 <pingveno>	The sign relies on the highest bit.
Mar 31 15:26:48 <pingveno>	The sign relies on the highest bit.
Mar 31 15:26:57 <pingveno>	The lowest bit is irrelevant.
Mar 31 15:26:57 <pingveno>	The lowest bit is irrelevant.
Mar 31 15:27:17 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 15:27:17 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 15:27:37 <panicbit>	Right
Mar 31 15:27:37 <panicbit>	Right
Mar 31 15:27:45 Mar 31 15:27:45 <panicbit>	But this is about preserving the MSB
<panicbit>	But this is about preserving the MSB
Mar 31 15:27:52 *	pcwalton has quit (Connection closed)
Mar 31 15:27:52 *	pcwalton has quit (Connection closed)
Mar 31 15:28:00 *	pcwalton (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 15:28:00 *	pcwalton (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 15:28:00 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 15:28:00 *	ChanServ gives channel operator status to pcwalton
Mar 31 15:28:00 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 15:28:00 *	ChanServ gives channel operator status to pcwalton
Mar 31 15:28:01 <panicbit>	When shifting left, why should I not want to preserve the sign in some cases?
Mar 31 15:28:01 <panicbit>	When shifting left, why should I not want to preserve the sign in some cases?
Mar 31 15:28:37 *	vmx has quit (Quit: Leaving)
Mar 31 15:28:37 *	vmx has quit (Quit: Leaving)
Mar 31 15:28:39 <panicbit>	(Another doc of that instruction describes the op as "Shift X left preserving sign"...)
Mar 31 15:28:39 <panicbit>	(Another doc of that instruction describes the op as "Shift X left preserving sign"...)
Mar 31 15:28:40 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 15:28:40 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 15:28:40 *	tycoon177 has quit (Connection closed)
Mar 31 15:28:40 *	tycoon177 has quit (Connection closed)
Mar 31 15:29:01 <panicbit>	*sigh*
Mar 31 15:29:01 <panicbit>	*sigh*
Mar 31 15:29:06 *	pcwalton_ (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 15:29:06 *	pcwalton_ (pcwalton@moz-nh2.o1i.216.216.IP) has joined
Mar 31 15:29:06 *	ChanServ sets mode +a on #rust pcwalton_
Mar 31 15:29:06 *	ChanServ gives channel operator status to pcwalton_
Mar 31 15:29:06 *	ChanServ sets mode +a on #rust pcwalton_
Mar 31 15:29:06 *	ChanServ gives channel operator status to pcwalton_
Mar 31 15:29:17 <glaebhoerl>	jwilm: ...that's strange. there hasn't ever been anything useful in it the previous times I tried looking at it, but now there's a bunch of ECONNREFUSED http://i.imgur.com/cZC4L09.png
Mar 31 15:29:17 <glaebhoerl>	jwilm: ...that's strange. there hasn't ever been anything useful in it the previous times I tried looking at it, but now there's a bunch of ECONNREFUSED http://i.imgur.com/cZC4L09.png
Mar 31 15:29:25 *	pcwalton has quit (Connection closed)
Mar 31 15:29:25 *	pcwalton has quit (Connection closed)
Mar 31 15:29:25 *	pcwalton_ is now known as pcwalton
Mar 31 15:29:25 *	pcwalton_ is now known as pcwalton
Mar 31 15:29:39 <jwilm>	glaebhoerl: presumably because ycm isn't running :P
Mar 31 15:29:39 <jwilm>	glaebhoerl: presumably because ycm isn't running :P
Mar 31 15:29:45 <panicbit>	Guess I'll just implement it one way and let the test suite tell me what it thinks about it ^^
Mar 31 15:29:45 <panicbit>	Guess I'll just implement it one way and let the test suite tell me what it thinks about it ^^
Mar 31 15:29:53 <glaebhoerl>	seems like a reasonable theory :)
Mar 31 15:29:53 <glaebhoerl>	seems like a reasonable theory :)
Mar 31 15:30:03 *	cruor99 has quit (Connection closed)
Mar 31 15:30:03 *	cruor99 has quit (Connection closed)
Mar 31 15:30:34 <glaebhoerl>	so is atom failing to start ycmd or not even trying? and why isn't it reporting an error about it? :\
Mar 31 15:30:34 <glaebhoerl>	so is atom failing to start ycmd or not even trying? and why isn't it reporting an error about it? :\
Mar 31 15:30:37 <jwilm>	glaebhoerl: maybe worth seeing how the atom plugin starts YCM and see if you can run that
Mar 31 15:30:37 <jwilm>	glaebhoerl: maybe worth seeing how the atom plugin starts YCM and see if you can run that
Mar 31 15:30:39 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:30:39 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:30:47 <glaebhoerl>	yeah I guess
Mar 31 15:30:47 <glaebhoerl>	yeah I guess
Mar 31 15:30:52 *	jschievink (jschievink@moz-qa21sf.dip0.t-ipconnect.de) has joined
Mar 31 15:30:52 *	jschievink (jschievink@moz-qa21sf.dip0.t-ipconnect.de) has joined
Mar 31 15:31:20 *	pcwalton has quit (Client exited)
Mar 31 15:31:20 *	pcwalton has quit (Client exited)
Mar 31 15:31:22 *	jightuse has quit (Client exited)
Mar 31 15:31:22 *	jightuse has quit (Client exited)
Mar 31 15:31:53 Mar 31 15:31:53 <jwilm>	glaebhoerl: If you'd rather not, maybe it's worth posting an issue on their tracker? The guy that wrote it is probably way more helpful than I am :)
<jwilm>	glaebhoerl: If you'd rather not, maybe it's worth posting an issue on their tracker? The guy that wrote it is probably way more helpful than I am :)
Mar 31 15:33:04 *	rschifflin (mark@moz-n9m.q3k.194.69.IP) has joined
Mar 31 15:33:04 *	rschifflin (mark@moz-n9m.q3k.194.69.IP) has joined
Mar 31 15:33:28 *	sevas_ (sevas@moz-i0a.pgj.128.109.IP) has joined
Mar 31 15:33:28 *	sevas_ (sevas@moz-i0a.pgj.128.109.IP) has joined
Mar 31 15:33:53 *	sevas_ has quit (Quit: leaving)
Mar 31 15:33:53 *	sevas_ has quit (Quit: leaving)
Mar 31 15:34:23 Mar 31 15:34:23 *	cruor99 (cruor@moz-0os33h.customer.cdi.no) has joined
*	cruor99 (cruor@moz-0os33h.customer.cdi.no) has joined
Mar 31 15:34:47 <glaebhoerl>	jwilm: nah I'm looking at it :)
Mar 31 15:34:47 <glaebhoerl>	jwilm: nah I'm looking at it :)
Mar 31 15:35:26 *	jfo has quit (Connection closed)
Mar 31 15:35:26 *	jfo has quit (Connection closed)
Mar 31 15:35:30 <glaebhoerl>	already I see that it only outputs most log messages if Atom is in dev mode.
Mar 31 15:35:30 <glaebhoerl>	already I see that it only outputs most log messages if Atom is in dev mode.
Mar 31 15:36:19 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 15:36:19 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 15:37:38 *	martianwars is now known as martianwars|afk
Mar 31 15:37:38 *	martianwars is now known as martianwars|afk
Mar 31 15:37:53 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 31 15:37:53 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 31 15:38:31 *	p32blo (p32blo@moz-fp6.mm2.214.88.IP) has joined
Mar 31 15:38:31 *	p32blo (p32blo@moz-fp6.mm2.214.88.IP) has joined
Mar 31 15:38:46 *	michaelcook (michaelcook@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:38:46 *	michaelcook (michaelcook@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:39:56 <glaebhoerl>	(& seems to be this file https://github.com/Qusic/atom-youcompleteme/blob/master/lib/handler.coffee)
Mar 31 15:39:56 <glaebhoerl>	(& seems to be this file https://github.com/Qusic/atom-youcompleteme/blob/master/lib/handler.coffee)
Mar 31 15:40:22 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 15:40:22 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 15:40:36 *	michaelcook has quit (Client exited)
Mar 31 15:40:36 *	michaelcook has quit (Client exited)
Mar 31 15:40:46 *	meh (meh@moz-kkp.6fp.42.151.IP) has joined
Mar 31 15:40:46 *	meh (meh@moz-kkp.6fp.42.151.IP) has joined
Mar 31 15:41:00 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 15:41:00 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 15:41:00 *	michaelcook (michaelcook@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:41:00 *	michaelcook (michaelcook@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:41:31 *	zz_NameNotFound is now known as NameNotFound
Mar 31 15:41:31 *	zz_NameNotFound is now known as NameNotFound
Mar 31 15:42:14 *	Mermi (uid96745@moz-v9qrgi.richmond.irccloud.com) has joined
Mar 31 15:42:14 *	Mermi (uid96745@moz-v9qrgi.richmond.irccloud.com) has joined
Mar 31 15:42:22 *	s_kunk (s_kunk@moz-1jmsti.rev.numericable.fr) has joined
Mar 31 15:42:22 *	s_kunk (s_kunk@moz-1jmsti.rev.numericable.fr) has joined
Mar 31 15:42:55 *	boon (David@moz-00m.h73.195.66.IP) has joined
Mar 31 15:42:55 *	boon (David@moz-00m.h73.195.66.IP) has joined
Mar 31 15:43:07 *	nonsensickle (nonsensickl@moz-4v0.gkd.16.182.IP) has joined
Mar 31 15:43:07 *	nonsensickle (nonsensickl@moz-4v0.gkd.16.182.IP) has joined
Mar 31 15:43:37 Mar 31 15:43:37 *	blinky (Mibbit@moz-750pq7.dhcp4.washington.edu) has joined
*	blinky (Mibbit@moz-750pq7.dhcp4.washington.edu) has joined
Mar 31 15:43:50 *	michaelcook is now known as mcouk
Mar 31 15:43:50 *	michaelcook is now known as mcouk
Mar 31 15:44:11 *	mcouk has quit (Client exited)
Mar 31 15:44:11 *	mcouk has quit (Client exited)
Mar 31 15:44:14 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:44:14 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:44:40 *	shadoi (shadoi@moz-24jpjh.ca.comcast.net) has joined
Mar 31 15:44:40 *	shadoi (shadoi@moz-24jpjh.ca.comcast.net) has joined
Mar 31 15:44:45 Mar 31 15:44:45 *	fiddlerwoaroof has quit (Connection closed)
*	fiddlerwoaroof has quit (Connection closed)
Mar 31 15:44:52 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 15:44:52 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 15:44:58 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 31 15:44:58 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 31 15:45:16 *	woboats has quit (Client exited)
Mar 31 15:45:16 *	woboats has quit (Client exited)
Mar 31 15:45:39 *	ArturoVM has quit (Quit: leaving)
Mar 31 15:45:39 *	ArturoVM has quit (Quit: leaving)
Mar 31 15:46:03 *	Haggus (Haggus@moz-g1noq7.dynamic.chello.pl) has joined
Mar 31 15:46:03 *	Haggus (Haggus@moz-g1noq7.dynamic.chello.pl) has joined
Mar 31 15:46:12 Mar 31 15:46:12 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has left
*	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has left
Mar 31 15:46:29 *	NameNotFound is now known as zz_NameNotFound
Mar 31 15:46:29 *	NameNotFound is now known as zz_NameNotFound
Mar 31 15:46:34 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 15:46:34 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 15:46:50 *	niemal has quit (Connection closed)
Mar 31 15:46:50 *	niemal has quit (Connection closed)
Mar 31 15:47:08 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:47:08 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:47:53 Mar 31 15:47:53 *	Sharp (Mibbit@moz-0lajmt.sub-70-214-1.myvzw.com) has joined
*	Sharp (Mibbit@moz-0lajmt.sub-70-214-1.myvzw.com) has joined
Mar 31 15:48:19 <Sharp>	Quick question: what is the replacement in the Rust nightlies for usize::BYTES (and related)?
Mar 31 15:48:19 <Sharp>	Quick question: what is the replacement in the Rust nightlies for usize::BYTES (and related)?
Mar 31 15:48:34 *	mib_dgeg91 has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 15:48:34 *	mib_dgeg91 has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 15:49:03 <bluss>	Sharp: inside a function, just a let var
Mar 31 15:49:03 <bluss>	Sharp: inside a function, just a let var
Mar 31 15:49:15 <bluss>	there's no perfect replacement
Mar 31 15:49:15 <bluss>	there's no perfect replacement
Mar 31 15:49:25 *	sankha has quit (Connection closed)
Mar 31 15:49:25 *	sankha has quit (Connection closed)
Mar 31 15:49:32 *	gopar has quit (A TLS packet with unexpected length was received.)
Mar 31 15:49:32 *	gopar has quit (A TLS packet with unexpected length was received.)
Mar 31 15:49:39 <bluss>	but everywhere I was using it I was fine with just using let var = size_of::
Mar 31 15:49:39 <bluss>	but everywhere I was using it I was fine with just using let var = size_of::
Mar 31 15:49:40 *	Pursuit (josh@moz-jog67q.res.rr.com) has joined
Mar 31 15:49:40 *	Pursuit (josh@moz-jog67q.res.rr.com) has joined
Mar 31 15:49:41 <bluss>	etc
Mar 31 15:49:41 <bluss>	etc
Mar 31 15:49:57 <Sharp>	I was using it for array sizing so I don't think that will work.
Mar 31 15:49:57 <Sharp>	I was using it for array sizing so I don't think that will work.
Mar 31 15:50:05 <Sharp>	Unless that's been made a const fn.
Mar 31 15:50:05 <Sharp>	Unless that's been made a const fn.
Mar 31 15:50:32 <Sharp>	Is there a reason that there's no direct replacement?
Mar 31 15:50:32 <Sharp>	Is there a reason that there's no direct replacement?
Mar 31 15:50:48 *	bkearns1 (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 15:50:48 *	bkearns1 (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 15:50:58 <bluss>	one reason is that the things needed to implement size_of as a constant function are not there yet
Mar 31 15:50:58 <bluss>	one reason is that the things needed to implement size_of as a constant function are not there yet
Mar 31 15:50:59 *	bkearns has quit (Connection closed)
Mar 31 15:50:59 *	bkearns has quit (Connection closed)
Mar 31 15:52:17 <Sharp>	Fair enough... I guess I should just use cfg or something for now?  Not a very good solution, but I guess it will work for my purposes.
Mar 31 15:52:17 <Sharp>	Fair enough... I guess I should just use cfg or something for now?  Not a very good solution, but I guess it will work for my purposes.
Mar 31 15:52:32 Mar 31 15:52:32 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
*	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 15:53:18 <glaebhoerl>	now we're getting somewhere. jwilm: it logs this every time I try something from the YouCompleteMe menu http://i.imgur.com/mWvyHO3.png
Mar 31 15:53:18 <glaebhoerl>	now we're getting somewhere. jwilm: it logs this every time I try something from the YouCompleteMe menu http://i.imgur.com/mWvyHO3.png
Mar 31 15:53:25 <bluss>	for size_of, the size constant would be needed for type checking but sizes of types are only known much later in current compilation
Mar 31 15:53:25 <bluss>	for size_of, the size constant would be needed for type checking but sizes of types are only known much later in current compilation
Mar 31 15:53:53 <mbrubeck>	struct Foo(u8, [u8; size_of::<Foo>()])
Mar 31 15:53:53 <mbrubeck>	struct Foo(u8, [u8; size_of::<Foo>()])
Mar 31 15:53:59 <glaebhoerl>	suspicion: nix is patching this file and screwing it up somehow?
Mar 31 15:53:59 <glaebhoerl>	suspicion: nix is patching this file and screwing it up somehow?
Mar 31 15:54:30 *	tatref (tatref@moz-jf3mp7.abo.wanadoo.fr) has joined
Mar 31 15:54:30 *	tatref (tatref@moz-jf3mp7.abo.wanadoo.fr) has joined
Mar 31 15:54:33 <Sharp>	bluss: Yes, it makes sense that it would be difficult to generically implement size_of as a const fn, and clearly that's the best solution.
Mar 31 15:54:33 <Sharp>	bluss: Yes, it makes sense that it would be difficult to generically implement size_of as a const fn, and clearly that's the best solution.
Mar 31 15:54:59 <glaebhoerl>	oh yeah. the whole file seems to be a nix wrapper over "the real thing"
Mar 31 15:54:59 <glaebhoerl>	oh yeah. the whole file seems to be a nix wrapper over "the real thing"
Mar 31 15:55:08 *	fiddlerwoaroof has quit (Connection closed)
Mar 31 15:55:08 *	fiddlerwoaroof has quit (Connection closed)
Mar 31 15:56:07 <glaebhoerl>	...and the problem seems to be that it's a bash file while atom/ycm is treating it as python (not unreasonably, given its extension)
Mar 31 15:56:07 <glaebhoerl>	...and the problem seems to be that it's a bash file while atom/ycm is treating it as python (not unreasonably, given its extension)
Mar 31 15:56:35 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 15:56:35 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 15:56:40 <bluss>	Sharp: I'm not sure why there aren't associated consts to replace it. http://is.gd/HPBVAq
Mar 31 15:56:40 <bluss>	Sharp: I'm not sure why there aren't associated consts to replace it. http://is.gd/HPBVAq
Mar 31 15:56:49 <bluss>	Sharp: those work as an unstable feature
Mar 31 15:56:49 <bluss>	Sharp: those work as an unstable feature
Mar 31 15:56:58 Mar 31 15:56:58 *	mcouk has quit (Client exited)
*	mcouk has quit (Client exited)
Mar 31 15:57:04 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:57:04 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:57:51 *	ptc_ has quit (Connection closed)
Mar 31 15:57:51 *	ptc_ has quit (Connection closed)
Mar 31 15:58:12 <Sharp>	bluss: That was what I was confused about
Mar 31 15:58:12 <Sharp>	bluss: That was what I was confused about
Mar 31 15:58:22 <jwilm>	glaebhoerl: a ycmd file?
Mar 31 15:58:22 <jwilm>	glaebhoerl: a ycmd file?
Mar 31 15:58:37 *	ptc (textual@moz-l2kuh6.compute-1.amazonaws.com) has joined
Mar 31 15:58:37 *	ptc (textual@moz-l2kuh6.compute-1.amazonaws.com) has joined
Mar 31 15:58:38 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 15:58:38 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 15:58:41 <Sharp>	I assumed there must have been an executive decision not to, just wasn't sure what the rationale was
Mar 31 15:58:41 <Sharp>	I assumed there must have been an executive decision not to, just wasn't sure what the rationale was
Mar 31 15:58:50 <Sharp>	"We can do it better with size_of eventually" is good enough for me :P
Mar 31 15:58:50 <Sharp>	"We can do it better with size_of eventually" is good enough for me :P
Mar 31 15:59:22 <bluss>	Sharp: https://github.com/rust-lang/rust/pull/28656
Mar 31 15:59:22 <bluss>	Sharp: https://github.com/rust-lang/rust/pull/28656
Mar 31 15:59:27 <bluss>	seems like it stalled here
Mar 31 15:59:27 <bluss>	seems like it stalled here
Mar 31 16:00:02 <Sharp>	bluss: It was deprecated in 1.7 though.  It was never revisited?
Mar 31 16:00:02 <Sharp>	bluss: It was deprecated in 1.7 though.  It was never revisited?
Mar 31 16:00:07 *	untitaker_ (untitaker@moz-54qqjr.highway.telekom.at) has joined
Mar 31 16:00:07 *	untitaker_ (untitaker@moz-54qqjr.highway.telekom.at) has joined
Mar 31 16:00:39 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 16:00:39 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 16:00:39 *	bkearns1 has quit (Connection reset by peer)
Mar 31 16:00:39 *	bkearns1 has quit (Connection reset by peer)
Mar 31 16:01:10 <glaebhoerl>	jwilm: it's a nix-created wrapper script around ycmd's original __main__.py
Mar 31 16:01:10 <glaebhoerl>	jwilm: it's a nix-created wrapper script around ycmd's original __main__.py
Mar 31 16:01:10 *	gkbrk has quit (Quit: Leaving)
Mar 31 16:01:10 *	gkbrk has quit (Quit: Leaving)
Mar 31 16:01:24 <jwilm>	glaebhoerl: ew
Mar 31 16:01:24 <jwilm>	glaebhoerl: ew
Mar 31 16:01:29 <jwilm>	:P
Mar 31 16:01:29 <jwilm>	:P
Mar 31 16:01:35 *	pcwalton (pcwalton@moz-0c9.1t0.242.50.IP) has joined
Mar 31 16:01:35 *	pcwalton (pcwalton@moz-0c9.1t0.242.50.IP) has joined
Mar 31 16:01:35 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 16:01:35 *	ChanServ gives channel operator status to pcwalton
Mar 31 16:01:35 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 16:01:35 *	ChanServ gives channel operator status to pcwalton
Mar 31 16:01:37 Mar 31 16:01:37 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
*	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:02:29 <glaebhoerl>	I suspect the problem is that Nix expects it to be executed "directly" like `./__main__.py` (hence why it's a bash script), while atom/ycm are doing it like `python ./__main__.py`
Mar 31 16:02:29 <glaebhoerl>	I suspect the problem is that Nix expects it to be executed "directly" like `./__main__.py` (hence why it's a bash script), while atom/ycm are doing it like `python ./__main__.py`
Mar 31 16:02:36 *	ptc_ (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 31 16:02:36 *	ptc_ (textual@moz-b8ggmf.compute-1.amazonaws.com) has joined
Mar 31 16:02:36 <glaebhoerl>	I'll ask around in #nixos :P
Mar 31 16:02:36 <glaebhoerl>	I'll ask around in #nixos :P
Mar 31 16:02:58 *	untitaker has quit (Ping timeout: 121 seconds)
Mar 31 16:02:58 *	untitaker has quit (Ping timeout: 121 seconds)
Mar 31 16:02:58 *	untitaker_ is now known as untitaker
Mar 31 16:02:58 *	untitaker_ is now known as untitaker
Mar 31 16:03:04 <glaebhoerl>	jwilm: thanks for the clues!
Mar 31 16:03:04 <glaebhoerl>	jwilm: thanks for the clues!
Mar 31 16:04:31 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 16:04:31 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 16:04:31 <jwilm>	glaebhoerl: good luck!
Mar 31 16:04:31 <jwilm>	glaebhoerl: good luck!
Mar 31 16:04:39 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 16:04:39 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 16:04:42 *	sepp2k1 has quit (Ping timeout: 121 seconds)
Mar 31 16:04:42 *	sepp2k1 has quit (Ping timeout: 121 seconds)
Mar 31 16:04:42 <glaebhoerl>	thanks!
Mar 31 16:04:42 <glaebhoerl>	thanks!
Mar 31 16:05:14 *	pcwalton has quit (Client exited)
Mar 31 16:05:14 *	pcwalton has quit (Client exited)
Mar 31 16:06:29 *	gretchen (Mibbit@moz-o0v.bgp.172.85.IP) has joined
Mar 31 16:06:29 *	gretchen (Mibbit@moz-o0v.bgp.172.85.IP) has joined
Mar 31 16:07:54 *	gretchen has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 16:07:54 *	gretchen has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 16:11:09 *	p has quit (Quit: leaving)
Mar 31 16:11:09 *	p has quit (Quit: leaving)
Mar 31 16:11:49 *	infynyxx has quit (Connection closed)
Mar 31 16:11:49 *	infynyxx has quit (Connection closed)
Mar 31 16:12:33 <tjpeden>	I can't seem to find a recent example of how to take a closure as an argument where both the closure and function taking the closure need to return something
Mar 31 16:12:33 <tjpeden>	I can't seem to find a recent example of how to take a closure as an argument where both the closure and function taking the closure need to return something
Mar 31 16:13:09 <talchas>	fn foo<F: Fn(A) -> B>(x: F) -> C {}
Mar 31 16:13:09 <talchas>	fn foo<F: Fn(A) -> B>(x: F) -> C {}
Mar 31 16:13:38 Mar 31 16:13:38 <talchas>	and Option::map among others in the stdlib for a concrete example
<talchas>	and Option::map among others in the stdlib for a concrete example
Mar 31 16:13:58 Mar 31 16:13:58 <tjpeden>	talchas: thanks!
<tjpeden>	talchas: thanks!
Mar 31 16:15:38 Mar 31 16:15:38 *	Amaranth (travis@moz-rrrpsq.cpe.cableone.net) has joined
*	Amaranth (travis@moz-rrrpsq.cpe.cableone.net) has joined
Mar 31 16:15:43 <Xion>	On a related note, are there any plans to allow Fn aliases to be used as generic constraints?
Mar 31 16:15:43 <Xion>	On a related note, are there any plans to allow Fn aliases to be used as generic constraints?
Mar 31 16:15:45 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:15:45 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:15:56 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 16:15:56 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 16:16:12 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 16:16:12 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 16:16:12 *	dikaiosune has quit (Quit: Leaving)
Mar 31 16:16:12 *	dikaiosune has quit (Quit: Leaving)
Mar 31 16:17:05 *	fiddlerwoaroof has quit (Connection closed)
Mar 31 16:17:05 *	fiddlerwoaroof has quit (Connection closed)
Mar 31 16:18:37 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:18:37 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:19:35 Mar 31 16:19:35 *	anowell (uid81535@moz-64klnd.tooting.irccloud.com) has joined
*	anowell (uid81535@moz-64klnd.tooting.irccloud.com) has joined
Mar 31 16:20:17 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 16:20:17 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 16:20:31 *	arBmind has quit (Quit: Leaving.)
Mar 31 16:20:31 *	arBmind has quit (Quit: Leaving.)
Mar 31 16:20:41 *	ville (ville@moz-hrvgod.bb.dnainternet.fi) has joined
Mar 31 16:20:41 *	ville (ville@moz-hrvgod.bb.dnainternet.fi) has joined
Mar 31 16:21:02 *	pczarn (piotr@moz-9un7t9.izacom.pl) has joined
Mar 31 16:21:02 *	pczarn (piotr@moz-9un7t9.izacom.pl) has joined
Mar 31 16:21:05 *	anjumkaiser (anjumkaiser@moz-m2h.sjk.178.182.IP) has joined
Mar 31 16:21:05 *	anjumkaiser (anjumkaiser@moz-m2h.sjk.178.182.IP) has joined
Mar 31 16:25:08 *	anjumkaiser has quit (Ping timeout: 121 seconds)
Mar 31 16:25:08 *	anjumkaiser has quit (Ping timeout: 121 seconds)
Mar 31 16:25:12 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 31 16:25:12 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 31 16:25:18 *	jgallagher has quit (Client exited)
Mar 31 16:25:18 *	jgallagher has quit (Client exited)
Mar 31 16:25:23 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 16:25:23 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 16:25:42 *	Canova has quit (Connection closed)
Mar 31 16:25:42 *	Canova has quit (Connection closed)
Mar 31 16:26:18 *	KarolisK has quit (Connection closed)
Mar 31 16:26:18 *	KarolisK has quit (Connection closed)
Mar 31 16:26:22 *	xrash (smuxi@moz-m1rclu.telesp.net.br) has joined
Mar 31 16:26:22 *	xrash (smuxi@moz-m1rclu.telesp.net.br) has joined
Mar 31 16:26:32 *	davidbm has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 16:26:32 *	davidbm has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 16:26:47 *	infynyxx has quit (Connection closed)
Mar 31 16:26:47 *	infynyxx has quit (Connection closed)
Mar 31 16:27:06 *	jfo has quit (Connection closed)
Mar 31 16:27:06 *	jfo has quit (Connection closed)
Mar 31 16:28:08 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 16:28:08 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 16:28:11 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has left
Mar 31 16:28:11 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has left
Mar 31 16:28:43 *	fiddlerwoaroof has quit (Ping timeout: 121 seconds)
Mar 31 16:28:43 *	fiddlerwoaroof has quit (Ping timeout: 121 seconds)
Mar 31 16:29:03 *	blinky has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 16:29:03 *	blinky has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 16:29:11 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 16:29:11 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 16:29:26 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 16:29:26 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 16:30:39 *	eazar001 (ebrahim@moz-1fk3av.844f.vlo7.0306.2602.IP) has joined
Mar 31 16:30:39 *	eazar001 (ebrahim@moz-1fk3av.844f.vlo7.0306.2602.IP) has joined
Mar 31 16:30:40 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 16:30:40 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 16:31:35 *	spider-mario (spidermario@moz-mbckgh.dynamic.hispeed.ch) has joined
Mar 31 16:31:35 *	spider-mario (spidermario@moz-mbckgh.dynamic.hispeed.ch) has joined
Mar 31 16:32:10 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 16:32:10 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 16:32:10 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:32:10 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:32:46 <tatref>	Does anyone know if it it possible to view a String or &str as a slice?
Mar 31 16:32:46 <tatref>	Does anyone know if it it possible to view a String or &str as a slice?
Mar 31 16:32:50 *	jgilbert (Jeff@moz-e1p4bn.ujol.1ibb.0101.2620.IP) has joined
Mar 31 16:32:50 *	jgilbert (Jeff@moz-e1p4bn.ujol.1ibb.0101.2620.IP) has joined
Mar 31 16:32:53 <bluss>	just sanity check, << is Shl (shift left)?
Mar 31 16:32:53 <bluss>	just sanity check, << is Shl (shift left)?
Mar 31 16:33:02 <bluss>	tatref: sure, the .as_bytes() -> &[u8] method
Mar 31 16:33:02 <bluss>	tatref: sure, the .as_bytes() -> &[u8] method
Mar 31 16:33:08 <tatref>	I would like to use the windows/chunks methods
Mar 31 16:33:08 <tatref>	I would like to use the windows/chunks methods
Mar 31 16:34:28 *	ofeldt has quit (Ping timeout: 121 seconds)
Mar 31 16:34:28 *	ofeldt has quit (Ping timeout: 121 seconds)
Mar 31 16:34:42 *	infynyxx has quit (Ping timeout: 121 seconds)
Mar 31 16:34:42 *	infynyxx has quit (Ping timeout: 121 seconds)
Mar 31 16:35:38 <tatref>	in my case, I'm dealing with pure ascii, so this is fine, but I wanted to know a more general method yielding something like &[char]
Mar 31 16:35:38 <tatref>	in my case, I'm dealing with pure ascii, so this is fine, but I wanted to know a more general method yielding something like &[char]
Mar 31 16:35:51 <talchas>	it isn't stored as chars, so that would be impossible
Mar 31 16:35:51 <talchas>	it isn't stored as chars, so that would be impossible
Mar 31 16:36:03 <talchas>	you can get an iterator of them, but it's stored as utf-8
Mar 31 16:36:03 <talchas>	you can get an iterator of them, but it's stored as utf-8
Mar 31 16:36:29 <talchas>	(and if you really want, you can allocate a Vec<char> with string.chars().collect::<Vec<char>>())
Mar 31 16:36:29 <talchas>	(and if you really want, you can allocate a Vec<char> with string.chars().collect::<Vec<char>>())
Mar 31 16:36:48 <tatref>	yes, but as far as I know, I can't find anything to view an iterator as a slice either, or am I missing something?
Mar 31 16:36:48 <tatref>	yes, but as far as I know, I can't find anything to view an iterator as a slice either, or am I missing something?
Mar 31 16:37:07 <talchas>	no, you can't
Mar 31 16:37:07 <talchas>	no, you can't
Mar 31 16:37:29 <talchas>	finding the nth codepoint in a utf-8 string is O(n)
Mar 31 16:37:29 <talchas>	finding the nth codepoint in a utf-8 string is O(n)
Mar 31 16:38:00 <talchas>	(and a slice in particular guarantees a particular memory layout)
Mar 31 16:38:00 <talchas>	(and a slice in particular guarantees a particular memory layout)
Mar 31 16:38:13 *	danielwzd (danielwzd@moz-o1fflu.2rsv.salp.0306.2602.IP) has joined
Mar 31 16:38:13 *	danielwzd (danielwzd@moz-o1fflu.2rsv.salp.0306.2602.IP) has joined
Mar 31 16:38:22 <tatref>	ok, that's what I thought
Mar 31 16:38:22 <tatref>	ok, that's what I thought
Mar 31 16:38:23 *	martianwars|afk is now known as martianwars
Mar 31 16:38:23 *	martianwars|afk is now known as martianwars
Mar 31 16:38:24 *	Waroong has quit (Ping timeout: 121 seconds)
Mar 31 16:38:24 *	Waroong has quit (Ping timeout: 121 seconds)
Mar 31 16:38:38 <tatref>	thanks for the help!
Mar 31 16:38:38 <tatref>	thanks for the help!
Mar 31 16:38:43 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 16:38:43 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 16:39:21 <talchas>	you could do something like string.chars().zip(string.chars().skip(1)) for the equivalentish of windows(2) and such
Mar 31 16:39:21 <talchas>	you could do something like string.chars().zip(string.chars().skip(1)) for the equivalentish of windows(2) and such
Mar 31 16:39:45 *	mgottschlag (quassel@moz-gsq9jv.hsi6.kabel-badenwuerttemberg.de) has joined
Mar 31 16:39:45 *	mgottschlag (quassel@moz-gsq9jv.hsi6.kabel-badenwuerttemberg.de) has joined
Mar 31 16:40:04 *	JagaJaga (JagaJaga@moz-ua8.hhl.62.178.IP) has joined
Mar 31 16:40:04 *	JagaJaga (JagaJaga@moz-ua8.hhl.62.178.IP) has joined
Mar 31 16:40:17 <talchas>	(which is a bit unnecessarily inefficient in terms of reparsing utf-8 if that somehow matters, but so it goes)
Mar 31 16:40:17 <talchas>	(which is a bit unnecessarily inefficient in terms of reparsing utf-8 if that somehow matters, but so it goes)
Mar 31 16:40:20 *	arBmind (Andreas@moz-p31bnh.dyn.telefonica.de) has joined
Mar 31 16:40:20 *	arBmind (Andreas@moz-p31bnh.dyn.telefonica.de) has joined
Mar 31 16:41:29 <talchas>	and of course you could write an iterator for something like chunks/windows for a *specific* n pretty easily, I suspect it's just not in the stdlib because you couldn't do it for generic n
Mar 31 16:41:29 <talchas>	and of course you could write an iterator for something like chunks/windows for a *specific* n pretty easily, I suspect it's just not in the stdlib because you couldn't do it for generic n
Mar 31 16:41:59 *	anjumkaiser (anjumkaiser@moz-m2h.sjk.178.182.IP) has joined
Mar 31 16:41:59 *	anjumkaiser (anjumkaiser@moz-m2h.sjk.178.182.IP) has joined
Mar 31 16:43:13 *	pwk has quit (A TLS packet with unexpected length was received.)
Mar 31 16:43:13 *	pwk has quit (A TLS packet with unexpected length was received.)
Mar 31 16:43:51 *	Proksima has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 16:43:51 *	Proksima has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 16:43:52 *	Arash-M (arashm@moz-gqk.1vu.126.5.IP) has joined
Mar 31 16:43:52 *	Arash-M (arashm@moz-gqk.1vu.126.5.IP) has joined
Mar 31 16:44:17 *	fiddlerwoaroof has quit (Ping timeout: 121 seconds)
Mar 31 16:44:17 *	fiddlerwoaroof has quit (Ping timeout: 121 seconds)
Mar 31 16:45:09 <tatref>	my guess is that it's not in the stdlib, because it would allocate n items from the iterator, but I could be wrong
Mar 31 16:45:09 <tatref>	my guess is that it's not in the stdlib, because it would allocate n items from the iterator, but I could be wrong
Mar 31 16:45:35 *	nicholasf (nicholasf@moz-a9dqgc.internode.on.net) has joined
Mar 31 16:45:35 *	nicholasf (nicholasf@moz-a9dqgc.internode.on.net) has joined
Mar 31 16:46:02 *	anjumkaiser has quit (Ping timeout: 121 seconds)
Mar 31 16:46:02 *	anjumkaiser has quit (Ping timeout: 121 seconds)
Mar 31 16:46:06 *	sifton (sifton@moz-p8hanb.cable.rogers.com) has joined
Mar 31 16:46:06 *	sifton (sifton@moz-p8hanb.cable.rogers.com) has joined
Mar 31 16:46:12 *	mhcerri has quit (Connection closed)
Mar 31 16:46:12 *	mhcerri has quit (Connection closed)
Mar 31 16:46:48 *	qrlpx has quit (Ping timeout: 121 seconds)
Mar 31 16:46:48 *	qrlpx has quit (Ping timeout: 121 seconds)
Mar 31 16:47:21 *	kcking has quit (Client exited)
Mar 31 16:47:21 *	kcking has quit (Client exited)
Mar 31 16:48:22 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 16:48:22 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 16:49:21 *	brianloveswords has quit (Ping timeout: 121 seconds)
Mar 31 16:49:21 *	brianloveswords has quit (Ping timeout: 121 seconds)
Mar 31 16:49:24 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 31 16:49:24 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 31 16:49:44 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:49:44 *	fiddlerwoaroof (fiddlerwoar@moz-eprc6c.vara.jf42.014a.2601.IP) has joined
Mar 31 16:50:57 *	qrlpx (smuxi@moz-9s3.i9t.152.213.IP) has joined
Mar 31 16:50:57 *	qrlpx (smuxi@moz-9s3.i9t.152.213.IP) has joined
Mar 31 16:51:33 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 16:51:33 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 16:51:40 *	badon_ (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 31 16:51:40 *	badon_ (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 31 16:52:40 *	junqed (junqed@moz-26g.vhd.70.178.IP) has joined
Mar 31 16:52:40 *	junqed (junqed@moz-26g.vhd.70.178.IP) has joined
Mar 31 16:53:06 *	brson_ (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 16:53:06 *	brson_ (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 16:53:17 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 16:53:17 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 16:53:23 <bluss>	this is chunks for a string, now just windows is missing. http://is.gd/6CNFn2
Mar 31 16:53:23 <bluss>	this is chunks for a string, now just windows is missing. http://is.gd/6CNFn2
Mar 31 16:54:21 *	Proksima (Proksima@moz-5eq.fuj.157.142.IP) has joined
Mar 31 16:54:21 *	Proksima (Proksima@moz-5eq.fuj.157.142.IP) has joined
Mar 31 16:54:41 *	brson has quit (Connection closed)
Mar 31 16:54:41 *	brson has quit (Connection closed)
Mar 31 16:54:46 *	badon has quit (Ping timeout: 121 seconds)
Mar 31 16:54:46 *	badon has quit (Ping timeout: 121 seconds)
Mar 31 16:54:52 *	Nilabhra has quit (Connection closed)
Mar 31 16:54:52 *	Nilabhra has quit (Connection closed)
Mar 31 16:54:58 <tatref>	wow nice! Thanks!
Mar 31 16:54:58 <tatref>	wow nice! Thanks!
Mar 31 16:55:22 *	Salvakiya (Salvakiya@moz-76g180.range109-157.btcentralplus.com) has joined
Mar 31 16:55:22 *	Salvakiya (Salvakiya@moz-76g180.range109-157.btcentralplus.com) has joined
Mar 31 16:55:56 *	badon_ is now known as badon
Mar 31 16:55:56 *	badon_ is now known as badon
Mar 31 16:55:59 <talchas>	tatref: yeah, the currently-possible implementation would be an iterator returning Vec<T>, which would be eww
Mar 31 16:55:59 <talchas>	tatref: yeah, the currently-possible implementation would be an iterator returning Vec<T>, which would be eww
Mar 31 16:56:03 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:56:03 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:56:27 <bluss>	tatref: that's how often it comes up.. I wrote this during this week because someone asked
Mar 31 16:56:27 <bluss>	tatref: that's how often it comes up.. I wrote this during this week because someone asked
Mar 31 16:57:03 <talchas>	with some sort of generic-over-ints, you could easily return [T; n], which would be reasonable, though still not quite &[T; n]
Mar 31 16:57:03 <talchas>	with some sort of generic-over-ints, you could easily return [T; n], which would be reasonable, though still not quite &[T; n]
Mar 31 16:57:11 Mar 31 16:57:11 <tatref>	bluss: glad I'm not the only one, then ;-)
<tatref>	bluss: glad I'm not the only one, then ;-)
Mar 31 16:57:35 *	crunchiebones has quit (Quit: WeeChat 1.4)
Mar 31 16:57:35 *	crunchiebones has quit (Quit: WeeChat 1.4)
Mar 31 16:57:50 *	azerupi (azerupi@moz-6upi4g.isp.belgacom.be) has joined
Mar 31 16:57:50 *	azerupi (azerupi@moz-6upi4g.isp.belgacom.be) has joined
Mar 31 16:58:10 <talchas>	(you can't just store a [T; n] in your iterator, because you have to support let x = iter.next(); let y = iter.next();)
Mar 31 16:58:10 <talchas>	(you can't just store a [T; n] in your iterator, because you have to support let x = iter.next(); let y = iter.next();)
Mar 31 16:58:45 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 16:58:45 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 16:59:01 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 16:59:01 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 16:59:22 *	dinfuehr_ (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 16:59:22 *	dinfuehr_ (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 16:59:44 <bluss>	Sharp: https://github.com/rust-lang/rust/pull/28656#issuecomment-204098776
Mar 31 16:59:44 <bluss>	Sharp: https://github.com/rust-lang/rust/pull/28656#issuecomment-204098776
Mar 31 17:00:24 *	bkearns has quit (Connection closed)
Mar 31 17:00:24 *	bkearns has quit (Connection closed)
Mar 31 17:00:25 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 17:00:25 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 17:00:28 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 17:00:28 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 17:00:58 *	cite-reader (ahill@moz-pv1j2k.swbr.surewest.net) has joined
Mar 31 17:00:58 *	cite-reader (ahill@moz-pv1j2k.swbr.surewest.net) has joined
Mar 31 17:01:12 *	dardevelin has quit (Ping timeout: 121 seconds)
Mar 31 17:01:12 *	dardevelin has quit (Ping timeout: 121 seconds)
Mar 31 17:01:12 *	Dahrkael (Dahrkael@moz-oc7.ef9.51.83.IP) has joined
Mar 31 17:01:12 *	Dahrkael (Dahrkael@moz-oc7.ef9.51.83.IP) has joined
Mar 31 17:01:51 *	fiddlerwoaroof has quit (Connection closed)
Mar 31 17:01:51 *	fiddlerwoaroof has quit (Connection closed)
Mar 31 17:01:53 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 31 17:01:53 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 31 17:02:30 *	Douman has quit (Quit: )
Mar 31 17:02:30 *	Douman has quit (Quit: )
Mar 31 17:03:03 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 17:03:03 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 17:03:25 *	dinfuehr_ has quit (Ping timeout: 121 seconds)
Mar 31 17:03:25 *	dinfuehr_ has quit (Ping timeout: 121 seconds)
Mar 31 17:03:43 *	fiddlerwoaroof (fiddlerwoar@moz-498os9.md.comcast.net) has joined
Mar 31 17:03:43 *	fiddlerwoaroof (fiddlerwoar@moz-498os9.md.comcast.net) has joined
Mar 31 17:05:21 *	Canova (canova@moz-e4j.h8i.45.92.IP) has joined
Mar 31 17:05:21 *	Canova (canova@moz-e4j.h8i.45.92.IP) has joined
Mar 31 17:05:44 *	zeebo has quit (Ping timeout: 121 seconds)
Mar 31 17:05:44 *	zeebo has quit (Ping timeout: 121 seconds)
Mar 31 17:07:09 *	tophatsteve (tophatsteve@moz-b43jbs.skybroadband.com) has joined
Mar 31 17:07:09 *	tophatsteve (tophatsteve@moz-b43jbs.skybroadband.com) has joined
Mar 31 17:07:25 *	boon has quit (Ping timeout: 121 seconds)
Mar 31 17:07:25 *	boon has quit (Ping timeout: 121 seconds)
Mar 31 17:08:03 *	JuggleTux (tux@moz-67m1v1.cust.swisscom.ch) has joined
Mar 31 17:08:03 *	JuggleTux (tux@moz-67m1v1.cust.swisscom.ch) has joined
Mar 31 17:08:32 *	anjumkaiser (anjumkaiser@moz-m2h.sjk.178.182.IP) has joined
Mar 31 17:08:32 *	anjumkaiser (anjumkaiser@moz-m2h.sjk.178.182.IP) has joined
Mar 31 17:09:19 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 17:09:19 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 17:09:24 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 17:09:24 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 17:09:54 Mar 31 17:09:54 <talchas>	tatref: bluss: and here's windows :P http://is.gd/KCFk0e
<talchas>	tatref: bluss: and here's windows :P http://is.gd/KCFk0e
Mar 31 17:10:11 <talchas>	though I appear to be off by one
Mar 31 17:10:11 <talchas>	though I appear to be off by one
Mar 31 17:10:33 <talchas>	(ie, i+1 -> i in the initial loop)
Mar 31 17:10:33 <talchas>	(ie, i+1 -> i in the initial loop)
Mar 31 17:10:55 *	infynyxx has quit (Connection closed)
Mar 31 17:10:55 *	infynyxx has quit (Connection closed)
Mar 31 17:13:05 *	zeebo (zeebo@moz-m4c.4q6.135.66.IP) has joined
Mar 31 17:13:05 *	zeebo (zeebo@moz-m4c.4q6.135.66.IP) has joined
Mar 31 17:13:50 *	griff has quit (Client exited)
Mar 31 17:13:50 *	griff has quit (Client exited)
Mar 31 17:16:04 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 17:16:04 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 17:16:29 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:16:29 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:16:30 *	sifton has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 17:16:30 *	sifton has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 17:16:40 *	FrozenCow has quit (Connection closed)
Mar 31 17:16:40 *	FrozenCow has quit (Connection closed)
Mar 31 17:19:35 *	KiChjang has quit (Quit: Leaving)
Mar 31 17:19:35 *	KiChjang has quit (Quit: Leaving)
Mar 31 17:19:39 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 17:19:39 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 17:21:16 *	irrequietus (irqus@moz-m0uslh.home.otenet.gr) has joined
Mar 31 17:21:16 *	irrequietus (irqus@moz-m0uslh.home.otenet.gr) has joined
Mar 31 17:21:53 *	crunchiebones (jy@moz-5uf.jl4.74.188.IP) has joined
Mar 31 17:21:53 *	crunchiebones (jy@moz-5uf.jl4.74.188.IP) has joined
Mar 31 17:23:51 *	pcwalton (pcwalton@moz-irp.d2v.254.50.IP) has joined
Mar 31 17:23:51 *	pcwalton (pcwalton@moz-irp.d2v.254.50.IP) has joined
Mar 31 17:23:51 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 17:23:51 *	ChanServ gives channel operator status to pcwalton
Mar 31 17:23:51 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 17:23:51 *	ChanServ gives channel operator status to pcwalton
Mar 31 17:24:12 *	xenor (xenor@moz-murk38.pools.vodafone-ip.de) has joined
Mar 31 17:24:12 *	xenor (xenor@moz-murk38.pools.vodafone-ip.de) has joined
Mar 31 17:24:38 <xenor>	hi is there a way to cheaply transform a [u8] to [u8; n]? or do I have to copy all the bytes?
Mar 31 17:24:38 <xenor>	hi is there a way to cheaply transform a [u8] to [u8; n]? or do I have to copy all the bytes?
Mar 31 17:25:04 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 31 17:25:04 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 31 17:26:09 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 17:26:09 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 17:26:11 *	andre_ has quit (Quit: leaving)
Mar 31 17:26:11 *	andre_ has quit (Quit: leaving)
Mar 31 17:27:00 <kmc>	xenor: no, but you can convert &[u8] to &[u8; n] by way of raw::Slice
Mar 31 17:27:00 <kmc>	xenor: no, but you can convert &[u8] to &[u8; n] by way of raw::Slice
Mar 31 17:27:17 <kmc>	and you can insert a run-time check on the length, but you can't (yet) make that function generic over n, which is why it's not in the std lib
Mar 31 17:27:17 <kmc>	and you can insert a run-time check on the length, but you can't (yet) make that function generic over n, which is why it's not in the std lib
Mar 31 17:27:27 *	espadrine_ (tyl@moz-i4grhd.dd79.arl0.0e35.2a01.IP) has joined
Mar 31 17:27:27 *	espadrine_ (tyl@moz-i4grhd.dd79.arl0.0e35.2a01.IP) has joined
Mar 31 17:27:33 <pingveno>	kmc: I thought &[u8] was raw::Slice
Mar 31 17:27:33 <pingveno>	kmc: I thought &[u8] was raw::Slice
Mar 31 17:27:55 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 17:27:55 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 17:27:56 *	eckhardt has quit (Connection closed)
Mar 31 17:27:56 *	eckhardt has quit (Connection closed)
Mar 31 17:28:13 <pingveno>	(identical in representation)
Mar 31 17:28:13 <pingveno>	(identical in representation)
Mar 31 17:28:26 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 17:28:26 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 17:28:26 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:28:26 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:29:09 <kmc>	that's what I mean
Mar 31 17:29:09 <kmc>	that's what I mean
Mar 31 17:29:26 <kmc>	you can transmute &[u8] to raw::Slice and then get the data pointer and transmute it to &[u8; n]
Mar 31 17:29:26 <kmc>	you can transmute &[u8] to raw::Slice and then get the data pointer and transmute it to &[u8; n]
Mar 31 17:29:33 *	cbrewste_ (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 17:29:33 *	cbrewste_ (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 17:29:53 <bluss>	you don't need to know the representation of the slice for this anyway
Mar 31 17:29:53 <bluss>	you don't need to know the representation of the slice for this anyway
Mar 31 17:30:03 <kmc>	oh?
Mar 31 17:30:03 <kmc>	oh?
Mar 31 17:30:03 <bluss>	you have the pointer and the length from public methods
Mar 31 17:30:03 <bluss>	you have the pointer and the length from public methods
Mar 31 17:30:12 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 17:30:12 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 17:30:14 <kmc>	ah, true
Mar 31 17:30:14 <kmc>	ah, true
Mar 31 17:30:17 *	pyon has quit (Ping timeout: 121 seconds)
Mar 31 17:30:17 *	pyon has quit (Ping timeout: 121 seconds)
Mar 31 17:30:36 <kmc>	.as_ptr()
Mar 31 17:30:36 <kmc>	.as_ptr()
Mar 31 17:31:13 <bluss>	!crate arrayref
Mar 31 17:31:13 <bluss>	!crate arrayref
Mar 31 17:31:14 <rustbot>	arrayref (0.3.2) - Macros to take array references of slices -> https://crates.io/crates/arrayref
Mar 31 17:31:14 <rustbot>	arrayref (0.3.2) - Macros to take array references of slices -> https://crates.io/crates/arrayref
Mar 31 17:31:15 *	isomarcte has quit (A TLS packet with unexpected length was received.)
Mar 31 17:31:15 *	isomarcte has quit (A TLS packet with unexpected length was received.)
Mar 31 17:31:30 <bluss>	this crate has some macros to do it ^
Mar 31 17:31:30 <bluss>	this crate has some macros to do it ^
Mar 31 17:31:46 *	insaneinside (user@moz-afulfs.tukw.qwest.net) has joined
Mar 31 17:31:46 *	insaneinside (user@moz-afulfs.tukw.qwest.net) has joined
Mar 31 17:31:53 <bluss>	not the most beautiful solution, now without those missing features
Mar 31 17:31:53 <bluss>	not the most beautiful solution, now without those missing features
Mar 31 17:32:25 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:32:25 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:32:28 *	eckhardt has quit (Ping timeout: 121 seconds)
Mar 31 17:32:28 *	eckhardt has quit (Ping timeout: 121 seconds)
Mar 31 17:32:36 *	cbrewster (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:32:36 *	cbrewster (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:33:04 *	freeman42 has quit (Quit: Leaving)
Mar 31 17:33:04 *	freeman42 has quit (Quit: Leaving)
Mar 31 17:33:23 *	cbrewste_ has quit (Connection closed)
Mar 31 17:33:23 *	cbrewste_ has quit (Connection closed)
Mar 31 17:37:05 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 17:37:05 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 17:37:24 *	g-andrade (wat@moz-5ipq04.upd2.jg72.08a0.2001.IP) has joined
Mar 31 17:37:24 *	g-andrade (wat@moz-5ipq04.upd2.jg72.08a0.2001.IP) has joined
Mar 31 17:37:42 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 17:37:42 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 17:38:53 *	iiddnn_ (iacopodeeno@moz-6ct2ht.retail.telecomitalia.it) has joined
Mar 31 17:38:53 *	iiddnn_ (iacopodeeno@moz-6ct2ht.retail.telecomitalia.it) has joined
Mar 31 17:40:51 <xenor>	kmc, my n is constant, so this is totally fine
Mar 31 17:40:51 <xenor>	kmc, my n is constant, so this is totally fine
Mar 31 17:41:08 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 17:41:08 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 17:41:29 *	urodna (urodna@moz-ogglgp.res.rr.com) has joined
Mar 31 17:41:29 *	urodna (urodna@moz-ogglgp.res.rr.com) has joined
Mar 31 17:41:29 *	sankha has quit (Connection closed)
Mar 31 17:41:29 *	sankha has quit (Connection closed)
Mar 31 17:41:35 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 31 17:41:35 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 31 17:41:37 *	jgallagher has quit (Client exited)
Mar 31 17:41:37 *	jgallagher has quit (Client exited)
Mar 31 17:43:40 <phaazon>	hm
Mar 31 17:43:40 <phaazon>	hm
Mar 31 17:43:54 <phaazon>	rustc advises me to use a 'static overliving bound
Mar 31 17:43:54 <phaazon>	rustc advises me to use a 'static overliving bound
Mar 31 17:43:56 <phaazon>	I don’t like that
Mar 31 17:43:56 <phaazon>	I don’t like that
Mar 31 17:43:59 <phaazon>	like
Mar 31 17:43:59 <phaazon>	like
Mar 31 17:44:31 <phaazon>	it advises me to annotate my lambda with 'static lifetime
Mar 31 17:44:31 <phaazon>	it advises me to annotate my lambda with 'static lifetime
Mar 31 17:44:41 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 17:44:41 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 17:45:05 *	Canova has quit (Connection closed)
Mar 31 17:45:05 *	Canova has quit (Connection closed)
Mar 31 17:45:07 <phaazon>	basically, I return an object from a function, and that object is annotated with lifetime 'a. It has a Box and I’d like to put a closure in that box
Mar 31 17:45:07 <phaazon>	basically, I return an object from a function, and that object is annotated with lifetime 'a. It has a Box and I’d like to put a closure in that box
Mar 31 17:45:15 *	Proksima has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 17:45:15 *	Proksima has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 17:45:18 <steveklabnik>	then the closure needs to be 'static
Mar 31 17:45:18 <steveklabnik>	then the closure needs to be 'static
Mar 31 17:45:19 <phaazon>	I don’t see what lifetime to give to the closure trait bound
Mar 31 17:45:19 <phaazon>	I don’t see what lifetime to give to the closure trait bound
Mar 31 17:45:20 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 31 17:45:20 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 31 17:45:23 <phaazon>	steveklabnik: why?
Mar 31 17:45:23 <phaazon>	steveklabnik: why?
Mar 31 17:45:35 <steveklabnik>	because Box requires it, it's not tied to any particular stack frame
Mar 31 17:45:35 <steveklabnik>	because Box requires it, it's not tied to any particular stack frame
Mar 31 17:45:37 <phaazon>	can’t I say that the closure must have the same lifetime than the object?
Mar 31 17:45:37 <phaazon>	can’t I say that the closure must have the same lifetime than the object?
Mar 31 17:45:45 <phaazon>	ah?
Mar 31 17:45:45 <phaazon>	ah?
Mar 31 17:46:10 <kmc>	phaazon: can you put an example on the playpen
Mar 31 17:46:10 <kmc>	phaazon: can you put an example on the playpen
Mar 31 17:46:15 <steveklabnik>	yeah, that would be helpful
Mar 31 17:46:15 <steveklabnik>	yeah, that would be helpful
Mar 31 17:46:27 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 17:46:27 *	jgallagher (john@moz-d5e8oc.hfc.comcastbusiness.net) has joined
Mar 31 17:46:28 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 31 17:46:28 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 31 17:46:32 <talchas>	well, you can, if you write Box<Fn() + 'a>
Mar 31 17:46:32 <talchas>	well, you can, if you write Box<Fn() + 'a>
Mar 31 17:46:52 *	nicholasf has quit (Connection closed)
Mar 31 17:46:52 *	nicholasf has quit (Connection closed)
Mar 31 17:46:59 <talchas>	it just defaults to + 'static because that's what you want with Box like 90% of the time
Mar 31 17:46:59 <talchas>	it just defaults to + 'static because that's what you want with Box like 90% of the time
Mar 31 17:47:13 <phaazon>	Box<Fn() + 'a>
Mar 31 17:47:13 <phaazon>	Box<Fn() + 'a>
Mar 31 17:47:14 <bluss>	steveklabnik: you can have borrowed data in a Box
Mar 31 17:47:14 <bluss>	steveklabnik: you can have borrowed data in a Box
Mar 31 17:47:16 <phaazon>	what is that :D
Mar 31 17:47:16 <phaazon>	what is that :D
Mar 31 17:47:17 <steveklabnik>	right, sorry :(
Mar 31 17:47:17 <steveklabnik>	right, sorry :(
Mar 31 17:47:43 <kmc>	phaazon: boxed trait object with a lifetime bound
Mar 31 17:47:43 <kmc>	phaazon: boxed trait object with a lifetime bound
Mar 31 17:47:47 <talchas>	phaazon: well, much like you can write F: Fn() and F: 'a and F: Fn() + 'a, you can use those when writing trait objects too
Mar 31 17:47:47 <talchas>	phaazon: well, much like you can write F: Fn() and F: 'a and F: Fn() + 'a, you can use those when writing trait objects too
Mar 31 17:47:58 <phaazon>	kmc: I didn’t know we could use + in template like that
Mar 31 17:47:58 <phaazon>	kmc: I didn’t know we could use + in template like that
Mar 31 17:48:08 <phaazon>	I guess it’s like using a where?
Mar 31 17:48:08 <phaazon>	I guess it’s like using a where?
Mar 31 17:48:10 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:48:10 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:48:24 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 17:48:24 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 17:48:24 <talchas>	you can only do it with lifetimes and Send/Sync at the moment
Mar 31 17:48:24 <talchas>	you can only do it with lifetimes and Send/Sync at the moment
Mar 31 17:48:29 *	infynyxx has quit (Connection closed)
Mar 31 17:48:29 *	infynyxx has quit (Connection closed)
Mar 31 17:48:30 <phaazon>	ok talchas, thank you
Mar 31 17:48:30 <phaazon>	ok talchas, thank you
Mar 31 17:48:36 <talchas>	(for trait objects that is)
Mar 31 17:48:36 <talchas>	(for trait objects that is)
Mar 31 17:48:49 <talchas>	you can write any number of bounds in generics with +
Mar 31 17:48:49 <talchas>	you can write any number of bounds in generics with +
Mar 31 17:48:53 <phaazon>	ooooh
Mar 31 17:48:53 <phaazon>	ooooh
Mar 31 17:48:54 <phaazon>	ok
Mar 31 17:48:54 <phaazon>	ok
Mar 31 17:48:55 <phaazon>	I get it
Mar 31 17:48:55 <phaazon>	I get it
Mar 31 17:48:59 <phaazon>	instead of
Mar 31 17:48:59 <phaazon>	instead of
Mar 31 17:49:11 <phaazon>	pub update: Box<Fn()>, which defaults to Fn() + 'static
Mar 31 17:49:11 <phaazon>	pub update: Box<Fn()>, which defaults to Fn() + 'static
Mar 31 17:49:13 <phaazon>	I can write
Mar 31 17:49:13 <phaazon>	I can write
Mar 31 17:49:16 <kmc>	they aren't templates :P
Mar 31 17:49:16 <kmc>	they aren't templates :P
Mar 31 17:49:21 <phaazon>	pub update: Box<Fn() + 'a>
Mar 31 17:49:21 <phaazon>	pub update: Box<Fn() + 'a>
Mar 31 17:49:26 <talchas>	yes
Mar 31 17:49:26 <talchas>	yes
Mar 31 17:49:28 <phaazon>	nice
Mar 31 17:49:29 <phaazon>	nice
Mar 31 17:49:37 <phaazon>	so that it means that the closure will die with the object
Mar 31 17:49:37 <phaazon>	so that it means that the closure will die with the object
Mar 31 17:49:55 <talchas>	now, most of the time if you can do that you can do &'a Fn() instead, but there are some cases where you would not be able to
Mar 31 17:49:55 <talchas>	now, most of the time if you can do that you can do &'a Fn() instead, but there are some cases where you would not be able to
Mar 31 17:50:15 *	shellac (textual@moz-dt7eki.cable.virginm.net) has joined
Mar 31 17:50:15 *	shellac (textual@moz-dt7eki.cable.virginm.net) has joined
Mar 31 17:50:19 *	jgallagher has quit (Client exited)
Mar 31 17:50:19 *	jgallagher has quit (Client exited)
Mar 31 17:50:34 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:50:34 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:51:02 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 31 17:51:02 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 31 17:51:02 *	pcwalton has quit (Connection closed)
Mar 31 17:51:02 *	pcwalton has quit (Connection closed)
Mar 31 17:51:05 *	cite-reader has quit (Quit: leaving)
Mar 31 17:51:05 *	cite-reader has quit (Quit: leaving)
Mar 31 17:51:17 <crisco_>	tomaka: hey
Mar 31 17:51:17 <crisco_>	tomaka: hey
Mar 31 17:51:23 *	crisco_ is now known as crisco
Mar 31 17:51:23 *	crisco_ is now known as crisco
Mar 31 17:51:38 <crisco>	which libs can be used with rust on android?
Mar 31 17:51:38 <crisco>	which libs can be used with rust on android?
Mar 31 17:51:51 *	Canova (canova@moz-e4j.h8i.45.92.IP) has joined
Mar 31 17:51:51 *	Canova (canova@moz-e4j.h8i.45.92.IP) has joined
Mar 31 17:52:05 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 17:52:05 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 17:52:22 *	xenor has quit (Quit: leaving)
Mar 31 17:52:22 *	xenor has quit (Quit: leaving)
Mar 31 17:52:42 *	pcwalton (pcwalton@moz-irp.d2v.254.50.IP) has joined
Mar 31 17:52:42 *	pcwalton (pcwalton@moz-irp.d2v.254.50.IP) has joined
Mar 31 17:52:42 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 17:52:42 *	ChanServ gives channel operator status to pcwalton
Mar 31 17:52:42 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 17:52:42 *	ChanServ gives channel operator status to pcwalton
Mar 31 17:52:49 *	alexherbo2 has quit (Ping timeout: 121 seconds)
Mar 31 17:52:49 *	alexherbo2 has quit (Ping timeout: 121 seconds)
Mar 31 17:52:59 *	dinfuehr has quit (Client exited)
Mar 31 17:52:59 *	dinfuehr has quit (Client exited)
Mar 31 17:54:28 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 17:54:28 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 17:54:34 *	dikaiosune (aperry@moz-4qr287.egr.nau.edu) has joined
Mar 31 17:54:34 *	dikaiosune (aperry@moz-4qr287.egr.nau.edu) has joined
Mar 31 17:55:27 *	nonsensickle has quit (Quit: Leaving)
Mar 31 17:55:27 *	nonsensickle has quit (Quit: Leaving)
Mar 31 17:55:29 <mbrubeck>	crisco: Most can, though if they depend on C libraries it can take some extra work to build them (OpenSSL especially).
Mar 31 17:55:29 <mbrubeck>	crisco: Most can, though if they depend on C libraries it can take some extra work to build them (OpenSSL especially).
Mar 31 17:55:32 <mbrubeck>	crisco: Any particular ones you want?
Mar 31 17:55:32 <mbrubeck>	crisco: Any particular ones you want?
Mar 31 17:55:55 *	tophatsteve has quit (Quit: Leaving...)
Mar 31 17:55:55 *	tophatsteve has quit (Quit: Leaving...)
Mar 31 17:56:00 <mbrubeck>	crisco: Servo runs on Android, and it includes about 200 Rust crates.
Mar 31 17:56:00 <mbrubeck>	crisco: Servo runs on Android, and it includes about 200 Rust crates.
Mar 31 17:56:11 <crisco>	mbrubeck: http://www.humatic.de/htools/nmj/
Mar 31 17:56:11 <crisco>	mbrubeck: http://www.humatic.de/htools/nmj/
Mar 31 17:56:16 <crisco>	it's a java lib
Mar 31 17:56:16 <crisco>	it's a java lib
Mar 31 17:56:30 <crisco>	i want to send midi over rtp from android to my pc
Mar 31 17:56:30 <crisco>	i want to send midi over rtp from android to my pc
Mar 31 17:56:40 *	ferjm has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 17:56:40 *	ferjm has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 17:56:54 *	raph1 has quit (Quit: Leaving.)
Mar 31 17:56:54 *	raph1 has quit (Quit: Leaving.)
Mar 31 17:57:02 *	Sharp has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 17:57:02 *	Sharp has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 17:57:12 *	Canova has quit (Connection closed)
Mar 31 17:57:12 *	Canova has quit (Connection closed)
Mar 31 17:57:51 *	azerupi has quit (Ping timeout: 121 seconds)
Mar 31 17:57:58 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 17:58:10 <crisco>	mbrubeck: can i use java libs and the SDK / NDK?
Mar 31 17:58:10 <crisco>	mbrubeck: can i use java libs and the SDK / NDK?
**** ENDING LOGGING AT Thu Mar 31 17:58:12 2016

**** BEGIN LOGGING AT Thu Mar 31 17:58:12 2016

Mar 31 17:58:17 FiSHLiM plugin unloaded
**** ENDING LOGGING AT Thu Mar 31 17:58:17 2016

Mar 31 17:58:17 *	brunodea_ has quit (Quit: Leaving)
**** BEGIN LOGGING AT Thu Mar 31 17:58:22 2016

Mar 31 17:58:22 *	Now talking on #rust
Mar 31 17:58:22 *	brunodea_ (brunodea@moz-cthdmd.gvt.net.br) has joined
Mar 31 17:58:22 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Mar 31 17:58:22 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Mar 31 17:58:25 *	Canova (canova@moz-e4j.h8i.45.92.IP) has joined
Mar 31 17:59:03 <mbrubeck>	crisco: Yes; it's similar to using the NDK with C/C++ code.
Mar 31 17:59:03 <mbrubeck>	crisco: Yes; it's similar to using the NDK with C/C++ code.
Mar 31 17:59:24 <crisco>	and jni for java libs?
Mar 31 17:59:24 <crisco>	and jni for java libs?
Mar 31 17:59:56 <mbrubeck>	crisco: You have two basic options: (1) Write a NativeActivity where your main code is in Rust, and it draws to a fullscreen window. (You can use android-rs-glue + glutin for this.)  It can use JNI to talk to Java libs.
Mar 31 17:59:56 <mbrubeck>	crisco: You have two basic options: (1) Write a NativeActivity where your main code is in Rust, and it draws to a fullscreen window. (You can use android-rs-glue + glutin for this.)  It can use JNI to talk to Java libs.
Mar 31 18:00:13 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 18:00:16 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 18:00:17 <mbrubeck>	crisco: (2) Write your main activity in Java, and have it load a JNI library implemented in Rust.
Mar 31 18:00:17 <mbrubeck>	crisco: (2) Write your main activity in Java, and have it load a JNI library implemented in Rust.
Mar 31 18:00:28 *	brendan (brendaneich@moz-i5pttq.sub-70-213-1.myvzw.com) has joined
Mar 31 18:00:57 <crisco>	i prefer (1), but then i can't use java gui elements, right?
Mar 31 18:00:57 <crisco>	i prefer (1), but then i can't use java gui elements, right?
Mar 31 18:01:01 <mbrubeck>	right
Mar 31 18:01:01 <mbrubeck>	right
Mar 31 18:01:02 <crisco>	can i use conrod?
Mar 31 18:01:02 <crisco>	can i use conrod?
Mar 31 18:01:19 Mar 31 18:01:19 <mbrubeck>	The second option is necessary if you want to use Android UI stuff, or do much integration with Android framework libraries (intents, etc.)
<mbrubeck>	The second option is necessary if you want to use Android UI stuff, or do much integration with Android framework libraries (intents, etc.)
Mar 31 18:01:22 <crisco>	can i still detect touch etc?
Mar 31 18:01:22 <crisco>	can i still detect touch etc?
Mar 31 18:01:38 <mbrubeck>	You can probably use Conrod.  glutin has touch input support on Android.
Mar 31 18:01:38 <mbrubeck>	You can probably use Conrod.  glutin has touch input support on Android.
Mar 31 18:02:44 *	_Vi (vi@moz-8kcf4a.3gli.01oh.0470.2001.IP) has joined
Mar 31 18:03:18 *	eckhardt has quit (Connection closed)
Mar 31 18:03:21 *	NilSet has quit (Ping timeout: 121 seconds)
Mar 31 18:04:11 *	amyers has quit (Ping timeout: 121 seconds)
Mar 31 18:04:19 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 18:04:24 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 31 18:04:48 *	Arash-M (arashm@moz-7oq.bnf.126.5.IP) has joined
Mar 31 18:04:58 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 18:05:55 *	eckhardt_ (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 18:05:55 *	eckhardt has quit (Connection closed)
Mar 31 18:06:14 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 31 18:06:23 *	jeffdb has quit (Quit: WeeChat 1.4)
Mar 31 18:06:37 *	kmicu has quit (Client exited)
Mar 31 18:08:57 *	infynyxx (infynyxx@moz-nh1qrt.nj.comcast.net) has joined
Mar 31 18:09:39 *	dellavg has quit (Ping timeout: 121 seconds)
Mar 31 18:10:44 *	brianloveswords has quit (Ping timeout: 121 seconds)
Mar 31 18:10:51 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 18:10:58 *	nyx has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 18:11:11 *	ato has quit (Quit: )
Mar 31 18:12:59 *	infynyxx has quit (Ping timeout: 121 seconds)
Mar 31 18:13:19 *	brendan has quit (Client exited)
Mar 31 18:14:36 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 31 18:14:58 *	eckhardt_ has quit (Connection closed)
Mar 31 18:15:12 *	arremsause has quit (Ping timeout: 121 seconds)
Mar 31 18:16:05 *	jdm has quit (Quit: )
Mar 31 18:17:16 *	cafeclimber (cafeclimber@moz-e8lape.tamulink.tamu.edu) has joined
Mar 31 18:17:30 *	msingle has quit (Ping timeout: 121 seconds)
Mar 31 18:20:27 *	TheAnachron has quit (Quit: Leaving)
Mar 31 18:21:02 *	griff has quit (Connection closed)
Mar 31 18:21:11 *	p32blo (p32blo@moz-hbr.kl8.214.88.IP) has joined
Mar 31 18:21:30 *	griff (griff@moz-09j.42t.97.212.IP) has joined
Mar 31 18:21:48 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 18:22:17 *	sankha has quit (Connection closed)
Mar 31 18:22:25 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 31 18:24:03 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 18:24:53 *	jfo (jfo@moz-k3r.ebo.124.64.IP) has joined
Mar 31 18:26:18 <dmilith>	File::open(path).and_then(|mut f| f.read_to_string(&mut string)).map(|_| string)   -- what that map(|_| string) does?
Mar 31 18:26:18 <dmilith>	File::open(path).and_then(|mut f| f.read_to_string(&mut string)).map(|_| string)   -- what that map(|_| string) does?
Mar 31 18:26:59 *	gopar has quit (A TLS packet with unexpected length was received.)
Mar 31 18:27:02 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 18:27:24 *	ca1ek has quit (Connection closed)
Mar 31 18:27:52 <talchas>	dmilith: basically if open and read_to_string succeeded it throws away their return values and replaces them with just the String that was read
Mar 31 18:27:52 <talchas>	dmilith: basically if open and read_to_string succeeded it throws away their return values and replaces them with just the String that was read
Mar 31 18:27:53 *	danielwzd has quit (Ping timeout: 121 seconds)
Mar 31 18:28:06 *	FrozenCow (FrozenCow@moz-i2tvv4.chello.nl) has joined
Mar 31 18:28:15 *	Guest16 (textual@moz-tap.gpg.55.66.IP) has joined
Mar 31 18:28:20 *	griff has quit (Client exited)
Mar 31 18:28:44 *	djcb has quit (Connection closed)
Mar 31 18:29:18 <talchas>	(map(f) calls f on the unwrapped Result if it's Ok, replacing it with the return of f, and does nothing if it's Err)
Mar 31 18:29:18 <talchas>	(map(f) calls f on the unwrapped Result if it's Ok, replacing it with the return of f, and does nothing if it's Err)
Mar 31 18:30:15 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 18:30:33 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 18:30:35 *	eckhardt has quit (Connection closed)
Mar 31 18:30:41 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 18:31:05 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 18:31:23 *	gpoesia has quit (Client exited)
Mar 31 18:32:20 *	desophos_ (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 18:32:27 *	gpoesia (poesia@moz-q61.9o0.201.199.IP) has joined
Mar 31 18:33:03 *	desophos_ has quit (A TLS packet with unexpected length was received.)
Mar 31 18:33:29 *	azerupi (azerupi@moz-6upi4g.isp.belgacom.be) has joined
Mar 31 18:33:46 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 18:34:17 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 18:34:28 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 18:34:47 *	zz_NameNotFound is now known as NameNotFound
Mar 31 18:34:56 *	pcwalton has quit (Client exited)
Mar 31 18:35:11 *	rubdos has quit (Quit: Leaving)
Mar 31 18:35:22 *	desophos has quit (Ping timeout: 121 seconds)
Mar 31 18:35:29 *	bkearns has quit (Quit: Leaving.)
Mar 31 18:36:07 *	eazar001 has quit (Quit: WeeChat 1.4)
Mar 31 18:37:09 *	eazar001 (ebrahim@moz-1fk3av.844f.vlo7.0306.2602.IP) has joined
Mar 31 18:37:11 *	stelarcf__ has quit (Client exited)
Mar 31 18:38:31 *	shadoi has quit (Quit: Leaving.)
Mar 31 18:38:59 *	stjepang (stjepang@moz-lig.4pp.39.5.IP) has joined
Mar 31 18:39:27 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 18:40:43 *	skeet70 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 18:41:39 *	makoLine has quit (Connection closed)
Mar 31 18:41:40 *	dethos has quit (Ping timeout: 121 seconds)
Mar 31 18:41:53 *	NeverDie has quit (Quit: http://radiux.io/)
Mar 31 18:42:08 *	bkearns (Adium@moz-rudtng.static.wiline.com) has joined
Mar 31 18:42:27 *	futile has quit (Quit: WeeChat 1.4)
Mar 31 18:43:18 *	toby_s has quit (Ping timeout: 121 seconds)
Mar 31 18:43:27 *	gpoesia has quit (Client exited)
Mar 31 18:43:31 *	nkr has quit (Ping timeout: 121 seconds)
Mar 31 18:43:43 *	]OLI[ has quit (Ping timeout: 121 seconds)
Mar 31 18:43:47 *	]OLI[ (oli@moz-1ufv47.members.linode.com) has joined
Mar 31 18:43:52 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 18:43:57 *	toby_s (toby_s@moz-bp5qol.sk83.bjud.7e00.2a01.IP) has joined
Mar 31 18:44:11 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 31 18:44:20 *	tekacs has quit (Ping timeout: 121 seconds)
Mar 31 18:44:36 *	tsjost has quit (Ping timeout: 121 seconds)
Mar 31 18:44:40 *	nkr (Elite16292@moz-lfd3q3.lambda.elitebnc.org) has joined
Mar 31 18:44:51 *	tsjost (tsjost@moz-7aqlkf.sk83.bjud.7e00.2a01.IP) has joined
Mar 31 18:44:56 *	jdm (jdm@moz-4vu.06r.98.75.IP) has joined
Mar 31 18:44:56 *	ChanServ gives channel operator status to jdm
Mar 31 18:44:56 *	ChanServ gives channel operator status to jdm
Mar 31 18:45:03 *	bholley is now known as bholley_away
Mar 31 18:45:13 *	shellac has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 18:45:17 *	tekacs (tekacs@moz-q64vt8.com) has joined
Mar 31 18:45:18 <dmilith>	talchas: exactly as I thought, thanks.
Mar 31 18:45:18 <dmilith>	talchas: exactly as I thought, thanks.
Mar 31 18:45:42 *	lizardo has quit (Ping timeout: 121 seconds)
Mar 31 18:46:02 *	gpoesia (poesia@moz-q61.9o0.201.199.IP) has joined
Mar 31 18:46:08 *	tatref has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 18:46:59 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 18:47:45 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 18:47:45 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 18:47:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 31 18:48:01 *	brianloveswords has quit (Ping timeout: 121 seconds)
Mar 31 18:48:06 *	fabiand has quit (Quit: Verlassend)
Mar 31 18:48:29 *	tatref (tatref@moz-jf3mp7.abo.wanadoo.fr) has joined
Mar 31 18:48:29 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 31 18:49:03 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 31 18:49:49 *	Altazimuth has quit (Ping timeout: 121 seconds)
Mar 31 18:50:26 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 31 18:51:17 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 18:51:32 *	anastiel has quit (Quit: Leaving)
Mar 31 18:51:45 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 31 18:51:46 *	futile (felix@moz-moii3b.netcologne.de) has joined
Mar 31 18:52:31 *	Cir0X (Adium@moz-clo.vsn.162.178.IP) has joined
Mar 31 18:52:38 *	anastiel has quit (Quit: Leaving)
Mar 31 18:53:35 *	tatref has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 18:53:38 <Cir0X>	Hey! Is anyone pencil and does know how I obtain the raw request body from a put/post request as a string?
Mar 31 18:53:38 <Cir0X>	Hey! Is anyone pencil and does know how I obtain the raw request body from a put/post request as a string?
Mar 31 18:53:41 *	iiddnn_ has quit (Client exited)
Mar 31 18:53:56 *	danielwzd (danielwzd@moz-o1fflu.2rsv.salp.0306.2602.IP) has joined
Mar 31 18:54:09 <Cir0X>	*using
Mar 31 18:54:09 <Cir0X>	*using
Mar 31 18:54:26 <steveklabnik>	i have been meaning to play with pencil
Mar 31 18:54:26 <steveklabnik>	i have been meaning to play with pencil
Mar 31 18:54:58 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 18:55:04 *	Ossi (Mibbit@moz-bf44pc.fios.verizon.net) has joined
Mar 31 18:56:14 *	tycoon177 has quit (Connection closed)
Mar 31 18:56:29 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 31 18:57:35 <Ossi>	If you have a private type, it can be accessed freely by child modules and child modules can manipulate the internals of the private type. However, child modules cannot take or return private types, even if the module itself is private and cannot be seen outside of the module with the private type. Why is this?
Mar 31 18:57:35 <Ossi>	If you have a private type, it can be accessed freely by child modules and child modules can manipulate the internals of the private type. However, child modules cannot take or return private types, even if the module itself is private and cannot be seen outside of the module with the private type. Why is this?
Mar 31 18:57:35 *	kcking has quit (Client exited)
Mar 31 18:57:37 <Ossi>	http://is.gd/lpe6xS
Mar 31 18:57:37 <Ossi>	http://is.gd/lpe6xS
Mar 31 18:57:45 *	shellac (textual@moz-dt7eki.cable.virginm.net) has joined
Mar 31 18:58:08 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 31 18:58:13 <Ossi>	functions exposed by the module, I mean
Mar 31 18:58:13 <Ossi>	functions exposed by the module, I mean
Mar 31 18:58:25 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 31 18:58:25 *	dagnir (dagnir@moz-931.jjv.122.166.IP) has joined
Mar 31 18:58:30 *	ahal has quit (A TLS packet with unexpected length was received.)
Mar 31 18:58:31 *	p32blo has quit (Quit: Leaving.)
Mar 31 18:58:32 *	p32blo1 (p32blo@moz-hbr.kl8.214.88.IP) has joined
Mar 31 18:58:51 *	renderful (renderful@moz-atg40s.co.comcast.net) has joined
Mar 31 18:59:02 *	monti (happy@moz-aidh09.broadband.corbina.ru) has left
Mar 31 18:59:36 <durka42>	Ossi: because then the caller can't name the type
Mar 31 18:59:36 <durka42>	Ossi: because then the caller can't name the type
Mar 31 18:59:46 *	nonsensickle (nonsensickl@moz-4v0.gkd.16.182.IP) has joined
Mar 31 18:59:56 <Ossi>	what do you mean?
Mar 31 18:59:56 <Ossi>	what do you mean?
Mar 31 19:00:05 <durka42>	oh I see, it's a private type from the parent module
Mar 31 19:00:05 <durka42>	oh I see, it's a private type from the parent module
Mar 31 19:00:16 <durka42>	yeah seems like an unnecessary restriction
Mar 31 19:00:16 <durka42>	yeah seems like an unnecessary restriction
Mar 31 19:00:56 *	brianloveswords (brianlovesw@moz-f90v4k.fios.verizon.net) has joined
Mar 31 19:01:11 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 19:01:20 <Ossi>	would this be a bug in the compiler, or is it intentional behavior?
Mar 31 19:01:20 <Ossi>	would this be a bug in the compiler, or is it intentional behavior?
Mar 31 19:01:27 *	areski has quit (Ping timeout: 121 seconds)
Mar 31 19:01:29 *	SneakySnake has quit (Quit: Leaving)
Mar 31 19:01:40 *	Diggsey (uid120933@moz-ob9ou8.brockwell.irccloud.com) has joined
Mar 31 19:01:45 <durka42>	not sure
Mar 31 19:01:45 <durka42>	not sure
Mar 31 19:01:55 <Ossi>	hmm
Mar 31 19:01:55 <Ossi>	hmm
Mar 31 19:02:11 <Ossi>	I guess #rust-lang would be a good place to ask
Mar 31 19:02:11 <Ossi>	I guess #rust-lang would be a good place to ask
Mar 31 19:03:39 *	jfo has quit (Connection closed)
Mar 31 19:03:46 *	bholley_away is now known as bholley
Mar 31 19:04:03 *	hokkos_ has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 19:04:12 *	FreeBird_ has quit (Ping timeout: 121 seconds)
Mar 31 19:04:22 *	Haggus has quit (Quit: Leaving)
Mar 31 19:04:48 *	orks_ (orks@moz-26j.8sr.85.93.IP) has joined
Mar 31 19:05:14 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 19:05:50 *	bjz_ has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:06:16 *	orks has quit (Ping timeout: 121 seconds)
Mar 31 19:06:16 *	areski (areski@moz-p0vuav.user.ono.com) has joined
Mar 31 19:06:22 *	klue has quit (Ping timeout: 121 seconds)
Mar 31 19:06:47 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 31 19:07:41 *	Malnormalulo (Malnormalul@moz-83aus5.cable.rcn.com) has joined
Mar 31 19:07:55 *	frankmcsherry has quit (Quit: Leaving...)
Mar 31 19:08:27 *	badon has quit (Ping timeout: 121 seconds)
Mar 31 19:08:46 *	anjumkaiser has quit (Ping timeout: 121 seconds)
Mar 31 19:09:57 *	FrozenCow has quit (Connection closed)
Mar 31 19:10:04 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 19:10:22 *	brianloveswords has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:10:41 *	icey has quit (Quit: No Ping reply in 180 seconds.)
Mar 31 19:11:04 *	badon_ is now known as badon
Mar 31 19:11:34 *	jun has quit (Connection closed)
Mar 31 19:12:21 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 19:12:48 *	niconii (nicole@moz-ge9dfs.jhek.me72.48f8.2001.IP) has joined
Mar 31 19:12:48 *	ChanServ sets mode +a on #rust niconii
Mar 31 19:12:48 *	ChanServ gives channel operator status to niconii
Mar 31 19:12:48 *	ChanServ sets mode +a on #rust niconii
Mar 31 19:12:48 *	ChanServ gives channel operator status to niconii
Mar 31 19:12:59 *	icey (Chris@moz-0c4kab.fios.verizon.net) has joined
Mar 31 19:13:04 *	JagaJaga has quit (Ping timeout: 121 seconds)
Mar 31 19:13:34 *	gleb has quit (Ping timeout: 121 seconds)
Mar 31 19:15:01 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 19:16:05 *	areski has quit (Ping timeout: 121 seconds)
Mar 31 19:16:52 *	brendan (brendaneich@moz-v6u.63c.233.50.IP) has joined
Mar 31 19:16:53 *	leonardo2 (chatzilla@moz-ffcsvf.retail.telecomitalia.it) has joined
Mar 31 19:18:07 <leonardo2>	Hello. I've read this document that lists some of the differences between Haskell and Purescript: https://github.com/purescript/purescript/wiki/Differences-from-Haskell  
Mar 31 19:18:07 <leonardo2>	Hello. I've read this document that lists some of the differences between Haskell and Purescript: https://github.com/purescript/purescript/wiki/Differences-from-Haskell  
Mar 31 19:18:11 <leonardo2>	One of the diffrences is: >There is no implicit Prelude import in PureScript, the Prelude module is just like any other. Also, no libraries are distributed with the compiler at all. The generally accepted "standard" Prelude is the purescript-prelude library.<
Mar 31 19:18:11 <leonardo2>	One of the diffrences is: >There is no implicit Prelude import in PureScript, the Prelude module is just like any other. Also, no libraries are distributed with the compiler at all. The generally accepted "standard" Prelude is the purescript-prelude library.<
Mar 31 19:18:29 *	Darfeel (Thunderbird@moz-c4sq6v.pa.comcast.net) has joined
Mar 31 19:18:36 <leonardo2>	Do you know why Rust didn't make the same choice or requiring an explicit prelude import?
Mar 31 19:18:36 <leonardo2>	Do you know why Rust didn't make the same choice or requiring an explicit prelude import?
Mar 31 19:19:05 <phaazon>	src/main.rs:65:3: 69:6 note: reference must be valid for the destruction scope surrounding statement at 65:2...
Mar 31 19:19:05 <phaazon>	src/main.rs:65:3: 69:6 note: reference must be valid for the destruction scope surrounding statement at 65:2...
Mar 31 19:19:08 <phaazon>	daaah
Mar 31 19:19:08 <phaazon>	daaah
Mar 31 19:19:10 <phaazon>	what does that mean?
Mar 31 19:19:10 <phaazon>	what does that mean?
Mar 31 19:19:22 <phaazon>	I cannot create an object directly as argument to a function, I guess?
Mar 31 19:19:22 <phaazon>	I cannot create an object directly as argument to a function, I guess?
Mar 31 19:19:26 <steveklabnik>	leonardo2: i'm not sure that we ever considered an explicit prelude import. if so, it was a very long time ago
Mar 31 19:19:26 <steveklabnik>	leonardo2: i'm not sure that we ever considered an explicit prelude import. if so, it was a very long time ago
Mar 31 19:19:30 Mar 31 19:19:30 <phaazon>	I might have fucked up something with lifetimes then
<phaazon>	I might have fucked up something with lifetimes then
Mar 31 19:19:35 *	tim_____ (tim_____@moz-hb4phd.dip0.t-ipconnect.de) has joined
Mar 31 19:19:40 <niconii>	phaazon: very difficult to say without context
Mar 31 19:19:40 <niconii>	phaazon: very difficult to say without context
Mar 31 19:19:45 *	doxavore (doxavore@moz-et0bev.fios.verizon.net) has joined
Mar 31 19:19:47 *	doxavore has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 19:19:50 <phaazon>	well
Mar 31 19:19:50 <phaazon>	well
Mar 31 19:19:54 <steveklabnik>	leonardo2: we did talk about the prelude before 1.0, but i can't quite remember if 'no prelude at all' was suggested or not
Mar 31 19:19:54 <steveklabnik>	leonardo2: we did talk about the prelude before 1.0, but i can't quite remember if 'no prelude at all' was suggested or not
Mar 31 19:20:19 <leonardo2>	An explicit prelude import has the disadvantage of requiring one extra import line in almost every module
Mar 31 19:20:19 <leonardo2>	An explicit prelude import has the disadvantage of requiring one extra import line in almost every module
Mar 31 19:20:27 *	Eisfreak7 has quit (Quit: WeeChat 1.4)
Mar 31 19:20:51 <leonardo2>	The advantage, that I think has pushes that decision in TypeScript, is that once a Prelude gets obsolete, you just import Prelude2 :-)
Mar 31 19:20:51 <leonardo2>	The advantage, that I think has pushes that decision in TypeScript, is that once a Prelude gets obsolete, you just import Prelude2 :-)
Mar 31 19:21:01 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 19:21:09 <niconii>	phaazon: that is, a code sample and the full error would be helpful to see what exactly is going wrong
Mar 31 19:21:09 <niconii>	phaazon: that is, a code sample and the full error would be helpful to see what exactly is going wrong
Mar 31 19:21:17 *	mgottschlag has quit (Ping timeout: 121 seconds)
Mar 31 19:21:17 *	garndt is now known as garndt|pto
Mar 31 19:21:28 <leonardo2>	And indeed, askell has currently troubles with its obsolete Prelude
Mar 31 19:21:28 <leonardo2>	And indeed, askell has currently troubles with its obsolete Prelude
Mar 31 19:21:28 <phaazon>	niconii: https://gist.github.com/phaazon/36adea9dd48a7a87063df554111b8191
Mar 31 19:21:28 <phaazon>	niconii: https://gist.github.com/phaazon/36adea9dd48a7a87063df554111b8191
Mar 31 19:21:36 <phaazon>	code bellow
Mar 31 19:21:36 <phaazon>	code bellow
Mar 31 19:21:49 *	mou (donwilliam@moz-82l.vs1.228.188.IP) has joined
Mar 31 19:21:55 *	nagisa_ has quit (Ping timeout: 121 seconds)
Mar 31 19:21:56 <leonardo2>	Thank you for your answer Ssteve :-)
Mar 31 19:21:56 <leonardo2>	Thank you for your answer Ssteve :-)
Mar 31 19:22:15 *	ptc (textual@moz-qjn.9ii.88.38.IP) has joined
Mar 31 19:22:39 <leonardo2>	(I also like the Effects system of Typescript, but it probably overekill for Rust)
Mar 31 19:22:39 <leonardo2>	(I also like the Effects system of Typescript, but it probably overekill for Rust)
Mar 31 19:22:46 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 19:22:47 <leonardo2>	See you later...
Mar 31 19:22:47 <leonardo2>	See you later...
Mar 31 19:22:56 *	leonardo2 has quit (Quit: ChatZilla 0.9.92 [Firefox 45.0.1/20160315153207])
Mar 31 19:22:57 *	ptc_ has quit (Ping timeout: 121 seconds)
Mar 31 19:23:03 *	tomprogrammer has quit (Quit: WeeChat 1.4)
Mar 31 19:23:24 *	monti (happy@moz-aidh09.broadband.corbina.ru) has joined
Mar 31 19:23:32 *	Guest16 has quit (Ping timeout: 121 seconds)
Mar 31 19:23:43 *	tatref (tatref@moz-jf3mp7.abo.wanadoo.fr) has joined
Mar 31 19:23:56 *	ptc_ (textual@moz-qh92n8.compute-1.amazonaws.com) has joined
Mar 31 19:24:13 <niconii>	phaazon: yeah, the problem is probably just you creating &[...]s on the fly as parameters; if you did something like `let render_cmds = &[RenderCommand...];` and so on, i think it'd work
Mar 31 19:24:13 <niconii>	phaazon: yeah, the problem is probably just you creating &[...]s on the fly as parameters; if you did something like `let render_cmds = &[RenderCommand...];` and so on, i think it'd work
Mar 31 19:24:28 *	adium (textual@moz-fso.cqh.210.134.IP) has joined
Mar 31 19:24:34 <tromey>	I got the rust parser in gdb working enough to do "ptype 1 as f64"
Mar 31 19:24:34 <tromey>	I got the rust parser in gdb working enough to do "ptype 1 as f64"
Mar 31 19:24:40 <niconii>	or rather, `let render_cmds = [RenderCommand...];`
Mar 31 19:24:40 <niconii>	or rather, `let render_cmds = [RenderCommand...];`
Mar 31 19:24:54 <niconii>	hang on
Mar 31 19:24:54 <niconii>	hang on
Mar 31 19:25:32 *	pittaman (chatzilla@moz-usejlb.access.telenet.be) has joined
Mar 31 19:25:37 <talchas>	phaazon: what's the type of run_frame_command?
Mar 31 19:25:37 <talchas>	phaazon: what's the type of run_frame_command?
Mar 31 19:25:48 *	asuk (asuk@moz-m57.vbf.29.94.IP) has joined
Mar 31 19:26:17 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 19:26:33 <niconii>	so, something like this might work? http://is.gd/jLTlVF
Mar 31 19:26:33 <niconii>	so, something like this might work? http://is.gd/jLTlVF
Mar 31 19:26:56 *	bjz (bjz@moz-4albka.optusnet.com.au) has joined
Mar 31 19:27:04 *	pczarn has quit (Ping timeout: 121 seconds)
Mar 31 19:27:09 <tromey>	though, hilariously, "+" doesn't seem to work yet
Mar 31 19:27:09 <tromey>	though, hilariously, "+" doesn't seem to work yet
Mar 31 19:27:11 <tromey>	hmmm
Mar 31 19:27:11 <tromey>	hmmm
Mar 31 19:27:39 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 19:27:41 *	drew has quit (Ping timeout: 121 seconds)
Mar 31 19:29:58 *	toby_s has quit (Ping timeout: 121 seconds)
Mar 31 19:30:15 *	cruor99 has quit (Ping timeout: 121 seconds)
Mar 31 19:30:33 *	toby_s (toby_s@moz-bp5qol.sk83.bjud.7e00.2a01.IP) has joined
Mar 31 19:30:40 <talchas>	phaazon: niconii shorter repro I suspect is the issue http://is.gd/BufkgB
Mar 31 19:30:40 <talchas>	phaazon: niconii shorter repro I suspect is the issue http://is.gd/BufkgB
Mar 31 19:30:43 *	jgallagher (john@moz-72l538.ga.comcast.net) has joined
Mar 31 19:31:06 *	nagisa_ (nagisa@moz-8t068g.static.zebra.lt) has joined
Mar 31 19:31:09 <talchas>	ie, I suspect Fn() + 'a is invariant in 'a while everything else relies on being covariant in 'a
Mar 31 19:31:09 <talchas>	ie, I suspect Fn() + 'a is invariant in 'a while everything else relies on being covariant in 'a
Mar 31 19:31:28 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:31:36 <tjpeden>	When is 1.8 supposed to be released?
Mar 31 19:31:36 <tjpeden>	When is 1.8 supposed to be released?
Mar 31 19:31:39 *	bjz (bjz@moz-4albka.optusnet.com.au) has joined
Mar 31 19:31:42 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 19:31:53 <kmc>	6 weeks after 1.7
Mar 31 19:31:53 <kmc>	6 weeks after 1.7
Mar 31 19:32:00 <sfackler>	tjpeden: 2 weeks from now I believe
Mar 31 19:32:00 <sfackler>	tjpeden: 2 weeks from now I believe
Mar 31 19:32:17 <kmc>	april 14?
Mar 31 19:32:17 <kmc>	april 14?
Mar 31 19:32:32 <steveklabnik>	yes, the 14th
Mar 31 19:32:32 <steveklabnik>	yes, the 14th
Mar 31 19:32:32 <tjpeden>	Cool thanks!
Mar 31 19:32:32 <tjpeden>	Cool thanks!
Mar 31 19:33:03 <curtism>	The scheduled release date is listed under beta on https://www.rust-lang.org/downloads.html
Mar 31 19:33:03 <curtism>	The scheduled release date is listed under beta on https://www.rust-lang.org/downloads.html
Mar 31 19:33:15 <Yaniel>	anything ubercool to keep an eye on?
Mar 31 19:33:15 <Yaniel>	anything ubercool to keep an eye on?
Mar 31 19:33:36 <niconii>	talchas: ah
Mar 31 19:33:36 <niconii>	talchas: ah
Mar 31 19:33:39 <curtism>	Yaniel: Me.
Mar 31 19:33:39 <curtism>	Yaniel: Me.
Mar 31 19:33:54 <talchas>	phaazon: I think it will work if you have a different lifetime for all the Fn() +s, but I'm not 100% sure
Mar 31 19:33:54 <talchas>	phaazon: I think it will work if you have a different lifetime for all the Fn() +s, but I'm not 100% sure
Mar 31 19:34:11 <Yaniel>	curtism is now an upcoming Rust feature?
Mar 31 19:34:11 <Yaniel>	curtism is now an upcoming Rust feature?
Mar 31 19:34:15 <phaazon>	talchas: what do you mean?
Mar 31 19:34:15 <phaazon>	talchas: what do you mean?
Mar 31 19:34:21 <curtism>	Yaniel: Yeah
Mar 31 19:34:21 <curtism>	Yaniel: Yeah
Mar 31 19:34:26 <Yaniel>	that's... an unexpected development
Mar 31 19:34:26 <Yaniel>	that's... an unexpected development
Mar 31 19:34:41 <steveklabnik>	i know there's something cool...... hhmmmmm
Mar 31 19:34:41 <steveklabnik>	i know there's something cool...... hhmmmmm
Mar 31 19:34:45 <steveklabnik>	i can't remember
Mar 31 19:34:45 <steveklabnik>	i can't remember
Mar 31 19:34:47 <steveklabnik>	what it was
Mar 31 19:34:47 <steveklabnik>	what it was
Mar 31 19:34:51 <curtism>	You can #![feature(curtism)] on nightly right now!
Mar 31 19:34:51 <curtism>	You can #![feature(curtism)] on nightly right now!
Mar 31 19:35:03 <kmc>	? syntax?
Mar 31 19:35:03 <kmc>	? syntax?
Mar 31 19:35:06 <kmc>	or will that be in the next beta only
Mar 31 19:35:06 <kmc>	or will that be in the next beta only
Mar 31 19:35:07 <steveklabnik>	kmc: not in stable
Mar 31 19:35:07 <steveklabnik>	kmc: not in stable
Mar 31 19:35:17 <steveklabnik>	it's still unstable, nightly-only
Mar 31 19:35:17 <steveklabnik>	it's still unstable, nightly-only
Mar 31 19:35:18 <Yaniel>	incremental compilation?
Mar 31 19:35:18 <Yaniel>	incremental compilation?
Mar 31 19:35:23 <steveklabnik>	not done yet
Mar 31 19:35:23 <steveklabnik>	not done yet
Mar 31 19:35:26 <steveklabnik>	still being worked on
Mar 31 19:35:26 <steveklabnik>	still being worked on
Mar 31 19:35:51 <talchas>	phaazon: if you write RenderCommand<'a, 'b, C> with &'a Tesselation, Box<Fn() + 'b>, and ShadingCommand<'a, 'b, C> with Box<Fn() + 'b>, &'a [RenderCommand<'a, 'b, C>]
Mar 31 19:35:51 <talchas>	phaazon: if you write RenderCommand<'a, 'b, C> with &'a Tesselation, Box<Fn() + 'b>, and ShadingCommand<'a, 'b, C> with Box<Fn() + 'b>, &'a [RenderCommand<'a, 'b, C>]
Mar 31 19:35:52 <phaazon>	yeah 
Mar 31 19:35:52 <phaazon>	yeah 
Mar 31 19:35:54 <phaazon>	that’s what I have
Mar 31 19:35:54 <phaazon>	that’s what I have
Mar 31 19:35:59 Mar 31 19:35:59 <phaazon>	Box<Fn() + 'a>
<phaazon>	Box<Fn() + 'a>
Mar 31 19:36:02 <phaazon>	so I should use 'b?
Mar 31 19:36:02 <phaazon>	so I should use 'b?
Mar 31 19:36:06 <phaazon>	and tag foo with 'b?
Mar 31 19:36:06 <phaazon>	and tag foo with 'b?
Mar 31 19:36:29 <phaazon>	talchas: ah
Mar 31 19:36:29 <phaazon>	talchas: ah
Mar 31 19:36:36 <phaazon>	so I give it two lifetimes
Mar 31 19:36:36 <phaazon>	so I give it two lifetimes
Mar 31 19:36:41 <phaazon>	but hm
Mar 31 19:36:41 <phaazon>	but hm
Mar 31 19:36:47 *	meh has quit (Ping timeout: 121 seconds)
Mar 31 19:36:51 <phaazon>	I’m using the lifetime only for the closures, actually
Mar 31 19:36:51 <phaazon>	I’m using the lifetime only for the closures, actually
Mar 31 19:37:23 <phaazon>	ah, yeah, the references
Mar 31 19:37:23 <phaazon>	ah, yeah, the references
Mar 31 19:37:24 <talchas>	no, you're using it for a bunch of other things too
Mar 31 19:37:24 <talchas>	no, you're using it for a bunch of other things too
Mar 31 19:37:26 <phaazon>	to Tessellation
Mar 31 19:37:26 <phaazon>	to Tessellation
Mar 31 19:37:27 <phaazon>	yeah
Mar 31 19:37:27 <phaazon>	yeah
Mar 31 19:37:32 <phaazon>	so those are disjoint?
Mar 31 19:37:32 <phaazon>	so those are disjoint?
Mar 31 19:37:34 *	EsBe (EsBe@moz-j68r7f.res.rr.com) has joined
Mar 31 19:37:39 <phaazon>	I need two lifetimes?
Mar 31 19:37:39 <phaazon>	I need two lifetimes?
Mar 31 19:37:42 <phaazon>	hm
Mar 31 19:37:42 <phaazon>	hm
Mar 31 19:37:43 <phaazon>	I guess I do
Mar 31 19:37:43 <phaazon>	I guess I do
Mar 31 19:37:47 <talchas>	you can also possibly use &'a Fn() throughout
Mar 31 19:37:47 <talchas>	you can also possibly use &'a Fn() throughout
Mar 31 19:37:51 <talchas>	which I think will also fix it
Mar 31 19:37:51 <talchas>	which I think will also fix it
Mar 31 19:38:00 <phaazon>	talchas: dynamic dispatch?
Mar 31 19:38:00 <phaazon>	talchas: dynamic dispatch?
Mar 31 19:38:08 <phaazon>	I don’t really want that
Mar 31 19:38:08 <phaazon>	I don’t really want that
Mar 31 19:38:14 <talchas>	so is Box<Fn() + 'a>
Mar 31 19:38:14 <talchas>	so is Box<Fn() + 'a>
Mar 31 19:38:37 <phaazon>	gosh
Mar 31 19:38:37 <phaazon>	gosh
Mar 31 19:38:53 <phaazon>	I’ll never get the difference between &'a Fn() and Box<Fn() + 'a> :(
Mar 31 19:38:53 <phaazon>	I’ll never get the difference between &'a Fn() and Box<Fn() + 'a> :(
Mar 31 19:39:03 <phaazon>	even though I know what Box is
Mar 31 19:39:03 <phaazon>	even though I know what Box is
Mar 31 19:39:25 <niconii>	&Trait, &mut Trait, and Box<Trait> are all trait objects/dynamic dispatch, so
Mar 31 19:39:25 <niconii>	&Trait, &mut Trait, and Box<Trait> are all trait objects/dynamic dispatch, so
Mar 31 19:39:27 *	dhole has quit (Ping timeout: 121 seconds)
Mar 31 19:39:33 *	cbrewste_ has quit (Connection closed)
Mar 31 19:39:42 <talchas>	the difference is the same as between &'a &'a i32 and Box<&'a i32>
Mar 31 19:39:42 <talchas>	the difference is the same as between &'a &'a i32 and Box<&'a i32>
Mar 31 19:39:53 <talchas>	(only without both of them being completely silly)
Mar 31 19:39:53 <talchas>	(only without both of them being completely silly)
Mar 31 19:40:10 <phaazon>	hm
Mar 31 19:40:10 <phaazon>	hm
Mar 31 19:40:12 <phaazon>	I guess that…
Mar 31 19:40:12 <phaazon>	I guess that…
Mar 31 19:40:16 <phaazon>	that Box takes ownership
Mar 31 19:40:16 <phaazon>	that Box takes ownership
Mar 31 19:40:18 *	pittaman_ (chatzilla@moz-1n8ouj.access.telenet.be) has joined
Mar 31 19:40:20 <phaazon>	while &'a doesn’t
Mar 31 19:40:20 <phaazon>	while &'a doesn’t
Mar 31 19:40:31 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 19:40:38 <talchas>	yeah, and the +'a means "... and what I take ownership of might still be a reference"
Mar 31 19:40:38 <talchas>	yeah, and the +'a means "... and what I take ownership of might still be a reference"
Mar 31 19:41:31 <talchas>	the issue is that with +'a you can't say "and I promise it's not &'a mut &'a mut i32", while with &'a Fn(), the compiler knows it must be immutable anyways
Mar 31 19:41:31 <talchas>	the issue is that with +'a you can't say "and I promise it's not &'a mut &'a mut i32", while with &'a Fn(), the compiler knows it must be immutable anyways
Mar 31 19:41:44 <phaazon>	I see
Mar 31 19:41:44 <phaazon>	I see
Mar 31 19:41:44 *	futile has quit (Quit: WeeChat 1.4)
Mar 31 19:41:44 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 19:41:46 <phaazon>	interesting
Mar 31 19:41:46 <phaazon>	interesting
Mar 31 19:41:50 <phaazon>	I’ll use that then!
Mar 31 19:41:50 <phaazon>	I’ll use that then!
Mar 31 19:41:51 <phaazon>	thank you
Mar 31 19:41:51 <phaazon>	thank you
Mar 31 19:41:54 <phaazon>	and anyway
Mar 31 19:41:54 <phaazon>	and anyway
Mar 31 19:42:11 <talchas>	now, given that it is Fn() in /particular/, it must essentially be ok, the compiler just doesn't know this
Mar 31 19:42:11 <talchas>	now, given that it is Fn() in /particular/, it must essentially be ok, the compiler just doesn't know this
Mar 31 19:42:12 *	Salvakiya has quit (Quit: Leaving)
Mar 31 19:42:13 <phaazon>	I certainely do not want to take ownership of that lambda
Mar 31 19:42:13 <phaazon>	I certainely do not want to take ownership of that lambda
Mar 31 19:42:16 *	pittaman has quit (Ping timeout: 121 seconds)
Mar 31 19:42:20 *	pittaman_ is now known as pittaman
Mar 31 19:42:53 *	grobinson (grobinson@moz-t0k.die.233.50.IP) has joined
Mar 31 19:42:54 <phaazon>	since the lambda just have to live for the calltime of foo
Mar 31 19:42:54 <phaazon>	since the lambda just have to live for the calltime of foo
Mar 31 19:42:55 <talchas>	well, it's probably ok to take ownership of it, there's just no way write down the necessary type for rust
Mar 31 19:42:55 <talchas>	well, it's probably ok to take ownership of it, there's just no way write down the necessary type for rust
Mar 31 19:42:56 <phaazon>	not for its caller
Mar 31 19:42:56 <phaazon>	not for its caller
Mar 31 19:42:59 *	irrequietus has quit (Quit: )
Mar 31 19:43:03 <talchas>	but it's overkill, yeah
Mar 31 19:43:03 <talchas>	but it's overkill, yeah
Mar 31 19:43:09 *	shellac has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 19:43:18 <phaazon>	talchas: well I guess with a reference, we can
Mar 31 19:43:18 <phaazon>	talchas: well I guess with a reference, we can
Mar 31 19:43:53 *	cbrewste_ (cbrewster@moz-1cj.fsb.158.65.IP) has joined
Mar 31 19:43:56 *	ubsan (ubsan@moz-q320ns.15j7.k86n.fb90.2607.IP) has joined
Mar 31 19:43:59 <talchas>	anyways, to use &Fn(), the annoyance is that you'll need to change all the constructor functions to take &Fn(), and you'll have to call them with stuff like RenderCommand::new(..., &|| {do stuff}, ...)
Mar 31 19:43:59 <talchas>	anyways, to use &Fn(), the annoyance is that you'll need to change all the constructor functions to take &Fn(), and you'll have to call them with stuff like RenderCommand::new(..., &|| {do stuff}, ...)
Mar 31 19:44:36 *	jschievink has quit (Ping timeout: 121 seconds)
Mar 31 19:44:38 <phaazon>	talchas: already done
Mar 31 19:44:38 <phaazon>	talchas: already done
Mar 31 19:44:42 <phaazon>	I just take
Mar 31 19:44:42 <phaazon>	I just take
Mar 31 19:44:47 <phaazon>	<F: Fn() + 'a>
Mar 31 19:44:47 <phaazon>	<F: Fn() + 'a>
Mar 31 19:44:47 *	chris_99 has quit (Quit: Leaving)
Mar 31 19:44:51 <phaazon>	so that I can pass || {}
Mar 31 19:44:51 <phaazon>	so that I can pass || {}
Mar 31 19:45:24 <talchas>	yeah, I'm saying that I think that won't work, because you can't store that in &Fn() + 'a
Mar 31 19:45:24 <talchas>	yeah, I'm saying that I think that won't work, because you can't store that in &Fn() + 'a
Mar 31 19:45:41 *	alexherbo2 (alex@moz-c85.bha.255.109.IP) has joined
Mar 31 19:45:47 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 19:46:00 <talchas>	(because F has been moved into the constructor function's stack frame, and &f won't work anymore)
Mar 31 19:46:00 <talchas>	(because F has been moved into the constructor function's stack frame, and &f won't work anymore)
Mar 31 19:46:01 <phaazon>	ah
Mar 31 19:46:01 <phaazon>	ah
Mar 31 19:46:25 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 31 19:46:49 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:48:07 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 19:48:11 *	dhole (dhole@moz-b8tk6r.dynamic.jazztel.es) has joined
Mar 31 19:48:23 *	asuk has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:50:59 *	Azy8BsKXVko has quit (Ping timeout: 121 seconds)
Mar 31 19:51:14 *	jeffbradberry has quit (Ping timeout: 121 seconds)
Mar 31 19:51:17 *	p32blo1 has quit (Ping timeout: 121 seconds)
Mar 31 19:53:41 *	tim_____ has quit (Connection closed)
Mar 31 19:53:59 *	eazar001 has quit (Quit: WeeChat 1.4)
Mar 31 19:54:35 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 31 19:55:19 *	eibwen has quit (Ping timeout: 121 seconds)
Mar 31 19:55:19 *	NameNotFound is now known as zz_NameNotFound
Mar 31 19:59:58 *	asuk (asuk@moz-m57.vbf.29.94.IP) has joined
Mar 31 20:00:49 *	chain_chan has quit (A TLS packet with unexpected length was received.)
Mar 31 20:00:53 *	zz_NameNotFound is now known as NameNotFound
Mar 31 20:01:54 *	Cir0X has quit (Quit: Leaving.)
Mar 31 20:01:55 *	kerrang (kerrang@moz-v622nr.fios.verizon.net) has joined
Mar 31 20:02:06 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 20:02:19 *	tromey has quit (Quit: ERC (IRC client for Emacs 25.0.92.3))
Mar 31 20:02:22 *	m_khvoinitsky has quit (Ping timeout: 121 seconds)
Mar 31 20:02:55 *	blackgoat (blackgoat@moz-stj.iu0.157.221.IP) has joined
Mar 31 20:02:57 *	Dahrkael has quit (Ping timeout: 121 seconds)
Mar 31 20:03:28 *	oln has quit (Connection closed)
Mar 31 20:03:51 *	m_khvoinitsky (quassel@moz-c4esiv.mp2c.6dnu.04f8.2a01.IP) has joined
Mar 31 20:03:58 *	pcwalton (pcwalton@moz-l8ebtf.sfo1.mozilla.com) has joined
Mar 31 20:03:58 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 20:03:58 *	ChanServ gives channel operator status to pcwalton
Mar 31 20:03:58 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 20:03:58 *	ChanServ gives channel operator status to pcwalton
Mar 31 20:04:08 *	p32blo (p32blo@moz-hbr.kl8.214.88.IP) has joined
Mar 31 20:04:12 *	Matthias247 has quit (Connection closed)
Mar 31 20:05:41 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 31 20:06:09 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 20:07:01 *	drew (drew@moz-lb2ddr.vc.shawcable.net) has joined
Mar 31 20:07:23 *	woboats has quit (Client exited)
Mar 31 20:08:21 *	Kilobyte (stephan@moz-oeu20h.dip0.t-ipconnect.de) has joined
Mar 31 20:09:42 *	Cir0X (Adium@moz-aoha6e.netcologne.de) has joined
Mar 31 20:10:03 *	chris_99 (chris_99@moz-lel5jk.ir6t.2uic.04f8.2a01.IP) has joined
Mar 31 20:10:22 *	vadix has quit (Ping timeout: 121 seconds)
Mar 31 20:10:38 *	ParadoxSpiral_ has quit (Quit: cya)
Mar 31 20:10:59 *	qrlpx has quit (Ping timeout: 121 seconds)
Mar 31 20:12:08 <chris_99>	I'm just wondering if anyone could point me in the right direction to solve this - https://play.rust-lang.org/?gist=1e7f11ba83435c7ad7be9a59ecb6b4d7&version=stable (i thought i could try to solve the problem by cloning a closure, but it looks like you can't do that?)
Mar 31 20:12:08 <chris_99>	I'm just wondering if anyone could point me in the right direction to solve this - https://play.rust-lang.org/?gist=1e7f11ba83435c7ad7be9a59ecb6b4d7&version=stable (i thought i could try to solve the problem by cloning a closure, but it looks like you can't do that?)
Mar 31 20:12:13 *	orks (orks@moz-5ec.qck.85.93.IP) has joined
Mar 31 20:12:15 *	Cir0X1 (Adium@moz-clo.vsn.162.178.IP) has joined
Mar 31 20:13:37 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 31 20:13:40 <Ossi>	What's happening is that m() is moved into `a`, and then you try to move it into `b`
Mar 31 20:13:40 <Ossi>	What's happening is that m() is moved into `a`, and then you try to move it into `b`
Mar 31 20:13:44 *	Cir0X has quit (Ping timeout: 121 seconds)
Mar 31 20:13:44 *	aatch (james@moz-uhn.omt.54.210.IP) has joined
Mar 31 20:13:48 *	orks_ has quit (Ping timeout: 121 seconds)
Mar 31 20:13:58 *	tatref has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 20:14:33 <chris_99>	yeah, if that happens with normal variables, i seem to be able to solve it by cloning them, but this seems a bit different as it's a closure right?
Mar 31 20:14:33 <chris_99>	yeah, if that happens with normal variables, i seem to be able to solve it by cloning them, but this seems a bit different as it's a closure right?
Mar 31 20:15:03 <insaneinside>	chris_99: your example runs if we just remove the `move` keywords on `a` and `b`.  Your actual code is more complex, I take it?
Mar 31 20:15:03 <insaneinside>	chris_99: your example runs if we just remove the `move` keywords on `a` and `b`.  Your actual code is more complex, I take it?
Mar 31 20:15:29 *	spider-mario has quit (A TLS packet with unexpected length was received.)
Mar 31 20:15:34 *	gopar (gopar@moz-5d354a.r89q.rq9c.0642.2601.IP) has joined
Mar 31 20:15:46 <chris_99>	yeah it is, i'm pretty sure i need to use 'move' keywords alas 
Mar 31 20:15:46 <chris_99>	yeah it is, i'm pretty sure i need to use 'move' keywords alas 
Mar 31 20:15:59 *	qrlpx (smuxi@moz-10v6hr.dip0.t-ipconnect.de) has joined
Mar 31 20:16:06 *	ubsan has quit (Quit: <3)
Mar 31 20:16:13 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 20:16:45 *	durka42 has quit (Client exited)
Mar 31 20:16:51 *	ubsan__ (ubsan@moz-qa989l.15j7.k86n.fb90.2607.IP) has joined
Mar 31 20:17:18 *	klue has quit (Ping timeout: 121 seconds)
Mar 31 20:17:25 *	orks_ (orks@moz-msa.5mu.85.93.IP) has joined
Mar 31 20:17:27 *	selfup (selfup@moz-c82.450.145.63.IP) has joined
Mar 31 20:17:51 *	Cir0X1 has quit (Quit: Leaving.)
Mar 31 20:17:51 <selfup>	Hey everyone. Is there a way to have multiple structs talk to eachother at the same time?
Mar 31 20:17:51 <selfup>	Hey everyone. Is there a way to have multiple structs talk to eachother at the same time?
Mar 31 20:17:53 <insaneinside>	chris_99: the problem is that `move` moves *all* referenced variables, AFAIK; you'd need to make `m` a static method or something probably.
Mar 31 20:17:53 <insaneinside>	chris_99: the problem is that `move` moves *all* referenced variables, AFAIK; you'd need to make `m` a static method or something probably.
Mar 31 20:17:59 *	badon has quit (Connection closed)
Mar 31 20:18:11 *	latk has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 20:18:14 *	eckhardt has quit (Connection closed)
Mar 31 20:18:18 <mbrubeck>	chris_99: Depending on the context, maybe http://is.gd/ocE8jU
Mar 31 20:18:18 <mbrubeck>	chris_99: Depending on the context, maybe http://is.gd/ocE8jU
Mar 31 20:18:23 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 20:18:23 <Ossi>	If `m` **needs** to be a closure, you can put it in an arc and move it that way
Mar 31 20:18:23 <Ossi>	If `m` **needs** to be a closure, you can put it in an arc and move it that way
Mar 31 20:18:24 *	badon (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 31 20:18:24 <Ossi>	http://is.gd/8MyRwv
Mar 31 20:18:24 <Ossi>	http://is.gd/8MyRwv
Mar 31 20:18:28 <kimundi>	chris_99: if you want m in both closures you need to capture m in some shared way - either as a reference, implicitly without move keyword or explicitly by capturing &m, or by putting m into a shared ownership pointer like Rc or Arc so that both closures can own it together
Mar 31 20:18:28 <kimundi>	chris_99: if you want m in both closures you need to capture m in some shared way - either as a reference, implicitly without move keyword or explicitly by capturing &m, or by putting m into a shared ownership pointer like Rc or Arc so that both closures can own it together
Mar 31 20:19:01 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 20:19:08 *	NameNotFound is now known as zz_NameNotFound
Mar 31 20:19:09 <Ossi>	@selfup do you have an example of what you're trying to do?
Mar 31 20:19:09 <Ossi>	@selfup do you have an example of what you're trying to do?
Mar 31 20:19:26 *	ptc_ is now known as ptc
Mar 31 20:19:37 <selfup>	Ossi: Here is my data: universe.rejs.io/api/v1/data
Mar 31 20:19:37 <selfup>	Ossi: Here is my data: universe.rejs.io/api/v1/data
Mar 31 20:20:02 *	bkearns has quit (Quit: Leaving.)
Mar 31 20:20:05 <selfup>	Ossi: The idea, is that once I create the 3d space, I would like to have each struct continuously talk to eachother
Mar 31 20:20:05 <selfup>	Ossi: The idea, is that once I create the 3d space, I would like to have each struct continuously talk to eachother
Mar 31 20:20:19 *	orks has quit (Ping timeout: 121 seconds)
Mar 31 20:20:27 <Ossi>	I mean, could you construct a simplified example inside of https://play.rust-lang.org/
Mar 31 20:20:27 <Ossi>	I mean, could you construct a simplified example inside of https://play.rust-lang.org/
Mar 31 20:20:35 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 20:20:40 <Ossi>	I still don't get what you're trying to say
Mar 31 20:20:40 <Ossi>	I still don't get what you're trying to say
Mar 31 20:20:48 *	DemonOne (Avi@moz-73fo5i.cablep.bezeqint.net) has joined
Mar 31 20:21:03 *	peschkaj has quit (Quit: Leaving)
Mar 31 20:21:23 <selfup>	Yea I understand. SO I am creating a very simple "universe". Once created, I would like to have each atom talk to eachother and figure out if they need to move somewhere
Mar 31 20:21:23 <selfup>	Yea I understand. SO I am creating a very simple "universe". Once created, I would like to have each atom talk to eachother and figure out if they need to move somewhere
Mar 31 20:21:29 <insaneinside>	Ossi: it sounds like they're talking about something akin to the Actor Model.
Mar 31 20:21:29 <insaneinside>	Ossi: it sounds like they're talking about something akin to the Actor Model.
Mar 31 20:22:04 <selfup>	But I would like the functions to keep firing?
Mar 31 20:22:04 <selfup>	But I would like the functions to keep firing?
Mar 31 20:22:34 *	sankha (sankha@moz-g7l.b0d.106.27.IP) has joined
Mar 31 20:22:52 <Ossi>	does every atom have to talk to every other atom, every time?
Mar 31 20:22:52 <Ossi>	does every atom have to talk to every other atom, every time?
Mar 31 20:23:12 *	ubsan__ has quit (Ping timeout: 121 seconds)
Mar 31 20:23:12 <selfup>	Prefferably
Mar 31 20:23:12 <selfup>	Prefferably
Mar 31 20:23:24 <mbrubeck>	You could literally spawn a thread for each atom, and send messages over channels (maybe via a "router" thread that forwards each message to the correct recipient).  Whether this is a good idea depends on the number of threads and messages and what other stuff is happening...
Mar 31 20:23:24 <mbrubeck>	You could literally spawn a thread for each atom, and send messages over channels (maybe via a "router" thread that forwards each message to the correct recipient).  Whether this is a good idea depends on the number of threads and messages and what other stuff is happening...
Mar 31 20:23:28 <insaneinside>	selfup: that's an O(N^2) complexity problem -- won't scale very well
Mar 31 20:23:28 <insaneinside>	selfup: that's an O(N^2) complexity problem -- won't scale very well
Mar 31 20:23:41 *	dhole has quit (Ping timeout: 121 seconds)
Mar 31 20:24:06 <selfup>	insaneinside: I know, I knew that would be a problem eventually haha. I can do a very small universe though
Mar 31 20:24:06 <selfup>	insaneinside: I know, I knew that would be a problem eventually haha. I can do a very small universe though
Mar 31 20:24:16 <Ossi>	because I would iterate over every atom externally and manage it from outside instead of having each atom control it's communication
Mar 31 20:24:16 <Ossi>	because I would iterate over every atom externally and manage it from outside instead of having each atom control it's communication
Mar 31 20:24:29 <selfup>	Yea, I do that to dictate the charge
Mar 31 20:24:29 <selfup>	Yea, I do that to dictate the charge
Mar 31 20:24:37 <selfup>	here I will link my repo
Mar 31 20:24:37 <selfup>	here I will link my repo
Mar 31 20:24:44 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 31 20:25:09 <insaneinside>	you can reduce it to (N-1)*(N/2), but that's still N^2 using the naive interaction model.
Mar 31 20:25:09 <insaneinside>	you can reduce it to (N-1)*(N/2), but that's still N^2 using the naive interaction model.
Mar 31 20:25:16 <mbrubeck>	It might make more sense to have a single thread, and each "tick" of the universe it can loop through all the atoms and compute their influences on each other, and then (if necessary) apply changes all at once in a second phase.
Mar 31 20:25:16 <mbrubeck>	It might make more sense to have a single thread, and each "tick" of the universe it can loop through all the atoms and compute their influences on each other, and then (if necessary) apply changes all at once in a second phase.
Mar 31 20:25:21 <selfup>	I do that here: https://github.com/selfup/oxidizy_up/blob/master/src/universe/mod.rs#L81-L91
Mar 31 20:25:21 <selfup>	I do that here: https://github.com/selfup/oxidizy_up/blob/master/src/universe/mod.rs#L81-L91
Mar 31 20:25:38 <selfup>	Oh I like the tick idea
Mar 31 20:25:38 <selfup>	Oh I like the tick idea
Mar 31 20:25:40 <chris_99>	mbrubeck, i've just been trying to implement what was in your example, but i get : error: `loadrecipe` does not live long enough, where 'let loadrecipe = &loadrecipe', that let, was placed immediately below the closure like in your example
Mar 31 20:25:40 <chris_99>	mbrubeck, i've just been trying to implement what was in your example, but i get : error: `loadrecipe` does not live long enough, where 'let loadrecipe = &loadrecipe', that let, was placed immediately below the closure like in your example
Mar 31 20:25:44 <selfup>	time is technically a thing
Mar 31 20:25:44 <selfup>	time is technically a thing
Mar 31 20:26:04 *	eazar001 (ebrahim@moz-1fk3av.844f.vlo7.0306.2602.IP) has joined
Mar 31 20:26:27 *	zz_NameNotFound is now known as NameNotFound
Mar 31 20:26:28 <mbrubeck>	chris_99: If you need it to last beyond the scope of the function, then you'll need to use Rc or Arc instead of &
Mar 31 20:26:28 <mbrubeck>	chris_99: If you need it to last beyond the scope of the function, then you'll need to use Rc or Arc instead of &
Mar 31 20:26:34 <Ossi>	I've been experimenting with macros and type creation. Is the situation here a bug? http://is.gd/tg1VcX
Mar 31 20:26:34 <Ossi>	I've been experimenting with macros and type creation. Is the situation here a bug? http://is.gd/tg1VcX
Mar 31 20:26:37 *	sankha has quit (Ping timeout: 121 seconds)
Mar 31 20:26:47 *	jdm has quit (Quit: )
Mar 31 20:26:50 <mbrubeck>	chris_99: If you're doing this to send it to multiple threads, you might be able to avoid the Arc by using one of the "scoped" thread crates.
Mar 31 20:26:50 <mbrubeck>	chris_99: If you're doing this to send it to multiple threads, you might be able to avoid the Arc by using one of the "scoped" thread crates.
Mar 31 20:26:53 <mbrubeck>	like crossbeam
Mar 31 20:26:53 <mbrubeck>	like crossbeam
Mar 31 20:27:08 <selfup>	mbrubeck: thanks for that suggestion. Looks like I need to add more functionality prior to implementing the next phase
Mar 31 20:27:08 <selfup>	mbrubeck: thanks for that suggestion. Looks like I need to add more functionality prior to implementing the next phase
Mar 31 20:27:28 *	Aaronepower (Thunderbird@moz-sgf.dch.101.89.IP) has joined
Mar 31 20:28:11 *	gingermusketeer18 has quit (Connection closed)
Mar 31 20:28:18 <insaneinside>	selfup: the massively-parallel cosmological simulations that astrophysicists run on supercomputers use periodic boundary conditions + multipole expansions (the multipole expansions allow you to group together closely-spaced atoms when computing their effect on distant atoms)
Mar 31 20:28:18 <insaneinside>	selfup: the massively-parallel cosmological simulations that astrophysicists run on supercomputers use periodic boundary conditions + multipole expansions (the multipole expansions allow you to group together closely-spaced atoms when computing their effect on distant atoms)
Mar 31 20:28:19 *	gingermusketeer (gingermuske@moz-kuigpo.compute.amazonaws.com) has joined
Mar 31 20:28:23 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 20:28:36 *	kzan has quit (Quit: Leaving)
Mar 31 20:28:48 *	ubsan (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 20:28:59 *	joy has quit (Quit: Leaving.)
Mar 31 20:29:06 <selfup>	insaneinside: This is a good pattern. I like the sound of that!
Mar 31 20:29:06 <selfup>	insaneinside: This is a good pattern. I like the sound of that!
Mar 31 20:30:17 <insaneinside>	selfup: https://github.com/N-BodyShop/changa is something I did some work on for my undergraduate research credit.  The N-Body Shop is run by the University of Washington's Astronomy department.
Mar 31 20:30:17 <insaneinside>	selfup: https://github.com/N-BodyShop/changa is something I did some work on for my undergraduate research credit.  The N-Body Shop is run by the University of Washington's Astronomy department.
Mar 31 20:30:31 <Perceptes>	Hey all, trying to cross-compile a program on OS X for Linux. What do I need to have on my system for this to work? Here's the error I get with the command I tried: https://gist.github.com/jimmycuadra/27cbb56facf896a68df37959541e5df6
Mar 31 20:30:31 <Perceptes>	Hey all, trying to cross-compile a program on OS X for Linux. What do I need to have on my system for this to work? Here's the error I get with the command I tried: https://gist.github.com/jimmycuadra/27cbb56facf896a68df37959541e5df6
Mar 31 20:30:38 *	markstory (textual@moz-tb3ghu.cable.rogers.com) has joined
Mar 31 20:30:39 *	bholley has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 20:30:55 *	markstory has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 20:31:13 <selfup>	insaneinside: thanks for that link! I will check it out
Mar 31 20:31:13 <selfup>	insaneinside: thanks for that link! I will check it out
Mar 31 20:31:47 <selfup>	Is there an API for CUDA?
Mar 31 20:31:47 <selfup>	Is there an API for CUDA?
Mar 31 20:31:52 <selfup>	That would make a lot more sense
Mar 31 20:31:52 <selfup>	That would make a lot more sense
Mar 31 20:31:57 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 20:32:16 <selfup>	Either way this is awesome
Mar 31 20:32:16 <selfup>	Either way this is awesome
Mar 31 20:32:26 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 20:32:57 <Ossi>	https://github.com/arrayfire/arrayfire-rust there's this
Mar 31 20:32:57 <Ossi>	https://github.com/arrayfire/arrayfire-rust there's this
Mar 31 20:33:00 <Ossi>	no idea if that would work
Mar 31 20:33:00 <Ossi>	no idea if that would work
Mar 31 20:33:12 <insaneinside>	Ossi: just a guess, but I think it may have something to do with the missing semicolon after `new_enum!{Foo}`
Mar 31 20:33:12 <insaneinside>	Ossi: just a guess, but I think it may have something to do with the missing semicolon after `new_enum!{Foo}`
Mar 31 20:33:13 *	Quxxy (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 31 20:33:14 *	eazar001 has quit (Quit: WeeChat 1.4)
Mar 31 20:34:09 <Ossi>	insaneinside: Don't macros that use braces not require semicolons?
Mar 31 20:34:09 <Ossi>	insaneinside: Don't macros that use braces not require semicolons?
Mar 31 20:34:38 <insaneinside>	I don't recall ever reading that anywhere.
Mar 31 20:34:38 <insaneinside>	I don't recall ever reading that anywhere.
Mar 31 20:34:59 *	kmels (kmels@moz-mu2.4ss.64.186.IP) has joined
Mar 31 20:35:36 <chris_99>	mbrubeck, thanks a lot, using the Arc fixed the issue :)
Mar 31 20:35:36 <chris_99>	mbrubeck, thanks a lot, using the Arc fixed the issue :)
Mar 31 20:35:37 <Ossi>	https://doc.rust-lang.org/book/macros.html#syntactic-requirements here brace macros are listed without semicolons, which would seem to imply that they work without them
Mar 31 20:35:37 <Ossi>	https://doc.rust-lang.org/book/macros.html#syntactic-requirements here brace macros are listed without semicolons, which would seem to imply that they work without them
Mar 31 20:35:59 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 20:36:12 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 20:36:20 <insaneinside>	hrm, true
Mar 31 20:36:20 <insaneinside>	hrm, true
Mar 31 20:36:23 *	asuk has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 20:36:41 <Ossi>	adding a semicolon *does* fix it
Mar 31 20:36:41 <Ossi>	adding a semicolon *does* fix it
Mar 31 20:36:49 <insaneinside>	steveklabnik: ^^
Mar 31 20:36:49 <insaneinside>	steveklabnik: ^^
Mar 31 20:36:59 <insaneinside>	steveklabnik: are the docs wrong?
Mar 31 20:36:59 <insaneinside>	steveklabnik: are the docs wrong?
Mar 31 20:37:07 <steveklabnik>	hmmm
Mar 31 20:37:07 <steveklabnik>	hmmm
Mar 31 20:37:10 <steveklabnik>	i am terrible with macros
Mar 31 20:37:10 <steveklabnik>	i am terrible with macros
Mar 31 20:37:17 <steveklabnik>	that guide was contributed by kmc long ago
Mar 31 20:37:17 <steveklabnik>	that guide was contributed by kmc long ago
Mar 31 20:37:21 <steveklabnik>	i guess it's possible?
Mar 31 20:37:21 <steveklabnik>	i guess it's possible?
Mar 31 20:37:51 <Ossi>	the thing is, they work without semicolons in other cases
Mar 31 20:37:52 <Ossi>	the thing is, they work without semicolons in other cases
Mar 31 20:38:19 <Ossi>	http://is.gd/5sPJZO this works
Mar 31 20:38:19 <Ossi>	http://is.gd/5sPJZO this works
Mar 31 20:39:59 *	jun (jun@moz-pq025m.voms.o72t.41d0.2001.IP) has joined
Mar 31 20:40:36 <Xion>	It's parser-related error I think, somewhere in the hacks that make last-expression-as-return-value work.
Mar 31 20:40:36 <Xion>	It's parser-related error I think, somewhere in the hacks that make last-expression-as-return-value work.
Mar 31 20:40:43 <Xion>	http://is.gd/KHpoZx this compiles.
Mar 31 20:40:43 <Xion>	http://is.gd/KHpoZx this compiles.
Mar 31 20:41:06 *	Azy8BsKXVko (mkn@moz-8uvaq4.snjsca.sbcglobal.net) has joined
Mar 31 20:41:08 <Ossi>	huh
Mar 31 20:41:08 <Ossi>	huh
Mar 31 20:42:13 <bluss>	selfup: collenchyma can use cuda at least
Mar 31 20:42:13 <bluss>	selfup: collenchyma can use cuda at least
Mar 31 20:43:08 <insaneinside>	(that's <https://github.com/autumnai/collenchyma>, apparently: "Extendable HPC-Framework for CUDA, OpenCL and common CPU http://autumnai.github.io/collenchyma")
Mar 31 20:43:08 <insaneinside>	(that's <https://github.com/autumnai/collenchyma>, apparently: "Extendable HPC-Framework for CUDA, OpenCL and common CPU http://autumnai.github.io/collenchyma")
Mar 31 20:43:09 *	dikaiosune has quit (Quit: Leaving)
Mar 31 20:43:26 <steveklabnik>	did something change with no-std lately?  https://doc.rust-lang.org/book/no-stdlib.html gives an intense gcc error https://travis-ci.org/adjivas/nostd/jobs/119943986
Mar 31 20:43:26 <steveklabnik>	did something change with no-std lately?  https://doc.rust-lang.org/book/no-stdlib.html gives an intense gcc error https://travis-ci.org/adjivas/nostd/jobs/119943986
Mar 31 20:43:41 <bluss>	insaneinside: thanks. We have a bot that can give info on crates too ;)
Mar 31 20:43:41 <bluss>	insaneinside: thanks. We have a bot that can give info on crates too ;)
Mar 31 20:43:44 *	NameNotFound is now known as zz_NameNotFound
Mar 31 20:44:39 <insaneinside>	bluss: well, Google just tells me about biology when I try that name, so thptptptpt! :P
Mar 31 20:44:39 <insaneinside>	bluss: well, Google just tells me about biology when I try that name, so thptptptpt! :P
Mar 31 20:45:07 <bluss>	!crate collenchyma
Mar 31 20:45:07 <bluss>	!crate collenchyma
Mar 31 20:45:08 <rustbot>	collenchyma (0.0.8) - high-performance computation on any hardware -> https://crates.io/crates/collenchyma
Mar 31 20:45:08 <rustbot>	collenchyma (0.0.8) - high-performance computation on any hardware -> https://crates.io/crates/collenchyma
Mar 31 20:45:15 *	Canova has quit (Quit: )
Mar 31 20:45:19 <bluss>	your blurb was better
Mar 31 20:45:19 <bluss>	your blurb was better
Mar 31 20:45:36 <insaneinside>	copied straight from the GH repo description
Mar 31 20:45:36 <insaneinside>	copied straight from the GH repo description
Mar 31 20:45:41 <sfackler>	steveklabnik: the errors for missing read and memset symbols would seem to imply that it's not linking to libc which seems a bit weird
Mar 31 20:45:41 <sfackler>	steveklabnik: the errors for missing read and memset symbols would seem to imply that it's not linking to libc which seems a bit weird
Mar 31 20:46:24 <steveklabnik>	sfackler: oh oh
Mar 31 20:46:24 <steveklabnik>	sfackler: oh oh
Mar 31 20:46:26 <bluss>	are you opting out of libc's std feature?
Mar 31 20:46:26 <bluss>	are you opting out of libc's std feature?
Mar 31 20:47:05 <steveklabnik>	yeah so i just saw that they had turned off default_features for libc
Mar 31 20:47:05 <steveklabnik>	yeah so i just saw that they had turned off default_features for libc
Mar 31 20:47:08 <steveklabnik>	so i bet that's it
Mar 31 20:47:08 <steveklabnik>	so i bet that's it
Mar 31 20:47:26 <bluss>	that's a weird thing I saw earlier, the libc crate does not bring in libc
Mar 31 20:47:26 <bluss>	that's a weird thing I saw earlier, the libc crate does not bring in libc
Mar 31 20:47:29 Mar 31 20:47:29 <bluss>	:D
<bluss>	:D
Mar 31 20:47:48 <bluss>	if libc links to libstd, that brings in libc
Mar 31 20:47:48 <bluss>	if libc links to libstd, that brings in libc
Mar 31 20:48:32 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 20:48:52 <steveklabnik>	so how do you link to libc then?
Mar 31 20:48:52 <steveklabnik>	so how do you link to libc then?
Mar 31 20:48:53 *	Quxxy2 (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 31 20:49:48 *	REMqb has quit (Client exited)
Mar 31 20:49:58 <bluss>	shouldn't crate libc do it really
Mar 31 20:49:58 <bluss>	shouldn't crate libc do it really
Mar 31 20:50:02 <steveklabnik>	i would think so
Mar 31 20:50:02 <steveklabnik>	i would think so
Mar 31 20:50:30 <steveklabnik>	but apparently not?
Mar 31 20:50:30 <steveklabnik>	but apparently not?
Mar 31 20:50:51 *	Quxxy has quit (Ping timeout: 121 seconds)
Mar 31 20:50:54 <steveklabnik>	acrichto: ^ any ideas here? basically, it looks like trying to use no_std with libc crate isn't bringing in libc?
Mar 31 20:50:54 <steveklabnik>	acrichto: ^ any ideas here? basically, it looks like trying to use no_std with libc crate isn't bringing in libc?
Mar 31 20:50:55 *	dhole (dhole@moz-hj68am.dynamic.jazztel.es) has joined
Mar 31 20:51:24 <bluss>	Maybe there's a situation where you want the libc types but don't want to link to it
Mar 31 20:51:24 <bluss>	Maybe there's a situation where you want the libc types but don't want to link to it
Mar 31 20:51:39 *	chris_99 has quit (Quit: Leaving)
Mar 31 20:51:45 <steveklabnik>	yeah, i think that's an ongoing decision, about std::os::raw or something? which has the types in std, but not libc itself
Mar 31 20:51:45 <steveklabnik>	yeah, i think that's an ongoing decision, about std::os::raw or something? which has the types in std, but not libc itself
Mar 31 20:52:34 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 20:52:58 *	ubsan has quit (Connection closed)
Mar 31 20:53:42 <acrichto>	steveklabnik: hm yeah that's just a bug for now I think, the wrong #[cfg] is gating linking to native libs
Mar 31 20:53:42 <acrichto>	steveklabnik: hm yeah that's just a bug for now I think, the wrong #[cfg] is gating linking to native libs
Mar 31 20:54:20 *	Regulati_ has quit (Connection closed)
Mar 31 20:54:24 *	Sgeo (Sgeo@moz-cqm03c.dyn.optonline.net) has joined
Mar 31 20:54:43 <steveklabnik>	want me to file something, or is it opne?
Mar 31 20:54:43 <steveklabnik>	want me to file something, or is it opne?
Mar 31 20:54:46 <steveklabnik>	open arleady?
Mar 31 20:54:46 <steveklabnik>	open arleady?
Mar 31 20:56:00 *	qrlpx_ (smuxi@moz-7197sa.dip0.t-ipconnect.de) has joined
Mar 31 20:56:01 *	qrlpx has quit (Ping timeout: 121 seconds)
Mar 31 20:56:14 *	selfup has quit (Connection closed)
Mar 31 20:57:52 *	dwins has quit (A TLS packet with unexpected length was received.)
Mar 31 20:58:01 *	nicholasf has quit (Quit: Leaving...)
Mar 31 20:58:09 *	zz_NameNotFound is now known as NameNotFound
Mar 31 20:58:46 *	dwins (dwins@moz-9sdv1c.va.comcast.net) has joined
Mar 31 20:59:16 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 31 20:59:25 *	bsder (bsder@moz-l101pt.res.rr.com) has joined
Mar 31 21:00:50 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 21:01:11 *	mpark (mpark@moz-mfm7h4.sdsl.bell.ca) has joined
Mar 31 21:01:31 *	Makoryu (malleus@moz-0de80j.dyn.optonline.net) has joined
Mar 31 21:01:54 *	ptc_ (textual@moz-l2kuh6.compute-1.amazonaws.com) has joined
Mar 31 21:03:01 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 21:03:28 *	mpark has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 21:04:10 *	dethos (dethos@moz-4u3337.dsl.telepac.pt) has joined
Mar 31 21:04:24 *	dwins has quit (Ping timeout: 121 seconds)
Mar 31 21:04:40 *	ptc has quit (Ping timeout: 121 seconds)
Mar 31 21:05:04 *	dwins (dwins@moz-9sdv1c.va.comcast.net) has joined
Mar 31 21:05:38 *	Cyderize (Cyderize@moz-7iot5a.tpgi.com.au) has joined
Mar 31 21:05:47 *	cafeclimber (cafeclimber@moz-p8qs6u.dyn.suddenlink.net) has joined
Mar 31 21:06:20 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 21:07:04 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 21:07:08 *	espadrine_ has quit (Ping timeout: 121 seconds)
Mar 31 21:09:51 *	dwins has quit (Quit: Leaving...)
Mar 31 21:10:04 *	Saser (Saser@moz-nd3gjf.edstud.chalmers.se) has left ("ByeBye!")
Mar 31 21:10:24 *	jimb has quit (Connection closed)
Mar 31 21:10:40 *	ubsan (ubsan@moz-bvll75.anjt.bap9.fb90.2607.IP) has joined
Mar 31 21:10:42 *	lucian (lucian@moz-7hsb6f.cable.virginm.net) has joined
Mar 31 21:13:01 *	santiago has quit (Quit: Computer has gone to sleep.)
Mar 31 21:14:44 *	lucian has quit (Ping timeout: 121 seconds)
Mar 31 21:15:06 *	ptc_ has quit (Ping timeout: 121 seconds)
Mar 31 21:15:27 *	selfup (selfup@moz-c82.450.145.63.IP) has joined
Mar 31 21:15:36 *	NameNotFound is now known as zz_NameNotFound
Mar 31 21:18:41 *	marchelzo (marchelzo@moz-d34pmn.ns.bellaliant.net) has joined
Mar 31 21:20:11 *	orks_ has quit (Quit: rakede)
Mar 31 21:23:39 *	selfup has quit (Quit: )
Mar 31 21:23:59 *	J_Arcane (chatzilla@moz-f72bj8.bb.dnainternet.fi) has joined
Mar 31 21:24:12 *	kmels has quit (Ping timeout: 121 seconds)
Mar 31 21:25:07 *	samx (sami@moz-oq8dni.dyn.optonline.net) has joined
Mar 31 21:26:18 *	Aceeri (uid29649@moz-opi9bt.tooting.irccloud.com) has joined
Mar 31 21:26:27 *	eckhardt has quit (Ping timeout: 121 seconds)
Mar 31 21:28:23 *	Quxxy (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 31 21:28:35 *	eckhardt (eckhardt@moz-kv4te9.hq.squareup.com) has joined
Mar 31 21:29:08 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 21:30:20 <shahn>	oy, ICE
Mar 31 21:30:20 <shahn>	oy, ICE
Mar 31 21:30:24 Mar 31 21:30:24 <succ>	nICE
<succ>	nICE
Mar 31 21:30:32 *	Quxxy2 has quit (Ping timeout: 121 seconds)
Mar 31 21:31:02 *	zz_NameNotFound is now known as NameNotFound
Mar 31 21:31:04 *	adium has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 21:31:38 *	adium (textual@moz-p9j.tu3.210.134.IP) has joined
Mar 31 21:31:59 *	cite-reader (ahill@moz-pv1j2k.swbr.surewest.net) has joined
Mar 31 21:32:49 *	msingle (mts001@moz-n19sp8.fios.verizon.net) has joined
Mar 31 21:33:02 *	adium has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 21:33:11 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 21:33:19 *	pittaman has quit (Quit: ChatZilla 0.9.92 [Firefox 46.0/20160324011246])
Mar 31 21:33:32 *	kcking (kcking@moz-o85r8g.dyn.mit.edu) has joined
Mar 31 21:33:52 *	Fishrock123 has quit (Connection closed)
Mar 31 21:34:19 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 21:35:06 *	Fishrock123 has quit (Connection closed)
Mar 31 21:35:23 *	azerupi has quit (Ping timeout: 121 seconds)
Mar 31 21:35:44 *	ehiggs (ehiggs@moz-t7ohe9.1fqp.rav1.1812.2a02.IP) has joined
Mar 31 21:35:48 *	dardevelin (dardevelin@moz-nsbqhh.rev.vodafone.pt) has joined
Mar 31 21:41:48 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 31 21:42:33 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 21:43:47 <ehiggs>	Hi all. I have a code smell. I have a union function which will make a bounding box from a slice of Points (or Rects) and to get it working I use match { ... Some(& ref x) => ...} but I've not seen '& ref'
Mar 31 21:43:47 <ehiggs>	Hi all. I have a code smell. I have a union function which will make a bounding box from a slice of Points (or Rects) and to get it working I use match { ... Some(& ref x) => ...} but I've not seen '& ref'
Mar 31 21:43:59 <ehiggs>	I'm wondering if I'm coding into a corner somehow
Mar 31 21:43:59 <ehiggs>	I'm wondering if I'm coding into a corner somehow
Mar 31 21:44:06 <ehiggs>	http://is.gd/gs5gp3
Mar 31 21:44:06 <ehiggs>	http://is.gd/gs5gp3
Mar 31 21:44:34 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Mar 31 21:44:50 <sfackler>	ehiggs: Some(x) works just as well in that case
Mar 31 21:44:50 <sfackler>	ehiggs: Some(x) works just as well in that case
Mar 31 21:45:26 *	teratorn has quit (Client exited)
Mar 31 21:45:49 *	elementalest has quit (Ping timeout: 121 seconds)
Mar 31 21:45:59 *	kazagistar has quit (Quit: Leaving.)
Mar 31 21:46:26 *	elementalest (elementales@moz-t1pv9r.internode.on.net) has joined
Mar 31 21:46:29 *	fyolnish (fyolnish@moz-8tfsb3.so-net.ne.jp) has joined
Mar 31 21:46:35 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 21:47:44 *	xrash has quit (Connection closed)
Mar 31 21:47:52 *	adium (textual@moz-p9j.tu3.210.134.IP) has joined
Mar 31 21:48:12 *	Ossi has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 21:48:13 *	NameNotFound is now known as zz_NameNotFound
Mar 31 21:50:14 *	mhcerri has quit (Connection closed)
Mar 31 21:50:32 *	fyolnish has quit (Ping timeout: 121 seconds)
Mar 31 21:51:21 *	mhcerri (mhcerri@moz-bg1h9m.telesp.net.br) has joined
Mar 31 21:54:37 *	RegulationD (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 31 21:54:42 *	tyoc213 has quit (Quit: Leaving)
Mar 31 21:54:53 *	Quxxy2 (Quxxy@moz-0nv.jkp.167.59.IP) has joined
Mar 31 21:55:12 <ehiggs>	ah, if i remove +Clone from line 7 then the compiler says that there's no From<&T>. So I added (*init.clone()).into() and then that said it couldn't move init.clone() out of a borrowed context. So I made it Some(&init).
Mar 31 21:55:12 <ehiggs>	ah, if i remove +Clone from line 7 then the compiler says that there's no From<&T>. So I added (*init.clone()).into() and then that said it couldn't move init.clone() out of a borrowed context. So I made it Some(&init).
Mar 31 21:55:21 *	Quxxy has quit (Ping timeout: 121 seconds)
Mar 31 21:55:31 *	zz_NameNotFound is now known as NameNotFound
Mar 31 21:55:33 *	nottc (nottc@moz-gj6.0k4.168.66.IP) has joined
Mar 31 21:55:33 <ehiggs>	that said there was no Clone on T, so I added Clone and then Some(& ref init) ...
Mar 31 21:55:33 <ehiggs>	that said there was no Clone on T, so I added Clone and then Some(& ref init) ...
Mar 31 21:55:36 *	nottc has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 21:56:07 *	brson_ has quit (Quit: leaving)
Mar 31 21:56:16 *	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 21:56:16 *	ChanServ sets mode +a on #rust brson
Mar 31 21:56:16 *	ChanServ gives channel operator status to brson
Mar 31 21:56:16 *	ChanServ sets mode +a on #rust brson
Mar 31 21:56:16 *	ChanServ gives channel operator status to brson
Mar 31 21:56:29 *	sbw (Thunderbird@moz-gkj.r2e.173.59.IP) has joined
Mar 31 21:56:50 <ehiggs>	(maybe my stories of coding as ignorantly as I do will help with understanding the ergonomics? or just to make me look stupid? win-win?)
Mar 31 21:56:50 <ehiggs>	(maybe my stories of coding as ignorantly as I do will help with understanding the ergonomics? or just to make me look stupid? win-win?)
Mar 31 21:57:29 *	James__ has quit (Ping timeout: 121 seconds)
Mar 31 21:57:38 *	NSil has quit (Ping timeout: 121 seconds)
Mar 31 21:58:17 *	woboats has quit (Client exited)
Mar 31 21:58:39 *	RegulationD has quit (Ping timeout: 121 seconds)
Mar 31 21:59:42 *	Malnormalulo has quit (Ping timeout: 121 seconds)
Mar 31 22:00:50 *	FreeBird_ (FreeBird@moz-1n2epm.9t5k.kgbt.120b.2a02.IP) has joined
Mar 31 22:00:52 *	jimb (user@moz-09a.i8g.126.207.IP) has joined
Mar 31 22:01:53 *	Nilabhra (nilabhra@moz-rbe.rib.187.115.IP) has joined
Mar 31 22:03:16 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 31 22:03:50 *	santiago (santiago@moz-ro2mm9.res.rr.com) has joined
Mar 31 22:03:56 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 22:04:39 *	amyers (amyers@moz-osiar4.md.comcast.net) has joined
Mar 31 22:04:55 *	FreeBird_ has quit (Ping timeout: 121 seconds)
Mar 31 22:05:33 *	amyers has quit (Connection closed)
Mar 31 22:05:43 *	amyers (amyers@moz-4ifg67.8iss.sd5s.0145.2601.IP) has joined
Mar 31 22:07:39 *	Kilobyte_ (stephan@moz-njhupu.dip0.t-ipconnect.de) has joined
Mar 31 22:07:47 *	conrad1 has quit (Ping timeout: 121 seconds)
Mar 31 22:07:59 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 22:08:42 *	anowell has quit (Quit: Connection closed for inactivity)
Mar 31 22:08:54 *	pcwalton has quit (Client exited)
Mar 31 22:08:55 *	Cyderize has quit (Ping timeout: 121 seconds)
Mar 31 22:09:01 *	indefini (indefini@moz-4p4v25.ucom.ne.jp) has joined
Mar 31 22:09:35 *	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined
Mar 31 22:10:21 *	Dylan16807 has quit (Ping timeout: 121 seconds)
Mar 31 22:10:27 *	Kilobyte has quit (Ping timeout: 121 seconds)
Mar 31 22:11:38 *	nuvo has quit (Connection closed)
Mar 31 22:11:50 *	asmyers (amyers@moz-osiar4.md.comcast.net) has joined
Mar 31 22:12:06 *	amyers has quit (Connection closed)
Mar 31 22:12:23 *	kcking has quit (Client exited)
Mar 31 22:13:04 *	SiegeLord (sl@moz-s8hpnn.ca.comcast.net) has joined
Mar 31 22:13:06 <aatch>	ehiggs, the issue you're probably encountering is that Rust doesn't tell you why it wants/needs some trait impl and also doesn't give you enough information to figure out why it doesn't exist.
Mar 31 22:13:06 <aatch>	ehiggs, the issue you're probably encountering is that Rust doesn't tell you why it wants/needs some trait impl and also doesn't give you enough information to figure out why it doesn't exist.
Mar 31 22:13:41 <aatch>	ehiggs, it's something being worked on though. Basically it should be able to tell you that (for example) Foo<T> doesn't implement Clone because T doesn't implement clone.
Mar 31 22:13:41 <aatch>	ehiggs, it's something being worked on though. Basically it should be able to tell you that (for example) Foo<T> doesn't implement Clone because T doesn't implement clone.
Mar 31 22:14:24 <aatch>	ehiggs, rather than it either saying `Foo<Thing>` doesn't implement clone or just `Thing` doesn't implement Clone.
Mar 31 22:14:24 <aatch>	ehiggs, rather than it either saying `Foo<Thing>` doesn't implement clone or just `Thing` doesn't implement Clone.
Mar 31 22:15:18 *	crisco_ (me@moz-kcfnij.dyn.telefonica.de) has joined
Mar 31 22:18:37 *	crisco has quit (Ping timeout: 121 seconds)
Mar 31 22:18:40 *	cpup has quit (Ping timeout: 121 seconds)
Mar 31 22:19:04 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 31 22:19:13 *	brendan has quit (Client exited)
Mar 31 22:19:16 *	ubsan__ (ubsan@moz-92sbjt.wa.comcast.net) has joined
Mar 31 22:20:13 *	cpup (cpup@moz-m41.b21.218.32.IP) has joined
Mar 31 22:21:11 *	NameNotFound is now known as zz_NameNotFound
Mar 31 22:21:23 *	gpoesia has quit (Client exited)
Mar 31 22:21:57 *	zz_NameNotFound is now known as NameNotFound
Mar 31 22:22:01 *	nagisa_ has quit (Ping timeout: 121 seconds)
Mar 31 22:22:16 *	Darfeel has quit (Client exited)
Mar 31 22:23:24 *	Eonil has quit (Quit: This computer has gone to sleep)
Mar 31 22:23:24 *	brendan (brendaneich@moz-v6u.63c.233.50.IP) has joined
Mar 31 22:24:02 *	ubsan__ has quit (Ping timeout: 121 seconds)
Mar 31 22:24:55 *	crunchiebones has quit (Ping timeout: 121 seconds)
Mar 31 22:26:11 *	gpoesia (poesia@moz-ao5.9o0.201.199.IP) has joined
Mar 31 22:27:00 *	nic has quit (Quit: leaving)
Mar 31 22:28:33 <ehiggs>	aatch: yea. it was surprising that it was talking about moving things out of a borrowed context though when i would have thought seeing .clone() on something of a type that isn't implementing Clone would be flagged first.
Mar 31 22:28:33 <ehiggs>	aatch: yea. it was surprising that it was talking about moving things out of a borrowed context though when i would have thought seeing .clone() on something of a type that isn't implementing Clone would be flagged first.
Mar 31 22:28:48 <ehiggs>	i thought method resolution came before borrow checker
Mar 31 22:28:48 <ehiggs>	i thought method resolution came before borrow checker
Mar 31 22:28:50 *	nic (zoner@moz-ht22i3.fios.verizon.net) has joined
Mar 31 22:29:19 *	mneumann has quit (Client exited)
Mar 31 22:29:48 *	tripped (trip@moz-i4845h.cable.mindspring.com) has joined
Mar 31 22:29:56 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 22:30:01 *	Dylan16807 (dylan@moz-62uibl.cntmoh.sbcglobal.net) has joined
Mar 31 22:30:02 *	martianwars has quit (Quit: Connection closed for inactivity)
Mar 31 22:31:27 *	NameNotFound is now known as zz_NameNotFound
Mar 31 22:32:25 *	Nilabhra has quit (Connection closed)
Mar 31 22:33:59 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 22:35:03 *	ehiggs has quit (Quit: 3:30am)
Mar 31 22:35:44 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 22:35:45 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 31 22:36:05 *	kmels (kmels@moz-gk7.ff1.106.190.IP) has joined
Mar 31 22:36:35 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 22:37:24 *	brendan has quit (Client exited)
Mar 31 22:37:58 *	monti (happy@moz-aidh09.broadband.corbina.ru) has left
Mar 31 22:38:08 *	zz_NameNotFound is now known as NameNotFound
Mar 31 22:38:43 *	conrad1 (cpdean@moz-repoit.res.rr.com) has joined
Mar 31 22:39:29 *	Mermi has quit (Quit: Connection closed for inactivity)
Mar 31 22:40:16 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 22:40:20 *	gpoesia has quit (Ping timeout: 121 seconds)
Mar 31 22:40:31 *	gpoesia (poesia@moz-ga0.9o0.201.199.IP) has joined
Mar 31 22:40:37 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 22:41:54 *	jimb has quit (Ping timeout: 121 seconds)
Mar 31 22:42:21 <Azy8BsKXVko>	I think a good way to describe what `self` does is that it "cannibalizes" the object the method is attached to.
Mar 31 22:42:21 <Azy8BsKXVko>	I think a good way to describe what `self` does is that it "cannibalizes" the object the method is attached to.
Mar 31 22:42:36 *	dmac__ has quit (Ping timeout: 121 seconds)
Mar 31 22:42:55 <Azy8BsKXVko>	It's kind of weird to think about it -- the way the method takes ownership of it's calling object.
Mar 31 22:42:55 <Azy8BsKXVko>	It's kind of weird to think about it -- the way the method takes ownership of it's calling object.
Mar 31 22:43:03 *	brson has quit (Ping timeout: 121 seconds)
Mar 31 22:43:07 <Azy8BsKXVko>	Maybe I'm just spouting nonsense, I dunno.
Mar 31 22:43:07 <Azy8BsKXVko>	Maybe I'm just spouting nonsense, I dunno.
Mar 31 22:44:12 *	insaneinside (user@moz-afulfs.tukw.qwest.net) has left ("bye")
Mar 31 22:45:14 <Mutabah>	Azy8BsKXVko: Actually, it's just sugar for `fn method(self: Self...)`
Mar 31 22:45:14 <Mutabah>	Azy8BsKXVko: Actually, it's just sugar for `fn method(self: Self...)`
Mar 31 22:45:17 *	slester has quit (A TLS packet with unexpected length was received.)
Mar 31 22:45:27 <Mutabah>	I.e. it's a method that takes a parameter named "self" (which is a little special) by value
Mar 31 22:45:27 <Mutabah>	I.e. it's a method that takes a parameter named "self" (which is a little special) by value
Mar 31 22:45:44 *	Guest5 (textual@moz-hnb58r.oc.cox.net) has joined
Mar 31 22:46:36 *	g-andrade has quit (Ping timeout: 121 seconds)
Mar 31 22:50:15 *	safwan has quit (Quit: Connection closed for inactivity)
Mar 31 22:51:40 *	markstory (textual@moz-tb3ghu.cable.rogers.com) has joined
Mar 31 22:53:39 *	m4rw3r has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 22:54:13 *	steffengy has quit (Ping timeout: 121 seconds)
Mar 31 22:54:25 *	cite-reader has quit (Ping timeout: 121 seconds)
Mar 31 22:54:47 *	grobinson has quit (A TLS packet with unexpected length was received.)
Mar 31 22:54:51 *	steffengy (quassel@moz-dlh8p0.dip0.t-ipconnect.de) has joined
Mar 31 22:55:12 *	kk has quit (Quit: WeeChat 1.4)
Mar 31 22:55:29 *	mathstuf (mathstuf@moz-u93h43.tvc-ip.com) has joined
Mar 31 22:56:14 *	pcwalton (pcwalton@moz-l8ebtf.sfo1.mozilla.com) has joined
Mar 31 22:56:14 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 22:56:14 *	ChanServ gives channel operator status to pcwalton
Mar 31 22:56:14 *	ChanServ sets mode +a on #rust pcwalton
Mar 31 22:56:14 *	ChanServ gives channel operator status to pcwalton
Mar 31 22:56:45 *	gpoesia has quit (Ping timeout: 121 seconds)
Mar 31 22:56:45 *	Cyderize (Cyderize@moz-7iot5a.tpgi.com.au) has joined
Mar 31 22:57:13 *	khades1 (Thunderbird@moz-opi.h6q.74.212.IP) has joined
Mar 31 23:00:22 *	khades has quit (Ping timeout: 121 seconds)
Mar 31 23:00:22 *	khades1 is now known as khades
Mar 31 23:00:24 *	dmilith has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 23:01:36 *	bfrog (tburdick@moz-c831ha.62ps.u14a.0241.2601.IP) has joined
Mar 31 23:01:45 *	santiago has quit (Connection closed)
Mar 31 23:02:22 *	santiago (santiago@moz-ro2mm9.res.rr.com) has joined
Mar 31 23:04:51 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Mar 31 23:06:21 *	s_kunk has quit (Ping timeout: 121 seconds)
Mar 31 23:06:54 *	Pierre_M has quit (Ping timeout: 121 seconds)
Mar 31 23:07:42 *	Donald-Trump has quit (Ping timeout: 121 seconds)
Mar 31 23:07:52 *	acmcarther has quit (Ping timeout: 121 seconds)
Mar 31 23:08:02 *	Donald-Trump (trump@moz-jro0ri.is.googolplex.ninja) has joined
Mar 31 23:08:20 *	zeebo has quit (Connection closed)
Mar 31 23:08:36 *	rschifflin has quit (Ping timeout: 121 seconds)
Mar 31 23:08:54 *	dinfuehr has quit (Ping timeout: 121 seconds)
Mar 31 23:10:15 <Azy8BsKXVko>	Is there any article or something that explains double references (`&&x`)? I just saw one of those, and I'm scared.
Mar 31 23:10:15 <Azy8BsKXVko>	Is there any article or something that explains double references (`&&x`)? I just saw one of those, and I'm scared.
Mar 31 23:10:45 <mathstuf>	hi, could someone with windows test out compiling this (it's small if you want to inspect it first)? https://github.com/mathstuf/rust-machine-id/pull/2/files
Mar 31 23:10:45 <mathstuf>	hi, could someone with windows test out compiling this (it's small if you want to inspect it first)? https://github.com/mathstuf/rust-machine-id/pull/2/files
Mar 31 23:10:58 *	grobinson (grobinson@moz-t0k.die.233.50.IP) has joined
Mar 31 23:11:50 *	NameNotFound is now known as zz_NameNotFound
Mar 31 23:12:55 *	zeebo (zeebo@moz-m4c.4q6.135.66.IP) has joined
Mar 31 23:13:35 <Havvy>	Azy8BsKXVko:  `&` can be applied to any type T.  `&T` is a type.
Mar 31 23:13:35 <Havvy>	Azy8BsKXVko:  `&` can be applied to any type T.  `&T` is a type.
Mar 31 23:13:45 <Havvy>	So, &&T is just & applied to &T.
Mar 31 23:13:45 <Havvy>	So, &&T is just & applied to &T.
Mar 31 23:14:17 <Azy8BsKXVko>	Havvy: Thanks.
Mar 31 23:14:17 <Azy8BsKXVko>	Havvy: Thanks.
Mar 31 23:14:37 *	ubsan has quit (Ping timeout: 121 seconds)
Mar 31 23:15:51 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Mar 31 23:16:00 *	duncan (paul@moz-83kscv.mi.charter.com) has joined
Mar 31 23:17:16 *	grobinson has quit (Quit: )
Mar 31 23:18:05 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 23:19:02 *	s_kunk (s_kunk@moz-1jmsti.rev.numericable.fr) has joined
Mar 31 23:19:18 *	mcarton has quit (Ping timeout: 121 seconds)
Mar 31 23:20:12 *	fyolnish has quit (Connection closed)
Mar 31 23:20:13 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 31 23:20:13 *	glendc has quit (Ping timeout: 121 seconds)
Mar 31 23:20:58 *	ansible1 (kvirc@moz-ks4ued.co.comcast.net) has joined
Mar 31 23:22:10 *	desophos has quit (Ping timeout: 121 seconds)
Mar 31 23:24:23 <mindtree>	Quxxy2: you around? could you link me to your serde macro_rules! WIP? I'm having a stab at writing one and would love to use it as inspiration. In particular, I'm curious to see how you handle generics and where clauses
Mar 31 23:24:23 <mindtree>	Quxxy2: you around? could you link me to your serde macro_rules! WIP? I'm having a stab at writing one and would love to use it as inspiration. In particular, I'm curious to see how you handle generics and where clauses
Mar 31 23:24:54 <Quxxy2>	mindtree: I handled them by writing a compiler plugin
Mar 31 23:24:54 <Quxxy2>	mindtree: I handled them by writing a compiler plugin
Mar 31 23:25:04 <Quxxy2>	It's the only way you *can* handle them
Mar 31 23:25:04 <Quxxy2>	It's the only way you *can* handle them
Mar 31 23:25:07 <Quxxy2>	https://github.com/DanielKeep/rust-parse-generics-poc/blob/master/parse-macros/tests/derive_serialize.rs
Mar 31 23:25:07 <Quxxy2>	https://github.com/DanielKeep/rust-parse-generics-poc/blob/master/parse-macros/tests/derive_serialize.rs
Mar 31 23:25:11 <mindtree>	nnoooooooooooooooo.......
Mar 31 23:25:11 <mindtree>	nnoooooooooooooooo.......
Mar 31 23:25:14 <mindtree>	heheh
Mar 31 23:25:14 <mindtree>	heheh
Mar 31 23:25:19 <mindtree>	hmmm cheers, will have a look
Mar 31 23:25:19 <mindtree>	hmmm cheers, will have a look
Mar 31 23:25:21 <Quxxy2>	That macro should work if you just stub out parse_generics! and parse_where!
Mar 31 23:25:21 <Quxxy2>	That macro should work if you just stub out parse_generics! and parse_where!
Mar 31 23:25:32 Mar 31 23:25:32 <Quxxy2>	You can also bug me to finish writing the RFC to add those two macros to std
<Quxxy2>	You can also bug me to finish writing the RFC to add those two macros to std
Mar 31 23:25:42 <marchelzo>	Azy8BsKXVko: don't be scared. &&T gets you one step closer to being a three-star programmer.
Mar 31 23:25:42 <marchelzo>	Azy8BsKXVko: don't be scared. &&T gets you one step closer to being a three-star programmer.
Mar 31 23:26:11 <Quxxy2>	marchelzo: Wouldn't you need &&&T for ***programmer to be valid?
Mar 31 23:26:11 <Quxxy2>	marchelzo: Wouldn't you need &&&T for ***programmer to be valid?
Mar 31 23:26:12 <mindtree>	I might just use some ridiculous macro rules token syntax to support them (I don't really care about having it actually look like proper struct syntax or whatever)
Mar 31 23:26:12 <mindtree>	I might just use some ridiculous macro rules token syntax to support them (I don't really care about having it actually look like proper struct syntax or whatever)
Mar 31 23:26:31 <marchelzo>	Quxxy2: yes, that's why I said one step closer
Mar 31 23:26:31 <marchelzo>	Quxxy2: yes, that's why I said one step closer
Mar 31 23:26:54 <Quxxy2>	mindtree: You could always just write out the result of the parse_generics!/parse_where! by hand
Mar 31 23:26:54 <Quxxy2>	mindtree: You could always just write out the result of the parse_generics!/parse_where! by hand
Mar 31 23:27:17 *	zz_NameNotFound is now known as NameNotFound
Mar 31 23:28:02 *	will_sm (will-medran@moz-09s.dbi.142.75.IP) has joined
Mar 31 23:28:05 *	blank_name3 (blank_name@moz-bovc4q.mi.frontiernet.net) has joined
Mar 31 23:28:13 *	fyolnish has quit (Connection closed)
Mar 31 23:28:38 *	asmyers has quit (Ping timeout: 121 seconds)
Mar 31 23:28:43 <mindtree>	Quxxy2: oh I missed your msg about bugging you to finish that RFC
Mar 31 23:28:43 <mindtree>	Quxxy2: oh I missed your msg about bugging you to finish that RFC
Mar 31 23:28:47 *	mindtree bugs Quxxy2 
Mar 31 23:28:47 *	mindtree bugs Quxxy2 
Mar 31 23:28:56 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 31 23:30:38 *	casey_ (casey@moz-v0ns05.tpgi.com.au) has joined
Mar 31 23:30:39 *	blank_name2 has quit (Ping timeout: 121 seconds)
Mar 31 23:32:14 *	santiago has quit (Connection closed)
Mar 31 23:32:26 *	fyolnish has quit (Connection closed)
Mar 31 23:32:28 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 31 23:32:44 *	santiago (santiago@moz-ro2mm9.res.rr.com) has joined
Mar 31 23:33:08 *	JuggleTux has quit (Quit: leaving)
Mar 31 23:34:27 *	mcarton (martin@moz-hvivjg.abo.wanadoo.fr) has joined
Mar 31 23:34:41 *	casey_ has quit (Ping timeout: 121 seconds)
Mar 31 23:34:46 *	dzbarsky (Adium@moz-5njcdr.82pc.j76f.0646.2601.IP) has joined
Mar 31 23:34:50 *	kerrang has quit (Quit: leaving)
Mar 31 23:35:41 *	ygrek has quit (Ping timeout: 121 seconds)
Mar 31 23:35:48 <Azy8BsKXVko>	marchelzo: three out of how many stars?
Mar 31 23:35:48 <Azy8BsKXVko>	marchelzo: three out of how many stars?
Mar 31 23:36:49 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 23:36:55 <Azy8BsKXVko>	Quxxy2: yo dawg, I herd you like references, so I made a reference to your reference, INSIDE another reference!
Mar 31 23:36:55 <Azy8BsKXVko>	Quxxy2: yo dawg, I herd you like references, so I made a reference to your reference, INSIDE another reference!
Mar 31 23:37:18 *	p32blo has quit (Ping timeout: 121 seconds)
Mar 31 23:38:26 *	fyolnish has quit (Connection closed)
Mar 31 23:38:57 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 31 23:40:44 <Xion>	Fun fact: every type T seems to implement From<T> :)
Mar 31 23:40:44 <Xion>	Fun fact: every type T seems to implement From<T> :)
Mar 31 23:41:09 *	ksf has quit (Connection closed)
Mar 31 23:41:13 *	Pierre_M (Pierre@moz-0k5bh2.slkc.qwest.net) has joined
Mar 31 23:41:21 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 23:41:47 *	markstory has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 23:41:47 *	fyolnish has quit (Connection closed)
Mar 31 23:41:53 *	fyolnish (fyolnish@moz-jqsevj.ucom.ne.jp) has joined
Mar 31 23:42:38 *	dpc (dpc@moz-0j08lf.vfrf.7c07.0647.2601.IP) has joined
Mar 31 23:42:45 <curtism>	Yes, there is an impl<T> From<T> for T iirc
Mar 31 23:42:45 <curtism>	Yes, there is an impl<T> From<T> for T iirc
Mar 31 23:42:56 *	acmcarther (alex@moz-4isk62.lv.cox.net) has joined
Mar 31 23:43:33 <curtism>	https://doc.rust-lang.org/src/core/convert.rs.html#156-160
Mar 31 23:43:33 <curtism>	https://doc.rust-lang.org/src/core/convert.rs.html#156-160
Mar 31 23:44:34 *	NameNotFound is now known as zz_NameNotFound
Mar 31 23:44:51 *	pcwalton has quit (Client exited)
Mar 31 23:49:14 *	eckhardt has quit (Quit: Leaving...)
Mar 31 23:49:15 *	ansible1 has quit (Ping timeout: 121 seconds)
Mar 31 23:50:41 *	quaddle (Mibbit@moz-np5.9uv.141.174.IP) has joined
Mar 31 23:51:21 *	quaddle has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 23:51:58 *	zz_NameNotFound is now known as NameNotFound
Mar 31 23:52:08 *	glaebhoerl has quit (Ping timeout: 121 seconds)
Mar 31 23:54:43 *	jgilbert has quit (Ping timeout: 121 seconds)
Mar 31 23:55:06 *	kcking (kcking@moz-a9iro8.ma.comcast.net) has joined
Mar 31 23:56:07 *	RegulationD (RegulationD@moz-jpg5s7.ga.charter.com) has joined
Mar 31 23:57:17 *	dmac (dmac@moz-2ig65r.ca.comcast.net) has joined
Mar 31 23:59:55 *	kimundi has quit (Ping timeout: 121 seconds)
Apr 01 00:00:09 *	RegulationD has quit (Ping timeout: 121 seconds)
Apr 01 00:01:52 *	santiago has quit (Connection closed)
Apr 01 00:01:52 *	ptc has quit (Connection closed)
Apr 01 00:02:50 *	placrosse (Mibbit@moz-rtucsb.mi.comcast.net) has joined
Apr 01 00:03:54 *	jimb (user@moz-6gkikn.or.comcast.net) has joined
Apr 01 00:04:22 *	acmcarther has quit (Ping timeout: 121 seconds)
Apr 01 00:05:14 <placrosse>	A question regarding crates:  if I wish to create a common lib crate, to be used by a couple of bin crates, and within the lib crate I want common extern crates, including those with macros (such as nickel or log), how could this be done such that the bin apps using the single common crate may also use the macros available with the common lib?
Apr 01 00:05:14 <placrosse>	A question regarding crates:  if I wish to create a common lib crate, to be used by a couple of bin crates, and within the lib crate I want common extern crates, including those with macros (such as nickel or log), how could this be done such that the bin apps using the single common crate may also use the macros available with the common lib?
Apr 01 00:05:18 *	kimundi (kimundi@moz-gik5pp.dip0.t-ipconnect.de) has joined
Apr 01 00:05:45 *	dinfuehr (dinfuehr@moz-066.9nh.59.86.IP) has joined
Apr 01 00:05:52 *	ThatOtherPerson (ThatOtherPe@moz-vrp2kb.ca.comcast.net) has joined
Apr 01 00:05:52 *	acmcarther (alex@moz-4isk62.lv.cox.net) has joined
Apr 01 00:06:25 <curtism>	placrosse: I don't believe macro reexporting is stable yet, but you could just also #[macro_use] extern crate in the bin crates
Apr 01 00:06:25 <curtism>	placrosse: I don't believe macro reexporting is stable yet, but you could just also #[macro_use] extern crate in the bin crates
Apr 01 00:06:53 *	kanru` (kanru@moz-2hf62a.HINET-IP.hinet.net) has joined
Apr 01 00:06:53 *	ptc (textual@moz-hv5fj9.fios.verizon.net) has joined
Apr 01 00:08:27 *	v3nture (paul@moz-4ji.8v7.253.130.IP) has joined
Apr 01 00:09:47 <placrosse>	I was trying to only have the common lib crate in the bin's Cargo.toml, thereby having the lib crate be the single point of version configuration, features, git/path/crates.io, etc.  I am using nightly Rust, so lack of stable-status is not an impediment.  I'm looking for the long-term maintenance benefits.  Is it possible? Or a sample somewhere to view?
Apr 01 00:09:47 <placrosse>	I was trying to only have the common lib crate in the bin's Cargo.toml, thereby having the lib crate be the single point of version configuration, features, git/path/crates.io, etc.  I am using nightly Rust, so lack of stable-status is not an impediment.  I'm looking for the long-term maintenance benefits.  Is it possible? Or a sample somewhere to view?
Apr 01 00:09:48 *	dinfuehr has quit (Ping timeout: 121 seconds)
Apr 01 00:09:54 *	glendc (glendc@moz-47l.fbs.60.189.IP) has joined
Apr 01 00:10:15 *	renderfu_ (renderful@moz-atg40s.co.comcast.net) has joined
Apr 01 00:11:16 *	NameNotFound is now known as zz_NameNotFound
Apr 01 00:11:32 <curtism>	placrosse: Are you aware that you can have one lib crate and multiple bin crates in a single Cargo.toml, or is that undesirable here?
Apr 01 00:11:32 <curtism>	placrosse: Are you aware that you can have one lib crate and multiple bin crates in a single Cargo.toml, or is that undesirable here?
Apr 01 00:11:46 *	Hail_Spacecake has quit (Connection closed)
Apr 01 00:12:11 FiSHLiM plugin unloaded
Apr 01 00:12:11 Python interface unloaded
**** ENDING LOGGING AT Fri Apr  1 00:12:11 2016

Apr 01 00:12:11 *	brunodea_ has quit (Quit: Leaving)
**** BEGIN LOGGING AT Fri Apr  1 08:53:42 2016

Apr 01 08:53:42 *	Now talking on #rust
Apr 01 08:53:42 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 01 08:53:42 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 01 09:16:49 <chris_99>	Could anyone explain what: (@param _) => ( _ ); means in the context of a macro, i'm struggling to find what the @ symbol means in this context
Apr 01 09:17:31 <bluss>	chris_99: it doesn't mean anything, it is matched literally with the token @
Apr 01 09:17:36 <bluss>	when the macro is called
Apr 01 09:18:47 <bluss>	chris_99: by convention it's used for internal rules or subrules
Apr 01 09:18:48 <chris_99>	oh, so @param is just kind of a variable name?
Apr 01 09:19:19 <bluss>	not a variable name, just two tokens
Apr 01 09:23:26 <chris_99>	ok sorry i'm still somewhat confused, so https://github.com/gtk-rs/examples/blob/8ed374a0843c1843c1348e970e3b6179155e3269/src/gtktest.rs#L31 is where it's from, it seems to be used on line44, but i don't really understand why
Apr 01 09:24:06 <chris_99>	i believe $p is the parameter name, which it seems to only accept _ for, afaik
Apr 01 09:27:41 <kimundi>	chris_99: macros basically work on matching arbitrary syntax. @param is just invented syntax that the macro uses for recusivly calling itself, but which has no meaning in actual rust code
Apr 01 09:28:57 <kimundi>	Could have just as well been `__UNLIKELY_TO_BE_USED_ELSEWHERE param`
Apr 01 09:30:11 <chris_99>	ok i think i get that but what does => mean in this context
Apr 01 09:32:11 <kimundi>	chris_99: That seems to be just the syntax that has been choosen for actually calling the macro. As in, valid calls are stuff like clone!(a, b, c => move || { ... })
Apr 01 09:32:35 <chris_99>	ohh, doh, it's the tokens it's expecting
Apr 01 09:32:39 <kimundi>	yeah
Apr 01 09:32:40 <kimundi>	:)
Apr 01 09:32:42 <chris_99>	cheers
Apr 01 09:35:15 <bluss>	macros can essentially make their own syntax, just have to reuse the tokens rust knows
Apr 01 10:03:42 <Quxxy2>	Don't forget the follow sets *sadface*
Apr 01 10:13:44 <bur_sangjun>	Has anyone here got racer working in Vim?
Apr 01 10:14:03 <fkaa>	yup
Apr 01 10:14:33 <bur_sangjun>	^X^O gives me `Omni completeion (^O^N^P) Pattern not found'
Apr 01 10:14:42 <bur_sangjun>	racers working fine from the command line, any ideas?
Apr 01 10:16:04 <fkaa>	is your cursor in a place where it can autocomplete stuff?
Apr 01 10:16:23 <bur_sangjun>	after the :: in `use std::'
Apr 01 10:16:33 <bur_sangjun>	so I would assume so
Apr 01 10:16:33 <bluss>	bur_sangjun: you can try to call it exactly the same way from the command line. With file and cursor position arguments
Apr 01 10:18:01 <fkaa>	works for me http://i.imgur.com/Io4RYse.png
Apr 01 10:18:10 <fkaa>	is the path to rust source set up correctly?
Apr 01 10:18:13 <bluss>	I'm using the alternative plugin https://github.com/ebfe/vim-racer for some reason
Apr 01 10:18:35 <bluss>	racer's vim plugin was broken in some version
Apr 01 10:18:40 <bur_sangjun>	fkaa: let g:racer_cmd = "C:\Users\Sam\.cargo\bin\racer"
Apr 01 10:18:41 <bur_sangjun>	 let $RUST_SRC_PATH = "D:\Documents\Rust\src\src"
Apr 01 10:19:02 <fkaa>	https://github.com/fkaa/.files/blob/master/.vimrc#L20-L21 mine
Apr 01 10:19:23 <bur_sangjun>	looks equivalent
Apr 01 10:19:32 <bur_sangjun>	obviously *nix to windows paths
Apr 01 10:19:52 <fkaa>	does it work for other things?
Apr 01 10:20:13 <sgiles>	bur_sangjun `\src\src`?
Apr 01 10:20:25 <bur_sangjun>	sgiles: src is where the rust source code is in my rust projects directory
Apr 01 10:20:27 <fkaa>	Ve^X^O => Vec
Apr 01 10:20:34 <keeper>	bur_sangjun: Are you using this on a windows vim? Is it a cygwin vim, or a mingw vim?
Apr 01 10:20:43 <bur_sangjun>	Figured it out
Apr 01 10:20:44 <bur_sangjun>	trailing backslash
Apr 01 10:20:45 <bur_sangjun>	is needed
Apr 01 10:20:47 <bur_sangjun>	for the path
Apr 01 10:20:50 <fkaa>	:D
Apr 01 10:21:00 <bur_sangjun>	damnit windows
Apr 01 10:21:28 <bur_sangjun>	http://prntscr.com/ams2uh
Apr 01 10:21:30 <bur_sangjun>	Thank for the help anyway :)
Apr 01 10:26:19 <TheHackOps>	Hey guys, as always when I finish another Rust tutorial I come here for feedback. https://www.youtube.com/watch?v=EUA0xdf4VFI&feature=youtu.be
Apr 01 10:26:41 <TheHackOps>	I have currently taken on the advice of following from and reading the Rust book in the videos
Apr 01 10:26:46 <TheHackOps>	and better editing
Apr 01 10:42:46 <rustjason>	Hello
Apr 01 10:46:31 *	ChanServ gives channel operator status to jdm
Apr 01 10:47:22 <apajx>	Hi
**** BEGIN LOGGING AT Fri Apr  1 10:52:38 2016

Apr 01 10:52:38 *	Now talking on #rust
Apr 01 10:52:38 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 01 10:52:38 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 01 10:56:28 <fkaa>	is () a type or a value
Apr 01 10:56:28 <fkaa>	is () a type or a value
Apr 01 10:57:04 Apr 01 10:57:04 <Mutabah>	both
<Mutabah>	both
Apr 01 10:58:36 <samsam>	hello guys
Apr 01 10:58:36 <samsam>	hello guys
Apr 01 10:58:39 <samsam>	i'm new to rust
Apr 01 10:58:39 <samsam>	i'm new to rust
Apr 01 10:58:53 <samsam>	i have a problem with this code:
Apr 01 10:58:53 <samsam>	i have a problem with this code:
Apr 01 10:58:54 <Yoric>	Has anyone around here attempted to post a multipart response from Iron?
Apr 01 10:58:54 <Yoric>	Has anyone around here attempted to post a multipart response from Iron?
Apr 01 10:58:57 <samsam>	`type PairIdSprite<'s> = (u32, &Sprite<'s>);`
Apr 01 10:58:57 <samsam>	`type PairIdSprite<'s> = (u32, &Sprite<'s>);`
Apr 01 10:59:17 <samsam>	the compiler gives me:
Apr 01 10:59:17 <samsam>	the compiler gives me:
Apr 01 10:59:19 <samsam>	src/assets.rs:4:35: 4:46 error: missing lifetime specifier [E0106] src/assets.rs:4 pub type PairIdSprite<'s> = (u32, &Sprite<'s>);
Apr 01 10:59:19 <samsam>	src/assets.rs:4:35: 4:46 error: missing lifetime specifier [E0106] src/assets.rs:4 pub type PairIdSprite<'s> = (u32, &Sprite<'s>);
Apr 01 10:59:26 <samsam>	I don't understand why
Apr 01 10:59:26 <samsam>	I don't understand why
Apr 01 10:59:35 <samsam>	any idea ?
Apr 01 10:59:35 <samsam>	any idea ?
Apr 01 10:59:35 <bluss>	samsam: the & needs a lifetime specifier too
Apr 01 10:59:35 <bluss>	samsam: the & needs a lifetime specifier too
Apr 01 10:59:37 <feti>	&'s
Apr 01 10:59:37 <feti>	&'s
Apr 01 10:59:44 <Mutabah>	samsam: All &-ptrs in types (except in parameters) need lifetime annotations
Apr 01 10:59:44 <Mutabah>	samsam: All &-ptrs in types (except in parameters) need lifetime annotations
Apr 01 10:59:49 <bluss>	not necessarily the same as the 's
Apr 01 10:59:49 <bluss>	not necessarily the same as the 's
Apr 01 10:59:54 <samsam>	oh ok, thank you!
Apr 01 10:59:54 <samsam>	oh ok, thank you!
Apr 01 11:00:30 <samsam>	so, like this? `type PairIdSprite<'s> = (u32, &'s Sprite<'s>);`
Apr 01 11:00:30 <samsam>	so, like this? `type PairIdSprite<'s> = (u32, &'s Sprite<'s>);`
Apr 01 11:00:37 <Mutabah>	Yes
Apr 01 11:00:37 <Mutabah>	Yes
Apr 01 11:01:09 <samsam>	yes, it works! thank you very much!
Apr 01 11:01:09 <samsam>	yes, it works! thank you very much!
Apr 01 11:22:00 <chris_99>	does anyone know if instead of rustrmt using // for comments you can force it to use /* */ without also having asterixes on each comment line
Apr 01 11:22:00 <chris_99>	does anyone know if instead of rustrmt using // for comments you can force it to use /* */ without also having asterixes on each comment line
Apr 01 11:23:32 <Quxxy2>	chris_99: rustfmt has quite a few options you can change.  Last I checked, you couldn't really control how it mangled comments, but it may have changed since then
Apr 01 11:23:32 <Quxxy2>	chris_99: rustfmt has quite a few options you can change.  Last I checked, you couldn't really control how it mangled comments, but it may have changed since then
Apr 01 11:24:21 <zrneely>	What's the proper way to go from a &Thing to a usize containing the address? `thing as *const _ as usize` gives a trivial cast warning.
Apr 01 11:24:21 <zrneely>	What's the proper way to go from a &Thing to a usize containing the address? `thing as *const _ as usize` gives a trivial cast warning.
Apr 01 11:25:58 <Quxxy2>	zrneely: Doesn't give that warning to me
Apr 01 11:25:58 <Quxxy2>	zrneely: Doesn't give that warning to me
Apr 01 11:26:18 <Quxxy2>	zrneely: http://is.gd/0hSwSN
Apr 01 11:26:18 <Quxxy2>	zrneely: http://is.gd/0hSwSN
Apr 01 11:26:20 <keeper>	Just out of context, is _ a type there, or a pattern? I was always curious.
Apr 01 11:26:20 <keeper>	Just out of context, is _ a type there, or a pattern? I was always curious.
Apr 01 11:26:49 <Quxxy2>	I'm not sure how the compiler sees it, but I believe the name for it is the "type hole"
Apr 01 11:26:49 <Quxxy2>	I'm not sure how the compiler sees it, but I believe the name for it is the "type hole"
Apr 01 11:27:00 <Quxxy2>	Or "infer this"
Apr 01 11:27:00 <Quxxy2>	Or "infer this"
Apr 01 11:27:16 <Quxxy2>	It functions *like* a type in that context
Apr 01 11:27:16 <Quxxy2>	It functions *like* a type in that context
Apr 01 11:27:31 <Quxxy2>	Although in others it functions like an identifier.  And also *not* like an identifier
Apr 01 11:27:31 <Quxxy2>	Although in others it functions like an identifier.  And also *not* like an identifier
Apr 01 11:27:43 <keeper>	Well I was more curious whether it was the actual type, or if it became something else for the compiler.
Apr 01 11:27:43 <keeper>	Well I was more curious whether it was the actual type, or if it became something else for the compiler.
Apr 01 11:27:53 <keeper>	Specially *const _.
Apr 01 11:27:53 <keeper>	Specially *const _.
Apr 01 11:27:58 <Quxxy2>	It becomes the actual type
Apr 01 11:27:58 <Quxxy2>	It becomes the actual type
Apr 01 11:28:12 <Quxxy2>	I mean, the compiler *has* to know what the type is
Apr 01 11:28:12 <Quxxy2>	I mean, the compiler *has* to know what the type is
Apr 01 11:28:27 <Quxxy2>	_ is just you refusing to say it explicitly; it doesn't mean the compiler can avoid working it out
Apr 01 11:28:27 <Quxxy2>	_ is just you refusing to say it explicitly; it doesn't mean the compiler can avoid working it out
Apr 01 11:28:48 <keeper>	I've worked on some code that had a pointer to a pointer, that needed to be given to a c ffi function which took a void pointer.
Apr 01 11:28:48 <keeper>	I've worked on some code that had a pointer to a pointer, that needed to be given to a c ffi function which took a void pointer.
Apr 01 11:29:24 <keeper>	To get it to work, it had to do *const _ before the *const c_void.
Apr 01 11:29:24 <keeper>	To get it to work, it had to do *const _ before the *const c_void.
Apr 01 11:29:30 <bluss>	zrneely: did you enable the trivial casts warning?
Apr 01 11:29:30 <bluss>	zrneely: did you enable the trivial casts warning?
Apr 01 11:29:58 <bluss>	that warning seems to be designed with type ascription in mind
Apr 01 11:29:58 <bluss>	that warning seems to be designed with type ascription in mind
Apr 01 11:30:40 <Quxxy2>	I think the only kind of pointer &T will cast to is *const T... but once you have a *const T, you can cast to a different kind of pointer, or a usize
Apr 01 11:30:40 <Quxxy2>	I think the only kind of pointer &T will cast to is *const T... but once you have a *const T, you can cast to a different kind of pointer, or a usize
Apr 01 11:32:59 <keeper>	Mmm, maybe it was something as simple as that. I can't seem to replicate any strange behaviour now I try it. Oh well.
Apr 01 11:32:59 <keeper>	Mmm, maybe it was something as simple as that. I can't seem to replicate any strange behaviour now I try it. Oh well.
Apr 01 11:39:45 <zrneely>	bluss, Quxxy2: yes, I did, since it seems like good practice. Maybe not though :p
Apr 01 11:39:45 <zrneely>	bluss, Quxxy2: yes, I did, since it seems like good practice. Maybe not though :p
Apr 01 11:40:15 <bluss>	zrneely: I recommend against it :)
Apr 01 11:40:15 <bluss>	zrneely: I recommend against it :)
Apr 01 11:47:00 <kimundi>	Quxxy2, keeper: If you are still curios, a _ in type position is parsed as a type, and internally treated as a special type, the "infer this" type, which is also used by regular type inference. So as far as the compiler is concerned, let x = foo; and let x: _ = foo; would be indistinguishable in the actual typechecking phases
Apr 01 11:47:00 <kimundi>	Quxxy2, keeper: If you are still curios, a _ in type position is parsed as a type, and internally treated as a special type, the "infer this" type, which is also used by regular type inference. So as far as the compiler is concerned, let x = foo; and let x: _ = foo; would be indistinguishable in the actual typechecking phases
Apr 01 11:47:52 <Quxxy2>	kimundi: Hey, I'm not an unusual object!
Apr 01 11:47:52 <Quxxy2>	kimundi: Hey, I'm not an unusual object!
Apr 01 11:47:54 <keeper>	kimundi: I've used something like collect::Vec<_> in plenty of places, I'm obiously just not familiar enough with ffi to know which types get involved.
Apr 01 11:47:54 <keeper>	kimundi: I've used something like collect::Vec<_> in plenty of places, I'm obiously just not familiar enough with ffi to know which types get involved.
Apr 01 11:48:35 <keeper>	I'll need to see what happens when I get bac to the code, maybe the extra *const _ cast wasn't needed.
Apr 01 11:48:35 <keeper>	I'll need to see what happens when I get bac to the code, maybe the extra *const _ cast wasn't needed.
Apr 01 11:48:52 <kimundi>	Quxxy2: :P
Apr 01 11:48:52 <kimundi>	Quxxy2: :P
Apr 01 11:53:49 <ubsan>	&*Quxxy2
Apr 01 11:53:49 <ubsan>	&*Quxxy2
Apr 01 11:53:57 <ubsan>	> Quxxy
Apr 01 11:53:57 <ubsan>	> Quxxy
Apr 01 11:54:16 <Quxxy2>	Don't you reborrow *me*
Apr 01 11:54:16 <Quxxy2>	Don't you reborrow *me*
Apr 01 11:54:25 <ubsan>	Quxxy2: on the contrary
Apr 01 11:54:25 <ubsan>	Quxxy2: on the contrary
Apr 01 11:54:41 <ubsan>	this is a manual coercion
Apr 01 11:54:41 <ubsan>	this is a manual coercion
Apr 01 11:54:56 <Quxxy2>	... what *are* you trying to borrow, then?  My intestines?
Apr 01 11:54:56 <Quxxy2>	... what *are* you trying to borrow, then?  My intestines?
Apr 01 11:55:03 <Quxxy2>	My soul?
Apr 01 11:55:03 <Quxxy2>	My soul?
Apr 01 11:55:08 <Quxxy2>	Keep your grubby mitts off
Apr 01 11:55:08 <Quxxy2>	Keep your grubby mitts off
Apr 01 11:55:11 <ubsan>	Quxxy2: the second one
Apr 01 11:55:11 <ubsan>	Quxxy2: the second one
Apr 01 11:55:12 <ubsan>	noes
Apr 01 11:55:12 <ubsan>	noes
Apr 01 11:55:14 <ubsan>	:D
Apr 01 11:55:14 <ubsan>	:D
Apr 01 11:55:14 Apr 01 11:55:14 <Quxxy2>	Your clean mitts, too
<Quxxy2>	Your clean mitts, too
Apr 01 11:55:54 *	ubsan will put her grubby mitts where she likes :D
Apr 01 11:55:54 *	ubsan will put her grubby mitts where she likes :D
Apr 01 11:57:00 <ubsan>	YOU HAVE DISPLEASED THE UNDEFINED GOD
Apr 01 11:57:00 <ubsan>	YOU HAVE DISPLEASED THE UNDEFINED GOD
Apr 01 11:57:17 *	ubsan realizes this isn't #rust-offtopic
Apr 01 11:57:17 *	ubsan realizes this isn't #rust-offtopic
Apr 01 11:57:32 <kimundi>	It now is :D
Apr 01 11:57:32 <kimundi>	It now is :D
Apr 01 12:23:04 <autrilla>	Is there a way to see what unwrap caused a panic?
Apr 01 12:23:04 <autrilla>	Is there a way to see what unwrap caused a panic?
Apr 01 12:24:23 <mbrubeck>	autrilla: Run with `RUST_BACKTRACE=1` environment variable
Apr 01 12:24:23 <mbrubeck>	autrilla: Run with `RUST_BACKTRACE=1` environment variable
Apr 01 12:24:32 <mbrubeck>	autrilla: e.g. `RUST_BACKTRACE=1 cargo run`
Apr 01 12:24:32 <mbrubeck>	autrilla: e.g. `RUST_BACKTRACE=1 cargo run`
Apr 01 12:24:52 <autrilla>	Oh, nice. Thanks!
Apr 01 12:24:52 <autrilla>	Oh, nice. Thanks!
Apr 01 12:25:35 <mbrubeck>	autrilla: It can also help to replace `result.unwrap()` with `result.expect("useful message here")` so you get more descriptive errors, if it's in code that you control.
Apr 01 12:25:35 <mbrubeck>	autrilla: It can also help to replace `result.unwrap()` with `result.expect("useful message here")` so you get more descriptive errors, if it's in code that you control.
Apr 01 12:27:09 <jwilm>	sfackler: ping
Apr 01 12:27:09 <jwilm>	sfackler: ping
Apr 01 12:40:02 <Binero>	Does anyone know of a clever trick to do this using iterators? 
Apr 01 12:40:02 <Binero>	Does anyone know of a clever trick to do this using iterators? 
Apr 01 12:40:05 <Binero>	http://is.gd/GVSf2V
Apr 01 12:40:05 <Binero>	http://is.gd/GVSf2V
Apr 01 12:40:37 <Binero>	(or in other words, only one for loop) 
Apr 01 12:40:37 <Binero>	(or in other words, only one for loop) 
Apr 01 12:44:08 <mbrubeck>	Binero: You can do it using .cartesian_product() from itertools
Apr 01 12:44:08 <mbrubeck>	Binero: You can do it using .cartesian_product() from itertools
Apr 01 12:44:37 <Binero>	!crates itertools
Apr 01 12:44:37 <Binero>	!crates itertools
Apr 01 12:44:53 <Binero>	!cargo itertools
Apr 01 12:44:53 <Binero>	!cargo itertools
Apr 01 12:44:58 <Quxxy2>	!crate itertools
Apr 01 12:44:58 <Quxxy2>	!crate itertools
Apr 01 12:44:58 <rustbot>	itertools (0.4.12) - Extra iterator adaptors, iterator methods and macros. -> https://crates.io/crates/itertools
Apr 01 12:44:58 <rustbot>	itertools (0.4.12) - Extra iterator adaptors, iterator methods and macros. -> https://crates.io/crates/itertools
Apr 01 12:45:00 <Binero>	ahh
Apr 01 12:45:00 <Binero>	ahh
Apr 01 12:45:04 <Binero>	thanks
Apr 01 12:45:04 <Binero>	thanks
Apr 01 12:45:44 <bluss>	there's even a macro called iproduct!()
Apr 01 12:45:44 <bluss>	there's even a macro called iproduct!()
Apr 01 12:45:57 <Quxxy2>	It expands to a random Apple device
Apr 01 12:45:57 <Quxxy2>	It expands to a random Apple device
Apr 01 12:46:16 <bluss>	oh no, dmca takedown coming
Apr 01 12:46:16 <bluss>	oh no, dmca takedown coming
Apr 01 12:46:16 <mbrubeck>	Binero: also http://is.gd/K7NiT1
Apr 01 12:46:16 <mbrubeck>	Binero: also http://is.gd/K7NiT1
Apr 01 12:47:04 <Binero>	That's pretty clever
Apr 01 12:47:04 <Binero>	That's pretty clever
Apr 01 12:48:01 <Binero>	I'll probably go with itertools for readability :p
Apr 01 12:48:01 <Binero>	I'll probably go with itertools for readability :p
Apr 01 12:49:14 <bluss>	but the original code was readable too
Apr 01 12:49:14 <bluss>	but the original code was readable too
Apr 01 12:51:05 <Binero>	bluss: The code I was writing was tabbing a bit far to the right
Apr 01 12:51:05 <Binero>	bluss: The code I was writing was tabbing a bit far to the right
Apr 01 12:51:06 <sfackler>	jwilm: pong
Apr 01 12:51:06 <sfackler>	jwilm: pong
Apr 01 12:53:48 <jwilm>	sfackler: hey! I am playing around with my log4rs config, and encountered a behavior that is contrary to the docs. Specifically, I have the root logger, a crate level logger. Adding a crate::mod logger with more verbosity seems to stop the ancestor logger from appending anything
Apr 01 12:53:48 <jwilm>	sfackler: hey! I am playing around with my log4rs config, and encountered a behavior that is contrary to the docs. Specifically, I have the root logger, a crate level logger. Adding a crate::mod logger with more verbosity seems to stop the ancestor logger from appending anything
Apr 01 12:53:49 <bluss>	Binero: maybe I can invite you to the loopmacros.rs crew https://github.com/bluss/matrixmultiply/blob/master/src/loopmacros.rs
Apr 01 12:53:49 <bluss>	Binero: maybe I can invite you to the loopmacros.rs crew https://github.com/bluss/matrixmultiply/blob/master/src/loopmacros.rs
Apr 01 12:53:55 <bluss>	Binero: it's like itertools only better
Apr 01 12:53:55 <bluss>	Binero: it's like itertools only better
Apr 01 12:54:00 <bluss>	static is the new dynamic
Apr 01 12:54:00 <bluss>	static is the new dynamic
Apr 01 12:54:12 <jwilm>	sfackler: I haven't upgraded to latest master, yet. Still somewhere between 0.3 and 0.4
Apr 01 12:54:12 <jwilm>	sfackler: I haven't upgraded to latest master, yet. Still somewhere between 0.3 and 0.4
Apr 01 12:54:49 <sfackler>	hmm, that seems weird
Apr 01 12:54:49 <sfackler>	hmm, that seems weird
Apr 01 12:54:58 Apr 01 12:54:58 <sfackler>	could you open an issue with a repro setup?
<sfackler>	could you open an issue with a repro setup?
Apr 01 12:55:40 Apr 01 12:55:40 <sfackler>	jwilm: that seems roughly like what this test crate has a setup like, but that works from what I remember: https://github.com/sfackler/log4rs/blob/master/test/log.toml
<sfackler>	jwilm: that seems roughly like what this test crate has a setup like, but that works from what I remember: https://github.com/sfackler/log4rs/blob/master/test/log.toml
Apr 01 12:56:50 <Binero>	bluss: that'd require putting a lot of loops inside each other :p
Apr 01 12:56:50 <Binero>	bluss: that'd require putting a lot of loops inside each other :p
Apr 01 12:57:21 <bluss>	Binero: it composes seamlessly
Apr 01 12:57:21 <bluss>	Binero: it composes seamlessly
Apr 01 12:57:42 <jwilm>	sfackler: yeah; will do. 
Apr 01 12:57:42 <jwilm>	sfackler: yeah; will do. 
Apr 01 13:15:12 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 13:15:12 *	ChanServ gives channel operator status to pcwalton
Apr 01 13:15:12 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 13:15:12 *	ChanServ gives channel operator status to pcwalton
Apr 01 13:17:18 <angelsl>	https://github.com/rust-lang-nursery/multirust-rs#cross-compilation
Apr 01 13:17:18 <angelsl>	https://github.com/rust-lang-nursery/multirust-rs#cross-compilation
Apr 01 13:17:24 <angelsl>	is it possible to add custom targets?
Apr 01 13:17:24 <angelsl>	is it possible to add custom targets?
Apr 01 13:17:36 <angelsl>	other than those precompiled stds
Apr 01 13:17:36 <angelsl>	other than those precompiled stds
Apr 01 13:20:06 <mbrubeck>	angelsl: Yes, https://github.com/japaric/rust-cross has some instructions for compiling your own libstd and pointing multirust to it
Apr 01 13:20:06 <mbrubeck>	angelsl: Yes, https://github.com/japaric/rust-cross has some instructions for compiling your own libstd and pointing multirust to it
Apr 01 13:20:59 <angelsl>	mbrubeck: thanks :)
Apr 01 13:20:59 <angelsl>	mbrubeck: thanks :)
Apr 01 13:21:46 <autrilla>	I'm getting "error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]" on https://gist.github.com/autrilla/9c395957a57842ae07ecbbb177c6a74e (line 8). What does it mean?
Apr 01 13:21:46 <autrilla>	I'm getting "error: unable to infer enough type information about `_`; type annotations or generic parameter binding required [E0282]" on https://gist.github.com/autrilla/9c395957a57842ae07ecbbb177c6a74e (line 8). What does it mean?
Apr 01 13:22:10 <autrilla>	Or rather, why isn't there enough type information?
Apr 01 13:22:10 <autrilla>	Or rather, why isn't there enough type information?
Apr 01 13:22:56 <mbrubeck>	autrilla: Remove the semicolon from line 16
Apr 01 13:22:56 <mbrubeck>	autrilla: Remove the semicolon from line 16
Apr 01 13:23:58 <autrilla>	mbrubeck: oh, I missed that, thanks!
Apr 01 13:23:58 <autrilla>	mbrubeck: oh, I missed that, thanks!
Apr 01 13:24:12 <mbrubeck>	(or change line 8 to "return Ok(...)")
Apr 01 13:24:12 <mbrubeck>	(or change line 8 to "return Ok(...)")
Apr 01 13:25:02 <autrilla>	Okay, not I get `NodeRef` is private, but I'd still want to pass that to one of my methods. Is it simply not possible?
Apr 01 13:25:02 <autrilla>	Okay, not I get `NodeRef` is private, but I'd still want to pass that to one of my methods. Is it simply not possible?
Apr 01 13:26:56 <mbrubeck>	autrilla: Try `use kuchiki::NodeRef;`
Apr 01 13:26:56 <mbrubeck>	autrilla: Try `use kuchiki::NodeRef;`
Apr 01 13:27:17 <mbrubeck>	autrilla: The `tree` module is private, but its types are re-exported here: https://github.com/SimonSapin/kuchiki/blob/master/src/lib.rs#L32
Apr 01 13:27:17 <mbrubeck>	autrilla: The `tree` module is private, but its types are re-exported here: https://github.com/SimonSapin/kuchiki/blob/master/src/lib.rs#L32
Apr 01 13:28:43 *	ChanServ gives channel operator status to jdm
Apr 01 13:28:43 *	ChanServ gives channel operator status to jdm
Apr 01 13:41:12 <BrotherLy>	what is the doc! macro? where do i get it? https://github.com/thijsc/mongo-rust-driver/blob/master/tests/collection.rs
Apr 01 13:41:12 <BrotherLy>	what is the doc! macro? where do i get it? https://github.com/thijsc/mongo-rust-driver/blob/master/tests/collection.rs
Apr 01 13:41:18 <BrotherLy>	i put all the use statements into my own app 
Apr 01 13:41:18 <BrotherLy>	i put all the use statements into my own app 
Apr 01 13:41:22 <autrilla>	mbrubeck: thanks again
Apr 01 13:41:22 <autrilla>	mbrubeck: thanks again
Apr 01 13:41:40 <autrilla>	Aren't collections::string::Strings supposed to be converted to strs when you & them?
Apr 01 13:41:40 <autrilla>	Aren't collections::string::Strings supposed to be converted to strs when you & them?
Apr 01 13:41:57 <autrilla>	As this here says: https://doc.rust-lang.org/collections/string/struct.String.html#deref
Apr 01 13:41:57 <autrilla>	As this here says: https://doc.rust-lang.org/collections/string/struct.String.html#deref
Apr 01 13:42:46 <ivan>	BrotherLy: you have to walk up to the crate root to find the #[macro_use] extern crate declarations
Apr 01 13:42:46 <ivan>	BrotherLy: you have to walk up to the crate root to find the #[macro_use] extern crate declarations
Apr 01 13:42:47 <ivan>	in this case https://github.com/thijsc/mongo-rust-driver/blob/master/tests/tests.rs
Apr 01 13:42:47 <ivan>	in this case https://github.com/thijsc/mongo-rust-driver/blob/master/tests/tests.rs
Apr 01 13:42:57 <ivan>	https://github.com/zonyitoo/bson-rs/blob/master/src/macros.rs#L33
Apr 01 13:42:57 <ivan>	https://github.com/zonyitoo/bson-rs/blob/master/src/macros.rs#L33
Apr 01 13:43:45 <mbrubeck>	autrilla: Only when passing to something that only takes &str.
Apr 01 13:43:45 <mbrubeck>	autrilla: Only when passing to something that only takes &str.
Apr 01 13:43:54 *	ChanServ sets mode +a on #rust brson
Apr 01 13:43:54 *	ChanServ gives channel operator status to brson
Apr 01 13:43:54 *	ChanServ sets mode +a on #rust brson
Apr 01 13:43:54 *	ChanServ gives channel operator status to brson
Apr 01 13:44:08 <mbrubeck>	autrilla: In other contexts you need to do `&*string` or `&string[..]` or `string.as_str()` to get a slice.  (All three are equivalent.)
Apr 01 13:44:08 <mbrubeck>	autrilla: In other contexts you need to do `&*string` or `&string[..]` or `string.as_str()` to get a slice.  (All three are equivalent.)
Apr 01 13:49:17 <EntilZha>	Trying to create a type alias for essentially: (usize, _, usize) where _ satisfies some specific traits (eg Copy, Clone, etc). What is the right way to do that? Having the tuple in something like `pub trait Triplet {} impl<T> Triplet for T where T: (usize, _, usize) {}` doesn't seem to work. The _ is itself another alias as described here http://stackoverflow.com/questions/26070559/type-alias-for-multiple-traits
Apr 01 13:49:17 <EntilZha>	Trying to create a type alias for essentially: (usize, _, usize) where _ satisfies some specific traits (eg Copy, Clone, etc). What is the right way to do that? Having the tuple in something like `pub trait Triplet {} impl<T> Triplet for T where T: (usize, _, usize) {}` doesn't seem to work. The _ is itself another alias as described here http://stackoverflow.com/questions/26070559/type-alias-for-multiple-traits
Apr 01 13:53:08 <UBSan>	EntilZha: type Triplet<T: Copy + Clone> = (usize, T, usize);
Apr 01 13:53:08 <UBSan>	EntilZha: type Triplet<T: Copy + Clone> = (usize, T, usize);
Apr 01 13:53:09 <UBSan>	or
Apr 01 13:53:09 <UBSan>	or
Apr 01 13:53:31 <UBSan>	struct Triplet<T: Copy + Clone>(pub usize, pub T, pub usize);
Apr 01 13:53:31 <UBSan>	struct Triplet<T: Copy + Clone>(pub usize, pub T, pub usize);
Apr 01 13:57:34 <glendc>	can I compile a windows (rust) dll from OSX (using the rust-std-nightly-x86_64-pc-windows-gnu) ?
Apr 01 13:57:34 <glendc>	can I compile a windows (rust) dll from OSX (using the rust-std-nightly-x86_64-pc-windows-gnu) ?
Apr 01 13:57:51 <glendc>	or would that only be possible from an actual windows environment?
Apr 01 13:57:51 <glendc>	or would that only be possible from an actual windows environment?
Apr 01 13:59:32 <EntilZha>	wondering what the warning means here http://is.gd/EBqZyd
Apr 01 13:59:32 <EntilZha>	wondering what the warning means here http://is.gd/EBqZyd
Apr 01 13:59:45 <EntilZha>	warning: trait bounds are not (yet) enforced in type definitions
Apr 01 13:59:45 <EntilZha>	warning: trait bounds are not (yet) enforced in type definitions
Apr 01 13:59:57 <UBSan>	EntilZha: it means you could put any T in there
Apr 01 13:59:57 <UBSan>	EntilZha: it means you could put any T in there
Apr 01 14:00:17 <EntilZha>	So, its not picking up the Property type bound for some reason?
Apr 01 14:00:17 <EntilZha>	So, its not picking up the Property type bound for some reason?
Apr 01 14:00:19 <UBSan>	because, unfortunately, the compiler doesn't enforce those bounds yet
Apr 01 14:00:19 <UBSan>	because, unfortunately, the compiler doesn't enforce those bounds yet
Apr 01 14:00:24 <UBSan>	yeah
Apr 01 14:00:24 <UBSan>	yeah
Apr 01 14:00:33 <UBSan>	compiler feature that hasn't been implemented
Apr 01 14:00:33 <UBSan>	compiler feature that hasn't been implemented
Apr 01 14:00:46 <EntilZha>	so, in this case, better to manually specify Copy then
Apr 01 14:00:46 <EntilZha>	so, in this case, better to manually specify Copy then
Apr 01 14:00:59 <UBSan>	I mean, that won't help
Apr 01 14:00:59 <UBSan>	I mean, that won't help
Apr 01 14:01:00 <EntilZha>	its only one trait, but its sort of an abstraction
Apr 01 14:01:00 <EntilZha>	its only one trait, but its sort of an abstraction
Apr 01 14:01:15 <UBSan>	the compiler won't enforce trait bounds in type aliases
Apr 01 14:01:15 <UBSan>	the compiler won't enforce trait bounds in type aliases
Apr 01 14:01:18 <UBSan>	(for now)
Apr 01 14:01:18 <UBSan>	(for now)
Apr 01 14:01:19 <EntilZha>	oh, I thought it was an issue with the Property trait, not that type bound on aliases
Apr 01 14:01:19 <EntilZha>	oh, I thought it was an issue with the Property trait, not that type bound on aliases
Apr 01 14:01:38 <EntilZha>	so, what happens if it is not a Copy? panic or something?
Apr 01 14:01:38 <EntilZha>	so, what happens if it is not a Copy? panic or something?
Apr 01 14:01:45 <UBSan>	it'll just
Apr 01 14:01:45 <UBSan>	it'll just
Apr 01 14:01:47 <UBSan>	let you do that
Apr 01 14:01:47 <UBSan>	let you do that
Apr 01 14:01:58 <EntilZha>	Followup question, is there a way around it?
Apr 01 14:01:58 <EntilZha>	Followup question, is there a way around it?
Apr 01 14:02:02 <bascule>	 _____ ____  ___ ____    _ __   ___ _ _ 
Apr 01 14:02:02 <bascule>	 _____ ____  ___ ____    _ __   ___ _ _ 
Apr 01 14:02:05 <bascule>	|  ___|  _ \|_ _|  _ \  / \\ \ / / | | |
Apr 01 14:02:05 <bascule>	|  ___|  _ \|_ _|  _ \  / \\ \ / / | | |
Apr 01 14:02:08 <bascule>	| |_  | |_) || || | | |/ _ \\ V /| | | |
Apr 01 14:02:08 <bascule>	| |_  | |_) || || | | |/ _ \\ V /| | | |
Apr 01 14:02:11 <bascule>	|  _| |  _ < | || |_| / ___ \| | |_|_|_|
Apr 01 14:02:11 <bascule>	|  _| |  _ < | || |_| / ___ \| | |_|_|_|
Apr 01 14:02:14 <bascule>	|_|   |_| \_\___|____/_/   \_\_| (_|_|_)
Apr 01 14:02:14 <bascule>	|_|   |_| \_\___|____/_/   \_\_| (_|_|_)
Apr 01 14:02:17 <bascule>	                                        
Apr 01 14:02:17 <bascule>	                                        
Apr 01 14:02:35 <UBSan>	EntilZha: create a struct, is basically your option
Apr 01 14:02:35 <UBSan>	EntilZha: create a struct, is basically your option
Apr 01 14:02:51 <UBSan>	pub struct Triplet<T: Property>(pub VertexId, pub T, pub VertexId);
Apr 01 14:02:51 <UBSan>	pub struct Triplet<T: Property>(pub VertexId, pub T, pub VertexId);
Apr 01 14:02:57 <UBSan>	sorry :/
Apr 01 14:02:57 <UBSan>	sorry :/
Apr 01 14:02:57 <EntilZha>	Will do that then, seems easy to make a tuple struct for this
Apr 01 14:02:57 <EntilZha>	Will do that then, seems easy to make a tuple struct for this
Apr 01 14:03:25 <EntilZha>	going to guess regular tuples can't be coerced into tuple structs implicitly?
Apr 01 14:03:25 <EntilZha>	going to guess regular tuples can't be coerced into tuple structs implicitly?
Apr 01 14:03:50 <UBSan>	nop
Apr 01 14:03:50 <UBSan>	nop
Apr 01 14:03:51 <UBSan>	sorry
Apr 01 14:03:51 <UBSan>	sorry
Apr 01 14:04:02 <EntilZha>	just checking, seems like that is a pandora box to open
Apr 01 14:04:02 <EntilZha>	just checking, seems like that is a pandora box to open
Apr 01 14:04:18 <EntilZha>	in any case, these are things returned not inputtted into the function I am writing
Apr 01 14:04:18 <EntilZha>	in any case, these are things returned not inputtted into the function I am writing
Apr 01 14:05:17 <tromey>	should I report problems with grammar.html?
Apr 01 14:05:17 <tromey>	should I report problems with grammar.html?
Apr 01 14:05:54 <EntilZha>	UBSan, out of curiosity, where can that issue be tracked?
Apr 01 14:05:54 <EntilZha>	UBSan, out of curiosity, where can that issue be tracked?
Apr 01 14:06:11 <UBSan>	EntilZha: I do not know
Apr 01 14:06:11 <UBSan>	EntilZha: I do not know
Apr 01 14:06:21 <steveklabnik>	tromey: you can if you'd like, though we know that it's not specatular, and is scheduled for major revisions in the future
Apr 01 14:06:21 <steveklabnik>	tromey: you can if you'd like, though we know that it's not specatular, and is scheduled for major revisions in the future
Apr 01 14:06:25 <EntilZha>	I'll poke around on github
Apr 01 14:06:25 <EntilZha>	I'll poke around on github
Apr 01 14:06:35 <UBSan>	good idea
Apr 01 14:06:35 <UBSan>	good idea
Apr 01 14:06:35 <tromey>	steveklabnik: ok, it's so minor, I may not bother then
Apr 01 14:06:35 <tromey>	steveklabnik: ok, it's so minor, I may not bother then
Apr 01 14:06:51 <steveklabnik>	if you're ever unsure, just open an issue. as a general rule
Apr 01 14:06:51 <steveklabnik>	if you're ever unsure, just open an issue. as a general rule
Apr 01 14:06:56 <steveklabnik>	we prefer too many to too few
Apr 01 14:06:56 <steveklabnik>	we prefer too many to too few
Apr 01 14:07:01 <tromey>	ok
Apr 01 14:07:01 <tromey>	ok
Apr 01 14:08:49 <BrotherLy>	ivan: i put "extern create bson;" in my file but the error is still there
Apr 01 14:08:49 <BrotherLy>	ivan: i put "extern create bson;" in my file but the error is still there
Apr 01 14:14:02 <BrotherLy>	ivan: nvm, i had to use this weired macro_use thing in front
Apr 01 14:14:02 <BrotherLy>	ivan: nvm, i had to use this weired macro_use thing in front
Apr 01 14:25:01 <BrotherLy>	the fact is that Rust is a c++ replacement, not a c replacement. :(
Apr 01 14:25:01 <BrotherLy>	the fact is that Rust is a c++ replacement, not a c replacement. :(
Apr 01 14:25:32 <feti>	That's a strange assessment.
Apr 01 14:25:32 <feti>	That's a strange assessment.
Apr 01 14:25:55 <_habnabit>	haha
Apr 01 14:25:55 <_habnabit>	haha
Apr 01 14:26:48 <_habnabit>	if i'm ./configuring rust with --target=asmjs-unknown-emscripten, it looks like it's not configuring llvm with the right flags to actually build with that target
Apr 01 14:26:48 <_habnabit>	if i'm ./configuring rust with --target=asmjs-unknown-emscripten, it looks like it's not configuring llvm with the right flags to actually build with that target
Apr 01 14:26:53 <_habnabit>	so it gets through stage2 and then fails
Apr 01 14:26:53 <_habnabit>	so it gets through stage2 and then fails
Apr 01 14:27:39 <kmc>	i agree with BrotherLy... or rather, Rust is no more of a C replacement than C++ is
Apr 01 14:27:39 <kmc>	i agree with BrotherLy... or rather, Rust is no more of a C replacement than C++ is
Apr 01 14:27:56 <kmc>	Rust is too complicated to really be a C replacement
Apr 01 14:27:56 <kmc>	Rust is too complicated to really be a C replacement
Apr 01 14:28:18 <kmc>	though a lot of C projects might find moving to Rust more attractive than moving to C++
Apr 01 14:28:18 <kmc>	though a lot of C projects might find moving to Rust more attractive than moving to C++
Apr 01 14:28:22 <kmc>	as usual, everyone has different needs
Apr 01 14:28:22 <kmc>	as usual, everyone has different needs
Apr 01 14:28:45 <_habnabit>	that's because C has too simplistic/naieve of a worldview to be useful in TYOOL 2016
Apr 01 14:28:45 <_habnabit>	that's because C has too simplistic/naieve of a worldview to be useful in TYOOL 2016
Apr 01 14:28:59 <kmc>	maybe so
Apr 01 14:28:59 <kmc>	maybe so
Apr 01 14:29:31 Apr 01 14:29:31 <apajx>	TIL TYOOL
<apajx>	TIL TYOOL
Apr 01 14:30:50 <BrotherLy>	kmc, yep all the same mistakes. Compilation takes too long, too complicated.
Apr 01 14:30:50 <BrotherLy>	kmc, yep all the same mistakes. Compilation takes too long, too complicated.
Apr 01 14:31:44 <_habnabit>	turns out, memory management is hard
Apr 01 14:31:44 <_habnabit>	turns out, memory management is hard
Apr 01 14:32:15 <feti>	TIL I wish I didn't TIL TYOOL
Apr 01 14:32:15 <feti>	TIL I wish I didn't TIL TYOOL
Apr 01 14:32:40 <apajx>	I don't think any language has a good chance of ever replacing C, but I think Rust has a great shot at being a competitive systems language
Apr 01 14:32:40 <apajx>	I don't think any language has a good chance of ever replacing C, but I think Rust has a great shot at being a competitive systems language
Apr 01 14:32:53 <_habnabit>	i've been pushing rust as a C replacement everywhere i can
Apr 01 14:32:53 <_habnabit>	i've been pushing rust as a C replacement everywhere i can
Apr 01 14:33:25 <apajx>	If I had to choose the closest _current_ language that would have the best chance of doing that I'd say Rust, but what's a few percentage points between friends?
Apr 01 14:33:25 <apajx>	If I had to choose the closest _current_ language that would have the best chance of doing that I'd say Rust, but what's a few percentage points between friends?
Apr 01 14:33:38 <feti>	I remember reading an avrdude threat post from a few years back. A bunch of elitest C devs ranting and raving about how stupid it would be to provide Rust support.
Apr 01 14:33:38 <feti>	I remember reading an avrdude threat post from a few years back. A bunch of elitest C devs ranting and raving about how stupid it would be to provide Rust support.
Apr 01 14:33:48 <feti>	How C is the ultimate language, omg. Now somebody's working on it.
Apr 01 14:33:48 <feti>	How C is the ultimate language, omg. Now somebody's working on it.
Apr 01 14:34:10 <feti>	The most annoying part about that is just the seething ignorance of people, and their closed-mindedness.
Apr 01 14:34:10 <feti>	The most annoying part about that is just the seething ignorance of people, and their closed-mindedness.
Apr 01 14:34:15 <_habnabit>	haha
Apr 01 14:34:15 <_habnabit>	haha
Apr 01 14:34:15 <tzaeru>	personally I feel that C's major advantage actually is that it's easy to learn for a sufficient level to get shit done pretty well :P
Apr 01 14:34:15 <tzaeru>	personally I feel that C's major advantage actually is that it's easy to learn for a sufficient level to get shit done pretty well :P
Apr 01 14:34:19 <tzaeru>	rust's less so in my experience.
Apr 01 14:34:19 <tzaeru>	rust's less so in my experience.
Apr 01 14:34:31 <feti>	That's true.
Apr 01 14:34:31 <feti>	That's true.
Apr 01 14:34:32 <tzaeru>	though been acquinted with C since a little kid might make the assessment difficult..
Apr 01 14:34:32 <tzaeru>	though been acquinted with C since a little kid might make the assessment difficult..
Apr 01 14:34:35 <_habnabit>	except for the part where your code is buggier
Apr 01 14:34:35 <_habnabit>	except for the part where your code is buggier
Apr 01 14:34:35 <tzaeru>	*being
Apr 01 14:34:35 <tzaeru>	*being
Apr 01 14:34:47 <tzaeru>	_habnabit, yes, but that's not really so important for your average client needs!
Apr 01 14:34:47 <tzaeru>	_habnabit, yes, but that's not really so important for your average client needs!
Apr 01 14:34:57 <_habnabit>	can't say i agree
Apr 01 14:34:57 <_habnabit>	can't say i agree
Apr 01 14:34:58 <apajx>	The only problem I see with dethroning C is it's current entreachment and eco-system.
Apr 01 14:34:58 <apajx>	The only problem I see with dethroning C is it's current entreachment and eco-system.
Apr 01 14:34:59 <tzaeru>	and there's always a client. it's just a matter of how long they are a client.
Apr 01 14:34:59 <tzaeru>	and there's always a client. it's just a matter of how long they are a client.
Apr 01 14:35:05 <tzaeru>	and how anal they are about their software.
Apr 01 14:35:05 <tzaeru>	and how anal they are about their software.
Apr 01 14:35:13 <BrotherLy>	rust is the next best thing, but it made the exact same mistakes again as c++ made
Apr 01 14:35:13 <BrotherLy>	rust is the next best thing, but it made the exact same mistakes again as c++ made
Apr 01 14:35:19 <feti>	Well plus, this may be arguable, but the average C codebase doesn't *need* to work on multiple architectures. They're targetting specific needs.
Apr 01 14:35:19 <feti>	Well plus, this may be arguable, but the average C codebase doesn't *need* to work on multiple architectures. They're targetting specific needs.
Apr 01 14:35:23 <feti>	And C suffices.
Apr 01 14:35:23 <feti>	And C suffices.
Apr 01 14:35:32 <_habnabit>	except for the part where your code is buggier
Apr 01 14:35:32 <_habnabit>	except for the part where your code is buggier
Apr 01 14:35:50 <tzaeru>	unfortunately it just tends to be so that having stuff done fast is better than having stuff done *well*
Apr 01 14:35:50 <tzaeru>	unfortunately it just tends to be so that having stuff done fast is better than having stuff done *well*
Apr 01 14:35:50 <UBSan>	BrotherLy: or it made the exact same right choices that C++ made
Apr 01 14:35:50 <UBSan>	BrotherLy: or it made the exact same right choices that C++ made
Apr 01 14:35:56 <tzaeru>	if it works on a sufficient level, bugs are OK.
Apr 01 14:35:56 <tzaeru>	if it works on a sufficient level, bugs are OK.
Apr 01 14:35:56 <UBSan>	and learned from the mistakes
Apr 01 14:35:56 <UBSan>	and learned from the mistakes
Apr 01 14:36:01 <tzaeru>	no one likes that, but it is how it is
Apr 01 14:36:01 <tzaeru>	no one likes that, but it is how it is
Apr 01 14:36:05 <UBSan>	like, copy semantics :/
Apr 01 14:36:05 <UBSan>	like, copy semantics :/
Apr 01 14:36:34 <_habnabit>	after using C for years and learning rust, i can say with reasonable confidence that i'm faster with rust than i ever was with C
Apr 01 14:36:34 <_habnabit>	after using C for years and learning rust, i can say with reasonable confidence that i'm faster with rust than i ever was with C
Apr 01 14:37:03 <feti>	Except with wanting a nice pointer arithmetic. :)
Apr 01 14:37:03 <feti>	Except with wanting a nice pointer arithmetic. :)
Apr 01 14:37:06 <feti>	Gosh that's helpful.
Apr 01 14:37:06 <feti>	Gosh that's helpful.
Apr 01 14:37:15 <_habnabit>	helpful for buffer overflows, maybe
Apr 01 14:37:15 <_habnabit>	helpful for buffer overflows, maybe
Apr 01 14:37:23 <tzaeru>	_habnabit, yea, I don't doubt that, what I was more referring to is that learning to do C on a sufficient level for ordinary stuff is not very hard.
Apr 01 14:37:23 <tzaeru>	_habnabit, yea, I don't doubt that, what I was more referring to is that learning to do C on a sufficient level for ordinary stuff is not very hard.
Apr 01 14:37:26 <feti>	You are the most negative nancy today, dang :)
Apr 01 14:37:26 <feti>	You are the most negative nancy today, dang :)
Apr 01 14:37:29 <tzaeru>	I feel that Rust requires a lot more know-how to write effectively.
Apr 01 14:37:29 <tzaeru>	I feel that Rust requires a lot more know-how to write effectively.
Apr 01 14:37:30 <_habnabit>	i just hate C
Apr 01 14:37:30 <_habnabit>	i just hate C
Apr 01 14:37:36 <_habnabit>	i hate it so much
Apr 01 14:37:36 <_habnabit>	i hate it so much
Apr 01 14:37:39 <tzaeru>	but that might be my personal experience in sucking at learning complex things :S
Apr 01 14:37:39 <tzaeru>	but that might be my personal experience in sucking at learning complex things :S
Apr 01 14:38:06 <apajx>	I wonder if stabalization of compiler plugins will defragment Rust into a mess or be the best thing ever.
Apr 01 14:38:06 <apajx>	I wonder if stabalization of compiler plugins will defragment Rust into a mess or be the best thing ever.
Apr 01 14:38:19 <apajx>	Kind of like what happened with D's stdlib except in a different vein of hte language
Apr 01 14:38:19 <apajx>	Kind of like what happened with D's stdlib except in a different vein of hte language
Apr 01 14:38:20 Apr 01 14:38:20 <kmc>	BrotherLy: being complicated is not necessarily a mistake. it depends on what you get in exchange for that complexity
<kmc>	BrotherLy: being complicated is not necessarily a mistake. it depends on what you get in exchange for that complexity
Apr 01 14:38:23 <kmc>	and Rust does better than C++ there
Apr 01 14:38:23 <kmc>	and Rust does better than C++ there
Apr 01 14:39:22 <kmc>	C++ has so much complexity from trying to be mostly backwards compatible with C, and from making bad decisions initially (implicit conversions, implicit copies) and then trying to walk them back in C++11, again, backwards-compatibly
Apr 01 14:39:22 <kmc>	C++ has so much complexity from trying to be mostly backwards compatible with C, and from making bad decisions initially (implicit conversions, implicit copies) and then trying to walk them back in C++11, again, backwards-compatibly
Apr 01 14:39:35 <kmc>	Rust started with the same conceptual framework as C++11 and none of the baggage
Apr 01 14:39:35 <kmc>	Rust started with the same conceptual framework as C++11 and none of the baggage
Apr 01 14:39:41 <kmc>	not to say Rust is a perfect design ;)
Apr 01 14:39:41 <kmc>	not to say Rust is a perfect design ;)
Apr 01 14:40:11 <tzaeru>	from the sense of complexity and pre-existing architehtural features (like objects or traits or so), c++ to rust is definitely a fairer comparison than rust to c
Apr 01 14:40:11 <tzaeru>	from the sense of complexity and pre-existing architehtural features (like objects or traits or so), c++ to rust is definitely a fairer comparison than rust to c
Apr 01 14:40:16 <kmc>	as for compile time, that's an implementation detail which will improve
Apr 01 14:40:16 <kmc>	as for compile time, that's an implementation detail which will improve
Apr 01 14:40:29 <apajx>	Are explicit coercions of any T to any U ever going to be a thing? Like a Trait to overload the as keyword for a tuple to a struct?
Apr 01 14:40:29 <apajx>	Are explicit coercions of any T to any U ever going to be a thing? Like a Trait to overload the as keyword for a tuple to a struct?
Apr 01 14:40:33 <tzaeru>	hard to be more simple than c without being asm and if simplicity is your thing, c's valid I guess
Apr 01 14:40:33 <tzaeru>	hard to be more simple than c without being asm and if simplicity is your thing, c's valid I guess
Apr 01 14:40:50 <_habnabit>	apajx, From/Into?
Apr 01 14:40:50 <_habnabit>	apajx, From/Into?
Apr 01 14:41:04 <apajx>	_habnabit: wait it already exists? o.o
Apr 01 14:41:04 <apajx>	_habnabit: wait it already exists? o.o
Apr 01 14:41:21 <_habnabit>	apajx, not for `as`, but it might be what you want
Apr 01 14:41:21 <_habnabit>	apajx, not for `as`, but it might be what you want
Apr 01 14:42:06 <c_wraith>	tzaeru, I would argue that specific C implementations might be simple, but writing code the spec requires to work the same across all implementations is basically impossible. 
Apr 01 14:42:06 <c_wraith>	tzaeru, I would argue that specific C implementations might be simple, but writing code the spec requires to work the same across all implementations is basically impossible. 
Apr 01 14:42:23 <BrotherLy>	compilation time will not improve, lets be real here. 2-3 seconds for a file is now apparently acceptable
Apr 01 14:42:23 <BrotherLy>	compilation time will not improve, lets be real here. 2-3 seconds for a file is now apparently acceptable
Apr 01 14:42:27 <tzaeru>	c_wraith, yeah, but that's rarely a real-world demand for majority of programmers
Apr 01 14:42:27 <tzaeru>	c_wraith, yeah, but that's rarely a real-world demand for majority of programmers
Apr 01 14:42:41 <kmc>	BrotherLy: why do you say it won't improve? it *has* improved a lot since Rust 1.0
Apr 01 14:42:41 <kmc>	BrotherLy: why do you say it won't improve? it *has* improved a lot since Rust 1.0
Apr 01 14:42:46 <apajx>	_habnabit: oh I see, that does solve a lot of hte problems I was considering.
Apr 01 14:42:46 <apajx>	_habnabit: oh I see, that does solve a lot of hte problems I was considering.
Apr 01 14:42:47 <kmc>	BrotherLy: it may never be at the point where you're happy
Apr 01 14:42:47 <kmc>	BrotherLy: it may never be at the point where you're happy
Apr 01 14:42:52 <kmc>	but you're being kind of aggressively negative
Apr 01 14:42:52 <kmc>	but you're being kind of aggressively negative
Apr 01 14:42:54 Apr 01 14:42:54 <kmc>	"let's be real here"
<kmc>	"let's be real here"
Apr 01 14:43:00 <BrotherLy>	because if compilation time was a real focus it would have never shipped like this
Apr 01 14:43:00 <BrotherLy>	because if compilation time was a real focus it would have never shipped like this
Apr 01 14:43:07 <steveklabnik>	yes
Apr 01 14:43:07 <steveklabnik>	yes
Apr 01 14:43:15 <kmc>	BrotherLy: it is a real focus. it has improved a lot. there are, like, numbers which show this
Apr 01 14:43:15 <kmc>	BrotherLy: it is a real focus. it has improved a lot. there are, like, numbers which show this
Apr 01 14:43:20 Apr 01 14:43:20 <kmc>	graphs even
<kmc>	graphs even
Apr 01 14:43:20 <steveklabnik>	i have been hesitating to pull out the steve no-fun chastizing 
Apr 01 14:43:20 <steveklabnik>	i have been hesitating to pull out the steve no-fun chastizing 
Apr 01 14:43:21 <kmc>	data
Apr 01 14:43:21 <kmc>	data
Apr 01 14:43:33 <BrotherLy>	kmc, I'm not talking about bringing 10 seconds down to 5
Apr 01 14:43:33 <BrotherLy>	kmc, I'm not talking about bringing 10 seconds down to 5
Apr 01 14:43:36 <steveklabnik>	but endlessly arguing about other languages is not what this room is about
Apr 01 14:43:36 <steveklabnik>	but endlessly arguing about other languages is not what this room is about
Apr 01 14:43:38 <kmc>	BrotherLy: it wasn't a 1.0 blocker, that doesn't mean people don't care. that is an unfair inference
Apr 01 14:43:38 <kmc>	BrotherLy: it wasn't a 1.0 blocker, that doesn't mean people don't care. that is an unfair inference
Apr 01 14:43:42 <BrotherLy>	it should never be above 1 second in the first place
Apr 01 14:43:42 <BrotherLy>	it should never be above 1 second in the first place
Apr 01 14:44:06 <kmc>	BrotherLy: okay, maybe Rust is not for you then. there will always be some compile time tradeoff for e.g. monomorphization and static checking
Apr 01 14:44:06 <kmc>	BrotherLy: okay, maybe Rust is not for you then. there will always be some compile time tradeoff for e.g. monomorphization and static checking
Apr 01 14:44:20 <kmc>	you could at least not trash the hard work of people who are looking to make the situation better
Apr 01 14:44:20 <kmc>	you could at least not trash the hard work of people who are looking to make the situation better
Apr 01 14:44:33 <BrotherLy>	sorry i guess im just disappointed
Apr 01 14:44:33 <BrotherLy>	sorry i guess im just disappointed
Apr 01 14:44:59 <kmc>	try a unity build for C, or try turning on LTO for a huge project
Apr 01 14:44:59 <kmc>	try a unity build for C, or try turning on LTO for a huge project
Apr 01 14:45:01 <kmc>	it's a different story
Apr 01 14:45:01 <kmc>	it's a different story
Apr 01 14:45:14 <UBSan>	if you want the nice benefits of one of the fastest three languages, you're gonna have to deal with compile times
Apr 01 14:45:14 <UBSan>	if you want the nice benefits of one of the fastest three languages, you're gonna have to deal with compile times
Apr 01 14:45:29 <BrotherLy>	C compiles very fast, i never had an issue there
Apr 01 14:45:29 <BrotherLy>	C compiles very fast, i never had an issue there
Apr 01 14:45:32 <UBSan>	you're paying at compile time for run-time perf
Apr 01 14:45:32 <UBSan>	you're paying at compile time for run-time perf
Apr 01 14:45:41 <_habnabit>	BrotherLy, is it making your feedback cycle too long? you might want to put a static analyzer in your editor
Apr 01 14:45:41 <_habnabit>	BrotherLy, is it making your feedback cycle too long? you might want to put a static analyzer in your editor
Apr 01 14:45:50 <UBSan>	C is also very, very simple to compile
Apr 01 14:45:50 <UBSan>	C is also very, very simple to compile
Apr 01 14:45:54 <UBSan>	unlike Rust or C++
Apr 01 14:45:54 <UBSan>	unlike Rust or C++
Apr 01 14:46:04 <BrotherLy>	_habnabit: what do you mean? static analyzer?
Apr 01 14:46:04 <BrotherLy>	_habnabit: what do you mean? static analyzer?
Apr 01 14:46:20 <UBSan>	no monomorphization
Apr 01 14:46:20 <UBSan>	no monomorphization
Apr 01 14:46:30 <_habnabit>	BrotherLy, i use flycheck with emacs
Apr 01 14:46:30 <_habnabit>	BrotherLy, i use flycheck with emacs
Apr 01 14:46:30 <UBSan>	much less typechecking
Apr 01 14:46:30 <UBSan>	much less typechecking
Apr 01 14:46:37 <mbrubeck>	smaller compilation units (usually)
Apr 01 14:46:37 <mbrubeck>	smaller compilation units (usually)
Apr 01 14:46:37 <UBSan>	etc.
Apr 01 14:46:37 <UBSan>	etc.
Apr 01 14:47:10 <UBSan>	if you write rust like you write C
Apr 01 14:47:10 <UBSan>	if you write rust like you write C
Apr 01 14:47:17 <tzaeru>	I'd also suppose that incremental compilation will eventually drastically increase the build times for very large projects?
Apr 01 14:47:17 <tzaeru>	I'd also suppose that incremental compilation will eventually drastically increase the build times for very large projects?
Apr 01 14:47:22 <UBSan>	you get comparable compilation times
Apr 01 14:47:22 <UBSan>	you get comparable compilation times
Apr 01 14:48:11 <UBSan>	similarly for C++
Apr 01 14:48:11 <UBSan>	similarly for C++
Apr 01 14:48:23 <mbrubeck>	tzaeru: We sure hope so.
Apr 01 14:48:23 <mbrubeck>	tzaeru: We sure hope so.
Apr 01 14:48:27 <mbrubeck>	(we == the servo team)
Apr 01 14:48:27 <mbrubeck>	(we == the servo team)
Apr 01 14:48:42 <UBSan>	now, I'm gonna write some C
Apr 01 14:48:42 <UBSan>	now, I'm gonna write some C
Apr 01 14:48:45 <UBSan>	on DOS
Apr 01 14:48:45 <UBSan>	on DOS
Apr 01 14:49:05 <tzaeru>	hmm.. ooh. oldschool DOS demo in Rust :O
Apr 01 14:49:05 <tzaeru>	hmm.. ooh. oldschool DOS demo in Rust :O
Apr 01 14:49:15 <tzaeru>	well, "oldschool", but wahtever
Apr 01 14:49:15 <tzaeru>	well, "oldschool", but wahtever
Apr 01 14:49:49 <tzaeru>	time to whip out the 80286 and get going.
Apr 01 14:49:49 <tzaeru>	time to whip out the 80286 and get going.
Apr 01 14:50:06 <kmc>	too bad there's no 6502 target for LLVM
Apr 01 14:50:06 <kmc>	too bad there's no 6502 target for LLVM
Apr 01 14:50:11 <kmc>	i knew someone who was working on one
Apr 01 14:50:11 <kmc>	i knew someone who was working on one
Apr 01 14:50:22 <kmc>	if you wanna get oldschool ;)
Apr 01 14:50:22 <kmc>	if you wanna get oldschool ;)
Apr 01 14:51:05 <tzaeru>	I'm not sure if you could really make tight enough 6502 target to not need relying on asm to get the most out of it
Apr 01 14:51:05 <tzaeru>	I'm not sure if you could really make tight enough 6502 target to not need relying on asm to get the most out of it
Apr 01 14:51:17 Apr 01 14:51:17 <kmc>	I don't think LLVM is really equipped to deal with an architecture that has three 8-bit registers
<kmc>	I don't think LLVM is really equipped to deal with an architecture that has three 8-bit registers
Apr 01 14:51:23 <tzaeru>	yeah...
Apr 01 14:51:23 <tzaeru>	yeah...
Apr 01 14:51:47 <tzaeru>	and wouldn't even the code size be problematic without extensions etc?
Apr 01 14:51:47 <tzaeru>	and wouldn't even the code size be problematic without extensions etc?
Apr 01 14:53:25 <tzaeru>	like with vic-20 you'd wind up with uh, 3583 bytes of code
Apr 01 14:53:25 <tzaeru>	like with vic-20 you'd wind up with uh, 3583 bytes of code
Apr 01 14:54:59 <tzaeru>	still, the project's worth it! lets set to implement that target for llvm
Apr 01 14:54:59 <tzaeru>	still, the project's worth it! lets set to implement that target for llvm
Apr 01 15:24:47 *	Disconnected (Network is unreachable)
**** ENDING LOGGING AT Fri Apr  1 15:24:47 2016

Apr 01 15:24:54 *	Disconnected (Network is unreachable)
**** ENDING LOGGING AT Fri Apr  1 15:24:54 2016

**** BEGIN LOGGING AT Fri Apr  1 15:24:59 2016

Apr 01 15:24:59 *	Now talking on #rust
Apr 01 15:24:59 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 01 15:24:59 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 01 15:24:59 <sebs>	yup. Thanks for the clarification.
**** BEGIN LOGGING AT Fri Apr  1 15:25:06 2016

Apr 01 15:25:06 *	Now talking on #rust
Apr 01 15:25:06 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 01 15:25:06 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 01 15:25:43 <dikaiosune>	:) i know there's been some discussion of having pluggable benchmark and test tools
Apr 01 15:25:43 <dikaiosune>	:) i know there's been some discussion of having pluggable benchmark and test tools
Apr 01 15:26:10 Apr 01 15:26:10 <dikaiosune>	so you could cargo bench with a macrobenchmarking backend that reports things like 99.9 percentile latency, as opposed to just the average from a few seconds of runtime
<dikaiosune>	so you could cargo bench with a macrobenchmarking backend that reports things like 99.9 percentile latency, as opposed to just the average from a few seconds of runtime
Apr 01 15:34:43 <wyvern>	I'm getting error: type annotations required: cannot resolve `_. I don't see where the _ type comes from. Error is at https://github.com/ogeagla/HdrHistogram_Rust/blob/encode/src/hdr_histogram/simple_hdr_histogram/test.rs#L994 which refers to https://github.com/ogeagla/HdrHistogram_Rust/blob/encode/src/hdr_histogram/simple_hdr_histogram/mod.rs#L549. 
Apr 01 15:34:43 <wyvern>	I'm getting error: type annotations required: cannot resolve `_. I don't see where the _ type comes from. Error is at https://github.com/ogeagla/HdrHistogram_Rust/blob/encode/src/hdr_histogram/simple_hdr_histogram/test.rs#L994 which refers to https://github.com/ogeagla/HdrHistogram_Rust/blob/encode/src/hdr_histogram/simple_hdr_histogram/mod.rs#L549. 
Apr 01 15:37:33 <mbrubeck>	wyvern: Remove the semicolon
Apr 01 15:37:33 <mbrubeck>	wyvern: Remove the semicolon
Apr 01 15:37:52 <mbrubeck>	maybe?
Apr 01 15:37:52 <mbrubeck>	maybe?
Apr 01 15:38:39 <wyvern>	Good point, but doesn't fix the error :/
Apr 01 15:38:39 <wyvern>	Good point, but doesn't fix the error :/
Apr 01 15:39:06 <wyvern>	this is on 1.8.0-beta.2 if that matters
Apr 01 15:39:06 <wyvern>	this is on 1.8.0-beta.2 if that matters
Apr 01 15:43:09 <bluss>	wyvern: it doesn't know which implementation of Encoder you're calling
Apr 01 15:43:09 <bluss>	wyvern: it doesn't know which implementation of Encoder you're calling
Apr 01 15:43:28 <bluss>	wyvern: use ThatType::zig_zag_encode
Apr 01 15:43:28 <bluss>	wyvern: use ThatType::zig_zag_encode
Apr 01 15:44:48 <mbrubeck>	wyvern: or simpler, move zig_zag_encode out of the Encoder trait
Apr 01 15:44:48 <mbrubeck>	wyvern: or simpler, move zig_zag_encode out of the Encoder trait
Apr 01 15:44:58 <mbrubeck>	assuming you never need to override it
Apr 01 15:44:58 <mbrubeck>	assuming you never need to override it
Apr 01 15:45:03 <wyvern>	I see. No, I do not
Apr 01 15:45:03 <wyvern>	I see. No, I do not
Apr 01 15:45:31 <wyvern>	just have it in the module, not in a trait or struct? Is that considered kosher?
Apr 01 15:45:31 <wyvern>	just have it in the module, not in a trait or struct? Is that considered kosher?
Apr 01 15:45:38 <mbrubeck>	yes
Apr 01 15:45:38 <mbrubeck>	yes
Apr 01 15:45:55 Apr 01 15:45:55 <mbrubeck>	It could be a private function if it's not used outside the module.
<mbrubeck>	It could be a private function if it's not used outside the module.
Apr 01 15:47:35 <wyvern>	In my test submodule, it cannot resolve zig_zag_encode -- is that expected? I thought submodules could see non-public things in parent modules
Apr 01 15:47:35 <wyvern>	In my test submodule, it cannot resolve zig_zag_encode -- is that expected? I thought submodules could see non-public things in parent modules
**** BEGIN LOGGING AT Fri Apr  1 15:51:49 2016

Apr 01 15:51:50 *	Now talking on #rust
Apr 01 15:51:50 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 01 15:51:50 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 01 15:55:07 <mbrubeck>	wyvern: `use module::*` only imports pub items
Apr 01 15:55:32 <mbrubeck>	wyvern: So you'll need to import private ones explicitly, or call them as `super::zig_zag_encode(num)`
Apr 01 15:55:43 <wyvern>	Aha!
Apr 01 15:56:13 <Xion>	Whoa whoa whoa
Apr 01 15:56:18 <Xion>	You can import private items? o.0
Apr 01 15:57:07 <wyvern>	only of parent modules, I think.
Apr 01 16:01:04 <monti>	is it possible to override some crate in dependencies? 
Apr 01 16:02:03 <monti>	or how cargo resolves it, if, for example, there are 3 libbitflags were compiled?
Apr 01 16:02:47 <bluss>	monti: it can tell them all apart if there are say 3 bitflags crates compiled in a project
Apr 01 16:03:28 <bluss>	monti: overrides are documented somewhere, I'm trying to find on which doc page
Apr 01 16:03:55 <bluss>	here http://doc.crates.io/guide.html#overriding-dependencies
Apr 01 16:06:17 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 16:06:17 *	ChanServ gives channel operator status to pcwalton
Apr 01 16:08:03 <monti>	bluss: exactly what i want, thanks!
Apr 01 16:14:25 <armenzg>	hello folks, do you have a bot of some sort that helps you keep track of PRs that have no activity for a while and be poked about it?
Apr 01 16:14:32 <armenzg>	e.g. a bot pings you on IRC
Apr 01 16:17:12 <tjpeden>	I'm having trouble understanding this build error I'm getting: https://github.com/tjpeden/rust-game/issues/1
Apr 01 16:19:16 <durka42>	tjpeden: if you declare the method as fn foo(&mut self, ...) then the type of self is already &mut Game
Apr 01 16:19:24 <durka42>	so you don't need another &mut to pass it on somewhere else as a reference
Apr 01 16:19:32 <durka42>	it's like fn foo(self: &mut Game, ...)
Apr 01 16:20:17 <SneakySnake>	The &mut mut self advice definitely seems wrong though
Apr 01 16:20:33 <durka42>	SneakySnake: yeah the help is wrong and I think I remember an issue about it? not sure though
Apr 01 16:20:35 <tjpeden>	durka42: Thanks
Apr 01 16:20:40 <tjpeden>	SneakySnake: Right?!
Apr 01 16:20:53 <durka42>	however, I think you're going to get borrow checker errors once you fix that anyway... calling a method on self and passing in &mut self is rarely successful
Apr 01 16:21:14 <tjpeden>	That's what I was kind of expecting
Apr 01 16:21:29 <tjpeden>	Rather than "it's not mutable enough!"
Apr 01 16:22:15 <durka42>	!gh 31424
Apr 01 16:22:15 <rustbot>	[Issue 31424] <open> Error message suggests illegal syntax for method receiver <https://github.com/rust-lang/rust/issues/31424>
Apr 01 16:22:48 <durka42>	seems fixable
Apr 01 16:23:00 <durka42>	just have to check for the literal identifier "self" and emit a different help
Apr 01 16:23:06 <durka42>	like "heyo, self is already a &mut"
Apr 01 16:27:32 <tjpeden>	Alright, so now I'm not sure I know how to handle the double mutable borrow situation
Apr 01 16:28:10 <durka42>	one option is not to pass in all of self, just the parts that are needed
Apr 01 16:28:39 <phaazon>	hey, do you know a crate to load textures?
Apr 01 16:28:40 <tjpeden>	Game exists for the purpose of passing in the things that are needed lol
Apr 01 16:28:41 <phaazon>	like png?
Apr 01 16:29:02 <tjpeden>	phaazon: sdl2_image?
Apr 01 16:29:16 <phaazon>	how heavy is it?
Apr 01 16:29:18 <durka42>	tjpeden: well it helps to understand just what the borrow checker is worried about
Apr 01 16:29:26 <phaazon>	I need a lightweight library
Apr 01 16:29:29 <tjpeden>	phaazon: It's sdl2 specific :-/
Apr 01 16:29:33 <phaazon>	ah, then no
Apr 01 16:29:43 <durka42>	tjpeden: when you call self.current_view.update(), and pass in &mut self, it update() modifies self.current_view then bad things are going to happen
Apr 01 16:29:44 <tjpeden>	durka42: I understand that part
Apr 01 16:29:49 <phaazon>	in Haskell we have JuicyPixels for that
Apr 01 16:29:51 <phaazon>	which is amazing
Apr 01 16:30:00 <durka42>	tjpeden: so another option is to take self.current_view out of self, call the method on it, and then put it back in
Apr 01 16:30:09 <durka42>	this requires either a dummy object, or make self.current_view an Option
Apr 01 16:30:23 <phaazon>	piston-texture?
Apr 01 16:30:28 <tjpeden>	durka42: Duh, that totally makes sense
Apr 01 16:30:38 <mbrubeck>	phaazon: Piston has some things, including https://crates.io/crates/image for decoding images and some crates for texture handling
Apr 01 16:31:30 <phaazon>	image sounds very great
Apr 01 16:31:31 <phaazon>	thanks!
Apr 01 16:31:40 <phaazon>	holy scheisse
Apr 01 16:31:43 <phaazon>	83k downloads
Apr 01 16:34:34 <wyvern>	For testing serialization, I want to make a Vec<u8>, wrap it in a Cursor, hand it to serialization code, and then inspect the Vec. However, since the vec is moved when I wrap it, the compiler objects. Wrapping the cursor/serialization code in {} does not help... why?
Apr 01 16:35:05 <mbrubeck>	wyvern: use Cursor::into_inner to get the vec back
Apr 01 16:35:20 <mbrubeck>	or Cursor::get_ref
Apr 01 16:35:32 <wyvern>	Ah, i see
Apr 01 16:38:53 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 16:38:53 *	ChanServ gives channel operator status to pcwalton
Apr 01 16:45:15 <tjpeden>	durka42: I'm doing it wrong, see comment: https://github.com/tjpeden/rust-game/issues/1
Apr 01 16:46:23 <durka42>	well you got a different error
Apr 01 16:46:26 <durka42>	at least that's progress :)
Apr 01 16:46:51 <durka42>	tjpeden: the idea with making the field an Option is you can take it out of self, call the method on the outside version, then put it back in
Apr 01 16:47:17 <fungos>	hello
Apr 01 16:48:08 <durka42>	tjpeden: let mut current_view = self.current_view.take().unwrap(); current_view.update(self, elapsed); self.current_view = Some(current_view);
Apr 01 16:48:16 <fungos>	quick question.. I'm trying to get a rust+C++ mix where all mem is allocated in C++ side via custom allocators. Rust is just a no_sdl, no_main plain lib
Apr 01 16:48:49 <fungos>	my problem is, I can't get the compiler to find the Box
Apr 01 16:50:06 <durka42>	tjpeden: http://is.gd/ReuUyD
Apr 01 16:50:33 <durka42>	tjpeden: note that on line 15 (and during View::update), self.current_view is None
Apr 01 16:50:48 <tjpeden>	Right
Apr 01 16:51:33 <tjpeden>	durka42: The box is probably highly unnecessary, huh? I can't remember why ArcadeRS used the box
Apr 01 16:52:14 <durka42>	oh I dunno I missed that part
Apr 01 16:52:46 <tjpeden>	Box is just for heap allocation, right?
Apr 01 16:52:52 <durka42>	right
Apr 01 16:52:59 <monti>	guys, where is explanation about use of Option<> in FFI instead of pointers?
Apr 01 16:53:09 <tjpeden>	I can't imagine needing the view to be allocated on the heap
Apr 01 16:53:41 <monti>	i googled only Option<extern fn>, but not for struct fields.
Apr 01 16:53:56 <durka42>	it's in the book somewhere
Apr 01 16:54:14 <durka42>	https://doc.rust-lang.org/book/ffi.html#the-nullable-pointer-optimization
Apr 01 16:55:34 <monti>	durka42: its not about struct field.
Apr 01 16:55:49 <durka42>	what do you want to know about struct fields?
Apr 01 16:57:51 <fungos>	Anyone?
Apr 01 16:59:00 <durka42>	fungos: can you give more detail? what do you mean by "find the Box"?
Apr 01 16:59:07 <Sergio>	How do I get an FnMut using closure syntax?
Apr 01 16:59:20 <durka42>	Sergio: it's inferred
Apr 01 16:59:29 <Sergio>	Doesn't seem to be inferring correctl.
Apr 01 16:59:31 <Sergio>	correctly*
Apr 01 16:59:55 <durka42>	don't do anything that constrains it to FnOnce, like moving an object
Apr 01 17:00:07 <fungos>	durka42: http://is.gd/U32v9C
Apr 01 17:00:38 <durka42>	fungos: I think Box is in liballoc
Apr 01 17:00:43 <monti>	durka42: anyway, what reason to use the Option<fn>? why not just "*const extern fn()"?
Apr 01 17:00:51 <Sergio>	Wait, moving an object constraints it to an FnOnce? :\
Apr 01 17:01:17 <Sergio>	I want to move an object into the closure and then have an FnMut.
Apr 01 17:01:19 <Sergio>	How do I do that?
Apr 01 17:01:20 <bluss>	monti: extern fn() is already a function pointer
Apr 01 17:01:20 <durka42>	fungos: oh you're defining some of the lang items that are in liballoc? ...but you didn't define the Box struct, that's why it can't be found :)
Apr 01 17:01:34 <bluss>	monti: so *const extern fn() is a pointer to a pointer
Apr 01 17:01:46 <durka42>	monti: so that None corresponds to a null pointer
Apr 01 17:02:04 <durka42>	Sergio: make it a move closure by using the "move" keyword
Apr 01 17:02:16 <Sergio>	durka42: Then I get "FnMut is not implemented".
Apr 01 17:02:25 <fungos>	durka42: yes, but I want to use core things, including box but manage all memory myself
Apr 01 17:02:43 <durka42>	Sergio: can I see?
Apr 01 17:02:54 <fungos>	durka42: how to " import" box struct correctly?
Apr 01 17:02:56 <Sergio>	durka42: I'll make a tiny example.
Apr 01 17:03:04 <durka42>	fungos: I think you have to define it yourself
Apr 01 17:03:08 <tjpeden>	durka42: It's more right now, however, maybe this error is why I need Box? https://github.com/tjpeden/rust-game/issues/1 (last comment)
Apr 01 17:03:12 <durka42>	fungos: I tried "extern crate alloc" but then it says duplicate lang items
Apr 01 17:03:43 <durka42>	tjpeden: oh View is a trait? I missed that. yeah then you need a Box or a reference to make it a trait object
Apr 01 17:04:00 <tjpeden>	Yes, that's right!!
Apr 01 17:04:03 <monti>	durka42: it is just a rust idiom instead of passing NULL? (which requires casting of `0` to appropriate pointer type)
Apr 01 17:04:17 <durka42>	I dunno about idiom, it's something that rust allows
Apr 01 17:06:46 <durka42>	fungos: you might want to look at the "custom allocator" RFC which is about this situation
Apr 01 17:06:47 <durka42>	but not settled yet
Apr 01 17:09:20 <fungos>	durka42: Will search for it. I was following this: https://doc.rust-lang.org/book/custom-allocators.html but the docs are outdated it looks.
Apr 01 17:10:11 <ghotiphud>	cannot figure out how to manage the lifetimes in a situation like this http://is.gd/hCnjiO
Apr 01 17:10:40 <ghotiphud>	help :-(
Apr 01 17:11:54 <talchas>	ghotiphud: there needs to be some memory actually storing the Foo that outlives Baz/each Bar
Apr 01 17:12:28 <ghotiphud>	would adding a Vec<Foo> to the Baz help?
Apr 01 17:13:23 <ghotiphud>	http://is.gd/hctEu1
Apr 01 17:13:35 <talchas>	that will give you a slightly different problem
Apr 01 17:13:42 <ghotiphud>	yeah, I see that
Apr 01 17:14:03 <talchas>	because having a struct that also has a reference to part of itself generally doesn't work very well in rust
Apr 01 17:15:33 <ghotiphud>	I saw owning_ref which is kind of similar to my usecase
Apr 01 17:15:39 <talchas>	(it 1. means you can't mutate the struct anymore, because that could invalidate any of the references, and rust has no way of dealing with that, and 2. can't escape the current stack frame because rust can't write the rules for that)
Apr 01 17:16:41 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 17:16:41 *	ChanServ gives channel operator status to pcwalton
Apr 01 17:16:50 <ghotiphud>	1 is not a problem, I intend for it to be immutable after creation, but 2 could be as I want to share this among threads
Apr 01 17:17:37 <talchas>	owning_ref doesn't quite get to what you need, because while it can take struct A { x: X, y: Y } and turn Box<A> into OwningRef<X>, it can't turn it into like OwningRef<(&X, i32)> or OwningRef<StructContainingRefToX>
Apr 01 17:18:56 <talchas>	because it would basically need to replace the correct instances of &'a X with SomeOwningRefSpecialStruct<X>, and there's no way to do that
Apr 01 17:19:06 <durka42>	it has a VecRef though
Apr 01 17:19:40 <durka42>	of course you can't add elements to the Vec then, I imagine
Apr 01 17:19:50 <talchas>	durka42: by this analogy, Vec is A, and the indexed Ts are X/Y
Apr 01 17:20:06 <fungos>	when  using #![no_std] and extern crate core; shouldn't String be disponible?
Apr 01 17:20:18 <durka42>	the easier solution is just to store indices in the Vec instead of references
Apr 01 17:20:26 <russn>	env_logger question: `RUST_LOG=info/myrustlib* ./target/debug/examples/main` produces log messages that do *not* contain ‘myrustlib’.This is the opposite of what the doc is saying (and of course the opposite of what I want). Can't figure out what is going on...
Apr 01 17:20:49 <ghotiphud>	in my actual code, I'm grabbing a large data structure which is readonly and want to make a struct which is easier to work with, almost flattening the structure without duplicating the root nodes
Apr 01 17:20:59 <talchas>	it's not even a conversion from Vec<A> to Vec<FakeRef<X>>, just a subslice of Vec<A>
Apr 01 17:21:05 <durka42>	fungos: no that's in libcollections
Apr 01 17:21:20 <talchas>	(possibly all the way down to a /single/ FakeRef<X>, but not a vec of them)
Apr 01 17:22:28 <ghotiphud>	probably the easiest in terms of lifetimes would be to clone everything
Apr 01 17:22:37 <ghotiphud>	not ideal though
Apr 01 17:24:14 <talchas>	ghotiphud: so, that code would work if foo was passed in instead, if that helps
Apr 01 17:24:30 <talchas>	er, "foos"
Apr 01 17:24:56 <talchas>	(or otherwise allowed the compiler to prove that it would outlive Baz, as in the simplified example it clearly doesn't)
Apr 01 17:25:24 <ghotiphud>	yeah, I had it that way initially
Apr 01 17:25:51 <ghotiphud>	but I didn't want to worry about the "Foo" implementation detail
Apr 01 17:26:08 <ghotiphud>	trying to hide that
Apr 01 17:27:19 <tjpeden>	Rust is kind of morbid lol
Apr 01 17:27:19 <ghotiphud>	bars would be public and foos private
Apr 01 17:27:48 <tjpeden>	`current_view` does not live long enough
Apr 01 17:28:11 <talchas>	the other possibly simplification depending on what exactly you're doing would be to use Arc<Foo> instead, if they can be immutable
Apr 01 17:28:37 <pingveno>	tjpeden: Death comes to all things, even variables. Especially variables.
Apr 01 17:28:54 <tjpeden>	But so soon!
Apr 01 17:29:24 <pingveno>	And if they're optimized out, it's like the never lived at all!
Apr 01 17:29:38 <ghotiphud>	that could work...
Apr 01 17:29:43 <tjpeden>	Rust's new slogan: Rust, a metaphor for life
Apr 01 17:37:08 *	ChanServ sets mode +a on #rust niconii
Apr 01 17:37:08 *	ChanServ gives channel operator status to niconii
Apr 01 17:42:56 <tjpeden>	And the saga continues: https://github.com/tjpeden/rust-game/issues/1
Apr 01 17:43:38 <durka42>	"must be valid for the static lifetime" o_O
Apr 01 17:43:41 <bluss>	tjpeden: it says must be valid for a static lifetime there, so we need to figure out where that requirement comes from
Apr 01 17:43:43 <durka42>	something has gone very wrong if it's inferring 'static
Apr 01 17:43:54 <bluss>	it's usually Box<Trait>
Apr 01 17:43:57 <durka42>	maybe an implicit lifetime for a trait object?
Apr 01 17:44:01 <durka42>	yeah there is a Box<View> in play
Apr 01 17:49:37 <durka42>	bluss: https://github.com/tjpeden/rust-game/blob/master/src/game/mod.rs#L98 is it changing &mut View to &mut (View+'static) ?
Apr 01 17:50:25 <tjpeden>	I have the 'window lifetime, does that help?
Apr 01 17:50:36 <durka42>	looking at this code makes me nervous
Apr 01 17:50:40 <tjpeden>	durka42: I think so
Apr 01 17:50:41 <durka42>	line 84 moves current_view while a &mut borrow is alive
Apr 01 17:51:34 <tjpeden>	the one from 81?
Apr 01 17:51:54 <durka42>	right
Apr 01 17:51:57 <durka42>	maybe it's fine
Apr 01 17:51:58 *	durka42 clones git repo
Apr 01 17:52:39 <tjpeden>	I didn't realize that borrow would still be alive, that might not work so well for 83 either
Apr 01 17:53:20 <schirtze>	question about warnings in the compiler. I'm currently not getting one when I fail to handle a result from read_line. Shouldn't there be a warning?
Apr 01 17:53:22 <durka42>	the one on 83 is okay I think, but sometimes "match" causes borrows to live inconveniently long
Apr 01 17:53:50 <bluss>	durka42: it shouldn't change it like that, &'a mut View is &'a mut (View + 'a)
Apr 01 17:53:54 <tjpeden>	durka42: that makes sense given it create a new scope
Apr 01 17:55:25 <tjpeden>	Leave it to me to create code that defies all logic...
Apr 01 17:55:35 <durka42>	oh ho there's a loop here...
Apr 01 17:55:50 <tjpeden>	Ah yes, there is
Apr 01 17:56:17 <tjpeden>	So what damning news does that bring? lol
Apr 01 17:56:24 *	bluss looks at ViewAction
Apr 01 17:57:26 <bluss>	schirtze: yes
Apr 01 17:57:36 <durka42>	ah
Apr 01 17:57:40 <durka42>	ViewAction contains a Box<View + 'static>
Apr 01 17:57:49 <tjpeden>	It does?
Apr 01 17:57:53 <schirtze>	bluss, its odd that I'm not seeing any then. I thought maybe I needed to use -v but that doesn't do it either.
Apr 01 17:57:56 <durka42>	yes
Apr 01 17:58:00 <durka42>	because ViewAction has no lifetime parameter
Apr 01 17:58:35 <tjpeden>	So I should give it one?
Apr 01 17:59:09 <bluss>	I wonder where the code that is called in current_view.update(self, elapsed) is defined
Apr 01 17:59:26 <tjpeden>	main.rs for now
Apr 01 18:00:18 <bluss>	thanks
Apr 01 18:00:21 <durka42>	I think ViewAction needs a lifetime param but that just leads to more borrow errors
Apr 01 18:00:42 <bluss>	why do you call borrow_mut?
Apr 01 18:00:49 <bluss>	that's completely bogus
Apr 01 18:00:57 <bluss>	this trait has no place outside generic use
Apr 01 18:01:13 <bluss>	if you want to borrow something, use &mut *foo
Apr 01 18:01:18 <tjpeden>	The honest answer is, I have little idea what I'm doing lol
Apr 01 18:01:19 <durka42>	because it's more discoverable than &mut *foo is my guess :)
Apr 01 18:01:26 <bluss>	tjpeden: sure no problem
Apr 01 18:01:30 <bluss>	durka42: that is the problem
Apr 01 18:01:38 <durka42>	sure is
Apr 01 18:01:40 <bluss>	tjpeden: ditch the BorrowMut trait anyway
Apr 01 18:01:47 <durka42>	I don't know why it's the problem but it is
Apr 01 18:02:42 <bluss>	tjpeden: the idiom to make a &mut X from a Box<X> is &mut *
Apr 01 18:02:50 <bluss>	tjpeden: when it doesn't coerce by itself..
Apr 01 18:03:32 <tjpeden>	So, ditching the BorrowMut in addition to the lifetime param for ViewAction?
Apr 01 18:03:40 <durka42>	you don't need the lifetime param
Apr 01 18:03:45 <bluss>	yeah I agree
Apr 01 18:03:47 <durka42>	apparently I still doesn't understand implicit lifetime parameters
Apr 01 18:04:01 <bluss>	I can't find any reason it would give a lifetime error except for the .borrow_mut
Apr 01 18:04:14 <bluss>	maybe it has a too strict impl, too.. let's check
Apr 01 18:04:15 <durka42>	it compiles without it
Apr 01 18:06:55 <tjpeden>	can I enable time2 in 1.7 stable?
Apr 01 18:07:23 <bluss>	no. But it's stable in 1.8
Apr 01 18:08:06 <tjpeden>	That'll be useful in 13 days lol
Apr 01 18:08:20 <bluss>	oh right, I forgot 1.8 is not out yet
Apr 01 18:08:31 <bluss>	+= stable in 13 days then! wooo
Apr 01 18:08:37 <bluss>	*overloading of
Apr 01 18:09:10 <tjpeden>	Yeah, and I don't want to go through the hassle of installing nightly on my windows box
Apr 01 18:09:59 <durka42>	you can use it in beta too
Apr 01 18:10:05 <durka42>	which is just as hard to install as nightly I guess...
Apr 01 18:10:08 <durka42>	of course both are easy if you use multirust
Apr 01 18:10:14 <wyvern>	multirust is great.
Apr 01 18:10:42 <wyvern>	I was mightily displeased with the not-multirust installation process
Apr 01 18:11:28 <tjpeden>	I <3 multirust, but again, I'm on windows right now (work computer
Apr 01 18:11:29 <tjpeden>	)
Apr 01 18:11:47 <wyvern>	multirust claims to do windows, but I've only done it on osx and linux so ymmv
Apr 01 18:12:12 <tjpeden>	I guess it could work with msys2
Apr 01 18:12:26 <tjpeden>	which is what I'm using
Apr 01 18:12:33 <durka42>	fairly sure it works on windows
Apr 01 18:13:01 <dikaiosune>	multirust-rs works on windows (it's what's being used for the new rustup, IIRC)
Apr 01 18:13:18 <dikaiosune>	but (also IIRC), multirust proper is shell scripting
Apr 01 18:13:30 <wyvern>	1700 delicious lines of bash.
Apr 01 18:13:37 <tjpeden>	lol
Apr 01 18:13:52 <wyvern>	which is about 10x the FDA recommended max of bash
Apr 01 18:14:16 <dikaiosune>	and about 50x the european medicines agency recommended max
Apr 01 18:14:34 <wyvern>	you may experience dry mouth or nausea
Apr 01 18:14:41 <dikaiosune>	sudden sinking feelings
Apr 01 18:20:04 <yati>	Hi people, I'm trying to use the result of a match expr in an addition, and this happens: http://is.gd/loTRQ4
Apr 01 18:20:34 <durka42>	yati: can you elaborate on "doesn't fly"?
Apr 01 18:20:42 <yati>	That snippet will compile, but as shown, if the order of addition is reversed by making the `match` expr be the first argument, it won't compile
Apr 01 18:20:48 <durka42>	oh right, dur
Apr 01 18:20:50 <yati>	"Unexpected token +"
Apr 01 18:20:55 <durka42>	I added it at the end but didn't take it away from the beginning
Apr 01 18:21:02 <durka42>	the issue is that "match { ... }" is intepreted as a statement
Apr 01 18:21:03 <yati>	Ah
Apr 01 18:21:06 <durka42>	unless it's forced to be an expression
Apr 01 18:21:11 <durka42>	you can write (match { ... } + epsilon)
Apr 01 18:22:46 <yati>	durka42: hmm, but won't the parse tree be an addition in the failing case as well, forcing the match to be an expr?
Apr 01 18:22:53 <yati>	I mean clearly it doesn't work that way
Apr 01 18:23:07 <yati>	But I don't see why
Apr 01 18:23:08 <durka42>	it's a weird corner case
Apr 01 18:24:40 <yati>	durka42: I see, for now I'm happy swapping my addition order :) Thanks
Apr 01 18:32:04 <niconii>	yati: it could maybe fall back to interpreting the match as an expr, but in the end it'd just make things more confusing, because `match { ... } + foo` would be addition, but `match { ... } - foo` would be a match, then negative foo
Apr 01 18:36:29 <yati>	niconii: I see what you mean, I always thought in the latter case, a ';' is required after the match to make it mean what it means :)
Apr 01 18:37:29 <niconii>	nah, that's not the case
Apr 01 18:38:29 <yati>	niconii: And honestly, I was trying to make it look cool here. The addition looks clearer (to me) when done in each arm separately
Apr 01 18:38:37 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 18:38:37 *	ChanServ gives channel operator status to pcwalton
Apr 01 18:41:32 <thills>	Hi All, does anyone know where I can find info on the describe! macro that I've seen used with #[cfg(test)] in Rust unit tests?
Apr 01 18:42:10 <thills>	All, nm.  We found it in the stainless crate. thx
Apr 01 18:42:13 <hub>	https://github.com/reem/stainless
Apr 01 18:42:19 <hub>	as I was about to say
Apr 01 18:42:22 <thills>	lol
Apr 01 19:31:16 <jethrogb>	how do I turn a Fn() into a code pointer?
Apr 01 19:32:06 <bluss>	jethrogb: Fn() is a closure trait, so it's not really possible
Apr 01 19:32:24 <bluss>	jethrogb: just a control question, did you mean to use a function pointer fn() instead?
Apr 01 19:32:32 <jethrogb>	I'm not sure
Apr 01 19:32:57 <reem>	jethrogb: generally speaking you can’t, since Fn() holds some environment and fn() is *just* a pointer
Apr 01 19:33:08 <reem>	jethrogb: say more about what you’re trying to do though, there could be something that works
Apr 01 19:33:14 <jethrogb>	I'm trying to see if I can hack a "HashMap of enum variants" together using the constructor functions of the enum as a key
Apr 01 19:33:30 *	ChanServ sets mode +a on #rust pcwalton
Apr 01 19:33:30 *	ChanServ gives channel operator status to pcwalton
Apr 01 19:33:43 <TechnoCrunch>	Can I debug a let to find out it's type?
Apr 01 19:33:56 <SpaceManiac>	jethrogb: Should be possible with fn() pointers
Apr 01 19:33:58 <reem>	jethrogb: ah, then just take a fn() -> EnumType directly
Apr 01 19:34:09 <jethrogb>	TechnoCrunch: you can say let a: () = your thing
Apr 01 19:34:16 <jethrogb>	and then the compiler will tell you the right type
Apr 01 19:34:30 <jethrogb>	reem: SpaceManiac: well I was using Fn<A> with feature(unboxed_closures)
Apr 01 19:34:41 <jethrogb>	because I don't know how many parameters the function is going to take
Apr 01 19:34:51 <jethrogb>	how many and which ones
Apr 01 19:35:30 <reem>	jethrogb: oh yeah now that I think about it this is isn’t going to work - fn(X) and fn(X, Y) are fundamentally different types
Apr 01 19:35:33 <TechnoCrunch>	thank jethrogb, for that because I was using SDL2
Apr 01 19:36:20 <reem>	jethrogb: you can probably store Box<Fn<A, EnumType>>
Apr 01 19:36:43 <reem>	you can define a wrapper type that hashes/compares the reference
Apr 01 19:37:05 <reem>	or, there reference won’t really work… maybe comparing the vtable will get you what you want?
Apr 01 19:37:15 <jethrogb>	yeah that was the plan
Apr 01 19:37:18 <jethrogb>	maybe
Apr 01 19:37:26 <jethrogb>	I also would like to avoid allocations
Apr 01 19:37:34 <reem>	you can extract and store just the vtable
Apr 01 19:37:41 <reem>	!crate traitobject
Apr 01 19:37:41 <rustbot>	traitobject (0.0.3) - Unsafe helpers for working with raw trait objects. -> https://crates.io/crates/traitobject
Apr 01 19:37:47 <reem>	^ useful for this
Apr 01 19:38:23 <jethrogb>	ah and I just take a &Fn<A> -> EnumType and compare the vtable
Apr 01 19:39:35 <reem>	jethrogb: you can even just take a type param F: Fn<A> -> EnumType, then do let f: F = mem::uninitialized(); let vtable = get_vtable(&f as Fn<A> -> EnumType); mem::forget(f);
Apr 01 19:40:40 <jethrogb>	ahaha
Apr 01 19:41:35 <reem>	this is getting into pretty crazy territory admittedly :P
Apr 01 19:42:42 <jethrogb>	yes
Apr 01 19:42:45 <jethrogb>	yes it is
Apr 01 19:44:26 <jethrogb>	I was rused
Apr 01 19:44:34 <jethrogb>	that crate does not contain a function get_vtable
Apr 01 19:45:33 <jethrogb>	reem: I don't think that version works
Apr 01 19:45:38 <jethrogb>	because it could be not a closure
Apr 01 19:45:43 <jethrogb>	in which case it's not a trait object
Apr 01 19:45:55 <jethrogb>	or at least I couldn't get the transmute to work
Apr 01 19:46:06 <reem>	Gimme a second I'll write a proof of concept
Apr 01 19:46:33 <jethrogb>	anyway
Apr 01 19:46:34 <jethrogb>	here it is
Apr 01 19:46:36 <jethrogb>	http://is.gd/xbWq79
Apr 01 19:48:29 <reem>	jethrogb: ah yeah that crate is only things that are “stable”, I should add an unstable feature that has vtable stuff
Apr 01 19:49:52 <reem>	what is this actually for?
Apr 01 19:49:59 <reem>	you still have to match when retrieving the enum
Apr 01 19:50:04 <jethrogb>	right
Apr 01 19:50:08 <jethrogb>	and it doesn't work
Apr 01 19:50:20 <jethrogb>	change the third insert to Referer and compile with release
Apr 01 19:50:44 <jethrogb>	nevermind it does
Apr 01 19:51:12 <reem>	looks like it works
Apr 01 19:51:22 <reem>	pretty sure it’s not guaranteed to though
Apr 01 19:51:24 <jethrogb>	yeah I was worried about code deduplication
Apr 01 19:52:04 <jethrogb>	reem: no concrete usecase in mind at the moment
Apr 01 19:52:17 <jethrogb>	but I wanted to have something like this in the past
Apr 01 19:52:28 <jethrogb>	and I realized this might be a way to pull it off
Apr 01 19:52:55 <jethrogb>	you'd abstract around this of course
Apr 01 19:53:02 <jethrogb>	so that your interface is more like HashSet
Apr 01 19:53:08 <reem>	if you could somehow assert that the value is a specific variant when retrieving it…
Apr 01 19:53:15 <reem>	you could use a macro for retrieval
Apr 01 19:53:36 <reem>	well hmm
Apr 01 19:53:43 <jethrogb>	yeah hmm indeed
Apr 01 19:53:47 <reem>	you don’t really have a guarantee that the F is a variant of the enum
Apr 01 19:53:56 <yati>	I read somewhere that closures don't really have concrete types, so how do I proceed here? http://is.gd/K2lxtb
Apr 01 19:55:01 <jethrogb>	reem: yeah that's unfortunate
Apr 01 19:55:07 <jethrogb>	and I can figure that out at runtime
Apr 01 19:55:14 <jethrogb>	but not a compile time as of yet
Apr 01 19:55:45 <reem>	yati: when you actually use it F can be inferred, if you never use the F then you can put some dumb type like fn(&str) -> f64
Apr 01 19:57:08 <reem>	jethrogb: is there a way to retrieve the discriminant of an enum at runtime? then you could implement an “EnumSet” much like HashSet
Apr 01 19:57:35 <reem>	retrieval is still odd
Apr 01 19:58:10 <jethrogb>	reem: technically yes but nothing semi-convenient like std::raw
Apr 01 19:58:25 <yati>	reem: Ah that worked :) Thanks.
Apr 01 19:58:35 <sfackler>	there's an intrinsic to pull an enum's variant
Apr 01 19:58:48 <yati>	reem: fn(...) -> ... are just pointers to plain functions, right?
Apr 01 19:59:19 <reem>	yati: yes, they are function pointers
Apr 01 20:00:50 <jethrogb>	sfackler: oh cool
Apr 01 20:01:45 <jethrogb>	but yeah I think we need the function pointers for retrieval
Apr 01 20:02:08 <jethrogb>	or at least I don't know what the API would be without it
Apr 01 20:02:34 <jethrogb>	unfortunate because the best API for setting is using the discriminant
Apr 01 20:15:20 <sebs>	are log operations only defined on floats?
Apr 01 20:16:11 <mbrubeck>	sebs: in libstd, yes
Apr 01 20:16:44 <sebs>	mbrubeck: is there any well-known crate that provides this for integers?
Apr 01 20:16:44 <will_sm>	http://www.redox-os.org/ well that was unexpected
Apr 01 20:16:50 <mbrubeck>	sebs: There's https://crates.io/crates/ilog2 though it looks a little old
Apr 01 20:17:24 <mbrubeck>	"SOFTWARE PRODUCT LICENSE: You must pay. You must pay. Pay, pay, pay."
Apr 01 20:18:43 <jethrogb>	will_sm: april fools?
Apr 01 20:21:07 <will_sm>	jethrogb, then how come I already bought 5 licenses for my family?
Apr 01 20:22:29 <will_sm>	hopefully I don't find any bugs
Apr 01 20:25:24 <jethrogb>	https://internals.rust-lang.org/t/pre-rfc-mark-all-apis-that-allow-access-to-arbitrary-files-as-unsafe/3330
Apr 01 20:26:35 <durka42>	jethrogb: bigger than the leakpocalypse
Apr 01 20:30:20 <Ketsuban>	Is there a consensus yet on whether users should attach additional semantics to `unsafe` (e.g. the cpuio crate marks the Port::new method unsafe because you could create a port which allows reprogramming the IRQ controller)?
Apr 01 20:32:38 <Sgeo>	That reminds me, I should comment on the bug that's blocking unleakable
Apr 01 20:33:10 <kmc>	Ketsuban: well... reprogramming the IRQ controller could lead to memory-unsafe behavior, right?
Apr 01 20:36:41 <Ketsuban>	kmc: it can corrupt the stack, according to the author. I'm not sure that warrants being marked unsafe, though, since you're already in the kernel so having basically free reign to stomp around in memory is kind of your thing.
Apr 01 20:37:42 <kmc>	Ketsuban: in unsafe { } blocks, sure
Apr 01 20:49:41 <Cardoe>	I'm getting the following "cannot move out of captured outer variable in an `FnMut` closure" but not understanding how to fix it. I made the code available here: http://is.gd/who5tR if someone has a moment. I would only ask in #rust-beginners but there's a debate about spoken languages and nothing about Rust in there.
Apr 01 20:51:12 <jorendorff>	Does anyone remember which github issue pointed out that `i32<>` is allowed as a type?
Apr 01 20:53:00 <jethrogb>	jorendorff: https://github.com/rust-lang/rust/pull/32023
Apr 01 20:53:06 <jethrogb>	yay for browser history
Apr 01 20:53:18 <jorendorff>	woo
Apr 01 20:54:11 <jorendorff>	thank you!
Apr 01 20:55:47 <jorendorff>	hmm. not a lot of rationale there for keeping it
Apr 01 20:56:26 <jorendorff>	I guess I am too used to thinking of generics as type-lambdas to understand why treating that as a kind error would be "pedantic"
Apr 01 20:57:19 <jethrogb>	jorendorff: I thought it said something about macros
Apr 01 20:57:32 <jethrogb>	but it doesn't? in any case, it's useful with macros
Apr 01 20:58:56 <aatch>	jethrogb, it mentioned `struct Foo;` vs `struct Foo {}` which is macro-related.
Apr 01 21:03:21 <jorendorff>	mmm, ok
Apr 01 21:11:44 <tchosky>	Does anyone know if there is currently a valid coupon for http://shop.oreilly.com/product/0636920040385.do this?
Apr 01 21:11:55 <tchosky>	I came a bit late, and let the March 19, 2016 date pass.
Apr 01 21:12:48 <tchosky>	(Found it: WCYAZ)
Apr 01 21:49:46 <Sergio>	Hey all! I'm doing some printing in my #[test]s, but Cargo seems to supress said printing. How do I make it not do that?
Apr 01 21:50:05 <Sergio>	-v doesn't seem to help, and --help doesn't give much insight.
Apr 01 21:50:12 <Sergio>	Oh.
Apr 01 21:50:17 <Sergio>	Nevermind. I should read the whole thing.
Apr 01 21:50:18 <jmesmon>	Sergio: if you invoke the test directly, there is a flag that can be passed, iirc
Apr 01 21:50:30 <Sergio>	'--nocapture', looks like
Apr 01 21:50:33 <jmesmon>	yep
Apr 01 21:51:09 <Sergio>	Got it, I need to do it '-- -nocapture'.
Apr 01 22:38:24 <baby-bell>	I am slightly confused about macro scoping
Apr 01 22:38:40 <baby-bell>	I have separated my macros into a separate module
Apr 01 22:38:52 <baby-bell>	and marked it #[macro_use] at the top
Apr 01 22:39:09 <baby-bell>	but it's not working
Apr 01 22:40:25 <Mutabah>	baby-bell: #[macro_use] goes on the `mod` statement
Apr 01 22:40:39 <baby-bell>	oh, okay
Apr 01 22:42:39 <baby-bell>	it's working now, thanks!
Apr 01 22:49:41 <baby-bell>	is there a way to enable lto explicitly in Cargo.toml?
Apr 01 22:50:47 <kirillkh>	how can I compile my cargo-based project in release mode with debug symbols?
Apr 01 22:51:39 <aatch>	kirillkh, you can change the profile for release to include debugging symbols.
Apr 01 22:52:06 <kirillkh>	aatch, how?
Apr 01 22:52:16 <aatch>	kirillkh, it's not brilliant, but it works. I want there to be a "profiling" profile that basically does that though.
Apr 01 22:52:30 <Sgeo>	It occurs to me that any monad support in Rust should recognize three kinds of monads: Those whose bind requires an Fn, those whose bind requires an FnMut, and those whose bind are fine with an FnOnce
Apr 01 22:52:35 <kirillkh>	right, I want it for profiling
Apr 01 22:52:36 <Sgeo>	Actually even just Functor
Apr 01 22:53:05 <Sgeo>	e.g. Option's map can take an FnOnce, but Vec's map needs to be FnMut or Fn
Apr 01 22:53:41 <aatch>	kirillkh, https://github.com/rust-lang/cargo/issues/2007#issuecomment-175823991
Apr 01 22:53:41 <kirillkh>	aatch, nvm, found it in the docs
Apr 01 22:54:01 <Sgeo>	Those monads that are fine taking an FnOnce should correspond to monads which have a nice syntax whenever generators have a nice syntax
Apr 01 22:56:43 <durka42>	Sgeo: Monad, MonadMut, and MonadOnce?
Apr 01 22:57:42 <Sgeo>	I think so
Apr 01 23:00:27 <kvark>	Could someone explain why 'a and T are not constraint by "self" in this case?
Apr 01 23:00:28 <kvark>	src/main.rs:59:10: 59:11 error: the type parameter `T` is not constrained by the impl trait, self type, or predicates [E0207]
Apr 01 23:00:42 <kvark>	src/main.rs:59 impl<'a, T: Component, F: Fn(&'a T)> Process for F {
Apr 01 23:01:21 <Mutabah>	kvark: It means that T isn't used in the type or the trait
Apr 01 23:01:36 <kvark>	it is used in the self type
Apr 01 23:01:38 <glendc>	how come there's no x86 android std version available of the rust std libs?
Apr 01 23:01:55 <Mutabah>	kvark: It's used in a bound on the generic self type... slightly different
Apr 01 23:02:11 <Mutabah>	glendc: Probably because nobody's built one?
Apr 01 23:02:30 <Mutabah>	Iirc x86 android is relatively rare (most android devices are ARM)
Apr 01 23:03:38 <kirillkh>	is LTO glitched? I get assertion failed from rustc
Apr 01 23:04:12 <glendc>	k thx
Apr 01 23:04:33 <aatch>	kirillkh, LTO does have some bugs.
Apr 01 23:05:30 <kirillkh>	aatch, http://pastebin.com/9BBwDsS2
Apr 01 23:06:05 <kvark>	Mutabah: thanks, I think I understand it now. Basically, F can implement Fn(&'a X) and Fn(&'b Y) and the compiler wouldn't know which one to use.
Apr 01 23:06:25 <aatch>	agh! Goddamit April 1st... That was 14 hours ago for me!
Apr 01 23:07:38 <tjpeden>	Hey, just wanted to say thanks to bluss and durka42 for your help earlier, I really appreciate it
Apr 01 23:08:32 <kirillkh>	Mutabah, x86 android is not rare in the emulator :)
Apr 01 23:09:09 <aatch>	kirillkh, if you can reduce the case, then it would be great if you opened an issue.
Apr 01 23:10:12 <baby-bell>	I'm getting a ton of errors about unresolved name
Apr 01 23:10:21 <baby-bell>	when I try to use std::str::from_utf8_unchecked
Apr 01 23:10:25 <baby-bell>	gosh darn it
Apr 01 23:10:36 <kirillkh>	aatch, I can give the link to my project
Apr 01 23:10:50 <baby-bell>	str::from_utf8_unchecked
Apr 01 23:11:50 <baby-bell>	I always use the full path
Apr 01 23:12:02 <baby-bell>	why would it not be able to recognize something from std?
Apr 01 23:12:35 <glendc>	baby-bell: maybe you have to say "use std"
Apr 01 23:12:36 <kirillkh>	aatch, it happens only when both debug and lto are set to true (in release configuration)
Apr 01 23:13:24 <talchas>	baby-bell: so there's two separate things here
Apr 01 23:13:38 <talchas>	there's the type str, which is compiler-builtin 
Apr 01 23:13:41 <talchas>	and the module std::str
Apr 01 23:14:12 <talchas>	that said, that's irrelevant, because it's on std::str
Apr 01 23:14:32 <talchas>	most likely you're not at the crate root, and the module std isn't used by default as glendc says
Apr 01 23:14:46 <talchas>	so you need to either "use std;" or write ::std::str::etc
Apr 01 23:14:50 <baby-bell>	got it
Apr 01 23:14:56 <baby-bell>	thank you talchas and glendc
Apr 01 23:15:11 <baby-bell>	why is std not used by default in modules?
Apr 01 23:15:21 <Peach>	how does impl with generics work? Can I have some playbot examples of impl<T>   ?
Apr 01 23:20:43 <Mutabah>	baby-bell: Not sure... maybe because it'd send the wrong message
Apr 01 23:21:09 <Mutabah>	baby-bell: ::std always refers to the 'std' item in the crate root (which is where the std crate is automatically inserted)
Apr 01 23:22:06 <talchas>	yeah, consistency with every other extern crate I suspect
Apr 01 23:22:08 <durka42>	can someone walk me through the technique for creating a DST by using a struct where the last field is generic, and then instantiating it with that type set to a slice?
Apr 01 23:22:25 <durka42>	I can't remember how to do the initialization
Apr 01 23:22:31 <tbelaire>	Is it possible to have a struct which owns a Vector and an iterator into it?
Apr 01 23:22:33 <talchas>	(now, you can also argue about whether or not those should also need ::, though it still at least makes logical sense as it is)
Apr 01 23:22:39 <tbelaire>	I want to store me partial progress
Apr 01 23:22:39 <Mutabah>	durka42: 1. create a version with a concrete type
Apr 01 23:22:51 <durka42>	oh I do like S<[T; 0]> as S<[T]> or something
Apr 01 23:22:53 <Mutabah>	durka42: 2. ensure that your generic type impls CoerceUnsized
Apr 01 23:22:54 <talchas>	yep
Apr 01 23:22:56 <Mutabah>	Yep
Apr 01 23:23:09 <durka42>	I thought there was a stable way to do it
Apr 01 23:23:26 <Mutabah>	Hmm... don't know
Apr 01 23:24:18 <talchas>	isn't that stable?
Apr 01 23:24:25 <durka42>	oh, Box<S<[T; 0]>> coerces to Box<S<[T]>>
Apr 01 23:24:27 <Mutabah>	tbelaire: No, you can't. The iterator would end up borrowing self, which leads to methods that want to update the iterator not being able to (becuase of how borrowck handles borrows)
Apr 01 23:24:27 <talchas>	or is coerce not?
Apr 01 23:24:41 <durka42>	Mutabah made it sound like I have to mention CoerceUnsized in my where-clause but I don't
Apr 01 23:25:07 <Mutabah>	Nah, it's a marker trait on types where you can change the generic parameter with a coercion
Apr 01 23:25:27 <durka42>	it's an auto trait, then
Apr 01 23:25:52 <talchas>	no, it's for the pointer
Apr 01 23:26:00 <talchas>	you don't need anything for the DST
Apr 01 23:26:03 <Mutabah>	Oh... well.. ignore me then
Apr 01 23:26:38 <talchas>	(I think Unsize might be the relevant one or something, but it's auto-implemented or something)
Apr 01 23:29:21 <baby-bell>	while writing a C interface for my code, I've been careful to use libc::size_t
Apr 01 23:29:24 <baby-bell>	ugh
Apr 01 23:29:27 <baby-bell>	size_t
Apr 01 23:29:34 <baby-bell>	I'm wondering
Apr 01 23:29:52 <baby-bell>	is there a situation where sizeof(usize) != sizeof(size_t)
Apr 01 23:29:53 <baby-bell>	?
Apr 01 23:30:31 <baby-bell>	I can't recall the exact definition of either one
Apr 01 23:30:35 <baby-bell>	but I think it was similar
Apr 01 23:30:46 <talchas>	in theory size_t and uintptr_t can be different sizes
Apr 01 23:31:03 <talchas>	in practice I don't know that there has ever been a system that those types have been defined on where that was true
Apr 01 23:31:23 <talchas>	(and usize is guaranteed to be the size of a pointer, so uintptr_t)
Apr 01 23:32:05 <baby-bell>	I see
Apr 01 23:32:11 <talchas>	iirc size_t must be able to store the size of the largest allocatable object, which could be smaller than the size of a pointer
Apr 01 23:32:44 <talchas>	heck on x86-64 it is smaller (for the forseeable future), just not 32-bits so it gets rounded up to 64 for the actual data type
Apr 01 23:34:20 <baby-bell>	so probably better to use size_t just to be sure
Apr 01 23:35:13 <talchas>	it's probably simpler to use usize, and then if you really care, declare them in the header files as uintptr_t or something :P
Apr 01 23:36:32 <raph>	I seem to hear rumblings about a Rust IDE in the works - can anyone here fill me in on that?
Apr 01 23:37:14 <Dabo>	raph, iirc there are multiple people who are building rust IDEs from different bases
Apr 01 23:37:33 <raph>	I am strangely not surprised to hear that :)
Apr 01 23:37:52 <Sergio>	Is there any way to get the lifetime of the `&self` in the Deref trait?
Apr 01 23:38:11 <Sergio>	Simply doing (&'a self) doesn't work, of course.
Apr 01 23:38:12 <Dabo>	there are currently plugins for eclipse, intellij, visual studio, sublime text, atom, emacs, and vim
Apr 01 23:38:22 <raph>	one of the reasons I'm curious is that playing at writing my own editor (in Rust, of course) and I'm wondering whether it might become a good base for an IDE
Apr 01 23:39:26 <Dabo>	there's also SolidOak which is kind of a rust-specific IDE, but mostly a vim wrapper
Apr 01 23:39:31 <raph>	but probably best to really have that conversation when I release 0.1 of it
Apr 01 23:39:40 <Dabo>	raph, probably would though
Apr 01 23:39:42 <curtism>	Sergio: fn deref<'a>(&'a self) ?
Apr 01 23:40:18 <raph>	in the meantime, does anyone know if there's a syntax highlighting library in rust, or am I going to need to write my own?
Apr 01 23:42:30 <aatch>	raph, oh, somebody mentioned a syntax highlighter they wrote in Rust. I'll see if I can find it.
Apr 01 23:43:22 <raph>	irc ftw, i did google it but nothing turned up
Apr 01 23:43:29 <raph>	(maybe i should have used bing instead)
Apr 01 23:46:19 <durka42>	I'd better finish porting HomeopathicStack soon
Apr 01 23:46:27 <durka42>	or move west
Apr 01 23:47:31 <raph>	it doesn't look like too hard a problem except that a lot of syntax definitions probably use fancy features of the underlying regex engine
Apr 01 23:48:39 <aatch>	raph, unfortunately I think it was in #rust-beginners which is unlogged and I don't have back-scroll far enough.
Apr 01 23:48:58 <raph>	(apparently oniguruma ~= the ruby RE engine has become standard in the editor space0
Apr 01 23:49:17 <durka42>	wait, so if you make an immovable object using the self-reference trick -- you can't call any methods on it at all?
Apr 01 23:49:19 <durka42>	even &self methods
Apr 01 23:49:33 <durka42>	I think I need Sgeo's help with this tomfoolery :p
Apr 01 23:50:07 <Dabo>	durka42, &self should work
Apr 01 23:50:21 <Dabo>	but you won't be able to have a constructor like new() -> Self
Apr 01 23:50:31 <durka42>	hmm
Apr 01 23:50:34 <durka42>	how do I construct it then
Apr 01 23:50:37 <raph>	lack of backreference and look{ahead,behind} is gonna be a serious problem
Apr 01 23:50:38 <Dabo>	manually
Apr 01 23:50:45 <Dabo>	like Name { ... } every time you use it
Apr 01 23:50:46 <aatch>	durka42, not easily, no. As you need to use &mut to do it and that prevents other references.
Apr 01 23:50:46 <aatch>	raph, ah, wait. I misremembered.
Apr 01 23:50:47 <aatch>	raph, it was a SLOC-counter.
Apr 01 23:50:54 <Dabo>	or have it be an Option<self reference> instead of directly a self reference
Apr 01 23:50:55 <durka42>	I have a new() method but then a separate immobilize()
Apr 01 23:50:58 <durka42>	aatch: yeah that's the problem
Apr 01 23:51:04 <raph>	aatch: ok then :)
Apr 01 23:53:22 <Sgeo>	durka42, I have a tutorial
Apr 01 23:53:29 <durka42>	oh?
Apr 01 23:53:55 <durka42>	Sgeo: this one? https://users.rust-lang.org/t/incomplete-mini-guide-to-self-reference-non-movable-objects/4987
Apr 01 23:54:09 <Sgeo>	durka42, yes
Apr 01 23:54:38 <durka42>	Sgeo: my issue is you can't have any methods on the type at all http://is.gd/2Jm1YD
Apr 01 23:55:16 <raph>	yeah, sublime-rust's Rust.tmLanguage uses lookahead for its string single quoted match, not surprisingly because it's tricky to disambiguate from a lifetime
Apr 01 23:55:23 <Sgeo>	Try returning a &mut from immobilize
Apr 01 23:55:34 <raph>	so the question then is whether a lookahead-supporting regex package will happen
Apr 01 23:57:01 <Sgeo>	and calling the method on that
Apr 01 23:57:21 <glendc>	how do you use all the stuff from a inner mod
Apr 01 23:57:29 <Sgeo>	Although not sure what happens if you call a &mut self method on that
Apr 01 23:57:38 <glendc>	let's say you have `mod foo`; how could I make something like `use foo::*` work on a line below?
Apr 01 23:58:01 <raph>	maybe i'll just call into oniguruma now and switch to pure-rust when that's available
Apr 01 23:58:02 <Sgeo>	Back to VR for a while
Apr 01 23:59:00 <durka42>	Sgeo: that works but then I can drop it too :(
Apr 01 23:59:01 <glendc>	without typing all the parents in fron that is
Apr 01 23:59:02 <aatch>	raph, I imagine that the regex crate will grow support for it, probably by selecting between multiple matching engines depending on what features are required.
Apr 01 23:59:27 <raph>	aatch: that seems likely
Apr 01 23:59:32 <Sgeo>	The type itself, or just the reference to it?
Apr 01 23:59:50 <aatch>	glendc, assuming I understand the question: `use self::foo::*;`.
Apr 02 00:00:11 <aatch>	raph, I think it's something burntsushi has expressed interest in doing, anyway.
Apr 02 00:01:06 <raph>	aatch: i'm also finding myself wondering how hard it would be to cobble together a brute-force approach
Apr 02 00:01:20 <durka42>	Sgeo: http://is.gd/xw2xe4
Apr 02 00:01:34 <raph>	aatch: but it'd be quite awesome if burntsushi did that :)
Apr 02 00:01:45 <durka42>	oh duh, but the new one is just a &mut
Apr 02 00:01:51 <Sgeo>	durka42, you're dropping the reference
Apr 02 00:01:56 <durka42>	yeah
Apr 02 00:02:07 <durka42>	looks like &self and &mut self methods work
Apr 02 00:05:29 <sinclair>	durka42: just trying to understand that example
Apr 02 00:05:37 <sinclair>	durka42: is that a bug?
Apr 02 00:05:42 <durka42>	is what a bug?
Apr 02 00:05:57 <sinclair>	http://is.gd/xw2xe4
Apr 02 00:06:21 <durka42>	I don't think it's a bug
Apr 02 00:06:39 <computerquip>	A whole day and I still can't get Cargo to use the build script I specify... 
Apr 02 00:06:47 <sinclair>	durka42: just trying to understand what is going on there
Apr 02 00:07:03 <durka42>	sinclair: it makes an immovable struct and then drops a reference to said struct
Apr 02 00:07:07 <sinclair>	durka42: by calling foo() on the instance, is that transferring ownership back into main?
Apr 02 00:07:08 <computerquip>	Is there any weird circumstances required in order for Cargo to compile and run the damn script/
Apr 02 00:07:15 <durka42>	sinclair: 
Apr 02 00:07:16 <durka42>	no
Apr 02 00:07:24 <durka42>	sinclair: there are two variables called "rainbow", one shadows the other
Apr 02 00:09:16 <durka42>	is PhantomData<&'a mut ()> the easiest way to make something !Sync?
Apr 02 00:11:46 <Sgeo>	impl !Sync on it I think
Apr 02 00:13:04 <durka42>	that's not stable :)
Apr 02 00:13:09 <durka42>	what I want is Send + !Sync
Apr 02 00:13:15 <durka42>	it seems like PhantomData<UnsafeCell<()>> is the way to get that
Apr 02 00:15:48 <aatch>	durka42, `PhantomData<*mut ()>` and then a manual `impl Send`?
Apr 02 00:16:01 <durka42>	I think that works too
Apr 02 00:16:21 <durka42>	because putting UnsafeCell in my type has other weird effects too doesn't it...
Apr 02 00:16:33 <WindowsBunniesAreConquering>	computerquip: If you specified the build script in your Cargo.toml then cargo should definitely see that and build/run the build script
Apr 02 00:16:34 <Mutabah>	It removes some optimisations I think
Apr 02 00:20:29 <reem>	durka42: yeah, don’t use UnsafeCell for this, *mut + manual impl Send is the way to go
Apr 02 00:21:28 <durka42>	ok
Apr 02 00:23:11 <curtism>	Anyone happen to know if this is a new ICE?
Apr 02 00:23:21 <curtism>	playbot: match &*"" { _ => () }
Apr 02 00:23:22 -playbot/#rust-	@ref3477 = internal unnamed_addr constant %str_slice { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @str3459, i32 0, i32 0), i64 0 }, align 8
Apr 02 00:23:22 -playbot/#rust-	{ i8*, i8* } undef
Apr 02 00:23:22 -playbot/#rust-	output truncated; full output at: http://bit.ly/1oqwUcV
Apr 02 00:24:08 <reem>	curtism: not sure, but I would file it anyway, better to have duplicate reports than miss one
Apr 02 00:24:13 <curtism>	Oh it's not even to do with match
Apr 02 00:24:16 <curtism>	playbot: &*""
Apr 02 00:24:16 -playbot/#rust-	@ref3478 = internal unnamed_addr constant %str_slice { i8* getelementptr inbounds ([0 x i8], [0 x i8]* @str3459, i32 0, i32 0), i64 0 }, align 8
Apr 02 00:24:17 -playbot/#rust-	{ i8*, i8* } undef
Apr 02 00:24:17 -playbot/#rust-	output truncated; full output at: http://bit.ly/1qbWvZ9
Apr 02 00:24:25 <reem>	wow
Apr 02 00:24:37 <durka42>	Sgeo: I decided to go with an unsized object on the heap
Apr 02 00:24:41 <durka42>	I think that can't be moved?
Apr 02 00:24:56 <computerquip>	<WindowsBunniesAreConquering>: http://pasted.co/2be4c780
Apr 02 00:25:09 <computerquip>	It's a pretty basic example. It doesn't give the output of the build script which is also really simple. 
Apr 02 00:29:01 <curtism>	It's already been reported: https://github.com/rust-lang/rust/issues/30386
Apr 02 00:29:52 <Sgeo>	durka42, what is the goal here?
Apr 02 00:30:12 <durka42>	Sgeo: porting a 4/1 joke from C++ to Rust
Apr 02 00:30:13 <curtism>	Well that's handy if I ever want to crash rustc
Apr 02 00:30:21 <durka42>	Sgeo: storing data at a stable address
Apr 02 00:32:34 <curtism>	If I want to assert at compile time that two type are the same size, what's the best way to do that?
Apr 02 00:32:55 <curtism>	My first thought was to pretend transmute them
Apr 02 00:33:30 <Mutabah>	curtism: Well, that works
Apr 02 00:33:53 <mindtree>	hmmm, wish you could use literal or constant expressions as match patterns. would make some cases in macro_rules a little easier
Apr 02 00:34:14 <Mutabah>	mindtree: As in accepting just an integer?
Apr 02 00:34:32 <durka42>	curtism: transmute them in a dead function
**** ENDING LOGGING AT Sat Apr  2 00:35:22 2016

**** BEGIN LOGGING AT Sat Apr  2 00:35:36 2016

Apr 02 00:35:36 *	Now talking on #rust
Apr 02 00:35:36 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 02 00:35:36 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
**** ENDING LOGGING AT Sat Apr  2 00:36:04 2016

**** BEGIN LOGGING AT Tue Apr  5 21:43:34 2016

Apr 05 21:43:34 *	Now talking on #rust
Apr 05 21:43:34 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 05 21:43:34 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 05 21:43:40 <Binero>	durka42: so what do I do? 
Apr 05 21:43:48 <Binero>	Box it? 
Apr 05 21:43:56 <durka42>	kinda verbose but my first thought is iter::once(ev[0]).chain(iter::once(ev[1]))
Apr 05 21:44:15 <durka42>	assuming the elements in ev are Copy, I guess
Apr 05 21:44:31 <Binero>	that's very verbose given in the actual code I have 10 elements in the array 
Apr 05 21:44:40 <durka42>	yeah you could also do vec![ev[0], ev[1]].into_iter()
Apr 05 21:44:51 <durka42>	wait what's the type of ev?
Apr 05 21:44:54 <bluss>	the .into_iter() is redundant inside the closure
Apr 05 21:44:54 <pingveno>	Hmmm
Apr 05 21:44:59 <Binero>	it's a closure of copy types 
Apr 05 21:45:05 <pingveno>	I think you can use take()
Apr 05 21:45:15 <pingveno>	take(2)
Apr 05 21:45:16 <durka42>	oh, does flat_map invoke into_iter automatically?
Apr 05 21:45:19 <Binero>	pingveno: I need arrays, not slices 
Apr 05 21:45:27 <bluss>	durka42: yes
Apr 05 21:45:42 <durka42>	playbot: [1, 2, 3].iter().flat_map(|x| [x, x]).collect::<Vec<_>>()
Apr 05 21:45:42 -playbot/#rust-	output truncated; full output at: http://bit.ly/1SOoJCb
Apr 05 21:45:47 <Binero>	ah so I don't need into_iter then 
Apr 05 21:45:57 <durka42>	arrays don't implement IntoIterator though
Apr 05 21:45:59 <durka42>	only references to arrays
Apr 05 21:46:01 <durka42>	so it doesn't work
Apr 05 21:46:03 <bluss>	but you need an iterable to return
Apr 05 21:46:05 <aatch>	It still wont work because [T; N] doesn't implement IntoIterator.
Apr 05 21:46:10 <HDU>	aatach, so if I'm understanding correctly: if I want to, I can write my CPU code in Rust and (where parallelism is needed) call functions written in OpenCL to execute on the GPU?
Apr 05 21:46:12 <Binero>	vec! does 
Apr 05 21:46:26 <durka42>	is ev a vector already?
Apr 05 21:46:30 <aatch>	Binero, what is the type of `ev`?
Apr 05 21:46:52 <Binero>	It's a tuple of copy types
Apr 05 21:46:58 <Binero>	sorry, I said closures before, I meant tuples
Apr 05 21:47:02 <Binero>	it's 3 AM >.<
Apr 05 21:47:13 <durka42>	ah a tuple
Apr 05 21:47:18 <durka42>	so ev.0, ev.1
Apr 05 21:47:21 <Binero>	sorry, ev is a vector of tuples, 
Apr 05 21:48:09 <aatch>	HDU, more or less. (BTW, you should be able to use tab-completion for names, since my nick is aatch, not aatach...)
Apr 05 21:48:18 <durka42>	Binero: well, that's weird. but I think you got your answer :p
Apr 05 21:48:33 <Binero>	yeah, works nicely 
Apr 05 21:48:36 <HDU>	aatch: Apologies for the typo!
Apr 05 21:48:47 <Binero>	now I can fix the next borrow error :p
Apr 05 21:48:52 <HDU>	aatch: Thanks very much for your help :)
Apr 05 21:48:54 <aatch>	Binero, so you want to go from (roughly) Vec<Vec<T>> -> Vec<T>?
Apr 05 21:49:28 <Binero>	I want to go from Iter<Vec<T>> to Iter<[T; 6]> 
Apr 05 21:50:22 <Binero>	Vec<T> can be any size, it'll error if the array doesn't fit 
Apr 05 21:50:40 <Binero>	Is there a way to have .map give me a mutable? 
Apr 05 21:50:58 <bluss>	map gives you the iterator element by value, so you own it
Apr 05 21:51:02 <bluss>	(can thus modify it)
Apr 05 21:51:11 <Binero>	ah yeah I just noticed, the error is different
Apr 05 21:51:15 <bluss>	just need to make the binding of the argument mutable
Apr 05 21:51:27 <Binero>	I can't [index] on a mutable apperantly, that counts as borrowing 
Apr 05 21:51:30 <bluss>	.map(|mut x| ..)
Apr 05 21:53:13 <stuart_>	I’m in a function that takes a Boxed collection as an argument and I’m trying to push onto the collection inside a while let that is popping off the collection (breadth or depth first search). I’m getting an error that I can’t borrow the collection a second time (inside the while). I had similar code when I wasn’t trying to be generic, and it worked fine. The current refactoring is here: 
Apr 05 21:53:13 <stuart_>	https://github.com/shterrett/efficient_route_planning/commit/242dddea127e671194c97c0af8fe8d8f2dc73c03. Can someone help me? It feels like I’m *almost* at a working solution, but I may have a problem with my basic approach. 
Apr 05 21:54:49 <Binero>	:o
Apr 05 21:56:00 <Binero>	I cannot in the same iterator assign to a variable and read from it? 
Apr 05 21:56:48 <durka42>	"in the same iterator"?
Apr 05 21:56:57 <Binero>	map(|a| assign_to(mut_var, a)).map(|b| read_from(mut_var, b)).collect();
Apr 05 21:57:30 <Binero>	can't do read_from because it borrows mut_var, which was previously borrowed in assign_to 
Apr 05 21:57:35 <durka42>	right
Apr 05 21:57:35 <aatch>	Binero, nope, since it's captured in both closures.
Apr 05 21:57:38 <durka42>	those two closure can't exist at the same time
Apr 05 21:57:46 <durka42>	a closure is basically a struct containing a field for each capture
Apr 05 21:57:51 <Binero>	hmmmm
Apr 05 21:57:58 <Binero>	I don't want to collect in between 
Apr 05 21:58:10 <Binero>	so I guess I'll just pass mut_var in the iterator 
Apr 05 21:58:19 <durka42>	collecting in between wouldn't help
Apr 05 21:58:41 <Binero>	the existance of the first closure should end though, no? 
Apr 05 21:58:42 <durka42>	it's about the scopes where both of those closures exist, because they both contain mutable borrows of mut_var
Apr 05 21:58:57 <durka42>	they exist in the scope where you are doing this iterator chain
Apr 05 21:58:59 <Binero>	let a = {iter.collect()}? 
Apr 05 21:59:20 <durka42>	let c1 = |a| assign_to(mut_var, a); let c2 = |b| read_from(mut_var, b);
Apr 05 21:59:25 <durka42>	the iterator doesn't actually have anything to do with it
Apr 05 21:59:47 <durka42>	if I'm understanding correctly
Apr 05 21:59:51 <Binero>	but surely if the iterator leaves scope, so does the closure 
Apr 05 22:00:24 <aatch>	stuart_, not sure what the problem is. Could you elaborate a little on what's going on?
Apr 05 22:00:52 <Binero>	hmm this is a real problem 
Apr 05 22:00:57 <aatch>	stuart_, also, where is it complaining about the borrow, and which collection?
Apr 05 22:01:17 <durka42>	I guess you could do it in two scopes
Apr 05 22:01:32 <stuart_>	aatch: Sure. I’m trying to implement breadth/depth first search, so I’m passing in a generic Seq trait that I’ve defined. The Seq trait wraps VecDeque and defines push and pop on a Stack ttype and a Queue type.
Apr 05 22:01:36 <Binero>	not efficiently 
Apr 05 22:01:38 <durka42>	let iter = { iter.map(|a| assign_to(mut_var, a)); }
Apr 05 22:01:40 <durka42>	that might work
Apr 05 22:01:53 <stuart_>	I’m passing one of those into the search function, which effectively determines whether its BFS or DFS.
Apr 05 22:01:55 <durka42>	actually probably not
Apr 05 22:02:11 <Binero>	does unsafe allow to ignore the borrow checker? :p
Apr 05 22:02:29 <durka42>	you can do whatever you want with raw pointers
Apr 05 22:02:36 <durka42>	but rust is trying to prevent real bugs here
Apr 05 22:02:45 <durka42>	about the ordering of accesses to the mutable variable
Apr 05 22:02:46 <Binero>	not a good idea though, because the code is very unsafe 
Apr 05 22:02:55 <stuart_>	The error says that `seen.push(node)` in line 94 is an illegal second mutable borrow of `seen`, which is the passed in Seq trait, that is originally borrowed in line 81.
Apr 05 22:03:03 <Binero>	yeah the mutable variable can easily be relocated given it's a vector 
Apr 05 22:03:11 <durka42>	you can use a RefCell
Apr 05 22:03:55 <Binero>	I could pass along the mutable variable with the iterator
Apr 05 22:04:08 <aatch>	stuart_, I think you need to remove most of the lifetimes in that function signature.
Apr 05 22:04:09 <stuart_>	aatch: In a pre-refactored implementation, when BFS and DFS were separate functions, I was simply creating a VecDeque there, and was able to use it. Now I’m trying to pass an instance in. The Box happened  because I was receiving errors regarding core::marked::Sized not being implemented on the Seq type.
Apr 05 22:04:34 <stuart_>	aatch: fair - I put them in because of other compiler warnings, but I’ve refactored a bunch since then. Lemme give that a shot.
Apr 05 22:05:14 <aatch>	stuart_, especially since you seem to have been doing somewhat at random, the `for<'a> FnMut(&String)` is evidence of that...
Apr 05 22:05:20 <raph>	burntsushi: you around?
Apr 05 22:05:56 <stuart_>	I’ve been having fun with the compiler and google. Sort of.
Apr 05 22:06:11 <Binero>	Wouldn't this code technically be safe if the closure didn't take the mutable variable by value, but by reference? 
Apr 05 22:06:35 <aatch>	stuart_, there's also the fact that you're passing around `&String` everywhere, which makes no sense.
Apr 05 22:06:49 <durka42>	Binero: sounds like it's holding a reference to the variable, now
Apr 05 22:06:54 <aatch>	stuart_, &String offers literally no advantage over &str
Apr 05 22:07:13 <Binero>	durka42: well the mutable variable is a vector 
Apr 05 22:07:25 <durka42>	okay
Apr 05 22:07:34 <stuart_>	aatch: removing all the lifetime parameters in the search function tells me that it expected 1 and found 0. I assume this is because the I put them in the definition of Stack and Queue at the prodding of the compiler preciesly because of the lifetime requirements for &String
Apr 05 22:07:40 <Binero>	if it took the vector by value, and the vector updates its heap location, then the other closure wouldn't be able to tell 
Apr 05 22:07:49 <Binero>	but if it took the vector by reference, it would be able to tell
Apr 05 22:08:09 <aatch>	stuart_, Change your "Seq" trait to be `trait Seq<T>` and make it generic over any type for a start.
Apr 05 22:08:14 <stuart_>	aatch: I think I read recently that &String was the preferred type for user input, and once I have this working, the next step is populating the graph from a file. So I was trying to stick with that
Apr 05 22:08:16 <durka42>	well if you move the vector in, then you can't use it again, so that prevents the first problem
Apr 05 22:08:35 <aatch>	stuart_, where did you read that?!
Apr 05 22:08:50 <stuart_>	aatch: reddit :)
Apr 05 22:08:54 <aatch>	stuart_, because that makes no goddamn sense.
Apr 05 22:09:32 <stuart_>	haha; ok
Apr 05 22:09:57 <Binero>	I'm a bit hesitant about using RefCell, as the docs don't list my use case as a valid one
Apr 05 22:10:06 <dariusc93>	what are the pros are using cargo --bin over having a different cargo project and just adding the other library as a dependency? 
Apr 05 22:10:40 <durka42>	Binero: you can have more than one shared reference to things
Apr 05 22:10:46 <durka42>	and with a RefCell, you can mutate through a shared reference
Apr 05 22:10:52 <aatch>	stuart_, the only thing &String gives you is an extra level of indirection.
Apr 05 22:11:06 <Binero>	that's what a RefCell does
Apr 05 22:11:16 <durka42>	right
Apr 05 22:11:17 <Binero>	yeah 
Apr 05 22:11:19 <stuart_>	aatch: isn’t there a guarantee of utf8 as well?
Apr 05 22:11:26 <Binero>	My scroll didn't work there
Apr 05 22:11:31 <aatch>	stuart_, both str and String are UTF-8
Apr 05 22:11:38 <stuart_>	hmm ok
Apr 05 22:11:49 <keeper>	dariusc93: From what I understand, a [bin] is still treated as a separate crate.
Apr 05 22:12:13 <keeper>	At the very least, it's compiled as a separate crate.
Apr 05 22:12:16 <Binero>	but my use case isn't introducing mutability, it isn't logically immutable, and I'm not trying to mutate inside clone() 
Apr 05 22:12:24 <Binero>	so I feel like I'm doing something wrong logically 
Apr 05 22:12:30 <aatch>	stuart_, look at it like this, almost all the functions you can call on &String are actually on &str and the compiler just converts the &String to a &str for you.
Apr 05 22:12:38 <keeper>	But I'm not sure of any advantages besides bundling binaries together.
Apr 05 22:12:42 <durka42>	yeah, the docs are explaining why you might put a RefCell in a struct
Apr 05 22:12:46 <durka42>	they can also be useful outside of structs though
Apr 05 22:12:59 <Binero>	Is there overhead to it ? 
Apr 05 22:13:04 <stuart_>	aatch: ok. So should I s/String/str/ throughout?
Apr 05 22:13:12 <aatch>	stuart_, probably.
Apr 05 22:13:25 <Binero>	I'll be opening and closing it 3 times per iter, and I'll end up iterating a billion times 
Apr 05 22:13:28 <aatch>	stuart_, also, add a method to the Seq trait for constructing a new one.
Apr 05 22:13:54 <stuart_>	Ok
Apr 05 22:13:57 <aatch>	Binero, whats the type of `mut_var`.
Apr 05 22:14:10 <Binero>	mut vector
Apr 05 22:14:12 <aatch>	stuart_, then use that method in the functions instead of passing in a new one.
Apr 05 22:15:00 <stuart_>	aatch: How exactly? If I say Seq::new(), I still have to specify whether I want the Queue version or the Stack version
Apr 05 22:15:06 <durka42>	Binero: can you just combine the two closures into one? then there'll only be one borrow
Apr 05 22:15:10 <bluss>	Binero: if it all inlines into the same function, the extra RefCell business might optimize away completely
Apr 05 22:15:10 <Binero>	I might just read & write in one closure, and pass the read values along 
Apr 05 22:15:19 <Binero>	durka42: I cannot. One closure is inside another closure 
Apr 05 22:15:47 <durka42>	inside?
Apr 05 22:15:55 <durka42>	you should really post code that's more related to your actual questions :p
Apr 05 22:16:08 <Binero>	there's just so much of it 
Apr 05 22:16:12 <Binero>	this iterator is huge 
Apr 05 22:16:41 <Binero>	the part that's done is 150 lines 
Apr 05 22:16:54 <Binero>	well "done", the part that would be done if I was writing in C :p
Apr 05 22:17:08 <aatch>	stuart_, hmm, actually it might be ok the way you have it.
Apr 05 22:17:30 <durka42>	it's good the borrow checker is helping you keep it sound then :p
Apr 05 22:17:42 <Binero>	it is, this would've ended horribly 
Apr 05 22:18:11 <Binero>	then again, in C I wouldn't have written it as one big massive iterator 
Apr 05 22:18:42 <aatch>	Binero, it might be better to just not trying using one big iterator chain.
Apr 05 22:18:44 <stuart_>	aatch: ok. I’ve made those changes and now have an issue that the trait `core::marker::Sized` is not implemented for the type `str` — squiggly arrow pointing at HashMap in `pub struct Graph(HashMap<str, HashSet<str>>);`
Apr 05 22:18:57 <aatch>	stuart_, you want &str, not str
Apr 05 22:19:12 <stuart_>	right
Apr 05 22:19:39 <aatch>	stuart_, that said, I think your Graph should probably own the strings in question, so make it String.
Apr 05 22:20:49 <stuart_>	aatch: ok - that just got changed around when I swtiched everything to str. 
Apr 05 22:21:05 <aatch>	stuart_, oh, right.
Apr 05 22:21:26 <Binero>	woa
Apr 05 22:21:30 <Binero>	"cargo build" completed with code 0"
Apr 05 22:21:34 <Binero>	I never thought this day would come
Apr 05 22:24:50 <stuart_>	aatch: so I have Seq<T> now, and when I push onto it, compiler says expected T, found &str (the passed in root node is type &str). Do I need Seq to be Seq<&T> instead of Seq<T>?
Apr 05 22:26:43 <aatch>	stuart_, no. You want `S: for<'a> Seq<&'a str>` in your search function.
Apr 05 22:27:16 <aatch>	stuart_, That *should* work, though I'm not certain.
Apr 05 22:27:39 <aatch>	stuart_, also, if you've still got the `Box<S>`, you don't need the `Box` part anymore.
Apr 05 22:27:59 <stuart_>	aatch: Just use Stack::new() and Queue::new()?
Apr 05 22:28:17 <aatch>	stuart_, yes.
Apr 05 22:31:54 <stuart_>	aatch: we’re getting close; I think. trait `for<'a> Seq<&'a str>` is not implemented on Queue<_> (and Stack)
Apr 05 22:32:07 <stuart_>	But I have impl<T> Seq<T> for Queue<T> (and Stack)
Apr 05 22:33:49 <aatch>	stuart_, hmm, not sure then, the last thing to try is `to get rid of the `for<'a>` and move the 'a lifetime into the type parameter list.
Apr 05 22:35:11 <stuart_>	aatch: that did that - what’s the difference between specifying it in the parameter list and in a `where` after the function definition?
Apr 05 22:35:25 <Binero>	alright guys, thanks for keeping me sane 
Apr 05 22:35:40 <Binero>	but if I don't go to bed now, I think I will wake up on my laptop 
Apr 05 22:36:03 <aatch>	stuart_, the `for<'a>` was because I was concerned about the borrowing thing you had. That said, I think the "remove all the lifetimes" step helped fix that anyway.
Apr 05 22:36:26 <stuart_>	Yeah, I think I accidentally went down a lifetime hole a while back
Apr 05 22:37:21 <aatch>	stuart_, one rule-of-thumb that would have helped here: if you aren't returning a reference, don't add a lifetime for a &T argument.
Apr 05 22:38:31 <stuart_>	aatch: ok. It started with my initial implementation of Stack and Queue using/returning &String, I think. Compiler said I needed a lifetime specificed for the string so that it was guaranteed to live as long as the collection
Apr 05 22:40:39 <stuart_>	aatch: I’m down to one error: rait `core::borrow::Borrow<collections::string::String>` is not implemented for the type &str. This is popping up when I’m trying to check if a HashSet contains `node`, an &str `marked.contains(node)`
Apr 05 22:41:04 <narann>	hi rust peoples
Apr 05 22:41:25 <narann>	eih.... hi again?
Apr 05 22:41:35 <ivan>	hi narann
Apr 05 22:41:45 <Mutabah>	stuart_: `node` is a String?
Apr 05 22:41:47 <aatch>	stuart_, oh, change it to `marked.contains(&node)`, I think.
Apr 05 22:41:49 <narann>	simple question: why is there not rust 1.7 avaible for trusty (mint rebeca?)
Apr 05 22:42:02 <narann>	the launchpad is not updated anymore
Apr 05 22:42:07 <Mutabah>	narann: As a package?
Apr 05 22:42:11 <narann>	yes :)
Apr 05 22:42:19 <aatch>	narann, probably want to ask the person managing the package repo.
Apr 05 22:42:41 <narann>	ok, there is no activity since 11 2015 so I have no hope
Apr 05 22:42:56 <stuart_>	aatch: actually, root (the first node) is an &str, being passed into the function. But each of the nodes being returned from the adjacent_nodes function on graph is a String
Apr 05 22:43:15 <narann>	I was wondering how others where dealing with rust stable without installing things manually inside their distro
Apr 05 22:43:32 <durka42>	most of use use multirust
Apr 05 22:43:45 *	narann type multirust in google
Apr 05 22:43:59 <aatch>	I don't use stable Rust >.>
Apr 05 22:45:05 <narann>	where does multirust install itself?
Apr 05 22:45:21 <narann>	I mean, I don't want to put some stuff in /usr and others
Apr 05 22:45:36 <Mutabah>	narann: It installs wrapper programs in /usr (by default)
Apr 05 22:45:42 <Mutabah>	and the actual binaries in ~/.multirust
Apr 05 22:45:43 <durka42>	it installs to  ~/.multirust and some stuff under /usr/local
Apr 05 22:45:52 <durka42>	at least on OSX
Apr 05 22:45:56 <narann>	ok thanks
Apr 05 22:46:04 <narann>	:/
Apr 05 22:46:54 <curtism>	It can be made to install elsewhere
Apr 05 22:46:58 <narann>	if you guys state me it's safe I will try
Apr 05 22:46:58 <durka42>	the /usr/local prefix is configurable
Apr 05 22:47:13 <Mutabah>	narann: It's safe
Apr 05 22:47:15 <curtism>	It just needs somewhere to put executables that's in your $PATH
Apr 05 22:47:58 <aatch>	Well, I guess it doesn't *need* to be in $PATH, just be a pain to use otherwise...
Apr 05 22:48:25 <narann>	I will suppose it save everything in /usr/local/lib/rustlib/
Apr 05 22:48:32 <curtism>	Well, the whole point of its wrapper scripts is that they're in $PATH
Apr 05 22:48:54 <curtism>	Otherwise you can just run the different toolchain binaries manually
Apr 05 22:49:39 <stuart_>	aatch: done throwing errors in the search function for now. `unable to infer enough type information about `_`; type annotations or generic parameter binding required` when I call `search` from within `breadth_first_search`
Apr 05 22:49:47 <narann>	I'm looking for the wrapper files
Apr 05 22:49:50 <narann>	can't find them
Apr 05 22:49:59 <narann>	rustup is downloading right now
Apr 05 22:50:51 <narann>	yeah, there is a install.log
Apr 05 22:51:00 <narann>	so I can see where it put some stuff
Apr 05 22:51:29 <narann>	there is some breakage with 1.7 right. Why didn't release a 2.x?
Apr 05 22:51:32 <narann>	just curious
Apr 05 22:51:44 <Mutabah>	narann: 2.0 will be a BIG change
Apr 05 22:51:54 <Mutabah>	2.0 means "We threw backwards compat out the window"
Apr 05 22:52:14 <aatch>	narann, there shouldn't be any significant breakage. We allow for minor breakage, especially if it's soundness-related.
Apr 05 22:52:36 <narann>	ok
Apr 05 22:52:38 <Mutabah>	All release breakages with the 1.x releases are passed through crater (which is a check of all accessible code)
Apr 05 22:52:50 <narann>	ah yeah I rememebr this
Apr 05 22:53:00 <narann>	we can say you did a good job with crater
Apr 05 22:53:22 <narann>	the ability to "test" breakage is very cool and very nice
Apr 05 22:53:50 <aatch>	Also I think there's a way for companies to opt-in to the check so they don't have to release their code to get be part of the check.
Apr 05 22:54:57 <durka42>	oh really?
Apr 05 22:55:58 <aatch>	Generally "breakages" only affect a small number of crates. And even then the fixes are often small. It's not uncommon for Rust developers to fix broken crates themselves and submit patches.
Apr 05 22:56:32 <aatch>	durka42, yeah, I don't remember much about it (since it doesn't really affect me directly), I just remember a post somewhere about it.
Apr 05 22:57:19 <narann>	here we go! rustc 1.7.0 (a5d1e7a59 2016-02-29)
Apr 05 22:57:25 <narann>	thanks guys, I will play now
Apr 05 22:58:44 <durka42>	oh hey it's almost time to start making "last release as 1.9, so next one is 2.0 right?" jokes
Apr 05 23:06:39 <stuart_>	aatch: it finally compiles! Thanks for all the help!
Apr 05 23:06:50 <aatch>	stuart_, no problem.
Apr 05 23:18:25 <dariusc93>	keeper, interesting, but theres no difference between that and a separate crate?
Apr 05 23:18:44 <keeper>	dariusc93: From what i know, compilation is done per crate at the moment.
Apr 05 23:19:00 <keeper>	I've been able to compile one [bin], when another didn't compile too.
Apr 05 23:19:23 <keeper>	I'm sure there may be some real differences though, especially with regards to dependencies.
Apr 05 23:19:52 <durka42>	the bins and examples and external tests are compiled all as separate mini-crates
Apr 05 23:20:01 <durka42>	in cargo
Apr 05 23:32:03 <csherratt>	Is this a bug? http://is.gd/D2kDwr the bug being that `derive(Copy)` makes T require Copy too?
Apr 05 23:34:16 <durka42>	when you derive a trait, it's conditional on all type parameters implementing the trait
Apr 05 23:35:09 <durka42>	it's kinda a bug
Apr 05 23:35:11 <durka42>	but not really fixable
Apr 05 23:35:15 <durka42>	!gh 26925
Apr 05 23:35:15 <rustbot>	[Issue 26925] <open> #[derive] is too conservative with field trait bounds <https://github.com/rust-lang/rust/issues/26925>
Apr 05 23:36:07 <csherratt>	thanks.
Apr 05 23:37:06 <comex>	i feel so proud of having started a famous bug (with an inaccurate title)
Apr 05 23:38:39 <durka42>	heh
Apr 05 23:38:45 <frewsxcv>	is there any reason why rust-openssl shouldn't bundle ssl
Apr 05 23:38:50 <frewsxcv>	*bundle openssl
Apr 05 23:42:00 <feti>	Possibly license reasons?
Apr 05 23:42:21 <feti>	That's not a condescending question. I haven't looked into it, but usually bundling concerns are due to licensing.
Apr 05 23:43:49 <Mutabah>	That, and avoiding issues with bundled security-critical code
Apr 05 23:43:55 <hub>	more like that
Apr 05 23:44:05 <hub>	so that it gets security updates transparently
Apr 05 23:44:20 <Mutabah>	Plus, altough windows is the black sheep - Linux and OSX have openssl as part of the core
Apr 05 23:44:21 <hub>	just speculating though
Apr 05 23:44:22 <frewsxcv>	transparently?
Apr 05 23:44:34 <frewsxcv>	OSX doesn't have openssl
Apr 05 23:44:41 <hub>	frewsxcv: system update openssl, rust program gets it
Apr 05 23:44:54 <frewsxcv>	except for systems that don't have it :)
Apr 05 23:45:27 <frewsxcv>	also, i'm pretty sure we're faster at upgrading openssl than apple/windows/canonical is
Apr 05 23:45:34 <dariusc93>	frewsxcv, i think it would be wise to bundle something like botan than openssl for security purposes, especially since openssl is updated often for security and bug fixes. 
Apr 05 23:45:39 <hub>	frewsxcv: MacOS has "libssl.0.9.8.dylib", at least on 10.8
Apr 05 23:45:40 <Mutabah>	frewsxcv: Oh, I tought that it idd
Apr 05 23:45:41 <dariusc93>	also openssl isnt on apple
Apr 05 23:45:42 <frewsxcv>	(osx uses libressl)
Apr 05 23:45:51 <Mutabah>	Ah
Apr 05 23:45:57 <dariusc93>	well atleast not the headers iirc
Apr 05 23:46:08 <frewsxcv>	not the headers either.
Apr 05 23:46:34 <comex>	frewsxcv: you may be faster, but someone who uses cargo to build then releases a statically linked binary may not be
Apr 05 23:47:06 <comex>	and then you can't even easily tell whether you're vulnerable or not
Apr 05 23:47:08 <comex>	much better to use the system version if available
Apr 05 23:50:18 <comex>	though in OS X's case, only an old version, and it's deprecated, and not in iOS
Apr 05 23:50:38 <hub>	comex: macos != ios
Apr 05 23:51:07 <hub>	and I do believe apple still provide security updates
Apr 05 23:51:20 <comex>	yeah, i think they do
Apr 05 23:51:44 <comex>	but iOS is a relevant platform as well
Apr 05 23:51:57 <frewsxcv>	hmm
Apr 05 23:54:43 <frewsxcv>	sfackler: is there any reason why the hyper openssl backend couldn't be rewritten in rust-security-framework?
Apr 05 23:55:09 *	frewsxcv is looking to remedy the openssl+osx10.11+rust issues
Apr 05 23:55:44 <seanmonstar>	frewsxcv: hyper has an Ssl trait that allows other ssl impls
Apr 05 23:56:09 <frewsxcv>	seanmonstar: yeah, am looking at it now. it's more of a question about rust-security-framework and less-so about hyper
Apr 05 23:56:37 *	frewsxcv has never looked at OSX's Security Framework docs until now
Apr 05 23:56:54 <mindtree>	frewsxcv: not sure how relevant it is, but there was some discussion about different rust security libs here https://en.reddit.com/r/rust/comments/4d8hxm/what_crypto_library_do_yall_use/
Apr 05 23:58:51 <frewsxcv>	mindtree: yeah, saw that, thanks though.
Apr 05 23:59:22 *	frewsxcv is a occasional contributor to ring and is mostly familiar with the landscape
Apr 05 23:59:42 <mindtree>	frewsxcv: you are a contributor to everything!
Apr 06 00:01:34 <frewsxcv>	there might be a statement in that message about my mental well-being :)
Apr 06 00:02:08 <frewsxcv>	on that note, let me go back to swapping out crypto libraries
Apr 06 00:02:46 <mindtree>	take care of yourself chap :)
Apr 06 00:03:46 <ted>	ooh, this is clever: http://rrichardson.github.io/reactor/mac/macro.matches!.html
Apr 06 00:04:09 <ted>	i would like that (or maybe just assert_matches!(expr, pattern))
Apr 06 00:05:01 *	frewsxcv has a moment of self-awareness and decides to go on a run instead
Apr 06 00:07:31 <raph>	what's a good name for a crate that does "fancy" regexes (backtracking, lookaround, etc)?
Apr 06 00:07:40 <Murarth>	ted: I have a small standalone crate providing an assert_matches macro: https://crates.io/crates/assert_matches
Apr 06 00:07:51 <ted>	Murarth: thanks!
Apr 06 00:08:26 <comex>	raph: slow_regex ;)
Apr 06 00:08:39 <durka42>	irregex
Apr 06 00:08:40 <raph>	comex: very funny
Apr 06 00:08:48 <Murarth>	Ohhhh, burn.
Apr 06 00:08:49 <raph>	durka42: i'm thinking of that
Apr 06 00:08:56 <comex>	it's taken http://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html
Apr 06 00:08:57 <undeadleech>	raph: fancy_regex-rs
**** BEGIN LOGGING AT Wed Apr  6 06:27:25 2016

Apr 06 06:27:25 *	Now talking on #rust
Apr 06 06:27:25 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 06 06:27:25 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 06 06:43:13 <zzeroo>	Hi, under my debian 8 (sid) ~/.cargo/config is not working. If I copy the .cargo/config in my projet all is fine. But the global in my home dir dosn't. Is this known?
Apr 06 06:52:51 <killercup>	zzeroo: is you project in a subfolder of ~?
Apr 06 06:53:49 <killercup>	(i _think_ i had the problem as well some time ago and it was because my project on a network storage which was in /Volumes/foo/projects/…)
Apr 06 06:58:48 <ferjm>	hello! I am having troubles trying to understand this compiler error. https://pastebin.mozilla.org/8866560 coming from this code https://github.com/ferjm/registration_server/blob/redis/src/routes.rs
Apr 06 07:06:27 <Quxxy>	ferjm: Delete the `: *mut Request` from the closure args and try again
Apr 06 07:06:28 <zzeroo>	killercup: yes my project is on a seperate hdd. This is a very odd cargo behavior
Apr 06 07:07:13 <Quxxy>	zzeroo: It's probably canonicalising the path somewhere along the line
Apr 06 07:07:24 <killercup>	zzeroo: does it work when you move it to ~/tmp e.g.? and do the docs say that ~/.cargo is _always_ used? then file a bug :)
Apr 06 07:08:31 <ferjm>	Quxxy that gives me https://pastebin.mozilla.org/8866561
Apr 06 07:09:33 <Quxxy>	ferjm: Looks confused by the return type; try removing that, too
Apr 06 07:11:29 <zzeroo>	killercup: No ~/tmp is not working. And they don't say explicit ~/.cargo/config. Only some strange path compinations http://doc.crates.io/config.html#hierarchical-structure
Apr 06 07:11:35 <ferjm>	Quxxy same thing :\ https://pastebin.mozilla.org/8866562
Apr 06 07:16:10 <Quxxy>	ferjm: Well, looking at the iron docs, I don't see how you're supposed to pass a closure at all, so I dunno
Apr 06 07:19:11 <ferjm>	Quxxy ok, thanks anyway. FWIW a similar thing worked for me in the past https://github.com/fxbox/foxbox/blob/master/src/static_router.rs#L33 
Apr 06 07:56:38 <monti>	hi, all. what is the name of try! enchancement feature? i.e. foo()?.bar()?
Apr 06 07:58:19 <erikj>	monti: Do you mean #![feature(question_mark)] ?
Apr 06 08:01:02 <SuperFluffy>	Bit confused about io::Write; I have a fn that wants a “&mut Write” as input. I passed a “&mut vs[..]”, where vs: Vec<u8>; now this didn't work, as Write is implemented for &mut [u8], not for [u8]. Passing “&mut &mut vs[..]” fixes the issue, but why?
Apr 06 08:01:20 <SuperFluffy>	&mut &mut vs[..] is a mutable ref to a mutable ref to a slice, right?
Apr 06 08:01:26 <Mutabah>	SuperFluffy: Yep
Apr 06 08:01:45 <Mutabah>	SuperFluffy: The io::Write impl for &mut [u8] will update the pointer/length as it writes
Apr 06 08:02:48 <SuperFluffy>	Mutabah: Do you know where that impl is defined?
Apr 06 08:03:34 <SuperFluffy>	std::io only has Write for BroadCast
Apr 06 08:04:42 <Mutabah>	SuperFluffy: not off the top of my head
Apr 06 08:05:11 <Mutabah>	It's in io/impls.rs
Apr 06 08:05:11 <SuperFluffy>	https://github.com/rust-lang/rust/blob/e1195c24bb567019d7cdc65bf5a4c642e38475d1/src/libstd/io/impls.rs#L187
Apr 06 08:05:16 <SuperFluffy>	Yeah :)
Apr 06 08:05:37 <SuperFluffy>	Man that would be nice if we had a "look at implementation" in the docs
Apr 06 08:05:52 <Mutabah>	Yep
Apr 06 08:05:59 <Mutabah>	and that impl needs documentation stating what it does
Apr 06 08:09:43 <monti>	erikj: yes, thanks
Apr 06 08:19:55 <monti>	where i can find what each feature means? for example when studying libstd.
Apr 06 08:21:55 <Mutabah>	monti: For the std ones, grep for `feature="name` is the easy way
Apr 06 08:25:01 <stjepang>	I just discovered that it's okay to call mem::forget on MutexGuard: http://is.gd/cxBHrg
Apr 06 08:25:44 <stjepang>	That sounds kinda scary because safe locking relies on MutexGuard's destructor.
Apr 06 08:25:54 <Mutabah>	It just means that the mutex stays locked
Apr 06 08:27:44 <stjepang>	So, since leaking memory is "safe", we must ensure that not calling destructors doesn't break safety?
Apr 06 08:37:08 <bluss>	yep, that's exactly it
Apr 06 08:37:42 <bluss>	stjepang: that by extension causes https://github.com/rust-lang/rust/issues/31936 which was deemed to not be an issue
Apr 06 08:38:14 <bluss>	stjepang: rust is quite careful about what it means by memory safety
Apr 06 08:38:32 <bluss>	preventing deadlocks is not part of the safety concept
Apr 06 08:40:29 <Yaniel>	would it make sense to unlock mutexes upon destruction though?
Apr 06 08:40:56 <Yaniel>	when the cat is away, mice dance on the table etc
Apr 06 08:41:32 <stjepang>	bluss: Interesting. I was curious about cases like that one, where it's easy to overlook potential (more or less serious) problems.
Apr 06 08:45:33 <stjepang>	Yaniel: Makes sense to me. However, it's not unlocked upon destruction (see libstd/sys/unix.rs:Mutex::destroy).
Apr 06 08:46:23 <stjepang>	Err, libstd/sys/unix/mutex.rs: Mutex::destroy
Apr 06 08:46:43 <chris_99>	Has anyone seen any way to access the windows registry via Rust, i haven't really seen any rust crates that do this
Apr 06 08:46:56 <Mutabah>	chris_99: Via winapi maybe
Apr 06 08:47:03 <bluss>	chris_99: I know a crate that does it
Apr 06 08:47:06 <bluss>	http://alexcrichton.com/gcc-rs/gcc/windows_registry/index.html
Apr 06 08:47:12 <bluss>	a bit unexpected maybe
Apr 06 08:47:53 <Yaniel>	I remember there being some "native config" crate
Apr 06 08:47:58 <Yaniel>	does that use the registry on windows?
Apr 06 08:48:15 <stjepang>	bluss: Am I right in saying that this is an API problem? If we really wanted to enforce proper locking/unlocking, we could write a fn called `with_mutex` that would take a function and make sure mutex gets locked before calling the function and unlocked afterwards?
Apr 06 08:49:12 <Yaniel>	!crates winreg
Apr 06 08:49:16 <Yaniel>	!crate winreg
Apr 06 08:49:17 <rustbot>	winreg (0.3.4) - Rust bindings to MS Windows Registry API -> https://crates.io/crates/winreg
Apr 06 08:49:31 <bluss>	stjepang: yes maybe. some resources are not so well modelled with RAII
Apr 06 08:49:53 <chris_99>	Yaniel, cheers, that's perfect, i couldn't seem to find that when searching oops
Apr 06 08:50:12 <Yaniel>	(that's not the crate I was looking for though :P)
Apr 06 08:50:19 <chris_99>	ah heh
Apr 06 08:56:57 <Yaniel>	can't find it now :(
Apr 06 08:57:49 <chris_99>	no worries, that one looks good
Apr 06 08:59:43 <phaazon>	hey
Apr 06 08:59:57 <phaazon>	is there a way to see what’s inside a Weak?
Apr 06 09:00:01 <phaazon>	I don’t see a Deref impl
Apr 06 09:00:42 <phaazon>	with upgrade?
Apr 06 09:00:53 <phaazon>	it returns an Arc, that’s weird
Apr 06 09:02:11 <Mutabah>	phaazon: Yep
Apr 06 09:02:21 <phaazon>	I don’t get it
Apr 06 09:02:23 <Mutabah>	phaazon: because to use a weak, you have to upgrade to an owning ref
Apr 06 09:02:33 <phaazon>	an Arc supposes shared owning
Apr 06 09:02:35 <phaazon>	Weak doesn’t
Apr 06 09:02:46 <phaazon>	how can it magically spawn ownership?
Apr 06 09:03:12 <Mutabah>	Basically it checks if the strong count is >0, if it is, it increments the strong type and returns an Arc
Apr 06 09:03:18 <Mutabah>	Otherwise, it returns an error
Apr 06 09:03:40 <phaazon>	Mutabah: hm, I see
Apr 06 09:03:46 <phaazon>	I guess I could use that then
Apr 06 09:03:47 <phaazon>	thanks!
Apr 06 09:03:51 <canton7>	So, you start with a reference-counted object. It can have many references to it, and the Arc/Rc keeps a count of how many references there are to it. When a reference is dropped, that count is decremented. When it reaches zero, that object is released. A weak reference is a reference which doesn't contribute to the count - upgrading it does increase the count
Apr 06 09:04:16 <phaazon>	canton7: yeah
Apr 06 09:04:18 <phaazon>	I got it
Apr 06 09:04:20 <phaazon>	that’s nice
Apr 06 09:04:23 <phaazon>	that’s what I need
Apr 06 09:05:26 <phaazon>	thanks folks!
Apr 06 09:05:32 <phaazon>	you rock \o/ \o\ /o/
Apr 06 09:16:07 <ptalbot>	hello o/ Is it possible to use external crates in code of documentation?
Apr 06 09:16:38 <bluss>	ptalbot: it is, if you write the extern crate xyz line
Apr 06 09:16:51 <bluss>	probably want an explicit main function in the example code then too
Apr 06 09:16:54 <ptalbot>	it doesn't seem to work
Apr 06 09:17:08 <ptalbot>	ok, maybe I can try with the main
Apr 06 09:17:20 <bluss>	ptalbot: here's an example that works https://bluss.github.io/rust-ndarray/master/src/ndarray_rand/lib.rs.html#40-55
Apr 06 09:17:37 <bluss>	it needs the crates to be dev-dependencies if you want the test to run & pass in doctests
Apr 06 09:18:05 <bluss>	ptalbot: that example uses # on the lines that should be hidden from the example when it's rendered
Apr 06 09:19:08 <ptalbot>	bluss, ok! thank you, I will try!
Apr 06 09:25:28 <ptalbot>	bluss, if the crate is already a classic dependency, it doesn't need to be also a dev-dependency, right?
Apr 06 09:26:12 <bluss>	right
Apr 06 09:26:29 <ptalbot>	bluss, ok thanks, actually what was missing was the `extern crate` of the current project...
Apr 06 09:43:37 <ptalbot>	I wanted to install nightly Rust with rustup but I have this error: "error: manifest missing package for component rust-std-aarch64-unknown-linux-gnu". Does it mean it's not available for my plateform?
Apr 06 09:45:37 <SneakySnake>	ptalbot: https://github.com/rust-lang-nursery/multirust-rs/issues/268
Apr 06 09:48:56 <ptalbot>	SneakySnake, oh ok, seems temporary, will check issues next time... Thanks!
Apr 06 09:54:08 <bjz_>	I'm getting an error when trying to `cargo publish` cgmath (https://github.com/bjz/cgmath/blob/master/Cargo.toml) - it says "api errors: wildcard (`*`) dependency constraints are not allowed on crates.io. See http://doc.crates.io/faq.html#can-libraries-use--as-a-version-for-their-dependencies for more information"
Apr 06 09:54:38 <bjz_>	Any idea what the issue is? I don't have any wildcards there
Apr 06 09:57:01 <Quxxy>	bjz_: Oh, this is a fun one
Apr 06 09:57:04 <Quxxy>	It's rustc-serialize
Apr 06 09:57:13 <bjz_>	yep
Apr 06 09:57:19 <bjz_>	just figured it out
Apr 06 09:57:21 <Quxxy>	:D
Apr 06 09:57:38 <bjz_>	so that's what https://github.com/bjz/cgmath/issues/308 was all about!
Apr 06 09:57:48 <Quxxy>	Hahaha
Apr 06 09:57:52 <bjz_>	changed it to rustc-serialize = "0.3"
Apr 06 09:58:02 <Quxxy>	Pretty sure it's _
Apr 06 09:58:33 <bjz_>	https://crates.io/crates/rustc-serialize
Apr 06 09:58:48 <bjz_>	so it didn't have a version key set
Apr 06 09:58:56 <bjz_>	in its dependency entry
Apr 06 09:58:57 <Quxxy>	A-yup
Apr 06 09:59:05 <bjz_>	lol
Apr 06 09:59:07 <Quxxy>	Oh, could've *sworn* it was _
Apr 06 10:06:20 <SneakySnake>	ptalbot: Okay, now the new nightly should be up
Apr 06 10:06:23 <SneakySnake>	It's downloading for me
Apr 06 10:09:41 *	ChanServ gives channel operator status to jdm
Apr 06 10:28:54 <ptalbot>	SneakySnake, it works for me too \o/.
Apr 06 10:30:02 <thills>	Yoric: ping
Apr 06 10:44:06 <tromey>	does rustc have an equivalent of "--syntax-only"?
Apr 06 10:44:34 <Mutabah>	tromey: To just do syntax checking?
Apr 06 10:44:37 <tromey>	yes
Apr 06 10:45:08 <chris_99>	Is there a list of all the target triples rust provides out of interest?
Apr 06 10:45:11 <tromey>	well, g++ does syntax checking and semantic analysis, basically bailing out before codegen
Apr 06 10:46:17 <SneakySnake>	tromey: There is -Z no-trans, which skips codegen basically
Apr 06 10:46:24 <tromey>	aha, thanks
Apr 06 10:46:25 <Mutabah>	and -Z parse-only, which stops earlier
Apr 06 10:46:29 <SneakySnake>	There is also a cargo wrapper for it called cargo-check
Apr 06 10:46:39 <Mutabah>	These aren't "stable" (afaik) but have been around for a long time
Apr 06 10:47:27 <Mutabah>	(Someone may want to confirm that)
Apr 06 10:51:05 <Yoric>	thills: pong
Apr 06 10:53:18 <thills>	Yoric: I'm having trouble with the timer crate and wondering if you can take a quick look at a pastebin to see if I'm using it incorrectly?  I'm not getting any compile error, it just doesn't fire in my thread scenario: https://pastebin.mozilla.org/8866583
Apr 06 10:54:24 <Yoric>	thills: You shouldn't create a new timer at each iteration. Otherwise, the timer is killed at the end of the loop.
Apr 06 10:54:29 <Yoric>	s/loop/iteration/
Apr 06 10:55:36 <Yoric>	(I don't think that it's the issue, though)
Apr 06 10:56:01 <thills>	Yoric: ok.  Yeah, I just tried that.  seems to be something else still :(
Apr 06 10:56:50 <Yoric>	I don't see any other issue.
Apr 06 10:57:37 <Yoric>	thills: I assume that the callback never fires, right?
Apr 06 10:57:47 <Yoric>	(I mean, have you checked with a println?)
Apr 06 10:57:47 <thills>	Yoric: right
Apr 06 10:58:26 <Yoric>	thills: Just in case, have you tried to `ct.send().unwrap()`?
Apr 06 10:58:31 <Yoric>	Instead of `ct.send()`.
Apr 06 10:59:01 <thills>	Yoric: Line 39 prints but 41 doesn't..  I tried the unwrap, but let me try again with the timer above the loop
Apr 06 11:00:19 <Yoric>	As a side-note, this schedule inside a loop might be better replaced with a `schedule_repeating`.
Apr 06 11:00:24 <Yoric>	Once we have found out what's wrong.
Apr 06 11:00:26 <thills>	Yoric: I added a println before the ct.send().unwrap() and that doesn't print either
Apr 06 11:02:24 <Yoric>	thills: I wonder if I could have made an error with UTC somewhere.
Apr 06 11:02:37 <Yoric>	thills: Does it work better if you set it up to fire at a given time?
Apr 06 11:03:02 <thills>	Yoric: it works fine when I don't have it in a seaparate thread...
Apr 06 11:03:21 <Yoric>	I wonder if the thread is somehow killed before the delay.
Apr 06 11:03:27 <thills>	It actually worked fine even when I had the loop in a new thread, but NOT in the new function
Apr 06 11:04:00 <Yoric>	thills: I don't understand that last sentence.
Apr 06 11:04:27 <tchosky>	Is there a trait that identifies all numeric types?
Apr 06 11:04:36 <tchosky>	(Or a common workaround.)
Apr 06 11:05:21 <thills>	Yoric: so i had another implementation where I spawned a thread in a separate function instead of new.  so, I had a function in B that spawned the thread.
Apr 06 11:05:44 <Yoric>	thills: Also, I don't think that's the issue, but that thread is a bit weird, insofar as it owns both the sender and the receiver.
Apr 06 11:05:44 <thills>	vs. spawning the thread as a part of the B::new()
Apr 06 11:06:28 <kvark>	quick question: if I'm implementing a trait that has a get() method over Vec<T>, how do I call the Vec's get() in the implementation?
Apr 06 11:07:10 <bluss>	kvark: calling .get() explicitly should work. inherent methods have precedence
Apr 06 11:07:35 <bluss>	since .get() is a method on slices, maybe you need an extra deref in there?
Apr 06 11:07:50 <bluss>	for example v[..].get(i)
Apr 06 11:08:01 <kvark>	oh
Apr 06 11:08:24 <kvark>	bluss: beautiful, thank you!
Apr 06 11:08:58 <kvark>	bluss: the stuff I've been working on is published now btw - https://github.com/kvark/parsec
Apr 06 11:11:13 <bluss>	nice enticing blurb
Apr 06 11:12:50 <Yoric>	thills: I'm sorry, I don't know. Otoh, I believe that your code is a bit too complex for what it does. Perhaps by simplifying it you'll get a "of course, that's the issue" moment?
Apr 06 11:13:09 <bluss>	kvark: I have to ask what does run1w1r mean?
Apr 06 11:13:49 <bluss>	kvark: I guess 1 writable 1 readable
Apr 06 11:13:51 <Yoric>	For the moment, my best guesses are: 1/ either there is a bug in timer, probably related to UTC::now(); 2/ or something is dropped earlier than we think and kills the thread or the timer.
Apr 06 11:14:36 <thills>	Yoric: np.  I kind of wound up with this because I wanted to be able to send() to the thread from both the spawned thread and the main thread... I feel like I'm probably missing an obvious approach
Apr 06 11:15:42 <Yoric>	thills: What are you trying to achieve, exactly?
Apr 06 11:16:09 <kvark>	bluss: yes
Apr 06 11:16:22 <kvark>	bluss: I'm open to improvement suggestions ;)
Apr 06 11:17:09 <meh>	is there any document on best practices in making a Rust library accessible from C/FFI?
Apr 06 11:17:39 <bluss>	kvark: using doc comments and rustdoc :D
Apr 06 11:18:03 <bluss>	kvark: you can templatize doc comments with macros too
Apr 06 11:18:19 <thills>	Yoric: to be able to execute some logic after a given amount of time in a separate thread... but also be able to send a message to the thread (e.g. to gracefully shut it down from the main thread).
Apr 06 11:18:33 <kvark>	bluss: templatize doc comments? O_o
Apr 06 11:19:08 <bluss>	kvark: cutting and pasting https://github.com/bluss/rust-ndarray/blob/master/src/impl_ops.rs#L78-L79
Apr 06 11:19:47 <bluss>	no excuses, macro generated things can have accurate docs too
Apr 06 11:20:06 <Yoric>	thills: Mmmh... Just in case, have you tried `let guard = timer.schedule...`?
Apr 06 11:20:19 <Yoric>	Just to be sure that the timer callback has a well-defined lifetime.
Apr 06 11:20:21 <sinclair>	why does Rust not have a ~ NOT bitwise operator?
Apr 06 11:20:46 <benh>	it's just spelled !
Apr 06 11:20:47 <Mutabah>	sinclair: ! does the same job
Apr 06 11:20:49 <kvark>	bluss: very nice, thank you!
Apr 06 11:20:57 <Mutabah>	playbot: !128u8
Apr 06 11:20:58 -playbot/#rust-	127
Apr 06 11:21:14 <sinclair>	hmm, alright
Apr 06 11:21:38 <sinclair>	playbot: !!128u8
Apr 06 11:21:39 -playbot/#rust-	128
Apr 06 11:21:43 <sinclair>	nice
Apr 06 11:21:45 <sinclair>	Mutabah: cheers
Apr 06 11:25:34 <thills>	Yoric:  OMG  that was it!
Apr 06 11:26:05 <Yoric>	thills: I knew there would be a "ahah" moment :)
Apr 06 11:26:20 <Yoric>	So the timer is cancelled as soon as the guard leaves the scope.
Apr 06 11:26:27 <Yoric>	s/leaves the scope/is dropped/
Apr 06 11:26:37 <thills>	Yoric: yes, that makes sense
Apr 06 11:26:45 <Yoric>	This is a mechanism to make sure that we don't leave timers hanging around if we have forgotten about them.
Apr 06 11:27:00 <Yoric>	But, well, you have seen the drawback :)
Apr 06 11:27:09 <thills>	Yoric: Yes, I can see how that can be a mess
Apr 06 11:28:03 <thills>	Yoric: wow.  thanks so much
Apr 06 11:28:14 <Yoric>	My pleasure.
Apr 06 11:28:21 <Yoric>	thills: How's the work on Taxonomy, btw? Are you still on it?
Apr 06 11:28:39 <thills>	Yoric: no, I'm working on metrics
Apr 06 11:28:48 <Yoric>	ok
Apr 06 11:28:55 <Yoric>	Metrics in Rust? Cool :)
Apr 06 11:29:25 <thills>	Yoric: yes, we're hoping this can be used by other projects too
Apr 06 11:38:53 <sinclair>	WindowsBunny: heya
Apr 06 11:39:04 <sinclair>	WindowsBunny: writing windows drivers using rust
Apr 06 11:39:21 <sinclair>	WindowsBunny: if i wanted to do that, how would i approach thing ?
Apr 06 11:39:51 <sinclair>	*things
Apr 06 11:58:36 <Binero>	Out of interest, does rust still use libc internally? 
Apr 06 11:58:56 <Ms2ger>	Yes
Apr 06 12:02:55 <phaazon>	hey, I’ve been wondering something about dynamic dispatch
Apr 06 12:02:59 <phaazon>	imagine this trait:
Apr 06 12:03:01 <wyvern>	thills: metrics as in similar to dropwizard metrics?
Apr 06 12:03:11 <phaazon>	trait Foo { fn foo() -> Self }
Apr 06 12:03:18 <phaazon>	now I imagine bar:
Apr 06 12:03:39 <phaazon>	fn bar(foo: &Foo);
Apr 06 12:03:54 <phaazon>	how can I use that to retrieve the result of foo?
Apr 06 12:03:54 <phaazon>	like
Apr 06 12:04:15 <phaazon>	fn bar<T: Foo>(f: &Foo) -> T (
Apr 06 12:04:38 <phaazon>	I hate to do that, but it might be necessary in my case
Apr 06 12:06:28 <phaazon>	lib/resource.rs:51:1: 53:2 error: the trait `resource::Test` cannot be made into an object [E0038]
Apr 06 12:06:31 <phaazon>	ah
Apr 06 12:07:16 <phaazon>	I guess I need ?Sized
Apr 06 12:07:38 <Binero>	phaazon: Did you fix whatever you tried to do? 
Apr 06 12:07:53 <phaazon>	about what Binero?
Apr 06 12:08:50 <Binero>	phaazon: I don't know. You asked for help and then appeared to answer your own question 
Apr 06 12:09:03 <phaazon>	well
Apr 06 12:09:09 <phaazon>	I’m trying to build a resource manager
Apr 06 12:09:14 <phaazon>	with caching
Apr 06 12:09:21 <phaazon>	and I feel like I might need dynamic dispatch
Apr 06 12:09:58 <phaazon>	what is the feature to use to have ?Sized?
Apr 06 12:10:13 <Binero>	You mean have a trait be optionally sized or not? 
Apr 06 12:10:28 <phaazon>	Binero: well, the idea is that I have a trait
Apr 06 12:10:29 <phaazon>	Resource
Apr 06 12:10:37 <phaazon>	which requires a type to implement load(), unload() and reload()
Apr 06 12:10:40 <Binero>	You can only accept pointers to traits 
Apr 06 12:10:53 <phaazon>	now I want to have a heteregenous list of resources
Apr 06 12:10:56 <phaazon>	so, &Resource
Apr 06 12:11:07 <phaazon>	but I wonder how I can restore back the type
Apr 06 12:11:35 <phaazon>	if I do a static dispatch, which I prefer, I need to modify the ResourceManager type each type I add a new type to be supported as a resoruce
Apr 06 12:11:37 <Binero>	So you have a Resource<T>? 
Apr 06 12:11:38 <phaazon>	which is boring
Apr 06 12:11:41 <Binero>	And you want to turn it into a T? 
Apr 06 12:11:47 <phaazon>	no
Apr 06 12:11:51 <phaazon>	I have a Resoruce
Apr 06 12:11:53 <phaazon>	Resource
Apr 06 12:11:54 <phaazon>	it’s a trait
Apr 06 12:12:06 <phaazon>	trait Resource { fn load(…)… }
Apr 06 12:12:43 <Binero>	What do you want to do with it then? 
Apr 06 12:12:51 <Binero>	what do you mean with "restore back the type"
Apr 06 12:13:00 <phaazon>	convert a Resource into its implementor
Apr 06 12:13:02 <Binero>	you want to get the object that implements the Resource trait? 
Apr 06 12:13:04 <phaazon>	a &Resource*
Apr 06 12:13:09 <Binero>	ah
Apr 06 12:13:10 <phaazon>	like
Apr 06 12:13:15 <phaazon>	impl Resource for Car
Apr 06 12:13:19 <phaazon>	I want a function like
Apr 06 12:13:27 <phaazon>	fn get(res: &Resource) -> Car
Apr 06 12:13:29 <Binero>	You can't change a Resource into Car 
Apr 06 12:13:29 <phaazon>	or something like that
Apr 06 12:13:34 <Binero>	But
Apr 06 12:13:39 <chris_99>	Just wondering if anyone could help i'm getting this : error: mismatched types: expected `u32`, found `u64` [E0308] gobject_sys::g_signal_handler_block (stylecombo.to_glib_none().0,handle); when i compile for windows, but gobject_sys::g_signal_handler_block seems to expect a c_long according to the git source for gtk-rs (this works fine in linux)
Apr 06 12:13:45 <phaazon>	I’m looking for better options
Apr 06 12:13:48 <Binero>	hmm
Apr 06 12:13:49 <phaazon>	because I don’t like dynamic dispatching
Apr 06 12:13:59 <phaazon>	the perfect option to me
Apr 06 12:14:01 <Binero>	Why not do 
Apr 06 12:14:07 <phaazon>	would be to have as many maps as types
Apr 06 12:14:11 <phaazon>	but where should I put those maps?
Apr 06 12:14:37 <Binero>	phaazon: Can you explain what you are trying to do in general? 
Apr 06 12:14:48 <phaazon>	yeah, a caching resource manager
Apr 06 12:14:55 <phaazon>	imagine you have resources, like objects, textures and lights
Apr 06 12:14:58 <Binero>	and Resource is anything that can be cached? 
Apr 06 12:15:02 <phaazon>	those are on filesystem
Apr 06 12:15:07 <phaazon>	Binero: almost
Apr 06 12:15:23 <phaazon>	a Resource is anything that can be loaded from, unloaded and reloaded from the disk
Apr 06 12:15:28 <Binero>	I see
Apr 06 12:15:28 <phaazon>	and can then be cached into a map
Apr 06 12:15:31 <phaazon>	so
Apr 06 12:15:32 <phaazon>	actually
Apr 06 12:15:35 <phaazon>	I have a struct manager
Apr 06 12:15:36 <phaazon>	Manager*
Apr 06 12:15:38 <phaazon>	with, for instance
Apr 06 12:15:46 <Binero>	Resource { type Output = Car; } ? 
Apr 06 12:15:55 <phaazon>	struct Manager { lights: BTreeMap<String, Arc<Light>>, …
Apr 06 12:16:02 <phaazon>	no
Apr 06 12:16:13 <phaazon>	Output ~ Self
Apr 06 12:16:42 <Binero>	If Resource is a source to load from, surely you don't want to get(resource) -> Resource
Apr 06 12:16:50 <Binero>	you'd want to get(resource) -> Output
Apr 06 12:16:59 <phaazon>	well, yeah
Apr 06 12:17:02 <phaazon>	that’s why I have a trait
Apr 06 12:17:03 <phaazon>	so
Apr 06 12:17:07 <phaazon>	the trait is like
Apr 06 12:17:14 <Binero>	And every Resource can only load one type? 
Apr 06 12:17:22 <phaazon>	trait Resource { fn load(…) -> Result<Self, …>; }
Apr 06 12:17:28 <phaazon>	Binero: yeah
Apr 06 12:17:34 <Binero>	right
Apr 06 12:17:35 <phaazon>	that’s the point
Apr 06 12:17:38 <phaazon>	implementing Resource for Light
Apr 06 12:17:43 <phaazon>	for Car
Apr 06 12:17:49 <phaazon>	and so on
Apr 06 12:17:50 <Binero>	Does load take &self? 
Apr 06 12:18:01 <phaazon>		fn load(manager: &mut Manager, name: String, force: bool) -> Result<Managed<Self>, ResourceError>;
Apr 06 12:18:05 <phaazon>	this is my load signature
Apr 06 12:18:15 <Binero>	I see 
Apr 06 12:18:19 <phaazon>	and Managed is just like Arc<Self>
Apr 06 12:18:22 <phaazon>	oh no
Apr 06 12:18:25 <phaazon>	it’s Weak<Self>
Apr 06 12:18:29 <phaazon>	doesn’t really matter here
Apr 06 12:18:51 <Binero>	So where is the issue? 
Apr 06 12:18:58 <phaazon>	the issue is the manager type
Apr 06 12:19:09 <phaazon>	imagine I want to have Bike as resources as well
Apr 06 12:19:12 <phaazon>	I have to implement Resource
Apr 06 12:19:21 <phaazon>	to state how I load that from the disk
Apr 06 12:19:23 <phaazon>	which is okay
Apr 06 12:19:30 <phaazon>	but I also have to change Manager’s struct
Apr 06 12:19:33 <phaazon>	which is not okay to me
Apr 06 12:19:39 <Binero>	Why do you have to change Manager's struct? 
Apr 06 12:19:44 <phaazon>	to add a new map!
Apr 06 12:19:49 <phaazon>	BTreeMap<String, Bike>
Apr 06 12:19:51 <Binero>	I see 
Apr 06 12:19:59 <Binero>	You want one map with all the type s
Apr 06 12:20:04 <phaazon>	yeah
Apr 06 12:20:05 <phaazon>	or
Apr 06 12:20:08 <phaazon>	a way to simulate it
Apr 06 12:20:13 <feti>	Please use sentences, you are killing my eyeballs ;)
Apr 06 12:20:14 <phaazon>	I don’t know how to do that
Apr 06 12:20:15 <feti>	</rant>
Apr 06 12:20:29 <phaazon>	feti: you mean comma, right? :D
Apr 06 12:20:47 <feti>	Well, I just mean in a single line. I don't care about your grammar :)
Apr 06 12:20:49 <Binero>	phaazon: he doesn't like
Apr 06 12:20:51 <feti>	Be as ugly as you'd like! haha
Apr 06 12:20:51 <Binero>	that we 
Apr 06 12:20:53 <Binero>	do this 
Apr 06 12:21:01 <feti>	It's just hard for an old man to follow. :)
Apr 06 12:21:08 <Binero>	understandable 
Apr 06 12:21:09 <phaazon>	I know, but I can’t help it, sorry! I’ll try to though
Apr 06 12:21:19 <feti>	It's ok, bud.
Apr 06 12:21:23 <phaazon>	aw :3
Apr 06 12:21:28 <phaazon>	so, Binero, any idea?
Apr 06 12:21:37 <Binero>	phaazon: Why not just use a different Manager for every type of object? 
Apr 06 12:21:40 <phaazon>	the idea is that each type should have a map.
Apr 06 12:21:48 <phaazon>	Binero: because of dependencies
Apr 06 12:22:02 <Binero>	phaazon: A Car might require a light etc? 
Apr 06 12:22:08 <phaazon>	imagine my Car needing a Texture. the load() function needs to access that
Apr 06 12:22:10 <phaazon>	yeah
Apr 06 12:23:09 <Binero>	phaazon: https://doc.rust-lang.org/std/any/trait.Any.html
Apr 06 12:23:44 <phaazon>	yeah, dynamic dispatch
Apr 06 12:23:47 <phaazon>	I don’t really want that
Apr 06 12:23:52 <phaazon>	there might be a way to get away from this
Apr 06 12:24:01 <Binero>	If you use different maps, sure. 
Apr 06 12:24:06 <phaazon>	maybe singletons…
Apr 06 12:24:11 <Binero>	oh god 
Apr 06 12:24:11 <phaazon>	but I don’t like that :(
Apr 06 12:24:16 <phaazon>	like
Apr 06 12:24:18 <phaazon>	in the Resource trait
Apr 06 12:24:29 <phaazon>	I could have a function returning the map for the type
Apr 06 12:24:32 <phaazon>	and would fix everything
Apr 06 12:24:54 <Binero>	phaazon: Why not just pass the maps around? 
Apr 06 12:25:11 <phaazon>	that could be an idea, yeah
Apr 06 12:25:20 <phaazon>	like, a Car would require a Car map and a Texture map
Apr 06 12:25:26 <Binero>	exactly. 
Apr 06 12:25:36 <phaazon>	hm
Apr 06 12:25:48 <phaazon>	I need to think that up
Apr 06 12:26:01 <phaazon>	that’s ridiculously simple, so I like it. :)
Apr 06 12:28:30 <Binero>	phaazon: You could also just make one big type with different maps in it, and then for every variant of Resource you have another get()
Apr 06 12:28:45 <Binero>	get_car(), get_light(), get_whatever()
Apr 06 12:28:46 <phaazon>	Binero: that’s the issue I want to get away
Apr 06 12:28:51 <Binero>	You could even write a macro to generate that 
Apr 06 12:28:58 <phaazon>	because if you do that, each time you add a type of resource, you change a lot of work
Apr 06 12:29:02 <phaazon>	and a lot of code
Apr 06 12:29:08 <Binero>	phaazon: Use a macro 
Apr 06 12:29:19 <phaazon>	I think passing around maps is good enough
Apr 06 12:34:09 <Binero>	phaazon: How about have a Get<Type> trait? You could just do impl Get<Car> for ResourceManager, impl Get<Light> for ResourceManager. Could easily be code-generated using a macro. 
Apr 06 12:34:37 <phaazon>	Binero: you still need to have ResourceManager having a lot of maps :/
Apr 06 12:34:49 <Binero>	phaazon: They can all be generated 
Apr 06 12:35:00 <Binero>	phaazon: You'd end up with many maps either way. 
Apr 06 12:35:04 <phaazon>	I don’t like code generation
Apr 06 12:35:07 <phaazon>	it’s messy
Apr 06 12:35:33 <phaazon>	Binero: yeah, but I’d rather like to defer those maps creation as many as possible
Apr 06 12:36:14 <Binero>	phaazon: How would they defer? Don't they just hold weak references to the objects? 
Apr 06 12:36:34 <phaazon>	Binero: I mean
Apr 06 12:36:39 <phaazon>	in the main of the application
Apr 06 12:36:43 <phaazon>	I can create the maps I really need
Apr 06 12:37:00 <phaazon>	and then pass them to the load function that will load the whole gathered scene or whatever
Apr 06 12:42:45 <chris_99>	At the moment is there no way to force cargo, to compile in a custom directory?
Apr 06 12:43:58 <steveklabnik>	i thought there was a flag or something
Apr 06 12:44:05 <jwilm>	chris_99: you can add a [build.target-dir] option to your .cargo/config
Apr 06 12:44:25 <jwilm>	also CARGO_TARGET_DIR environment variable
Apr 06 12:44:45 <chris_99>	ooh awesome, thanks!
Apr 06 12:44:58 <chris_99>	the env variable would be perfect here, cheers
Apr 06 12:48:36 <phaazon>	wtf
Apr 06 12:48:43 <phaazon>	I pass a &mut BTreeMap to a function
Apr 06 12:48:48 <phaazon>	which does a map.get()…
Apr 06 12:48:57 <phaazon>	and I get an error when I try to use map afterwards
Apr 06 12:49:04 <phaazon>	stating that there’s an immutable borrow on it
Apr 06 12:49:16 <phaazon>	get expects a &BTreeMap, not BTreeMap, wtf?
Apr 06 12:49:47 <talchas>	at a guess, are you doing something like "if let Some(x) = map.get(stuff) { return x }"?
Apr 06 12:50:05 <phaazon>	I did that in a match at first, yes
Apr 06 12:50:10 <phaazon>	then I moved that to a let
Apr 06 12:50:16 <phaazon>	let found = map.get(stuff);
Apr 06 12:50:19 <phaazon>	and match on the result
Apr 06 12:50:25 <phaazon>	but I guess it’s still borrowed
Apr 06 12:50:32 <talchas>	yeah
Apr 06 12:50:35 <phaazon>	because found is Option<&T>
Apr 06 12:51:24 <talchas>	it can work in other cases, but when you're returning it, the lifetime in the return case has to be the full one
Apr 06 12:52:03 <talchas>	and then it is borrowed in the None case, because rustc doesn't know that Option<&T>'s None doesn't actually have a borrow
Apr 06 12:52:35 <talchas>	if it fits at all, map.entry() will fix this
Apr 06 12:53:02 <erbse>	hi, I'm working with this code http://pastebin.com/3HDBthdg. but rust keep telling me the trait `Queryable` cannot be made into an object, how can I resolve this? I don't want return Self because the type may different.
Apr 06 12:53:27 <maurer>	Is there a way for me to case out on which arm of an enum with fields without explicitly mentioning all the fields?
Apr 06 12:53:36 <talchas>	erbse: the issue there is the <Pred>
Apr 06 12:53:47 <steveklabnik>	maurer: .. will let you elide
Apr 06 12:53:54 <martin-li>	how to enlarge a slice?
Apr 06 12:53:58 <talchas>	erbse: because generics are done at compile time, and trait objects can't do that
Apr 06 12:54:07 <maurer>	steveklabnik: thanks, that was what I was looking for
Apr 06 12:54:31 <erbse>	talchas: oh... I see
Apr 06 12:54:32 <mbrubeck>	maurer: A `Vec` owns a slice that it can resize
Apr 06 12:54:56 <dikaiosune>	martin-li: ^
Apr 06 12:55:18 <erbse>	I known how to solve it now, thanks talchas
Apr 06 12:55:22 <martin-li>	Yes, but how to do that to a &mut [T]?
Apr 06 12:55:51 <dikaiosune>	martin-li: slices are fixed references, so you'd have to take a new slice of the underlying Vec (or array)
Apr 06 12:56:19 <mbrubeck>	You can "shrink" the slice by taking a subslice of it
Apr 06 12:56:23 <dikaiosune>	mbrubeck: true
Apr 06 12:56:32 <mbrubeck>	But with just an &mut [T] you don't have access to anything outside of that slice
Apr 06 12:57:06 <mbrubeck>	You'll need an &mut Vec<T> if you want to be able to resize in arbitrary ways
Apr 06 13:02:08 <phaazon>	hm, how can I mutate the value inside the Arc?
Apr 06 13:02:13 <phaazon>	I have several Weak to it
Apr 06 13:02:49 <phaazon>	make_mut?
Apr 06 13:02:50 <phaazon>	get_mut?
Apr 06 13:02:55 <talchas>	have Arc<RwLock<T>> instead generally
Apr 06 13:22:02 *	ChanServ sets mode +a on #rust brson
Apr 06 13:22:02 *	ChanServ gives channel operator status to brson
Apr 06 13:28:22 <jonhoo>	Hi all! I'm working on a multi-threaded data flow-like system, and have now twice run into the same situation
Apr 06 13:28:54 <jonhoo>	It basically boils down to wanting the ability to spawn threads that can borrow from their environment, and thus be assigned a lifetime
Apr 06 13:28:59 <jonhoo>	Demonstrated and commented here: https://play.rust-lang.org/?gist=8f7db780b338db6fa07eafff8a03873a
Apr 06 13:29:22 <jonhoo>	Are these kinds of scoped threads implemented anywhere?
Apr 06 13:29:30 <jonhoo>	I don't think the crossbeam implementation does quite what I want
Apr 06 13:29:55 <mbrubeck>	jonhoo: I was about to say "crossbeam"... can you explain why not?
Apr 06 13:30:09 <steveklabnik>	!crate scoped-pool
Apr 06 13:30:09 <rustbot>	scoped-pool (0.1.9) - A flexible thread pool providing scoped threads. -> https://crates.io/crates/scoped-pool
Apr 06 13:30:15 <steveklabnik>	!crate scoped_threadpool
Apr 06 13:30:16 <rustbot>	scoped_threadpool (0.1.7) - A library for scoped and cached threadpools. -> https://crates.io/crates/scoped_threadpool
Apr 06 13:30:20 <steveklabnik>	those and crossbeam are the two i know of
Apr 06 13:30:56 <jonhoo>	crossbeam doesn't do it because (afaict) they spawned threads aren't allowed to outlive the current stack frame?
Apr 06 13:31:10 <jonhoo>	the *pool implementations give me pools, but I don't actually want a thread pool
Apr 06 13:31:16 <jonhoo>	I want control over when the threads terminate
Apr 06 13:31:25 <steveklabnik>	it sounds like these two requirements are at odds
Apr 06 13:31:36 <jonhoo>	how so?
Apr 06 13:32:03 <steveklabnik>	well, i mean scoped threads might not be what you want
Apr 06 13:32:19 <steveklabnik>	like, if you want to borrow, but you want them to outlive the current frame... that's gonna be unsound
Apr 06 13:32:24 <mbrubeck>	Can you move a crossbeam scope?
Apr 06 13:32:26 <steveklabnik>	since it's a use after free?
Apr 06 13:32:37 <jonhoo>	not if the borrow I'm using was passed into the current function
Apr 06 13:33:24 <nemo>	Say... why does rustup refetch the toolchain every time it is run?  seems a bit inefficient.  What if I already have a local copy.  It can't check a hash?
Apr 06 13:33:35 <jonhoo>	mbrubeck: I don't know actually...
Apr 06 13:33:42 <jonhoo>	mbrubeck: if I could, that might help with this
Apr 06 13:33:53 <steveklabnik>	jonhoo: ah, i see
Apr 06 13:34:16 <mbrubeck>	jonhoo: My first idea is to do something like the old `std::thread::scoped`, which you can find here https://crates.io/crates/thread-scoped
Apr 06 13:34:31 <steveklabnik>	nemo: i don't think it actually refetches the whole thing. i think that messsage is about fetching the latest hash, which it then compares and moves on
Apr 06 13:34:32 <jonhoo>	steveklabnik: have a look at https://play.rust-lang.org/?gist=8f7db780b338db6fa07eafff8a03873a for an example
Apr 06 13:34:42 <nemo>	steveklabnik: well... I thought that too, but I ran ps and it was doing:
Apr 06 13:34:53 <mbrubeck>	jonhoo: thread-scoped is unsafe because you can get memory unsafety if you manage to leak its guard object, but safe otherwise
Apr 06 13:34:54 <nemo>	curl -# -C - -f -O http://static-rust-lang-org.s3-website-us-west-1.amazonaws.com/dist/rust-1.7.0-x86_64-unknown-linux-gnu.tar.gz
Apr 06 13:34:58 <nemo>	every single time
Apr 06 13:35:06 <steveklabnik>	nemo: whoah, so yeah, i would agree with you. seems bad
Apr 06 13:35:08 <nemo>	steveklabnik: also it took a long time
Apr 06 13:35:16 <nemo>	which is usually a sign of burning a lot of bandwidth
Apr 06 13:35:25 <jonhoo>	mbrubeck: hmm, that might work then
Apr 06 13:35:25 <nemo>	even if you guys have tons of bandwidth, the remote may not ☺
Apr 06 13:35:39 <jonhoo>	mbrubeck: makes me sad that this has to be unsafe though
Apr 06 13:36:04 <nemo>	steveklabnik: I ran it twice since I hadn't updated in a while and I wasn't totally sure how your updater worked, if it had smart checkpoints like, oh, firefox... (firefox you sometimes have to update a couple of times due to that)
Apr 06 13:36:25 <nemo>	steveklabnik: but it seems it doesn't keep track of anything locally. not binary diffs, not current update hash, not timestamp.. ☺
Apr 06 13:38:26 <mbrubeck>	jonhoo: Note that it's not just dropping you need to worry about
Apr 06 13:38:50 <mbrubeck>	jonhoo: If the Manager is moved after .start() is called, then the threads would have a dangling pointer
Apr 06 13:39:38 <jonhoo>	but moving the Manager shouldn't be possible since the threads have a borrow of Manager, right?
Apr 06 13:41:48 <mbrubeck>	jonhoo: Oh right... so if you use the thread-scoped concept, then `start` would return a guard object that borrows Manager (preventing it from being moved), and it's the guard object that would join the threads when dropped.
Apr 06 13:42:23 <mbrubeck>	jonhoo: In your current code, the signature of `start` means that Manager is only borrowed until `start` returns.
Apr 06 13:42:36 <mbrubeck>	(which of course is why thread::spawn can't capture `self`)
Apr 06 13:42:45 <jonhoo>	mbrubeck: I was imagining storing the guard objects inside Manager, and make Manager a Manager<'a>
Apr 06 13:43:06 <mbrubeck>	ah, yeah, and then you could have `fn start(&'a self)`
Apr 06 13:43:11 <jonhoo>	yup
Apr 06 13:43:50 <jonhoo>	I believe that should prevent Manager from being moved
Apr 06 13:44:05 <jonhoo>	And I think then the only issue is if Manager is leaked
Apr 06 13:45:15 <jonhoo>	actually, no, that shouldn't be unsound
Apr 06 13:45:28 <jonhoo>	it would be if Manager was free'd, but not dropped
Apr 06 13:52:54 <fqtw>	is there a rust ipc lib that works on windows?
Apr 06 13:59:22 *	ChanServ sets mode +a on #rust pcwalton
Apr 06 13:59:22 *	ChanServ gives channel operator status to pcwalton
**** BEGIN LOGGING AT Thu Apr  7 16:42:46 2016

Apr 07 16:42:46 *	Now talking on #rust
Apr 07 16:42:46 *	Topic for #rust is: Rust general discussion | Current release: 1.7 | | Playground https://play.rust-lang.org/ | Forum  https://users.rust-lang.org/ | New user channel: #rust-beginners  | Conduct https://www.rust-lang.org/conduct.html | Logs  https://botbot.me/mozilla/rust
Apr 07 16:42:46 *	Topic for #rust set by steveklabnik!root@moz-fft.uo8.55.45.IP (Thu Mar  3 16:09:14 2016)
Apr 07 16:42:57 <Gankro>	Manishearth: I am legitimately surprised you have not yet written some lint against mem::forget. I guess it's not clear when it is/isn't valid?
Apr 07 16:43:20 <seanmonstar>	proc: setting the env variables?
Apr 07 16:43:32 <proc>	seanmonstar: I'm using the CMD from them provided there
Apr 07 16:43:40 <proc>	seanmonstar: and the paths are correct
Apr 07 16:44:06 <proc>	( as in https://github.com/sfackler/rust-openssl#windows )
Apr 07 16:46:19 <seanmonstar>	proc: hm, wonder the reason that the msvc tests are disabled https://github.com/sfackler/rust-openssl/blob/master/appveyor.yml#L8
Apr 07 16:46:40 <proc>	seanmonstar: no comment
Apr 07 16:46:43 <sfackler>	seanmonstar: some problems with the runtime IIRC
Apr 07 16:46:46 <Thinkofname>	proc: try setting DEP_OPENSSL_INCLUDE to the openssl include folder as well
Apr 07 16:46:47 <sfackler>	just on appveyor
Apr 07 16:47:15 <seanmonstar>	sfackler: ah, but it will build with msvc?
Apr 07 16:47:17 <Thinkofname>	I use that env for the msvc on appvoyer, seems to work fine
Apr 07 16:48:05 <proc>	Thinkofname: openssl pre installed for 64bit ?
Apr 07 16:48:31 <Thinkofname>	No, I have the CI download it
Apr 07 16:48:34 <b52>	Can i get rid of the type variable O in line 13? http://is.gd/lkPZ1L
Apr 07 16:48:38 <sfackler>	seanmonstar: yeah
Apr 07 16:48:50 <Thinkofname>	proc: http://hastebin.com/iqifekoyiy.tex
Apr 07 16:48:51 <sfackler>	seanmonstar: https://ci.appveyor.com/project/sfackler/rust-openssl/build/1.0.378/job/k3xgu0hcnpeaub6t
Apr 07 16:49:14 <sfackler>	it's some configuration problem on the test vm that I haven't bothered to figure out how to fix
Apr 07 16:51:58 <proc>	Thinkofname: thanks for the hint with the openssl source
Apr 07 16:52:05 <seanmonstar>	b52: if you remove the AsRef bound from T
Apr 07 16:52:22 <proc>	Thinkofname: I'll come back later when I've setup everything and can say if that works
Apr 07 16:52:42 <b52>	seanmonstar?
Apr 07 16:53:00 <seanmonstar>	b52: to get rid of the O type param
Apr 07 16:53:22 <seanmonstar>	b52: struct Foo<T> { os: T }
Apr 07 16:53:47 <mbrubeck>	You can add the bound on an `impl` or `fn` that uses Foo instead on Foo itself
Apr 07 16:53:56 <seanmonstar>	exactly ^
Apr 07 16:56:23 <mbrubeck>	http://is.gd/MlC5ul
Apr 07 17:00:46 <autrilla>	What's &[f32] as a parameter type? (I'm confused by the brackets)
Apr 07 17:00:58 <durka42>	a slice of f32's
Apr 07 17:00:59 <tjpeden>	I'm struggling pretty hard with some lifetime issues, I'm trying to take a few paths as command line params and set them as properties on a struct and it's not going well
Apr 07 17:01:41 <feti>	tjpeden: Ask yourself if you need the paths to exist outside of the struct or not. If not, then don't use a reference and give the struct a copy of the string.
Apr 07 17:02:15 <tjpeden>	feti: that's probably the better idea, huh? lol
Apr 07 17:02:26 <feti>	It sounds like it based on what you are doing.
Apr 07 17:02:46 <feti>	So the struct will have a String, not &String, not &str.
Apr 07 17:03:08 <tjpeden>	Right
Apr 07 17:03:22 <tjpeden>	the 4th parameter was already a string
Apr 07 17:11:57 <fqtw>	can rusttype show all emojis?
Apr 07 17:12:25 *	ChanServ sets mode +a on #rust pcwalton
Apr 07 17:12:25 *	ChanServ gives channel operator status to pcwalton
Apr 07 17:12:45 <Yaniel>	can it show emojis at all?
Apr 07 17:12:51 <Yaniel>	they're png data AFAIK
Apr 07 17:12:57 <fqtw>	Yaniel: they are unicode
Apr 07 17:13:35 <Yaniel>	yes but stored as png?
Apr 07 17:13:38 <Tiffany>	color emoji are encoded as png or svg graphics embedded into fonts depending on vendor, and replaced using images in some web applications like twitter, but they are actually unicode codepoints for which traditional glyphs exist
Apr 07 17:13:53 <Yaniel>	ah
Apr 07 17:13:55 <fqtw>	🔥
Apr 07 17:13:57 <Tiffany>	symbola, for example, will give you traditional black and white outlines
Apr 07 17:14:04 <fqtw>	The Fire emoji was approved as part of Unicode 6.0 in 2010
Apr 07 17:14:28 <fqtw>	so can rusttype display unicode emojis?
Apr 07 17:14:50 <Tiffany>	I would think rusttype would be able to handle unicode fine
Apr 07 17:15:47 <Tiffany>	however, most systems don't ship with fonts like symbola
Apr 07 17:15:54 <Tiffany>	and it's unlikely rusttype supports colour emoji
Apr 07 17:16:03 <Tiffany>	which is what is shipped out of the box on windows 10, OS X, android, etc.
Apr 07 17:16:22 <fqtw>	Tiffany: so they will only be black and white?
Apr 07 17:16:30 <Tiffany>	yeah, probably
Apr 07 17:16:35 <fqtw>	which font should i use on windows for unicode emojis with rusttype?
Apr 07 17:17:08 <Tiffany>	I'm not sure windows ships with a black and white emoji font
Apr 07 17:17:11 <Tiffany>	but you can download symbola
Apr 07 17:17:22 <fqtw>	Tiffany: maybe one of the ubuntu fonts?
Apr 07 17:20:02 <Yaniel>	symbola is likely to work if it's just the usual ttf stuff
Apr 07 17:20:23 <Tiffany>	symbola is indeed just usual ttf stuff
Apr 07 17:26:29 <osa1>	is there a way to see source of macros in the docs? I need something like debug_writeln!, I was hoping to cheat by looking at debug_assert!
Apr 07 17:27:37 <sfackler>	osa1: https://github.com/rust-lang/rust/blob/master/src/libcore/macros.rs#L135
Apr 07 17:27:55 <osa1>	sfackler: awesome, thanks
Apr 07 17:33:49 <hoodie>	hey there, I have a question about a little borrowchecker problem I have
Apr 07 17:33:51 <jas0>	Strange idea:
Apr 07 17:34:31 <jas0>	Could rust do return value Result<> checking similar to how null checks are (not) done in setting a ptr and then dereffing it instead of branching?
Apr 07 17:35:09 <joy1>	can i have macro generators? I.e. i have a macro macro_rules! realvec { …. T::new( ) }. I would like to generate macros called T1vec, T2Vec for T=T1 and T=T2
Apr 07 17:35:36 <joy1>	one way is to copy paste the macro code replacing T::new with T1::new and T2::new … and so on. Can i generate this via code?
Apr 07 17:36:37 <jas0>	you can't make them a single macro?
Apr 07 17:37:27 <joy1>	jas0: how would i specialize on T? 
Apr 07 17:38:19 <jas0>	I don't really understand what you are trying to do. Is the macro body different or are you just chaninging the types?
Apr 07 17:39:01 <joy1>	jas0: this https://gist.github.com/anonymous/ba508c8318356cce25921f3aca8d8296
Apr 07 17:39:20 <joy1>	i want integervec  and instead of Rnumeric,:: it will Rinteger::
Apr 07 17:40:59 <talchas>	well, you can do tyvec { ($t:ty; $n:expr; $elem:expr) => {let p = <$t>::with_length_default ... } } and so on
Apr 07 17:41:08 <jas0>	joy1, concat_idents doesn't do what you want?
Apr 07 17:41:23 <talchas>	and if you want you could define integervec and and realvec in terms of that
Apr 07 17:41:31 <talchas>	concat_ident basically never does what you want
Apr 07 17:41:36 <jas0>	lol
Apr 07 17:42:48 <joy1>	talchas: i see, the $t in tyvec { ($t:ty; specifies the type upfront, correct?
Apr 07 17:43:10 <talchas>	well, you specify it when you invoke tyvec
Apr 07 17:43:25 <talchas>	you'd do tyvec![Rnumeric; stuff]
Apr 07 17:43:50 <joy1>	yes, i'm also thinking of API design and what would the programmer like to use. Something like u = realvec![ 1.0,2.0.,3.0] or u = tyvec![Rnumeric; 1,2,3] ...
Apr 07 17:44:10 <b52>	a slice spans continuous memory, right?
Apr 07 17:44:36 <mbrubeck>	b52: right
Apr 07 17:45:01 <talchas>	joy1: yeah, that's up to you, you can define realvec in terms of tyvec though for reducing copy-paste
Apr 07 17:48:08 <joy1>	talchas: yes! good idea
Apr 07 17:49:18 <joy1>	#rust is one the most helpful language channels ever 
Apr 07 17:53:08 <proc>	Thinkofname: I've tried it with http://pastebin.com/htE5CnAL the whole openssl 64bot msvc 2015 folder is inside the project folder where cargo.toml resides
Apr 07 17:53:48 <proc>	but I'm still getting the 'cannot open include file "openssl/ssl.h"' error
Apr 07 17:53:59 *	ChanServ sets mode +a on #rust niconii
Apr 07 17:53:59 *	ChanServ gives channel operator status to niconii
Apr 07 17:54:24 <Binero>	Is there a way to get the square root of a u8? 
Apr 07 17:54:48 <Thinkofname>	proc: tried an absolute path?
Apr 07 17:54:57 <proc>	Thinkofname: y, shortened it
Apr 07 17:55:03 <bluss>	Binero: no function for it
Apr 07 17:55:04 <proc>	Thinkofname: with / instead of \
Apr 07 17:55:33 <Binero>	Why don't we have a function for it? Seems like a trivial thing.. 
Apr 07 17:55:43 <Binero>	well, not trivial, but universal 
Apr 07 17:55:46 <bluss>	Binero: it's a loop of maximally 16 iterations to search for the answer (just amusing to me)
Apr 07 17:56:00 <bluss>	Binero: hm I don't think there is any for integer sqrt, not sure why
Apr 07 17:56:35 <b52>	any idea why http://is.gd/mq8GB5 results in a conflicting implementation?
Apr 07 17:57:07 <Thinkofname>	proc: hmm, not sure then. Works for me 
Apr 07 17:57:09 <feti>	What's the best way to store a [u8] in an enum? Does it need to be boxed since it's not Sized ?
Apr 07 17:57:28 <bluss>	b52: they do overlap, T may be a reference in the first impl (line 7)
Apr 07 17:57:55 <Binero>	feti: Vec<T>, Box<[T]> or &[T]
Apr 07 17:58:10 <Binero>	Depends on what you need. 
Apr 07 17:58:28 <b52>	because I it might be possible to implement Asd for &'a Asd ?
Apr 07 17:58:42 <proc>	Thinkofname: well you're copying the whole thing into the rust lib folder
Apr 07 17:58:49 <feti>	Binero: Figured as much. hmmm.. Vec makes the most sense then.
Apr 07 17:58:52 <bluss>	b52: yes
Apr 07 17:58:59 <bluss>	b52: or Asd for &'a T
Apr 07 17:59:07 <b52>	Is there a way to get the desired behavior?
Apr 07 17:59:08 <proc>	Thinkofname: let's see if that works, though I'm not a fan of polluting that global used place..
Apr 07 17:59:33 <proc>	(if only there were symlinks on windows..)
Apr 07 17:59:34 <Thinkofname>	proc: yeah its only for the CI which is thrown away after the build
Apr 07 18:00:58 <jeffbradberry>	Binero: what about (x as f64).sqrt()?
Apr 07 18:01:23 <Binero>	jeffbradberry: (x as f64).sqrt() as u8 could work I suppose
Apr 07 18:01:32 <Binero>	good idea 
Apr 07 18:01:46 <talchas>	heck, f32 is fine too
Apr 07 18:02:04 <talchas>	who knows which is faster, wasn't there something about doubles sometimes being faster than floats?
Apr 07 18:02:14 <Binero>	If an f16 existed it'd be able to handle it 
Apr 07 18:02:19 <talchas>	yeah
Apr 07 18:02:43 <Binero>	Why would doubles be faster? 
Apr 07 18:03:03 *	ChanServ sets mode +a on #rust burntsushi
Apr 07 18:03:03 *	ChanServ gives channel operator status to burntsushi
Apr 07 18:03:17 <ubsan_>	they should be the same speed...
Apr 07 18:03:52 <Binero>	They should be slower on 32 bit systems 
Apr 07 18:03:55 <bluss>	b52: specialization maybe (unstable feature)
Apr 07 18:03:56 <talchas>	I don't know, it's something I vaguely remember hearing once or something
Apr 07 18:04:06 <ubsan_>	I don't think si
Apr 07 18:04:07 <ubsan_>	*so
Apr 07 18:04:13 <ubsan_>	it should be using SSE
Apr 07 18:04:16 <bluss>	Binero: most 32 bit systems have 64-bit float units natively
Apr 07 18:04:20 <proc>	Thinkofname: but that won't work eventhough, as you only copy the dll's, and he's mocking about the damn .h files..
Apr 07 18:04:30 <Binero>	interesting 
Apr 07 18:04:30 <proc>	*it
Apr 07 18:04:41 <talchas>	(and if I did, it would have been years ago, and even if it /was/ true then, that wouldn't mean it's true now)
Apr 07 18:05:28 <ubsan_>	for one float op, it should be the same speed
Apr 07 18:05:38 <ubsan_>	although... sqrt might be different
Apr 07 18:05:42 <ubsan_>	I dunno
Apr 07 18:06:57 <Binero>	All I know is that I'm sending 250 million of these to the GPU, and I don't want to quadruple that. 
Apr 07 18:07:18 <ubsan_>	ah
Apr 07 18:07:19 <Binero>	and certainly not oct-duple it 
Apr 07 18:07:22 <ubsan_>	use f32
Apr 07 18:07:25 <Binero>	u8 
Apr 07 18:08:31 <ubsan_>	oh...
Apr 07 18:08:32 <ubsan_>	hmm
Apr 07 18:08:35 <vfs>	where do i read more about this http://is.gd/qxqdqJ ? book doesn't mention this kind impls (iirc)
Apr 07 18:08:40 <ubsan_>	so are you sqrting on the GPU?
Apr 07 18:08:47 <Binero>	No, on the CPU 
Apr 07 18:09:23 <Binero>	calculating the sqrt, compressing 4 u8s into a u32, sending them to the GPU and then calculate further on them on the CPU 
Apr 07 18:09:49 <ubsan_>	hmm
Apr 07 18:09:53 <ubsan_>	interesting
Apr 07 18:10:43 <ubsan_>	I mean... I imagine a lookup table would actually be the fastest here?
Apr 07 18:11:01 <ubsan_>	because it would fit in two cache lines?
Apr 07 18:11:14 <Binero>	Good point 
Apr 07 18:16:15 <bstrie>	what does it mean to take the address of a ZST
Apr 07 18:16:22 <bstrie>	like in let x = &()
Apr 07 18:16:44 <mbrubeck>	it means "give me some address"
Apr 07 18:17:32 <bstrie>	mbrubeck: what does that address actually point to?
Apr 07 18:17:34 <mbrubeck>	some non-null address, I guess
Apr 07 18:17:46 <ubsan_>	bstrie: it could give you any address that isn't 0
Apr 07 18:17:48 <mbrubeck>	I don't think it matters.  Aside from null I don't think there are any wrong answers
Apr 07 18:17:53 <Binero>	Why wouldn't it be null? 
Apr 07 18:18:01 <kmc>	i think it's usually 1
Apr 07 18:18:05 <ubsan_>	but it does give you an address on the current stack
Apr 07 18:18:06 <mbrubeck>	That breaks an invariant on &T
Apr 07 18:18:10 <mbrubeck>	(null, that is)
Apr 07 18:18:11 <kmc>	playbot: &() as *const () as usize
Apr 07 18:18:12 -playbot/#rust-	139757566826945
Apr 07 18:18:26 <ubsan_>	kmc: that's true of Box<()> and the other smart pointers
Apr 07 18:18:29 <kmc>	oh right, not whe it's on the stack
Apr 07 18:18:32 <Binero>	playbot: &() as *const as usize
Apr 07 18:18:32 -playbot/#rust-	<anon>:9:23: 9:25 error: expected identifier, found keyword `as`
Apr 07 18:18:33 -playbot/#rust-	<anon>:9         &() as *const as usize
Apr 07 18:18:33 -playbot/#rust-	output truncated; full output at: http://bit.ly/22g8GQ9
Apr 07 18:18:35 <ubsan_>	actually
Apr 07 18:18:39 <ubsan_>	that might be a const?
Apr 07 18:18:47 <ubsan_>	so may be in static memory
Apr 07 18:18:50 <ubsan_>	in the future
Apr 07 18:18:52 <Binero>	playbot: &() as *const () as usize
Apr 07 18:18:53 -playbot/#rust-	139769649174977
Apr 07 18:18:56 <ubsan_>	but currently, on the stack
Apr 07 18:18:59 <Binero>	ah, it is random 
Apr 07 18:19:00 <staticassert>	Does a ZST involve an allocation?
Apr 07 18:19:02 <mbrubeck>	`&[]` is in static memory
Apr 07 18:19:13 <ubsan_>	staticassert: depends
Apr 07 18:19:25 <staticassert>	I'm considering stack allocation in this case as well as heap.
Apr 07 18:19:26 <ubsan_>	not when it's on the stack or in a smart pointer
Apr 07 18:20:00 <ubsan_>	but for example, in an Rc, you have to allocate the counts
Apr 07 18:20:24 <mbrubeck>	playbot: std::mem::align_of::<()>()
Apr 07 18:20:25 -playbot/#rust-	1
Apr 07 18:20:34 <staticassert>	Makes sense.
Apr 07 18:20:34 <ubsan_>	playbot: let x = (); let y = (); &x as *const _ == &y as *const ()
Apr 07 18:20:35 -playbot/#rust-	false
Apr 07 18:20:42 <ubsan_>	hmm
Apr 07 18:20:47 <ubsan_>	sometimes that returns true
Apr 07 18:20:53 <mbrubeck>	ubsan_: IIRC that returns true in optimized builds
Apr 07 18:20:59 <ubsan_>	right
Apr 07 18:21:08 <ubsan_>	isn't playbot optimized?
Apr 07 18:21:17 <staticassert>	Is that comparing the pointers or the address being pointed to?
Apr 07 18:21:25 <mbrubeck>	playbot: cfg!(debug_assertions)
Apr 07 18:21:26 -playbot/#rust-	false
Apr 07 18:21:29 <mbrubeck>	hmm
Apr 07 18:21:31 <ubsan_>	(this is the beautiful area of implementation defined behavior)
Apr 07 18:21:37 <ubsan_>	staticassert: address
Apr 07 18:21:42 <staticassert>	Gotcha
Apr 07 18:21:54 <ubsan_>	playbot: let x = (); let y = (); &x as *const _ as usize - &y as *const _ as usize
Apr 07 18:21:54 -playbot/#rust-	0
Apr 07 18:21:58 <ubsan_>	see
Apr 07 18:21:59 <ubsan_>	wtf
Apr 07 18:22:05 <mbrubeck>	lol
Apr 07 18:22:07 <staticassert>	lmao
Apr 07 18:22:11 <ubsan_>	playbot: let x = (); let y = (); &x as *const _ == &y as *const _
Apr 07 18:22:12 -playbot/#rust-	false
Apr 07 18:22:14 <ubsan_>	haha
Apr 07 18:22:16 <ubsan_>	lol
Apr 07 18:22:30 <staticassert>	How is == implemented for &T ?
Apr 07 18:22:32 <ubsan_>	it's the == that makes it return false
Apr 07 18:22:33 <Binero>	playbot: 10usize - 11usize
Apr 07 18:22:35 -playbot/#rust-	<anon>:9:9: 9:26 warning: attempted to sub with overflow
Apr 07 18:22:35 -playbot/#rust-	<anon>:9         10usize - 11usize
Apr 07 18:22:35 -playbot/#rust-	output truncated; full output at: http://bit.ly/1VBNpQO
Apr 07 18:22:40 <ubsan_>	staticassert: T == T
Apr 07 18:22:47 <staticassert>	:|
Apr 07 18:22:56 <ubsan_>	staticassert: what?
Apr 07 18:23:02 <ubsan_>	that makes the most sense
Apr 07 18:23:14 <ubsan_>	you don't want Java's .equals xP
Apr 07 18:23:16 <staticassert>	Yeah, it does, the fact that subtraction is 0 in that case is funny
Apr 07 18:23:20 <kamalmarhubi>	is there a way to query a code base for expressions of a given type?
Apr 07 18:23:27 <ubsan_>	impl def ftw!
Apr 07 18:23:39 <kamalmarhubi>	or am I off in imaginary magical tool land again (it happens...)
Apr 07 18:24:12 <ubsan_>	kamalmarhubi: grep?
Apr 07 18:25:00 <kamalmarhubi>	ubsan_: not really
Apr 07 18:25:16 <ubsan_>	I dunno what you mean
Apr 07 18:25:19 <kamalmarhubi>	I want to find all epxressions of type PResult in a codebase using syntext_syntax
Apr 07 18:25:27 <ubsan_>	ah
Apr 07 18:25:35 <kamalmarhubi>	as a specific example
Apr 07 18:25:38 <bstrie>	kamalmarhubi: syntex just does parsing, you'd need something that did typechecking
Apr 07 18:25:42 <jeffbradberry>	kamalmarhubi: DXR
Apr 07 18:25:52 <kamalmarhubi>	bstrie: oh I know that
Apr 07 18:25:52 <jeffbradberry>	https://github.com/mozilla/dxr/
Apr 07 18:25:58 <kamalmarhubi>	bstrie: it's just my specific example
Apr 07 18:26:10 <kamalmarhubi>	example query
Apr 07 18:27:44 <kamalmarhubi>	jeffbradberry: it doesn't look like that'd do it... there's type, but only for references
Apr 07 18:28:01 <kamalmarhubi>	as in references to a type
Apr 07 18:28:31 <kamalmarhubi>	I want to find all expressions with a given type, regardless of whether the type is referenced in them or not
Apr 07 18:29:13 <jeffbradberry>	I think it does more than that.  The Rust plugin hooks into the compiler to get its information.
Apr 07 18:29:15 <dikaiosune>	is there even a crate available which can give you a typechecked AST? syntax just parses, correct?
Apr 07 18:29:40 <proc>	ugh, if I don't specify any openssl libs, hmac.h isn't found, but if I do specify one, then ssl.h isn't found
Apr 07 18:29:51 <kamalmarhubi>	dikaiosune: I imagine it'd be a tool using librustc
Apr 07 18:29:53 <proc>	as if it's ignoring any openssl env vars
Apr 07 18:30:13 <dikaiosune>	kamalmarhubi: yeah, funny that you brought it up, i was tinkering last night with trying to get a typechecked AST to stick in elasticsearch
Apr 07 18:30:35 <kamalmarhubi>	dikaiosune: but not using dxr?
Apr 07 18:30:38 <kvark>	Hello there! I need to access Box<Any> as &Trait, where Trait: Any. It looks like downcast_ref() requires Sized for some reason: http://is.gd/GOdQCh
Apr 07 18:30:52 <dikaiosune>	isn't dxr just parsing? i didn't look too closely, but it didn't look like it did any type inference
Apr 07 18:31:10 <kamalmarhubi>	dikaiosune: it does more than that if I read correctly
Apr 07 18:31:14 <jeffbradberry>	dikaiosune: no, it hooks into the compiler
Apr 07 18:31:18 <dikaiosune>	ooh
Apr 07 18:31:23 <jeffbradberry>	and gets real information out
Apr 07 18:31:41 *	kamalmarhubi wonders if there is a `cargo dxr` command out there
Apr 07 18:32:07 <kamalmarhubi>	nope
Apr 07 18:33:28 <talchas>	kvark: Any doesn't provide any way to do that
Apr 07 18:34:17 <talchas>	(the entire way it's implemented just doesn't work like that)
Apr 07 18:36:10 <kvark>	talchas: basically, I need to iterate over anymap values which all implement some trait Foo and do something to them (according to Foo methods)
Apr 07 18:36:44 <kvark>	talchas: it seems to me that with this downcasting non being allowed anymap can't be iterated at all
Apr 07 18:36:58 <kamalmarhubi>	urgh docker to run it :/
Apr 07 18:37:11 <kvark>	talchas: and that's putting a big fat cross onto many wonderful things one could do
Apr 07 18:37:16 <talchas>	well, you can downcast to a /type/
Apr 07 18:37:33 <talchas>	but a trait object isn't just a type
Apr 07 18:37:48 <kvark>	talchas: you can downcast a single element to a type, but when iterating you can't iterate types
Apr 07 18:38:14 <talchas>	what you /can/ do is have your Trait: Any and use Box<Trait> instead of Box<Any>
Apr 07 18:38:32 <kvark>	talchas: damn, that's so simple, thank you!
Apr 07 18:38:41 <talchas>	and if you need to downcast to a specific type, use the Any methods via the mopa crate, and otherwise just use the trait methods
Apr 07 18:38:56 <talchas>	that said, I'm not sure if anymap in particular supports this
Apr 07 18:39:48 <kvark>	talchas: I said anymap in a general sense, not as a particular crate. Didn't expect the need for another crate to do Any methods though
Apr 07 18:40:47 <talchas>	well, you can implement them manually, but why bother
Apr 07 18:41:24 <talchas>	(the fact that Box<TraitRequiringAny> doesn't work like Box<Any> is silly though)
Apr 07 18:42:08 <kvark>	ugh
Apr 07 18:44:32 <talchas>	(it makes perfect sense in terms of how impls work and all, it just sucks)
Apr 07 18:47:15 *	ChanServ gives channel operator status to jdm
**** ENDING LOGGING AT Thu Apr  7 18:48:39 2016

