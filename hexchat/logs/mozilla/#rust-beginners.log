**** BEGIN LOGGING AT Sun Mar 27 19:43:44 2016

Mar 27 19:43:44 *	Now talking on #rust-beginners
Mar 27 19:43:44 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 27 19:43:44 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 27 19:44:02 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 19:44:06 <kscz>	documentation question: I know that i32 implements the Copy trait, but it's not listed as implementing the copy trait on https://doc.rust-lang.org/std/primitive.i32.html or as an implementor here: https://doc.rust-lang.org/std/marker/trait.Copy.html where can I report this oversight? Or is there somewhere else I'm missing that tells me which primitives implement "Copy"?
Mar 27 19:44:45 <kscz>	or is it just a guarantee that all primitives implement copy semantics?
Mar 27 19:44:59 <bluss>	kscz: it's a regular rust bug, so an issue in rust-lang/rust on github. But I think we already have something that covers it
Mar 27 19:45:31 <bluss>	Soni: manual implementation, if the derive impl is not correct for this type
Mar 27 19:45:52 <Soni>	:/
Mar 27 19:46:00 <Soni>	bluss, can I manually implement copy?
Mar 27 19:46:10 <kscz>	bluss: ah, okay.  thank you for the super quick response!
Mar 27 19:46:49 <LambdaComplex>	panicbit: https://github.com/sector-f/wmutils-rust/blob/master/src/pfw.rs
Mar 27 19:47:04 <panicbit>	LambdaComplex: <3
Mar 27 19:47:14 <LambdaComplex>	panicbit: Although I can take some of those use statements out
Mar 27 19:47:53 *	mada (mariano@moz-hrb.nhi.170.181.IP) has joined
Mar 27 19:47:55 <LambdaComplex>	And fixed
Mar 27 19:48:04 <panicbit>	Perfect
Mar 27 19:48:12 <panicbit>	Looks so much cleaner than the C version ;D
Mar 27 19:48:14 <LambdaComplex>	I like how it's half the length of-
Mar 27 19:48:17 <LambdaComplex>	Yeah :P
Mar 27 19:48:34 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 27 19:48:35 <LambdaComplex>	panicbit: This does count as sane, right? https://github.com/sector-f/wmutils-rust/blob/master/src/util.rs
Mar 27 19:49:01 <panicbit>	Yeah, looks good
Mar 27 19:49:29 <LambdaComplex>	Not sure if I'll ever need the screen number, but connect() returns it so I might as well keep it
Mar 27 19:50:10 <panicbit>	LambdaComplex: I'd probably print the display and screen
Mar 27 19:50:28 <tinaun>	hey so im trying to use a function in a doctest by saying 'use crate_name::function' but it says it cant find it
Mar 27 19:50:36 <tinaun>	is there something special you need to do?
Mar 27 19:50:45 <panicbit>	LambdaComplex: 
Mar 27 19:50:47 <panicbit>	$ DISPLAY=2.3 xev
Mar 27 19:50:48 <kscz>	bluss: ah, I found it: https://github.com/rust-lang/rust/issues/17606
Mar 27 19:50:49 <panicbit>	xev:  unable to open display '2.3'
Mar 27 19:50:54 <tinaun>	does it have to be public
Mar 27 19:52:01 <LambdaComplex>	panicbit: Talking about my init_xcb function?
Mar 27 19:52:06 <panicbit>	LambdaComplex: Yeah
Mar 27 19:52:32 *	llandersll has quit (Connection closed)
Mar 27 19:54:00 <LambdaComplex>	panicbit: Hm, could I just get that from the env var?
Mar 27 19:54:14 <panicbit>	LambdaComplex: Hm maaaybe
Mar 27 19:54:28 <panicbit>	'sec
Mar 27 19:54:45 <panicbit>	$ DISPLAY=TROLL xev
Mar 27 19:54:47 <panicbit>	xev:  unable to open display 'TROLL'
Mar 27 19:54:49 <panicbit>	LambdaComplex: Eyup
Mar 27 19:55:32 *	cbrewster has quit (Quit: )
Mar 27 19:56:59 <LambdaComplex>	panicbit: Now I just need to learn how to look at environment vars >.>
Mar 27 19:57:19 <panicbit>	LambdaComplex: http://doc.rust-lang.org/nightly/std/env/index.html
Mar 27 19:57:41 <LambdaComplex>	>nightly
Mar 27 19:57:52 <panicbit>	LambdaComplex: ignore that, I'm always posting nightly doc links
Mar 27 19:58:11 <panicbit>	LambdaComplex: Even the stable doc contains unstable items, so I'm better off only looking at nightly docs
Mar 27 19:58:17 <panicbit>	LambdaComplex: http://doc.rust-lang.org/nightly/std/env/fn.var.html
Mar 27 19:58:26 <panicbit>	This is probably a good convenience function to use
Mar 27 19:58:30 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 27 19:59:34 <panicbit>	(The docs also show in which version functions where stabilized, so you know wether a function is available to you or not)
Mar 27 20:00:53 <panicbit>	LambdaComplex: http://is.gd/OdUPYN
Mar 27 20:01:11 *	kscz has quit (Quit: magic poof noises)
Mar 27 20:02:56 *	MoSal has quit (Connection closed)
Mar 27 20:03:52 *	blinky (Mibbit@moz-7730se.cable.rogers.com) has joined
Mar 27 20:04:32 <blinky>	hi, how do i get the current unix timestamp as an integer value in rust? I can't find this functionality
Mar 27 20:06:38 <panicbit>	blinky: Take a look at the chrono crate
Mar 27 20:06:44 <panicbit>	!crate chrono
Mar 27 20:06:45 <rustbot>	chrono (0.2.20) - Date and time library for Rust -> https://crates.io/crates/chrono
Mar 27 20:06:51 <panicbit>	Specifically https://lifthrasiir.github.io/rust-chrono/chrono/datetime/struct.DateTime.html#method.timestamp
Mar 27 20:07:09 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 27 20:07:39 <LambdaComplex>	panicbit: Alright, I'm unwrapping(?) it with a match statement...is it safe to do Err(_) => unreachable!() for that?
Mar 27 20:08:36 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 27 20:08:56 <LambdaComplex>	panicbit: Nevermind, the answer is no
Mar 27 20:09:01 *	xiinotulp (q@moz-iq18bq.dynamic.totbb.net) has joined
Mar 27 20:09:12 *	pseudo (pseudo@moz-bvvcvm.at.cox.net) has joined
Mar 27 20:09:20 <panicbit>	blinky: I think something like `DateTime<UTC>::now().timestamp()` should work
Mar 27 20:09:41 <panicbit>	LambdaComplex: ;)
Mar 27 20:09:46 <Saevitus>	is there a way to use a new line while using print!()?
Mar 27 20:09:56 *	mib_0qxnih has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 27 20:09:57 <panicbit>	Saevitus: print!("\n");
Mar 27 20:10:09 <panicbit>	playbot: print!("foo\nbar");
Mar 27 20:10:10 -playbot/#rust-beginners-	foo
Mar 27 20:10:10 -playbot/#rust-beginners-	bar()
Mar 27 20:10:30 <Saevitus>	ah, I was using the wrong \ / I see
Mar 27 20:10:32 <Saevitus>	thanks!
Mar 27 20:10:40 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 27 20:11:02 *	plutoniix has quit (Ping timeout: 121 seconds)
Mar 27 20:11:46 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 27 20:12:36 <Saevitus>	Also, anyone know why I need to use flush() on windows, but not osx/linux?
Mar 27 20:15:00 <LambdaComplex>	panicbit: Any way I can set the program name as a global constant?
Mar 27 20:15:11 <LambdaComplex>	panicbit: Do I have to put the args in a vector first?
Mar 27 20:15:49 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 27 20:16:40 <panicbit>	LambdaComplex: huh?
Mar 27 20:16:59 <panicbit>	I'm not sure what you're exactly talking about
Mar 27 20:17:34 *	MoSal (None@moz-q81.dj3.202.37.IP) has joined
Mar 27 20:17:58 <pseudo>	I'm doing some TCP communications dealing with different contents of various messages. Each message will have a common header, but the bodies will vary by message type. What's the most rust-way of handling this? I've considered a struct with the header, then an enum of structs for each message body; or, individual structs each containing a header struct, but that seems redundant. Any
Mar 27 20:18:01 <pseudo>	recommendations?
Mar 27 20:18:44 *	Aaronepower has quit (Client exited)
Mar 27 20:18:48 <panicbit>	pseudo: I feel like both ways are rusty
Mar 27 20:19:11 <panicbit>	pseudo: Though, I think I'm tending towards the enum approach
Mar 27 20:19:22 *	Aaronepower (Thunderbird@moz-sgf.dch.101.89.IP) has joined
Mar 27 20:19:43 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 27 20:19:59 <panicbit>	pseudo: It's annoying to have an enum if you want to pass around a specific body though...
Mar 27 20:20:10 <panicbit>	So maybe it's useful to combine both approaches
Mar 27 20:20:43 <LambdaComplex>	panicbit: something like const PROGRAMNAME: &'static str = env::args().nth(0);
Mar 27 20:20:50 <LambdaComplex>	panicbit: Except actually working :P
Mar 27 20:20:58 <panicbit>	LambdaComplex: Why would you want that?
Mar 27 20:21:29 <panicbit>	LambdaComplex: Anyway, the rusty way would be to pass that name around
Mar 27 20:21:38 *	MoSal has quit (Ping timeout: 121 seconds)
Mar 27 20:21:38 <LambdaComplex>	panicbit: So that I can print the name when it errors out
Mar 27 20:21:40 <panicbit>	LambdaComplex: Another way would be to use lazy_static!
Mar 27 20:21:42 <LambdaComplex>	(like xev does)
Mar 27 20:21:48 <LambdaComplex>	panicbit: What's that?
Mar 27 20:22:07 <panicbit>	LambdaComplex: A macro that defines a static for you but makes some special arrangements
Mar 27 20:22:15 <panicbit>	So that it gets initialized on the first access
Mar 27 20:22:24 <panicbit>	a lazy static...
Mar 27 20:22:39 *	a_beginner (Mibbit@moz-8t3m48.ca.comcast.net) has joined
Mar 27 20:22:45 <panicbit>	This would be the most comfortable way to do what you want
Mar 27 20:22:55 <Saevitus>	how would I go about converting a string to an integer?
Mar 27 20:22:57 <panicbit>	!crate lazy_static
Mar 27 20:22:58 <rustbot>	lazy_static (0.1.15) - A macro for declaring lazily evaluated statics in Rust. -> https://crates.io/crates/lazy_static
Mar 27 20:23:07 <panicbit>	Saevitus: str::parse
Mar 27 20:23:22 <panicbit>	playbot: "42".parse::<i32>()
Mar 27 20:23:23 -playbot/#rust-beginners-	Ok(42)
Mar 27 20:23:28 <panicbit>	playbot: "42garbage".parse::<i32>()
Mar 27 20:23:29 -playbot/#rust-beginners-	Err(ParseIntError { kind: InvalidDigit })
Mar 27 20:23:46 <Saevitus>	oh, sweet. thanks!
Mar 27 20:23:47 <panicbit>	playbot: let n: i32 = "42".parse(); n
Mar 27 20:23:48 -playbot/#rust-beginners-	<anon>:9:22: 9:34 error: mismatched types:
Mar 27 20:23:48 -playbot/#rust-beginners-	 expected `i32`,
Mar 27 20:23:48 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/25rtvMW
Mar 27 20:23:50 <panicbit>	whoops
Mar 27 20:24:01 <LambdaComplex>	panicbit: Sounds like a lot of effort :p
Mar 27 20:24:02 <panicbit>	playbot: let n: i32 = "42".parse().unwrap(); n
Mar 27 20:24:03 -playbot/#rust-beginners-	42
Mar 27 20:24:15 <LambdaComplex>	panicbit: What did you mean by "pass that name around?"
Mar 27 20:24:25 *	zhoeon (fc@moz-apprsk.cpe.teksavvy.com) has joined
Mar 27 20:24:39 <Saevitus>	man, there is already functions for things like that in this language, so handy.
Mar 27 20:24:45 <panicbit>	LambdaComplex: Get arg0 at the beginning of the program and pass it to the functions you call
Mar 27 20:24:54 <LambdaComplex>	panicbit: That'd make sense
Mar 27 20:24:58 <panicbit>	LambdaComplex: Or just access the arg0 when you actually need it
Mar 27 20:25:10 <panicbit>	LambdaComplex: Since I believe you only need it once anyway
Mar 27 20:25:18 *	a_beginner has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 27 20:25:28 <panicbit>	Another way would be to use a convenience function
Mar 27 20:25:32 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 27 20:25:49 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 27 20:27:35 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 27 20:27:48 *	brson has quit (Quit: leaving)
Mar 27 20:27:50 *	badon has quit (Ping timeout: 121 seconds)
Mar 27 20:28:52 <Saevitus>	do I need to give read_line() arguments? I want to read the input, then have some if statements set up for each of the inputs
Mar 27 20:29:44 <panicbit>	Saevitus: Yes, you give it a mutable reference to a String
Mar 27 20:29:50 <LambdaComplex>	panicbit: What do you mean by convenience function?
Mar 27 20:29:52 <panicbit>	Saevitus: Where the line will be read to
Mar 27 20:29:59 <panicbit>	read/written
Mar 27 20:30:06 *	badon_ is now known as badon
Mar 27 20:30:19 <panicbit>	LambdaComplex: fn arg0() -> String { ... }
Mar 27 20:30:44 <panicbit>	or similar
Mar 27 20:32:09 *	goyox86 (textual@moz-rvv.00r.255.109.IP) has joined
Mar 27 20:33:28 <LambdaComplex>	panicbit: Eh, I got it...although (once again) I'm wondering if using unreachable!() is safe in this case
Mar 27 20:33:41 <panicbit>	LambdaComplex: No...
Mar 27 20:34:00 <panicbit>	LambdaComplex: arg0 is not always set
Mar 27 20:34:09 <panicbit>	LambdaComplex: If arg0 is not set your program will crash
Mar 27 20:34:13 <LambdaComplex>	panicbit: When is env::args().nth(0) not gonna be set?
Mar 27 20:34:15 <panicbit>	If you use unreachable
Mar 27 20:34:26 *	MoSal (None@moz-ef0.h1b.200.149.IP) has joined
Mar 27 20:34:33 <panicbit>	LambdaComplex: When the program that executes our program chooses not to
Mar 27 20:34:38 <panicbit>	your*
Mar 27 20:34:49 <LambdaComplex>	Chooses not to what?
Mar 27 20:34:57 <panicbit>	LambdaComplex: Not to set arg0
Mar 27 20:35:28 <panicbit>	LambdaComplex: Actually, there are quite a few programs that don't handle that case properly
Mar 27 20:35:31 <panicbit>	By accident
Mar 27 20:35:47 <LambdaComplex>	panicbit: Alright, I'm lost
Mar 27 20:36:03 <panicbit>	LambdaComplex: Alright, when you want to start a process
Mar 27 20:36:21 <panicbit>	LambdaComplex: You have the option to pass the path to the executable and an array of arguments
Mar 27 20:36:26 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 27 20:36:28 <panicbit>	LambdaComplex: The array of arguments contains arg0
Mar 27 20:36:46 <panicbit>	So the path of the executable does NOT have to equal arg0
Mar 27 20:37:03 <panicbit>	(or command name or whatever)
Mar 27 20:37:16 <panicbit>	There don't even need to be any arguments
Mar 27 20:37:18 <LambdaComplex>	panicbit: Alright, makes sense. But...what doesn't pass the arguments correctly? O.o
Mar 27 20:37:41 <panicbit>	LambdaComplex: I don't know, but the point is: Why would you want to crash in that case?
Mar 27 20:38:01 <LambdaComplex>	panicbit: Point taken :P
Mar 27 20:38:07 <panicbit>	You can provide a default in that case...
Mar 27 20:38:12 <panicbit>	e.g. an empty string
Mar 27 20:38:18 <LambdaComplex>	panicbit: Already did that :P
Mar 27 20:38:22 <panicbit>	'sec, need finish eating
Mar 27 20:38:24 <LambdaComplex>	panicbit: And it has to be a String?
Mar 27 20:38:32 <panicbit>	LambdaComplex: You can avoid the match though
Mar 27 20:38:38 <LambdaComplex>	panicbit: Do tell
Mar 27 20:38:42 *	plutoniix (q@moz-iq18bq.dynamic.totbb.net) has joined
Mar 27 20:38:44 <panicbit>	'sec
Mar 27 20:40:49 *	xiinotulp has quit (Ping timeout: 121 seconds)
Mar 27 20:41:50 <panicbit>	LambdaComplex: 2 examples http://is.gd/scLUxU
Mar 27 20:42:11 <panicbit>	LambdaComplex: In the first case the String would be empty if arg0 would not be set
Mar 27 20:42:27 <panicbit>	LambdaComplex: in the second case arg9000 is not set and will return "FOO" as a default
Mar 27 20:42:43 *	AtheMathmo has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 27 20:43:21 <LambdaComplex>	panicbit: works for me :D
Mar 27 20:43:24 <panicbit>	:)
Mar 27 20:43:47 <LambdaComplex>	What's the ||?
Mar 27 20:43:58 <panicbit>	LambdaComplex: It's the argument list of a closure
Mar 27 20:44:05 <panicbit>	It's like an inline function
Mar 27 20:44:22 *	stephanbuys has quit (Connection closed)
Mar 27 20:44:38 <panicbit>	So we are actually passing a kind of function (closure) to .unwrap_or_else
Mar 27 20:44:59 <panicbit>	That function will only be called when the value is None
Mar 27 20:45:14 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 20:45:23 <panicbit>	And will use the result of that function to produce a Some(result_of_the_function)
Mar 27 20:45:27 <panicbit>	er, sorry
Mar 27 20:45:33 <panicbit>	It will just return the result of that function^^
Mar 27 20:46:06 <panicbit>	playbot: Some(42).unwrap_or_else(|| 777)
Mar 27 20:46:07 -playbot/#rust-beginners-	42
Mar 27 20:46:14 <panicbit>	playbot: None.unwrap_or_else(|| 777)
Mar 27 20:46:14 -playbot/#rust-beginners-	777
Mar 27 20:46:18 <LambdaComplex>	Neat!
Mar 27 20:46:24 <panicbit>	There's also .unwrap_or
Mar 27 20:46:30 <panicbit>	playbot: Some(42).unwrap_or(777)
Mar 27 20:46:31 -playbot/#rust-beginners-	42
Mar 27 20:46:37 <panicbit>	playbot: None.unwrap_or(777)
Mar 27 20:46:38 -playbot/#rust-beginners-	777
Mar 27 20:46:45 <LambdaComplex>	What's the difference?
Mar 27 20:46:54 <panicbit>	LambdaComplex: .unwrap_or takes the fallback value directly
Mar 27 20:47:11 <panicbit>	LambdaComplex: But that means that you might be always allocating that value, even if you don't need to
Mar 27 20:47:28 <LambdaComplex>	panicbit: What do you mean exactly?
Mar 27 20:47:36 *	Altazimuth_ has quit (Ping timeout: 121 seconds)
Mar 27 20:47:49 <panicbit>	LambdaComplex: In our case we need to allocate a String
Mar 27 20:48:01 <panicbit>	LambdaComplex: Allocating a string costs some memory and time
Mar 27 20:48:13 <panicbit>	LambdaComplex: So you only want to do that when you actually need to
Mar 27 20:48:18 <panicbit>	Which is only in the None case
Mar 27 20:48:37 <panicbit>	.unwrap_or_else will only do the allocation in the None case
Mar 27 20:49:02 *	vmesons (rmacleod@moz-hs5cri.cable.teksavvy.com) has joined
Mar 27 20:49:04 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 27 20:49:08 *	vmeson has quit (Ping timeout: 121 seconds)
Mar 27 20:49:16 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 27 20:49:16 *	fl3 has quit (Connection closed)
Mar 27 20:50:07 <panicbit>	LambdaComplex: Maybe I can visualize that a bit 'sec
Mar 27 20:54:09 <panicbit>	LambdaComplex: Example 1: .unwrap_or() http://is.gd/OTCp0M
Mar 27 20:54:38 <panicbit>	LambdaComplex: You will notice that this triggers the playpen to timeout because of the 5 second delay that is caused by expensive_int
Mar 27 20:55:00 <panicbit>	There is no need to call expensive_int because there is a Some(42) already
Mar 27 20:55:13 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 27 20:55:56 <panicbit>	LambdaComplex: Now, the improved version using .unwrap_or_else http://is.gd/UVuv7F
Mar 27 20:56:06 *	woboats has quit (Client exited)
Mar 27 20:56:28 <panicbit>	You will notice that expensive_int is not getting called (no timeout, no print output)
Mar 27 20:56:46 <panicbit>	And we are actually passing the function itself to unwrap_or_else
Mar 27 20:57:07 <panicbit>	I hope this did enlighten you :)
Mar 27 20:57:22 <Saevitus>	how would I multiply these parsed strings? https://gist.github.com/7f712cae5aa792a292c4
Mar 27 20:57:51 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 27 20:58:27 *	ARM9 has quit (Quit: Leaving)
Mar 27 20:58:51 <panicbit>	Saevitus: https://gist.github.com/anonymous/9fd8a86b7667cb4712f2#file-playground-rs-L30-L35
Mar 27 20:58:57 *	DaSpirit (DaSpirit@moz-cspleg.fios.verizon.net) has joined
Mar 27 20:59:07 <LambdaComplex>	panicbit: So why/when would you ever want to use unwrap_or()?
Mar 27 20:59:29 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 27 20:59:31 <Saevitus>	wait, you can use math functions on strings in this language
Mar 27 20:59:32 <Saevitus>	woah
Mar 27 20:59:38 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 27 20:59:38 <panicbit>	LambdaComplex: If the type is cheap to construct, i.e. almost everything that's not on the heap
Mar 27 20:59:46 <Saevitus>	wait nvm
Mar 27 20:59:49 <panicbit>	LambdaComplex: e.g. integers or pointers
Mar 27 20:59:50 <Saevitus>	I didn't real properly
Mar 27 20:59:56 <panicbit>	LambdaComplex: Things that implement Copy
Mar 27 21:00:35 <panicbit>	Saevitus: ;)
Mar 27 21:00:55 <panicbit>	Saevitus: But you can rebind the nmes of variables :)
Mar 27 21:00:58 <panicbit>	names*
Mar 27 21:01:22 <panicbit>	(which is not to be confused with overwriting the original value!)
Mar 27 21:01:55 <panicbit>	(the original fnum and snum are only overshadowed, meaning they are not accessible anymore)
Mar 27 21:01:56 <LambdaComplex>	panicbit: Even if it's cheap, wouldn't it still be better to use unwrap_or_else()?
Mar 27 21:02:06 <panicbit>	LambdaComplex: Maybe
Mar 27 21:02:33 <panicbit>	LambdaComplex: If your type is smaller than a function pointer, then probably not :P
Mar 27 21:02:39 <panicbit>	Like u8
Mar 27 21:03:41 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 27 21:03:48 <Saevitus>	okay, so I have a new issue. I use my own print! function, so I can print one letter at a time, my function only takes 2 parameters, but I've given it 3 with the multiplication of fnum and snum
Mar 27 21:03:51 <Saevitus>	how do I get around this?
Mar 27 21:03:56 <panicbit>	LambdaComplex: Also, sometimes the fallback value already exists
Mar 27 21:04:03 <panicbit>	LambdaComplex: In that case you canjust pass it in
Mar 27 21:04:49 <panicbit>	Saevitus: Well, first off, print! is not a function, it's a macro
Mar 27 21:05:07 <panicbit>	Saevitus: So you won't be able to replicate varargs using functions
Mar 27 21:05:13 <Saevitus>	hmm
Mar 27 21:05:32 <panicbit>	Saevitus: You could maybe accept a slice instead
Mar 27 21:05:51 <panicbit>	`args: &[&Debug]`
Mar 27 21:06:07 <panicbit>	er, or `args: &[&Display]`
Mar 27 21:06:30 <panicbit>	Saevitus: 'sec
Mar 27 21:06:47 <Saevitus>	o.o
Mar 27 21:06:57 <Saevitus>	I'm just a beginner, go easy on me
Mar 27 21:06:58 <Saevitus>	lol
Mar 27 21:06:59 <panicbit>	;D
Mar 27 21:07:00 <Saevitus>	https://gist.github.com/cf20419493f70e736f5e
Mar 27 21:07:36 *	niconii (nicole@moz-f9rf10.jhek.me72.48f8.2001.IP) has joined
Mar 27 21:07:36 *	ChanServ gives channel operator status to niconii
Mar 27 21:08:02 <panicbit>	Saevitus: Ah, in that case I'd use the format! macro
Mar 27 21:08:25 <panicbit>	`slow_print(format!("Answer: {}", 30), fnum * snum);`
Mar 27 21:08:40 <Saevitus>	Ah, awesome. Thanks!
Mar 27 21:08:42 <LambdaComplex>	panicbit: So do you think rewriting all the wmutils will get me well on my way to writing a window manager?
Mar 27 21:08:43 <panicbit>	so `format!("Answer: {}", 30)` would give you a String
Mar 27 21:09:12 <panicbit>	LambdaComplex: It would certainly get you comfortable with xcb
Mar 27 21:09:29 <panicbit>	LambdaComplex: And maybe even worth publishing as a project
Mar 27 21:10:14 <Saevitus>	panicbit: I'm getting a mismatched types error now, any ideas?
Mar 27 21:10:24 <panicbit>	Saevitus: Well, show the error and I might :)
Mar 27 21:10:25 <Saevitus>	on fnum * snum
Mar 27 21:11:13 <Saevitus>	ah, nevermind.
Mar 27 21:11:14 <panicbit>	Saevitus: snum * fnum is a i32
Mar 27 21:11:18 <Saevitus>	yeah
Mar 27 21:11:19 <panicbit>	Ok :)
Mar 27 21:12:30 <panicbit>	Saevitus: You _COULD_ use `(snum * fnum) as u64` but remember that you'll get a garbage number as usize if the result is negative
Mar 27 21:12:51 <panicbit>	playbot: -1i32 as u64
Mar 27 21:12:53 -playbot/#rust-beginners-	18446744073709551615
Mar 27 21:13:02 <Saevitus>	oh god
Mar 27 21:13:04 <panicbit>	s/usize/u64)
Mar 27 21:13:10 <panicbit>	Saevitus: Yeah right?
Mar 27 21:13:19 <panicbit>	#TwosComplement
Mar 27 21:14:18 <panicbit>	Saevitus: So you may want to parse as u32 or as u64 instead
Mar 27 21:14:24 <Saevitus>	So, if I park my thread, it doesn't go into the if statement, but if I remove park(), it closes the binary instantly. What could be causing that?
Mar 27 21:15:21 *	mahasamoot has quit (Ping timeout: 121 seconds)
Mar 27 21:15:26 *	MoSal has quit (Ping timeout: 121 seconds)
Mar 27 21:15:39 <panicbit>	Saevitus: Hm not sure right now
Mar 27 21:15:49 <panicbit>	But you definitley shouldn't need thread::park
Mar 27 21:16:14 <Saevitus>	I was just using it so my program wouldn't close instantly, so I could see outputs and such
Mar 27 21:16:17 <LambdaComplex>	panicbit: Worth publishing what as a project?
Mar 27 21:16:31 <panicbit>	LambdaComplex: Your Rust translation of the wmutils
Mar 27 21:17:57 <Saevitus>	am I doing something wrong with my if statement? https://gist.github.com/d8171fe9eb441a73c6b7
Mar 27 21:17:57 <panicbit>	Saevitus: Damn that animation looks good
Mar 27 21:18:07 <Saevitus>	it doesn't enter, for some reason.
Mar 27 21:18:09 <panicbit>	Saevitus: I know what the problem is ;)
Mar 27 21:18:18 <Saevitus>	oh boy!
Mar 27 21:18:22 <panicbit>	Saevitus: .read_line() contains a newline at the end
Mar 27 21:18:31 <panicbit>	Saevitus: So when comparing with "1" it returns false
Mar 27 21:18:40 <Saevitus>	ah!
Mar 27 21:18:42 *	Jayflux has quit (Quit: Leaving)
Mar 27 21:18:42 <panicbit>	Saevitus: There's .trim() to get rid of it
Mar 27 21:18:57 <panicbit>	`if func.trim() == "1"`
Mar 27 21:19:12 <panicbit>	or before that do `let func = func.trim();`
Mar 27 21:19:13 <LambdaComplex>	panicbit: I mean, it's on github :P
Mar 27 21:20:17 <panicbit>	Saevitus: Same goes for dnum and snum
Mar 27 21:21:06 *	mp has quit (Ping timeout: 121 seconds)
Mar 27 21:21:33 <panicbit>	Saevitus: https://gist.github.com/anonymous/f5f6c6131f3c87279029
Mar 27 21:22:44 <Saevitus>	awesome, thanks your your help!
Mar 27 21:23:07 <panicbit>	I feel like I could begin to compile a "Beginner's FAQ" or something like that
Mar 27 21:23:28 <panicbit>	The read_line containing a newline issue crops up so frequently :/
Mar 27 21:24:14 <Saevitus>	I'm a python & lua dev, so I've never really had that issue before haha
Mar 27 21:24:33 <panicbit>	Yeah it's a bit unexpected TBH
Mar 27 21:24:47 <panicbit>	To have that newline in there
Mar 27 21:25:19 <pseudo>	I have a param `myvar` that is of type [u8; 3]. If I try to do `myvar = buf[0..2];` I get a compiler error that it received a `[u8]` instead of `[u8; 3]`. Is it possible to take a staticly sized slice from a larger slice? 
Mar 27 21:26:20 <panicbit>	pseudo: Hm... Maaaybe using unsafe
Mar 27 21:26:35 *	mahasamoot (mahasamoot@moz-hgo.rcb.76.75.IP) has joined
Mar 27 21:26:45 <panicbit>	pseudo: Actually, maybe using the recently stabilized copy method =)
Mar 27 21:27:00 <panicbit>	'sec
Mar 27 21:27:09 *	KB5` (KB5@moz-rv9isk.dhcp.inet.fi) has joined
Mar 27 21:27:15 *	lala has quit (Quit: )
Mar 27 21:28:00 <panicbit>	Aw, copy_from_slice is not stable yet
Mar 27 21:28:01 <kefin>	Why isn't mut part of the type whilst &mut is?
Mar 27 21:28:05 <panicbit>	clone_from_slice however is
Mar 27 21:29:41 <panicbit>	kefin: Can you give a more concrete example?
Mar 27 21:29:43 *	KB5 has quit (Ping timeout: 121 seconds)
Mar 27 21:30:02 <kefin>	panicbit: when I write let mut x = 1; let () = x;, the compiler complains about type i32
Mar 27 21:33:39 <kefin>	But when I write let x = &mut 1; let () = x;, the compiler states &mut i32
Mar 27 21:33:39 <panicbit>	pseudo: http://is.gd/1q27y8
Mar 27 21:33:39 <panicbit>	kefin: in the first example the `mut` is part of a pattern
Mar 27 21:33:39 <pseudo>	panicbit: Awesome, thanks, that looks like it's working! :)
Mar 27 21:33:39 *	llandersll has quit (Connection closed)
Mar 27 21:33:39 <Saevitus>	is there a way to kill a thread?
Mar 27 21:33:39 <panicbit>	kefin: And the mut just modifies the mutability of the binding
Mar 27 21:33:39 <kefin>	panicbit: yeah because I can't write let x = mut 0;
Mar 27 21:33:41 <panicbit>	exactly
Mar 27 21:33:48 <kefin>	panicbit: I guess, it's just a little inconsistent and confusing
Mar 27 21:33:59 <panicbit>	kefin: It makes sense once you get used to it
Mar 27 21:34:08 <panicbit>	kefin: It's just a bit difficult to explain :/
Mar 27 21:35:01 <panicbit>	kefin: Anyway, you also could write `let &mut foo = &mut 42;`
Mar 27 21:35:16 <panicbit>	&mut is actually also a pattern in this case
Mar 27 21:35:17 <Saevitus>	nvm I found yield_now()
Mar 27 21:35:24 <kefin>	But the &mut would not cancel out and make foo = 42?
Mar 27 21:35:35 <panicbit>	kefin: Yes it would
Mar 27 21:35:37 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 27 21:35:42 <panicbit>	kefin: foo would be 42: i32
Mar 27 21:36:15 <panicbit>	kefin: (Also note, that this exact construct only works because integers are copyable)
Mar 27 21:36:37 <panicbit>	In cases where you deal with non-copyable values you have to use a ref binding
Mar 27 21:36:45 <kefin>	panicbit: you say "mut" is part of a pattern, yet let mut x = 1, does not match "mut" to the rhs?
Mar 27 21:36:52 <panicbit>	`let &mut ref foo = &mut 42`
Mar 27 21:37:03 <panicbit>	Which would make `foo: &i32`
Mar 27 21:37:36 <panicbit>	kefin: Right, mut by itself only modifies bindings
Mar 27 21:37:52 *	badon has quit (Ping timeout: 121 seconds)
Mar 27 21:37:54 <panicbit>	kefin: similarly as ref and ref mut do
Mar 27 21:37:58 <panicbit>	X.x
Mar 27 21:38:27 <panicbit>	I can see how this can feel complicated/confusing/weird
Mar 27 21:38:48 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 27 21:38:56 <panicbit>	`let &mut ref mut foo = &mut 42;` would probably be the mus ridiculous pattern...
Mar 27 21:39:00 <kefin>	So in the case of `let &mut x = &mut 10;`, x (the reference itself) would not be mutable?
Mar 27 21:39:00 <panicbit>	most*
Mar 27 21:39:16 <panicbit>	(It's basically like doing `&mut * &mut 42` )
Mar 27 21:39:37 <panicbit>	kefin: the binding would not be mutable
Mar 27 21:39:46 <panicbit>	kefin: you could not do `x = 42`
Mar 27 21:39:54 *	badon_ is now known as badon
Mar 27 21:40:12 <kefin>	But could you do *x = 42?
Mar 27 21:40:17 <panicbit>	Nope
Mar 27 21:40:31 <panicbit>	it's basically a `let foo = 10;`
Mar 27 21:40:51 <panicbit>	You peeled away the reference by using the pattern
Mar 27 21:41:06 <kefin>	So if I were to make the x mut, I'd write `let mut &mut x = &mut 1` ?
Mar 27 21:41:11 <panicbit>	It's like doing `let x = *&mut 10;`
Mar 27 21:41:32 <kefin>	panicbit wouldn't *&mut 10 dereference into a `mut i32`?
Mar 27 21:41:40 <panicbit>	kefin: the lonely mut always stands in front of variable names
Mar 27 21:41:55 <panicbit>	kefin: it would dereference into a i32
Mar 27 21:42:11 <kefin>	panicbit: crawling in my skin, these wounds they will not heal.
Mar 27 21:42:17 <panicbit>	kefin: if it is mutable or not depends on the variable it is bound to
Mar 27 21:42:23 <kefin>	I need to find the semantically consistent rule ;_;
Mar 27 21:42:29 <panicbit>	kefin: You will figure it out eventually :)
Mar 27 21:42:38 <panicbit>	kefin: maybe a different example will help!
Mar 27 21:42:50 *	llandersll has quit (Ping timeout: 121 seconds)
Mar 27 21:42:59 <panicbit>	playbot: let (foo, bar) = (42; 777);
Mar 27 21:42:59 -playbot/#rust-beginners-	<anon>:9:29: 9:30 error: expected one of `)`, `,`, `.`, or an operator, found `;`
Mar 27 21:43:00 -playbot/#rust-beginners-	<anon>:9         let (foo, bar) = (42; 777);
Mar 27 21:43:00 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/25rxSYb
Mar 27 21:43:06 <panicbit>	>.>
Mar 27 21:43:10 <panicbit>	playbot: let (foo, bar) = (42, 777);
Mar 27 21:43:11 -playbot/#rust-beginners-	()
Mar 27 21:43:14 <kefin>	`let &mut mut a = &mut 0; a = 100;` works... I think I'm starting to see it.
Mar 27 21:43:15 <panicbit>	there you go
Mar 27 21:43:27 <panicbit>	yup
Mar 27 21:43:29 <panicbit>	kefin: BUT
Mar 27 21:43:39 <panicbit>	kefin: It would not mutate the original &mut 0
Mar 27 21:43:46 <kefin>	I understand that
Mar 27 21:43:51 <panicbit>	good
Mar 27 21:44:01 <panicbit>	So the a is actually a copy
Mar 27 21:44:13 <panicbit>	But if you wanted to modify the original value
Mar 27 21:44:22 <panicbit>	You'd substitute `mut` with `ref mut`
Mar 27 21:44:29 *	Aceeri has quit (Quit: Connection closed for inactivity)
Mar 27 21:44:41 <kefin>	well wouldn't `let a = &mut 3; *a = 30` also work?
Mar 27 21:44:42 <panicbit>	which would bind `a` to a mutable reference
Mar 27 21:44:48 <panicbit>	kefin: yup
Mar 27 21:44:58 <panicbit>	kefin: Pattern matching on int references is a bit contrived :)
Mar 27 21:45:03 <kefin>	Is it as if the 'ref' puts a & on the rhs?
Mar 27 21:45:18 <kefin>	Yeah should probably use String or something that isn't Copy
Mar 27 21:45:26 <panicbit>	kinda
Mar 27 21:45:53 <panicbit>	it will take a reference to the matched value
Mar 27 21:45:58 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 21:46:01 <panicbit>	and bind it to the name
Mar 27 21:46:44 <panicbit>	playbot: let Some(ref foo): Option<&i32> = Some(42);
Mar 27 21:46:45 -playbot/#rust-beginners-	<anon>:9:43: 9:51 error: mismatched types:
Mar 27 21:46:45 -playbot/#rust-beginners-	 expected `core::option::Option<_>`,
Mar 27 21:46:45 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1SfB6o6
Mar 27 21:46:48 <panicbit>	f**k
Mar 27 21:47:01 <panicbit>	playbot: let Some(ref foo): &i32 = Some(42);
Mar 27 21:47:02 -playbot/#rust-beginners-	<anon>:9:35: 9:43 error: mismatched types:
Mar 27 21:47:02 -playbot/#rust-beginners-	 expected `core::option::Option<_>`,
Mar 27 21:47:02 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/25ryaOP
Mar 27 21:47:10 <Saevitus>	lol
Mar 27 21:47:13 <panicbit>	...
Mar 27 21:47:54 <panicbit>	Ah right, Option is a bad example here
Mar 27 21:48:08 <kefin>	Should prob match here
Mar 27 21:48:16 <panicbit>	Also, honestly, having to specify the type of the RHS is confusing
Mar 27 21:49:46 <panicbit>	playbot: let (ref foo, _) = (42, 777); let foo: &i32 = foo;
Mar 27 21:49:47 -playbot/#rust-beginners-	()
Mar 27 21:50:00 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 27 21:50:03 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 21:51:17 <panicbit>	foo matches the i32 and ref adds the &
Mar 27 21:51:22 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 27 21:51:36 <panicbit>	(it matches the i32 because the type if the tuple is (i32, i32))
Mar 27 21:51:52 <panicbit>	of*
Mar 27 21:51:59 <kefin>	I've kinda grown to understand those simple patterns, it's just the more complex ones that are confusing.
Mar 27 21:52:14 <kefin>	Especially for or match on *x or x vs using ref or not.
Mar 27 21:52:49 <panicbit>	kefin: In a match it is usually convenient to do `match *foo` because you don't have to include the `&` or `&mut` in all of the patterns
Mar 27 21:53:13 <kefin>	What if you get errors about "can't move out of reference"?
Mar 27 21:53:20 <panicbit>	kefin: In any case you'll be required to use `ref` when binding variables when you are not allowed to move the values
Mar 27 21:53:28 <kefin>	So I need to match on &Some(ref value) instead
Mar 27 21:53:30 <panicbit>	kefin: That's when you add ref
Mar 27 21:53:38 <panicbit>	yup
Mar 27 21:53:59 <panicbit>	Because then `value` would only be a reference to the value inside of the Some
Mar 27 21:55:26 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 27 21:56:50 <panicbit>	What I just realised though: You can't bind to a mutable ref AND make the binding mutable at the same time
Mar 27 21:57:01 <panicbit>	So something like `ref mut mut foo` is impossible ;D
Mar 27 21:57:03 <kefin>	Yeah that caught my eye as well
Mar 27 21:57:17 <panicbit>	But I think that can be circumvented by rebinding
Mar 27 21:57:33 <kefin>	Or `let mut ref a = x`, it must be `let mut a = &x` instead
Mar 27 21:57:49 <panicbit>	?
Mar 27 21:58:08 <panicbit>	http://is.gd/dRQmtV
Mar 27 21:58:34 <panicbit>	the `let mut bar` rebinds the existing bar so that it is mutable :D
Mar 27 21:58:46 <panicbit>	So that I can swap out th &mut i32
Mar 27 21:58:48 <panicbit>	the*
Mar 27 21:59:12 <kefin>	try "mut ref".
Mar 27 21:59:30 *	Guest23 (textual@moz-704k64.co.comcast.net) has joined
Mar 27 21:59:41 *	Guest23 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 22:00:38 <panicbit>	kefin: Nope, doesn't work
Mar 27 22:00:48 <kefin>	Exactly.
Mar 27 22:00:53 <panicbit>	That would need to be `mut ref mut` anyway
Mar 27 22:01:06 <kefin>	That's what I was trying to say:
Mar 27 22:01:09 <kefin>	`let mut ref a = x`, it must be `let mut a = &x` instead
Mar 27 22:01:22 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 27 22:01:25 <panicbit>	I'm still not getting what that's supposed to mean
Mar 27 22:01:34 <kefin>	If you want a reference that itself is mutable.
Mar 27 22:01:48 <kefin>	Not the contents of the reference, just the reference (like a non-const ptr)
Mar 27 22:01:57 <panicbit>	But the second one doesn't give you a mutable reference
Mar 27 22:02:11 <kefin>	No, a reference that is mutable
Mar 27 22:02:44 <panicbit>	`let mut ref a = x` is the same as `let a = &mut x`
Mar 27 22:03:24 <kefin>	playbot: let y=&100; let mut x=&32; x=y;
Mar 27 22:03:25 -playbot/#rust-beginners-	<anon>:9:36: 9:37 warning: value assigned to `x` is never read, #[warn(unused_assignments)] on by default
Mar 27 22:03:25 -playbot/#rust-beginners-	<anon>:9         let y=&100; let mut x=&32; x=y;
Mar 27 22:03:25 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/25rz6mr
Mar 27 22:04:01 <panicbit>	This makes only the binding mutable
Mar 27 22:04:07 <panicbit>	meaning you can swap out the references
Mar 27 22:04:10 <kefin>	That was my point
Mar 27 22:04:11 <panicbit>	But not mutate them
Mar 27 22:04:40 *	klue has quit (Ping timeout: 121 seconds)
Mar 27 22:04:42 <panicbit>	It's important distinguish between bindings and references
Mar 27 22:06:08 <Saevitus>	panicbit: finished product: https://gist.github.com/de196c3f2b17d51daf29 :D
Mar 27 22:06:18 *	blinky (Mibbit@moz-7730se.cable.rogers.com) has left
Mar 27 22:06:46 <panicbit>	Saevitus: Nice :)
Mar 27 22:07:08 <panicbit>	Saevitus: The next step is probably trying to deduplicate the code
Mar 27 22:07:13 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 27 22:07:14 <panicbit>	Saevitus: And improve error handling
Mar 27 22:07:28 *	goyox86 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 27 22:07:29 <Saevitus>	haha yeah
Mar 27 22:07:46 <panicbit>	Saevitus: e.g. each of the arithmetic functions needs to read two numbers
Mar 27 22:07:51 <panicbit>	That could be put in a seperate function
Mar 27 22:08:01 <Saevitus>	ah
Mar 27 22:08:07 <panicbit>	That alone would immensely decrease your code size :)
Mar 27 22:08:33 <Saevitus>	hmm
Mar 27 22:09:09 <panicbit>	You could learn about tuples to return two values at the same time :)
Mar 27 22:15:13 <LambdaComplex>	Tuples are useful :D
Mar 27 22:15:31 <panicbit>	LambdaComplex: Yeah, and Go lacks them :P
Mar 27 22:15:37 <LambdaComplex>	panicbit: wat
Mar 27 22:15:55 <panicbit>	LambdaComplex: NVM, I'm just needlessly complaining about another language :)
Mar 27 22:15:56 <Saevitus>	golang
Mar 27 22:16:02 <Saevitus>	^
Mar 27 22:16:09 <panicbit>	Saevitus: Are you familiar with Go ? :)
Mar 27 22:16:27 <kefin>	panicbit: :^)
Mar 27 22:16:32 <Saevitus>	I thought about learning it, was tossing up between rust and go.
Mar 27 22:16:45 *	Malnormalulo has quit (Ping timeout: 121 seconds)
Mar 27 22:16:59 <panicbit>	LambdaComplex: Golang kinda has tuples, but only for return values and you have to destructure them immediately when calling a method. You can't pass tuples around.
Mar 27 22:17:22 <Saevitus>	but I can do more of what I want with rust than I could with go, so here I am!
Mar 27 22:17:29 <panicbit>	Saevitus: I was a big Go fan before learning Rust but I got bored after some time :)
Mar 27 22:17:37 <panicbit>	Now I'm a big Rust fan :P
Mar 27 22:17:51 <panicbit>	And the dev's keep me interested by adding cool features
Mar 27 22:18:07 <panicbit>	And, well, by building a fucking awesome language
Mar 27 22:18:37 <panicbit>	Saevitus: What do you want to do with Rust that you can't with Go?
Mar 27 22:18:38 <Saevitus>	I can do most of what I'd want from C++ without having to learn that boring ass language
Mar 27 22:18:41 *	xiinotulp (q@moz-14sjlv.dynamic.totbb.net) has joined
Mar 27 22:18:50 <Saevitus>	dlls!
Mar 27 22:19:02 <Saevitus>	much easier to access winapi too
Mar 27 22:19:03 <panicbit>	Didn't golang recently get dll support?
Mar 27 22:19:21 <panicbit>	True, but only thanks to the mind boggling efforts of WindowsBunnies 
Mar 27 22:20:06 <panicbit>	Kudos!
Mar 27 22:20:44 <Saevitus>	plus, rust is a very unique language, people ask you "Oh, what'd you code that in?", you respond with "rust".
Mar 27 22:21:11 <panicbit>	Heh, yeah
Mar 27 22:21:30 <Saevitus>	I also find rust a lot easier than c++, but that may just be because I'm actually sitting down and trying to learn it
Mar 27 22:21:46 *	plutoniix has quit (Ping timeout: 121 seconds)
Mar 27 22:21:56 *	Fishrock123 (Fishrock123@moz-5igk34.dsl.bell.ca) has joined
Mar 27 22:22:22 <kefin>	C++ is okay, the copy-semantics make it more difficult though.
Mar 27 22:22:31 <panicbit>	I started to have trouble reading `typ var` languages :/
Mar 27 22:23:14 <panicbit>	The last 3 languages or so that I learned all had/have `var: typ` syntax
Mar 27 22:24:23 <panicbit>	C++ and Swift seem to also want to have lifetime stuff :)
Mar 27 22:25:05 <panicbit>	https://lists.swift.org/pipermail/swift-evolution/Week-of-Mon-20151214/003494.html
Mar 27 22:25:20 <panicbit>	"Personally, I'd love to have the power of Rust's borrowchecker and lifetimes system, but as I mentioned in another thread recently, there is a pretty steep learning curve there."
Mar 27 22:25:39 <kefin>	panicbit: I didn't think the borrow checker was too steep to learn actually.
Mar 27 22:42:15 *	Disconnected (No route to host)
**** ENDING LOGGING AT Sun Mar 27 22:42:15 2016

**** BEGIN LOGGING AT Sun Mar 27 22:42:27 2016

Mar 27 22:42:27 *	Now talking on #rust-beginners
Mar 27 22:42:27 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 27 22:42:27 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 27 22:42:50 *	pseudo has quit (Ping timeout: 121 seconds)
Mar 27 22:43:04 <panicbit>	kefin: You probably mean the coreutils, yeah that's cool
Mar 27 22:43:22 *	pseudo (pseudo@moz-bvvcvm.at.cox.net) has joined
Mar 27 22:43:24 *	DaSpirit has quit (Quit: Leaving)
Mar 27 22:43:52 <kefin>	And perhaps also port ssh and gnupg
Mar 27 22:44:06 <panicbit>	A native port would be super cool
Mar 27 22:44:08 <kefin>	Overflow bugs may still exist in those, causing more big heists
Mar 27 22:44:33 *	ZX21T32K (ZX21T32K@moz-qir4sg.elisa-laajakaista.fi) has joined
Mar 27 22:45:06 <panicbit>	Saevitus: Did you try to make your code a bit neater? :)
Mar 27 22:50:12 *	ZX21T32K has quit (Quit: Goodbye!)
Mar 27 22:55:05 <LambdaComplex>	So, C has strtoul, which converts a string to an unsigned long integer. It also lets you specify a base; if you specify 16, then you can have a 0x prefix (or not). Is there something equivalent for rust?
Mar 27 22:55:55 <panicbit>	LambdaComplex: http://doc.rust-lang.org/nightly/std/primitive.i32.html#method.from_str_radix ?
Mar 27 22:56:12 <panicbit>	It's not equivalent though, because this actually allows proper error handling :P
Mar 27 22:57:35 <panicbit>	And at the same time it sucks because if you specify a radix smaller than 2 or greater than 36 the code panics...
Mar 27 22:57:44 <panicbit>	And that isn't even documented X.x
Mar 27 22:58:32 <panicbit>	LambdaComplex: Also, you can't have a 0x prefix
Mar 27 22:58:53 <LambdaComplex>	panicbit: Is that panic for the rust thing or the c thing?
Mar 27 22:58:58 <panicbit>	Rust
Mar 27 22:59:00 <kefin>	panicbit: why did they design it to panic instead of returning Option?
Mar 27 22:59:17 <panicbit>	kefin: I'm not sure, but they are discussions about changing it
Mar 27 22:59:31 <LambdaComplex>	panicbit: Yeah, I don't think that's gonna do since you can't have the prefix
Mar 27 22:59:38 <panicbit>	kefin: But sadly they seem to tend towards not doing that because of backwards compatability :/
Mar 27 23:00:00 <panicbit>	LambdaComplex: If you know that the prefix is always there then you could just manually strip it
Mar 27 23:00:07 <panicbit>	LambdaComplex: `foo[2..]`
Mar 27 23:00:42 <LambdaComplex>	panicbit: Hm, couldn't i check to see if the first two chars are 0x and then only strip them if they are?
Mar 27 23:00:58 <panicbit>	(actually, that's bad... that could panic as well. Either because of len() < 2 or because it cuts through a utf8 char)
Mar 27 23:01:06 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 27 23:01:13 <panicbit>	LambdaComplex: Yeah that's better
Mar 27 23:01:18 <LambdaComplex>	Or I _could_ use libc::strtoul...but let's not and say we didn't
Mar 27 23:01:36 <LambdaComplex>	panicbit: Looks like that's what I'll try to do then
Mar 27 23:02:48 <panicbit>	LambdaComplex: But checking if the first two characters are `0x` is actually rather tedious :/
Mar 27 23:04:36 <panicbit>	A slice method that would only act on chars would be nice
Mar 27 23:05:09 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 27 23:05:21 <panicbit>	LambdaComplex: Heh, use the .starts_with() method :D
Mar 27 23:05:35 <panicbit>	playbot: "0x123".starts_with("0x")
Mar 27 23:05:36 -playbot/#rust-beginners-	true
Mar 27 23:06:02 <LambdaComplex>	panicbit: That a method on Strings?
Mar 27 23:06:07 <panicbit>	LambdaComplex: On str
Mar 27 23:06:15 <panicbit>	LambdaComplex: So you can also call it on a String
Mar 27 23:06:17 <kefin>	Can't you make a trait that calls the conversion and returns an Option by checking if the radix is right?
Mar 27 23:06:36 <panicbit>	playbot: "foo".to_string().starts_with("0x")
Mar 27 23:06:37 -playbot/#rust-beginners-	false
Mar 27 23:06:55 <Saevitus>	woah, that's pretty cool.
Mar 27 23:06:56 <panicbit>	kefin: Yeah
Mar 27 23:07:18 <panicbit>	Saevitus: What is?
Mar 27 23:07:33 <Saevitus>	starts_with()
Mar 27 23:07:41 <Saevitus>	so much fancy stuff in this language
Mar 27 23:07:44 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 27 23:07:53 <panicbit>	kefin: An extension trait would be a way to work around the borked std version
Mar 27 23:08:18 <kefin>	panicbit: would that be considered the most idiomatic way of implementing it?
Mar 27 23:08:24 <panicbit>	Saevitus: That's pretty standard though
Mar 27 23:08:34 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 27 23:08:51 <Saevitus>	well, it's new to me lol
Mar 27 23:08:52 *	kimundi (kimundi@moz-pcpfug.otl6.ddq3.4fe2.2002.IP) has joined
Mar 27 23:09:09 <panicbit>	kefin: Dunno, it's how I would do it because it's the most convenient way to use :D
Mar 27 23:09:18 <kefin>	my thoughts exactly x]
Mar 27 23:09:41 <Saevitus>	I'm like a kid, coming into a magical land, exploring all this fancy new stuff
Mar 27 23:10:05 <panicbit>	I hate how messed up JS's splitn method is
Mar 27 23:10:22 <kefin>	Saevitus: the magical feeling of exploring a new exciting language :)
Mar 27 23:10:27 <Saevitus>	yes!
Mar 27 23:10:31 <panicbit>	Every reasonable languages splits exactly `n` times and doesn't discard anything
Mar 27 23:10:50 <panicbit>	But frickin' JS splits as much as possible and just drops the additional splits
Mar 27 23:11:14 <panicbit>	so it's basically just a convenience method for split + array slicing
Mar 27 23:11:24 <LambdaComplex>	panicbit: Can I take a slice from a String?
Mar 27 23:11:46 <Saevitus>	panicbit: how would I go about making a function for my arithmetic functions?
Mar 27 23:11:58 <panicbit>	LambdaComplex: let foo = "foo".to_string(); let bar: &str = &foo[..];
Mar 27 23:12:09 <panicbit>	playbot: let foo = "foo".to_string(); let bar: &str = &foo[..];
Mar 27 23:12:10 -playbot/#rust-beginners-	()
Mar 27 23:13:03 <panicbit>	Saevitus: First try to identify which part of your code is duplicated
Mar 27 23:13:17 <panicbit>	Saevitus: Copy and paste that to it's own functions
Mar 27 23:13:36 <panicbit>	Saevitus: Identify if there are any variables that need to be passed to this function
Mar 27 23:13:46 <panicbit>	Saevitus: identify what this function needs to return
Mar 27 23:14:26 <panicbit>	And then substitute the duplicated code sections with your new function
Mar 27 23:14:36 <panicbit>	Then hope for the best :)
Mar 27 23:14:44 <Saevitus>	sounds good!
Mar 27 23:15:04 <LambdaComplex>	panicbit: Well, I put the arguments in a vector. Is that gonna be a problem?
Mar 27 23:15:28 <panicbit>	Saevitus: Try to do as much as you can and then ask if you are stuck with something
Mar 27 23:15:56 <panicbit>	LambdaComplex: I don't know what your problem is =D
Mar 27 23:16:13 <panicbit>	LambdaComplex: Could you please show error messages / code?
Mar 27 23:17:15 *	cbrewster has quit (Connection closed)
Mar 27 23:17:47 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 27 23:18:27 <panicbit>	I sometimes feel sorry because I repeat that so often
Mar 27 23:18:28 <LambdaComplex>	panicbit: Wait, I think I just got it
Mar 27 23:18:32 <panicbit>	But it really is helpful
Mar 27 23:18:40 <LambdaComplex>	Looks like I had to use to_owned()
Mar 27 23:18:58 <LambdaComplex>	Now let's see if it works as expected :P
Mar 27 23:19:00 <panicbit>	To get a String/Vec
Mar 27 23:19:41 <LambdaComplex>	Yeah, I was getting a String
Mar 27 23:20:01 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 27 23:21:20 <LambdaComplex>	Well, now that I have this out of the way...I have to actually do XCB stuff. Great >.>
Mar 27 23:22:07 <panicbit>	LambdaComplex: Sadly reading the source is a better doc than the doc itself...
Mar 27 23:22:22 <LambdaComplex>	panicbit: So I've noticed
Mar 27 23:22:27 <panicbit>	LambdaComplex: So I'd recommend you to download the source to browse and grep through it
Mar 27 23:22:34 <LambdaComplex>	Well, half reading the docs, half ctrl+f
Mar 27 23:22:35 <Saevitus>	panicbit: http://pastebin.com/3FX2ygBm that's 10x cleaner, wow.
Mar 27 23:22:41 <panicbit>	(you need to cargo build it to generate the actual source)
Mar 27 23:22:44 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 27 23:23:10 <LambdaComplex>	panicbit: Did you ever have an explanation for cargo apparently not building all the docs for me?
Mar 27 23:23:40 <panicbit>	Saevitus: Ommitting the empty lines between the if-elses is probably preferred
Mar 27 23:23:48 *	bitshifter (bitshifter@moz-nqgbo4.tpgi.com.au) has joined
Mar 27 23:24:09 <panicbit>	LambdaComplex: No
Mar 27 23:24:26 <panicbit>	LambdaComplex: If you open the docs you do not see `xcb` listed on the left side?
Mar 27 23:24:31 <panicbit>	When*
Mar 27 23:24:32 <LambdaComplex>	panicbit: I do
Mar 27 23:24:40 <LambdaComplex>	But it only has the modules I've used listed
Mar 27 23:24:42 <panicbit>	Well, then you have everything you need
Mar 27 23:24:46 <LambdaComplex>	(base, xproto, and ffi)
Mar 27 23:24:47 <panicbit>	LambdaComplex: Oh, weird
Mar 27 23:24:51 <panicbit>	Oh no that's normal
Mar 27 23:24:59 <panicbit>	The sam ehappens here
Mar 27 23:25:03 <LambdaComplex>	Any way to make it generate all of them?
Mar 27 23:25:16 <panicbit>	I believe that is all
Mar 27 23:25:28 <panicbit>	But let me check
Mar 27 23:25:59 <panicbit>	LambdaComplex: Yup, that's all there is
Mar 27 23:25:59 *	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined
Mar 27 23:26:09 <panicbit>	LambdaComplex: Everything is fine
Mar 27 23:26:59 <LambdaComplex>	panicbit: So what's with all the modules listed on the website?
Mar 27 23:27:17 <panicbit>	I don't know
Mar 27 23:27:26 <LambdaComplex>	Well, let's add that to our laundry list of grievances >.>
Mar 27 23:27:42 <panicbit>	LambdaComplex: The doc on the websit eis just out of date
Mar 27 23:27:57 <panicbit>	LambdaComplex: The website version doesn't even list the ffi module
Mar 27 23:28:12 <panicbit>	(Which contains most of the modules that are listed on the website)
Mar 27 23:29:39 <panicbit>	LambdaComplex: THOUGH, the ffi page doesn't list them
Mar 27 23:29:45 <panicbit>	LambdaComplex: And I just realized why:
Mar 27 23:30:01 *	robojeb (robojeb@moz-g4pd71.mi.comcast.net) has joined
Mar 27 23:30:03 <panicbit>	LambdaComplex: they all need to be explicitly enabled using features!
Mar 27 23:30:39 <panicbit>	LambdaComplex: let's say you want to use the `screensaver` module, then you need to enable the `screensaver` feature
Mar 27 23:31:00 <panicbit>	LambdaComplex: That is somehow awefully inconvenient...
Mar 27 23:31:29 <panicbit>	LambdaComplex: Thankfully the Cargo.toml lists them all
Mar 27 23:32:23 <LambdaComplex>	panicbit: This is hurting my brain
Mar 27 23:32:30 *	nicholasf (nicholasf@moz-00v.4vm.152.1.IP) has joined
Mar 27 23:32:34 <panicbit>	LambdaComplex: I'm sorry :)
Mar 27 23:32:56 <panicbit>	That project is just... Taxing...
Mar 27 23:33:58 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 27 23:34:07 <panicbit>	Saevitus: Your code is broken though
Mar 27 23:34:18 <panicbit>	Saevitus: Now every option is multiplication :)
Mar 27 23:34:31 <Saevitus>	oh, bugger.
Mar 27 23:34:49 <Saevitus>	that's an easy fix though!
Mar 27 23:34:50 <panicbit>	Saevitus: Also get rid of the thread::park
Mar 27 23:36:41 <panicbit>	Saevitus: Ideally the function would return the entered numbers, then the code inside the if-elses would do the calculation and return and then you'd print the result after the if-else
Mar 27 23:37:11 <panicbit>	Er, let me explain that `if-else return` thing a bit better
Mar 27 23:37:30 <panicbit>	In Rust the if-else can return values!
Mar 27 23:37:47 <panicbit>	playbot: let n = if true { 42 } else { 777 }; n
Mar 27 23:37:48 -playbot/#rust-beginners-	42
Mar 27 23:37:54 <panicbit>	playbot: let n = if false { 42 } else { 777 }; n
Mar 27 23:37:55 -playbot/#rust-beginners-	777
Mar 27 23:38:23 <Saevitus>	hmm
Mar 27 23:39:08 <panicbit>	if false { 1 } else if false { 2 } else { 3 }
Mar 27 23:39:13 <panicbit>	playbot: if false { 1 } else if false { 2 } else { 3 }
Mar 27 23:39:14 -playbot/#rust-beginners-	3
Mar 27 23:39:35 <Saevitus>	so how would I implement that into my code?
Mar 27 23:41:42 <panicbit>	hm there are a few things that would also need to change
Mar 27 23:41:56 <panicbit>	Saevitus: I'd say first focus on fixing the answer function
Mar 27 23:42:07 <panicbit>	Saevitus: Make it a get_inputs function :)
Mar 27 23:42:46 <panicbit>	`fn get_inputs() -> (u64, u64) { ... }`
Mar 27 23:44:36 <Saevitus>	and how would I implement that into my answer function?
Mar 27 23:44:43 <panicbit>	Saevitus: 'sec
Mar 27 23:45:25 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 27 23:47:06 <panicbit>	Saevitus: So this would be the first step https://gist.github.com/anonymous/d54239329af4086b13cc
Mar 27 23:48:36 <panicbit>	But we can improve that a little bit
Mar 27 23:49:00 *	mada has quit (Ping timeout: 121 seconds)
Mar 27 23:49:49 <Saevitus>	and then inside the answer get_input func, we could put if true statements, and check if it's 1,2,3,4 etc?
Mar 27 23:49:51 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 27 23:50:10 <panicbit>	I wouldn't do that
Mar 27 23:50:20 <Saevitus>	why's that?
Mar 27 23:50:46 <panicbit>	To be honest, I'm not exactly sure what you meant, please clarify =D
Mar 27 23:51:16 <Saevitus>	oh wait, nevermind I just had an interesting moment.
Mar 27 23:51:45 <panicbit>	'sec
Mar 27 23:52:39 <panicbit>	Saevitus: The next iteration: https://gist.github.com/anonymous/6813575c7b6c7a1be41a
Mar 27 23:53:07 <panicbit>	Saevitus: I moved the "Answer:" prints out of the ifs
Mar 27 23:53:25 <panicbit>	And instead returned the result of the calculations from them
Mar 27 23:53:41 <panicbit>	And then just print the answer that was returned from the if block :)
Mar 27 23:53:56 <panicbit>	Oh, and the else part is also noteworthy
Mar 27 23:54:03 <Saevitus>	oh, sweet! I see now, awesome.
Mar 27 23:54:11 <panicbit>	Usually else would also need to return a number
Mar 27 23:54:36 <panicbit>	but since this is a kind of an error case we use "continue" to just start again from the start of the loop
Mar 27 23:54:59 <Saevitus>	ah, I see.
Mar 27 23:55:07 <Saevitus>	thankyou!
Mar 27 23:55:09 <panicbit>	;)
Mar 27 23:55:13 <panicbit>	But why stop there? :D
Mar 27 23:55:48 <panicbit>	No comes the part where you try to use some clever string or char checks to deduplicate the get_input stuff :D
Mar 27 23:55:51 <panicbit>	now*
Mar 27 23:56:30 <panicbit>	And after that comes better error handling
Mar 27 23:56:34 <panicbit>	and better types :D
Mar 27 23:56:38 *	Sandflies (Mibbit@moz-1fp.ngr.55.210.IP) has joined
Mar 27 23:56:42 <panicbit>	Damn, I'm in my element ^^
Mar 27 23:56:43 *	rumpler (Mibbit@moz-m5cocc.cable.rogers.com) has joined
Mar 27 23:56:58 <Saevitus>	I was just about to say that, having let (fnum, snum) = get_input(); repeating constantly is a bit tedious
Mar 27 23:56:59 *	stephanbuys (Adium@moz-iqes92.telkomadsl.co.za) has joined
Mar 27 23:57:36 <panicbit>	Saevitus: Yeah, but the thing is that you want to check if 1-4 was entered before you call get_input()
Mar 27 23:57:56 <panicbit>	Otherwise you'd enter an invalid type of calculation and then needlessly get asked for inputs...
Mar 27 23:58:06 *	rumpler has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 27 23:58:09 <Saevitus>	ah, I see
Mar 27 23:58:10 <LambdaComplex>	panicbit: Okay, I have another horrible question to ask :D
Mar 27 23:58:16 <panicbit>	LambdaComplex: Go ahead =D
Mar 27 23:58:33 <LambdaComplex>	panicbit: xcb::base::CURRENT_TIME vs xcb::xproto::TIME_CURRENT_TIME
Mar 27 23:58:54 <LambdaComplex>	panicbit: I'm trying to use xcb::xproto::set_input_focus(), by the way
Mar 28 00:00:11 <panicbit>	Saevitus: Prepare to get blown away
Mar 28 00:03:03 *	mib_5gayy3 (Mibbit@moz-8fd.868.106.222.IP) has joined
Mar 28 00:03:20 *	mib_5gayy3 has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 00:04:05 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 28 00:04:22 <Saevitus>	I am prepared
Mar 28 00:04:33 *	Sandflies has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 00:04:51 <panicbit>	Saevitus: Ok, here you go https://gist.github.com/anonymous/4153b4b051b8a20c620b
Mar 28 00:05:10 <Saevitus>	holy
Mar 28 00:05:17 <panicbit>	<3
Mar 28 00:06:47 <Xion>	panicbit: lol
Mar 28 00:06:51 <Xion>	such hard, very program
Mar 28 00:07:01 <panicbit>	Very refactoring
Mar 28 00:07:09 <Xion>	On a completely unrelated note, is there a cross-platform line ending constant?
Mar 28 00:07:19 <panicbit>	Xion: Sadly no
Mar 28 00:07:19 <Xion>	Like os.linesep in Python.
Mar 28 00:07:22 <Xion>	Bah.
Mar 28 00:07:27 <panicbit>	Xion: You can easily implement one though
Mar 28 00:07:31 <panicbit>	Using cfg flags
Mar 28 00:08:05 <panicbit>	LambdaComplex: Now I'll focus on you for a second
Mar 28 00:08:07 <Xion>	I dunno if Rust even supports ancient MacOS where it was \r lol
Mar 28 00:08:08 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 28 00:08:21 <panicbit>	Shouldn't be a problem I think
Mar 28 00:08:32 <Xion>	Which would basically make it \r\n on Windows and \n everywhere else.
Mar 28 00:09:14 <panicbit>	Xion: I'll show you how to do that in a bit
Mar 28 00:10:48 <panicbit>	LambdaComplex: Hilarious
Mar 28 00:10:54 <panicbit>	LambdaComplex: They are equivalent
Mar 28 00:11:28 <panicbit>	LambdaComplex: TIME_CURRENT_TIME is a const of type Time with the value 0x00
Mar 28 00:11:41 <panicbit>	LambdaComplex: The type alias Time resolves to u32
Mar 28 00:12:04 <panicbit>	LambdaComplex: And CURRRENT_TIME is a constant of type u32 which has the value 0
Mar 28 00:12:09 <panicbit>	(0x00 == 0)
Mar 28 00:12:13 <LambdaComplex>	panicbit: So I noticed :P
Mar 28 00:12:20 <panicbit>	LambdaComplex: That's... insane
Mar 28 00:12:37 <panicbit>	LambdaComplex: But probably because of the generated nature of the code
Mar 28 00:12:41 <LambdaComplex>	panicbit: So what about revert_to?
Mar 28 00:12:55 <LambdaComplex>	panicbit: Says it should be u8
Mar 28 00:13:06 <panicbit>	I could really use some support from some other members here =D
Mar 28 00:13:10 <LambdaComplex>	panicbit: The original code I'm looking at has XCB_INPUT_FOCUS_POINTER_ROOT
Mar 28 00:13:11 *	zhoeon has quit (Ping timeout: 121 seconds)
Mar 28 00:13:17 <panicbit>	Serving ~3 people at the same time is taxing =
Mar 28 00:13:19 <panicbit>	=D
Mar 28 00:13:37 <panicbit>	I love helping you though
Mar 28 00:13:46 <Saevitus>	so, if !["1", "2", "3", "4"].contains(&func) is just checking for a those numbers in the func string, right?
Mar 28 00:13:52 <Saevitus>	just going over the code, finding out what it does
Mar 28 00:14:02 <LambdaComplex>	panicbit: I assume the equivalent is xcb::xproto::INPUT_FOCUS_POINTER_ROOT
Mar 28 00:14:14 <LambdaComplex>	panicbit: Which is a constant equal to 0x01...as a u32
Mar 28 00:14:30 <panicbit>	Saevitus: it checks if func is not any of those strings
Mar 28 00:14:36 <panicbit>	Saevitus: i.e. an invalid input
Mar 28 00:14:43 <Saevitus>	ah, I see!
Mar 28 00:14:47 <Saevitus>	right, the !
Mar 28 00:14:53 <Saevitus>	I should've notice that.
Mar 28 00:15:00 <panicbit>	Saevitus: Yeah. I first wanted to do the opposite case
Mar 28 00:15:19 <panicbit>	Saevitus: But that would force you to nest the match stuff inside of the if
Mar 28 00:15:21 *	bjz_ (bjz@moz-puppgq.tpgi.com.au) has joined
Mar 28 00:15:28 <panicbit>	This is much cleaner
Mar 28 00:15:37 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 28 00:15:59 *	bjz has quit (Ping timeout: 121 seconds)
Mar 28 00:16:52 <panicbit>	LambdaComplex: Yeah
Mar 28 00:16:59 <Saevitus>	yeah, it looks much cleaner.
Mar 28 00:17:02 <panicbit>	LambdaComplex: Try to avoid the ffi stuff
Mar 28 00:17:12 <Saevitus>	unreachable!(), error handling?
Mar 28 00:17:23 <panicbit>	LambdaComplex: If it is inside of the ffi module, then you probably shouldn't work with it directly
Mar 28 00:17:31 <panicbit>	Saevitus: It's lazy error handling
Mar 28 00:18:03 <panicbit>	Saevitus: I could instead have written: `_ => fnum - snum` which is probably better
Mar 28 00:18:26 <panicbit>	Saevitus: But if you intend to add a new function
Mar 28 00:18:36 <panicbit>	Saevitus: Then you might forget adding it to the match
Mar 28 00:18:46 <Saevitus>	ah, I see
Mar 28 00:18:51 <panicbit>	Saevitus: Which would then result in the subtraction function to be called
Mar 28 00:18:52 <LambdaComplex>	panicbit: I'm not using anything from ffi...
Mar 28 00:18:55 <panicbit>	Without you noticing immediately
Mar 28 00:19:04 <panicbit>	Saevitus: The unreachable!() would make you aware of it
Mar 28 00:19:24 <panicbit>	Saevitus: Because the program would crash
Mar 28 00:19:26 <Saevitus>	that's pretty useful.
Mar 28 00:19:36 <panicbit>	LambdaComplex: Good
Mar 28 00:19:39 *	llandersll has quit (Ping timeout: 121 seconds)
Mar 28 00:21:33 *	urcra has quit (Connection closed)
Mar 28 00:21:55 *	schnozzle (Mibbit@moz-5a0msf.ca.comcast.net) has joined
Mar 28 00:22:01 <Saevitus>	I, I see now. I added '5' to it, tried running it and the program crashed
Mar 28 00:22:02 <Saevitus>	nice.
Mar 28 00:22:56 <panicbit>	Xion: http://is.gd/kyxO5i
Mar 28 00:23:25 <panicbit>	Saevitus: Next thing to improve would probably be the get_input method
Mar 28 00:23:48 <panicbit>	Saevitus: I'd like to point out a few other issues to think about:
Mar 28 00:24:04 <panicbit>	Saevitus: what happens if you do `0 - 5` ?
Mar 28 00:24:22 <panicbit>	Saevitus: What happens if you do `5 / 2` ?
Mar 28 00:24:34 <panicbit>	Saevitus: Try it out ;)
Mar 28 00:24:41 <panicbit>	Or have a guess first
Mar 28 00:26:27 <Saevitus>	okay, hmm. I see the program crashes.
Mar 28 00:26:36 <panicbit>	Saevitus: And why is it so? :)
Mar 28 00:26:54 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 28 00:27:45 <Saevitus>	it needs to use a different int type, right?
Mar 28 00:28:00 <panicbit>	Saevitus: Yeah
Mar 28 00:28:10 <panicbit>	Saevitus: A signed int type to be specific
Mar 28 00:28:39 <Saevitus>	so what's the difference between an unsigned or a signed?
Mar 28 00:28:45 <panicbit>	a u32 is unsigned, so it ranges from 0 to 2^32-1
Mar 28 00:29:00 <kefin>	+ and - are signs, think of it like that.
Mar 28 00:29:10 <kefin>	unsigned "has no signs", so it's only positive
Mar 28 00:29:16 <Saevitus>	ah!
Mar 28 00:29:47 <Saevitus>	oh boy, there's so many types
Mar 28 00:29:53 <panicbit>	playbot: -5 as u32
Mar 28 00:29:54 -playbot/#rust-beginners-	<anon>:9:9: 9:11 error: unary negation of unsigned integer [E0519]
Mar 28 00:29:54 -playbot/#rust-beginners-	<anon>:9         -5 as u32
Mar 28 00:29:54 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1REv4wA
Mar 28 00:29:58 <panicbit>	damn
Mar 28 00:30:10 <panicbit>	Damn you smart compiler
Mar 28 00:30:38 <panicbit>	playbot: let n: i32 = -5; n as u32
Mar 28 00:30:39 -playbot/#rust-beginners-	4294967291
Mar 28 00:30:43 <panicbit>	^ fun :)
Mar 28 00:30:55 <kefin>	playbot: (-5) as u32
Mar 28 00:30:56 -playbot/#rust-beginners-	<anon>:9:10: 9:12 error: unary negation of unsigned integer [E0519]
Mar 28 00:30:56 -playbot/#rust-beginners-	<anon>:9         (-5) as u32
Mar 28 00:30:56 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1VPvVRf
Mar 28 00:31:03 <panicbit>	kefin: Heh, i had the same idea ;)
Mar 28 00:31:18 <LambdaComplex>	panicbit: Good news: My code compiles! Bad news: it doesn't work
Mar 28 00:31:28 <kefin>	Why doesn't (-5) work?
Mar 28 00:31:32 <panicbit>	Saevitus: So 4294967291 would be the result of `0 - 5` if the compiler wouldn't catch that...
Mar 28 00:31:34 <kefin>	playbot: (-5i32) as u32
Mar 28 00:31:35 -playbot/#rust-beginners-	4294967291
Mar 28 00:31:40 <kefin>	Ah
Mar 28 00:31:51 <Saevitus>	ah, so I'd need to use i32 for subtracting, and dividing
Mar 28 00:31:55 <panicbit>	kefin: The compiler probably infers -5 to be u32
Mar 28 00:32:02 <panicbit>	And thus dosn't allow negation of it
Mar 28 00:32:07 <kefin>	panicbit: wouldn't that cause an underflow error?
Mar 28 00:32:17 <kefin>	playbot: 0u32 - 5u32
Mar 28 00:32:18 -playbot/#rust-beginners-	<anon>:9:9: 9:20 warning: attempted to sub with overflow
Mar 28 00:32:18 -playbot/#rust-beginners-	<anon>:9         0u32 - 5u32
Mar 28 00:32:18 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1REve7f
Mar 28 00:32:37 <panicbit>	Saevitus: For dividing you'll probably need float numbers :)
Mar 28 00:33:00 <Saevitus>	f32 then!
Mar 28 00:33:25 <panicbit>	Or even f64
Mar 28 00:33:45 <Saevitus>	with that logic, I could use u64, and i64 too?
Mar 28 00:33:49 <Saevitus>	what's the difference?
Mar 28 00:33:53 <kefin>	Bit size
Mar 28 00:34:04 <kefin>	Bit count is more accurate
Mar 28 00:34:13 <panicbit>	kefin: Not on release builds http://is.gd/02B8us
Mar 28 00:34:22 <panicbit>	kefin: Also you need to bind one of the literals
Mar 28 00:34:35 <panicbit>	So that the compiler can't be clever about it ;)
Mar 28 00:34:54 <kefin>	panicbit: what about the overflow_add methods then?
Mar 28 00:35:05 <panicbit>	kefin: They would do the job I guess
Mar 28 00:36:49 <Saevitus>	so what would be better, setting up the match func to bring unsigned and signed into the equation, or set up an if statement?
Mar 28 00:37:34 <panicbit>	Probably just use f64 for now
Mar 28 00:37:43 <panicbit>	And try to get that to work
Mar 28 00:39:27 <Saevitus>	Ah, alright. Got it working!
Mar 28 00:41:58 <Saevitus>	in theory though, I could set up an if statement to use different int types, right?
Mar 28 00:42:23 *	klue has quit (Ping timeout: 121 seconds)
Mar 28 00:42:41 <Saevitus>	not that it'd be very efficient, I just want to know if I was right thinking that.
Mar 28 00:42:48 <panicbit>	Saevitus: Yeah you could
Mar 28 00:43:06 <panicbit>	Saevitus: It would also mean you'd have different result types
Mar 28 00:43:28 <Saevitus>	ah, right
Mar 28 00:43:34 *	qg_ has quit (Connection closed)
Mar 28 00:43:42 <panicbit>	but in the end you'll also want to accept float numbers
Mar 28 00:43:54 <Saevitus>	which, I could use from the start
Mar 28 00:43:55 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 28 00:43:58 <panicbit>	Because you want to be able to do `1.1 + 4.3`
Mar 28 00:44:01 <Saevitus>	and save myself the trouble and extra code
Mar 28 00:44:04 <panicbit>	Yeah
Mar 28 00:44:24 *	brson (brson@moz-hrg.iuc.58.172.IP) has joined
Mar 28 00:44:30 <Saevitus>	next thing I've gotta work on is algebra ;)
Mar 28 00:44:45 <panicbit>	;)
Mar 28 00:45:53 *	Mechanical_Man (chatzilla@moz-aku.6nj.200.104.IP) has joined
Mar 28 00:45:58 <Saevitus>	integers can't store letters fullstop, right?
Mar 28 00:46:13 <panicbit>	not exactly
Mar 28 00:46:19 <panicbit>	integers can represent etters though
Mar 28 00:46:22 <panicbit>	e.g. 65 is A
Mar 28 00:46:24 <panicbit>	in ascii
Mar 28 00:46:32 <panicbit>	if I remember correctly 
Mar 28 00:46:41 <panicbit>	playbot: 65 as char
Mar 28 00:46:42 -playbot/#rust-beginners-	'A'
Mar 28 00:47:10 <panicbit>	playbot: 'Z' as u32
Mar 28 00:47:11 -playbot/#rust-beginners-	90
Mar 28 00:47:11 <Saevitus>	hmmm
Mar 28 00:47:32 <Saevitus>	okay, so each letter represents a number
Mar 28 00:47:33 <panicbit>	UTF8 complicates things though :)
Mar 28 00:47:44 <panicbit>	Saevitus: No, each letter is represented by a number
Mar 28 00:47:58 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 28 00:48:02 <panicbit>	It's a subtle difference :)
Mar 28 00:48:15 <Saevitus>	easy mistake ;)
Mar 28 00:48:22 <panicbit>	(Like the computer is not encoding numbers using characters :D)
Mar 28 00:48:44 <panicbit>	But eh, I'm being pedantic
Mar 28 00:49:12 <Saevitus>	man, I can't wait to get more fluent in this language and start developing guis and such
Mar 28 00:49:17 <Saevitus>	that's a thing, right?
Mar 28 00:49:23 <panicbit>	It is
Mar 28 00:49:37 *	kroltan (kroltan@moz-lvkaq8.brasiltelecom.net.br) has joined
Mar 28 00:49:38 *	stephanbuys has quit (Connection closed)
Mar 28 00:49:54 <panicbit>	Saevitus: Thogh it's not quite there yet
Mar 28 00:50:13 <panicbit>	But people are working on it :)
Mar 28 00:50:24 <panicbit>	We even have a native GUI toolkit written in Rust
Mar 28 00:50:27 <panicbit>	Which is awesome
Mar 28 00:50:35 <Saevitus>	oh that sounds fancy
Mar 28 00:51:24 <Saevitus>	It's not like I'd do anything special with the GUI, just a window, and basic calculator functionalities
Mar 28 00:53:25 *	Mechanical_Man_ (chatzilla@moz-s696b6.ed.shawcable.net) has joined
Mar 28 00:54:43 *	Mechanical_Man has quit (Ping timeout: 121 seconds)
Mar 28 00:54:49 *	Mechanical_Man_ is now known as Mechanical_Man
Mar 28 01:00:09 <panicbit>	Yeah, that's totally possible
Mar 28 01:00:15 <WindowsBunnies>	An integer cannot represent a letter
Mar 28 01:00:25 <WindowsBunnies>	it represents a codepoint or codeunit
Mar 28 01:00:43 <WindowsBunnies>	a "letter" is a vague term that could potentially mean a grapheme cluster
Mar 28 01:02:02 <Saevitus>	oh god
Mar 28 01:02:13 *	bjz_ has quit (Ping timeout: 121 seconds)
Mar 28 01:03:01 <panicbit>	Well, as I said, UTF8 complicates things :)
Mar 28 01:03:30 <WindowsBunnies>	panicbit: Not just utf-8, even for UTF-32, a single codeunit isn't necessarily a letter
Mar 28 01:03:42 <WindowsBunnies>	Especially since what a "letter" is depends on the language
Mar 28 01:03:43 <panicbit>	Details :P
Mar 28 01:03:47 <panicbit>	Yeah
Mar 28 01:03:58 *	bjz (bjz@moz-784.r87.56.45.IP) has joined
Mar 28 01:04:27 <panicbit>	Encodings are complicate⅛£
Mar 28 01:04:44 <panicbit>	;P
Mar 28 01:05:20 <Saevitus>	so, how would I go about messing with algebra then? I assume I'll need a new function or something. The one thing I'm confused about is for example, how would I handle 6a x 9a?
Mar 28 01:05:35 <panicbit>	Saevitus: I might have overengineered a little bit https://gist.github.com/anonymous/ba4ed2fa4be66ddaf275
Mar 28 01:06:47 <panicbit>	Saevitus: The first thing you need to do is write a lexer/parser ...
Mar 28 01:07:01 <LambdaComplex>	panicbit: So, I'm still stuck. As far as I can tell, I'm calling xproto::set_input_focus() correctly...but it's not working
Mar 28 01:07:27 <panicbit>	Saevitus: Which pasically means: you try to make sense of the atomic components of the /languag/ you ae trying to parse
Mar 28 01:08:22 <panicbit>	Saevitus: e.g. the term `6a x 9a` is a series of `Num(6), Var(a), Op(x), Num(9), Var(a)`
Mar 28 01:08:36 <panicbit>	if you have that you try to make sense of that soup
Mar 28 01:08:58 <Saevitus>	I see some useful error handing, and some cosmetic stuff, what benefits do I get from changing main to main_loop, and then running it from main?
Mar 28 01:08:59 <panicbit>	That's all rather complicated :)
Mar 28 01:09:36 <panicbit>	Saevitus: In this case that I can just make use of try! everywhere
Mar 28 01:10:00 <Saevitus>	I'm talking to my friend, who is a c++ coder, he said for me to "store them in a double or float", would that work the same over in rust?
Mar 28 01:10:11 <panicbit>	Saevitus: try! requires the function you use it in to return Result<T, U>, which the normal main does not
Mar 28 01:10:29 <panicbit>	Saevitus: Store what in a double or float?
Mar 28 01:10:40 *	m05c0w has quit (Client exited)
Mar 28 01:10:42 <Saevitus>	characters, such as a
Mar 28 01:10:50 <nicholasf>	how can I learn about IO? The rust book doesn't seem to have a section on it
Mar 28 01:10:52 <panicbit>	Why in heaven would you even think about that
Mar 28 01:11:02 <Saevitus>	I have no idea.
Mar 28 01:11:22 <panicbit>	Maybe you misunderstood each other...
Mar 28 01:11:29 <LambdaComplex>	nicholasf: What sort of IO?
Mar 28 01:11:34 <Saevitus>	https://doc.rust-lang.org/std/io/
Mar 28 01:11:38 <nicholasf>	thanks
Mar 28 01:11:58 <panicbit>	I'm getting really tired now =D
Mar 28 01:11:59 <nicholasf>	LambdaComplex: I want to work out how to represent an interface for talking to output streams
Mar 28 01:12:40 <niconii>	nicholasf: there's some info here https://doc.rust-lang.org/std/io/
Mar 28 01:12:49 <nicholasf>	terrific
Mar 28 01:12:56 <Saevitus>	already posted that ;)
Mar 28 01:13:00 *	nicholasf nods :)
Mar 28 01:13:06 *	panicbit gives nicholasf a cookie anyway
Mar 28 01:13:17 <nicholasf>	nomnomnom
Mar 28 01:14:05 <panicbit>	(Let's hope it wasn't a tracking cookie ;D )
Mar 28 01:14:12 <Saevitus>	it sure was! ;)
Mar 28 01:15:07 <panicbit>	heh, I'll probably explain issues with browser cookies to non-tech users using that metapher now :P
Mar 28 01:15:33 <panicbit>	browser cookies are like free cookies given out by companies that have a tracking device and a microphone embedded :D
Mar 28 01:16:06 <Saevitus>	hey, not all cookies are malicious.
Mar 28 01:16:12 <panicbit>	I know
Mar 28 01:16:43 <panicbit>	It's about raising awareness though :P
Mar 28 01:16:53 <Saevitus>	yeah haha
Mar 28 01:17:11 <panicbit>	People should be concious enough to say no to the cookie monsters
Mar 28 01:17:19 <panicbit>	^_^
Mar 28 01:17:43 *	LambdaComplex is gonna assume panicbit forgot about him >.>
Mar 28 01:17:49 <panicbit>	Relevant: http://picchore.com/wp-content/uploads/2011/01/delete-cookies-comic.jpg
Mar 28 01:18:15 <panicbit>	LambdaComplex: I probably did
Mar 28 01:18:23 <panicbit>	LambdaComplex: What was the problem again?
Mar 28 01:18:32 *	LambdaComplex is just gonna hit the up arrow a few times
Mar 28 01:18:37 <LambdaComplex>	panicbit: So, I'm still stuck. As far as I can tell, I'm calling xproto::set_input_focus() correctly...but it's not working
Mar 28 01:18:52 <panicbit>	LambdaComplex: The error is?
Mar 28 01:19:15 <LambdaComplex>	panicbit: There isn't one. It compiles and runs. It just doesn't do anything
Mar 28 01:19:24 <panicbit>	Well, that's bad :)
Mar 28 01:19:30 <Saevitus>	I might have to study a bit more, before I try bothering with even a basic gui window with some text, I assume there's a hell of a lot of stuff to it that I don't understand.
Mar 28 01:19:35 <panicbit>	I'll take a look
Mar 28 01:20:19 <panicbit>	Saevitus: Yeah, diving into a gui library could be a littl ebit overwhelming
Mar 28 01:20:30 <panicbit>	Saevitus: But if you like the challenge, do it :)
Mar 28 01:21:23 <Saevitus>	I love a challenge! Trying to dive into something you don't understand is a good way to learn.
Mar 28 01:22:12 <panicbit>	Saevitus: I hope I didn't take too much away from the program you tried to implement :/
Mar 28 01:22:34 <panicbit>	But it should give you a good taste of what kind of mad stuff can be done :)
Mar 28 01:22:35 <Saevitus>	not at all, you helped me learn a bunch of concepts!
Mar 28 01:23:29 <panicbit>	LambdaComplex: Alright, so let's go throug it
Mar 28 01:23:56 <panicbit>	LambdaComplex: c: &Conection and focus: Window should be obvious
Mar 28 01:24:01 <LambdaComplex>	panicbit: Yep
Mar 28 01:24:16 <panicbit>	LambdaComplex: Obviously you shouldn't pass the last focused window into there...
Mar 28 01:24:22 <panicbit>	Otherwise nothing would happen
Mar 28 01:24:37 <panicbit>	It's obvious, but I wanted to point it out, just in case derps happened :)
Mar 28 01:24:53 <panicbit>	"Timestamp to avoid race conditions when running X over the network."
Mar 28 01:25:00 <panicbit>	That is killing me
Mar 28 01:25:20 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 28 01:25:51 <panicbit>	LambdaComplex: Aynway, as the doc suggest you can just pass XCB_CURRENT_TIME in there
Mar 28 01:26:07 <LambdaComplex>	panicbit: That is, xproto::TIME_CURRENT_TIME?
Mar 28 01:26:25 <panicbit>	No...
Mar 28 01:26:32 <panicbit>	"xcb::ffi::base::XCB_CURRENT_TIME"
Mar 28 01:26:36 <panicbit>	although, 'sec
Mar 28 01:26:58 <panicbit>	Technically yes
Mar 28 01:27:03 <LambdaComplex>	Make up my mind :P
Mar 28 01:27:13 <panicbit>	LambdaComplex: Well, they are the same constants
Mar 28 01:27:23 <panicbit>	LambdaComplex: But use xcb::ffi::base::XCB_CURRENT_TIME
Mar 28 01:27:34 <panicbit>	LambdaComplex: Because one or the other value might change in the future
Mar 28 01:27:41 <panicbit>	So you want to be using the correct one
Mar 28 01:28:28 <Saevitus>	when you have time, you were talking about a gui toolkit
Mar 28 01:28:45 <LambdaComplex>	panicbit: Alright, what else?
Mar 28 01:28:47 <panicbit>	Saevitus: e.g. gtk
Mar 28 01:28:51 <panicbit>	Saevitus: or conrod
Mar 28 01:28:59 <panicbit>	!crate gtk
Mar 28 01:28:59 <rustbot>	gtk (0.0.7) - Rust bindings for the GTK+ 3 library -> https://crates.io/crates/gtk
Mar 28 01:29:03 <panicbit>	!crate conrod
Mar 28 01:29:03 <rustbot>	conrod (0.32.0) - An easy-to-use, immediate-mode, 2D GUI library -> https://crates.io/crates/conrod
Mar 28 01:29:38 <panicbit>	LambdaComplex: I'm investigating revert_to
Mar 28 01:29:54 <panicbit>	LambdaComplex: The doc irritates me a bit "Specifies what happens when the focus window becomes unviewable (if focus is neither XCB_NONE nor XCB_POINTER_ROOT)."
Mar 28 01:29:57 <Saevitus>	sweet, thankyou.
Mar 28 01:30:37 <LambdaComplex>	panicbit: That's straight out of the XCB docs
Mar 28 01:30:46 <panicbit>	LambdaComplex: I have no idea what to pass in though
Mar 28 01:31:07 <LambdaComplex>	panicbit: https://github.com/wmutils/core/blob/master/wtf.c#L35-L36
Mar 28 01:31:40 <panicbit>	ah
Mar 28 01:32:09 <panicbit>	Oh makes sense
Mar 28 01:32:19 <LambdaComplex>	Do enlighten me
Mar 28 01:32:56 <panicbit>	LambdaComplex: If I understand correctly it specifies what should happen when e.g. the window get's closed
Mar 28 01:33:39 <panicbit>	options are XCB_INPUT_FOCUS_{NONE,PARENT,POINTER_ROOT,FOLLOW_KEYBOARD}
Mar 28 01:33:51 <panicbit>	I don't understand all of them but PARENT makes some sense
Mar 28 01:33:54 <panicbit>	And NONE
Mar 28 01:33:59 *	Mechanical_Man has quit (Quit: ChatZilla 0.9.92 [Firefox 45.0.1/20160315153207])
Mar 28 01:34:19 <panicbit>	LambdaComplex: What did you try to pass in?
Mar 28 01:34:51 *	benhinchley (benhinchley@moz-df159d.bigpond.net.au) has joined
Mar 28 01:35:08 <LambdaComplex>	panicbit: For which value?
Mar 28 01:35:31 <panicbit>	Saevitus: The gtk crate was recently revamped, so expect some possibly confusing or outdated readmes/docs
Mar 28 01:35:37 <panicbit>	LambdaComplex: revert_to
Mar 28 01:35:59 <LambdaComplex>	panicbit: xproto::INPUT_FOCUS_POINTER_ROOT and ffi::xproto::XCB_INPUT_FOCUS_POINTER_ROOT
Mar 28 01:36:09 <LambdaComplex>	Neither one makes it work
Mar 28 01:36:15 <panicbit>	ok
Mar 28 01:38:14 <panicbit>	LambdaComplex: I have no idea then :/
Mar 28 01:41:17 <LambdaComplex>	panicbit: eh, lemme try it completely with ffi stuff
Mar 28 01:42:01 <panicbit>	LambdaComplex: I'm going to get some sleep now
Mar 28 01:42:14 <panicbit>	I really need to stop this #rust-beginners addiction =D
Mar 28 01:42:33 <panicbit>	Good night everyone
Mar 28 01:42:50 *	Fishrock123 has quit (Quit: Leaving...)
Mar 28 01:43:32 <LambdaComplex>	Still not working :(
Mar 28 01:43:39 <LambdaComplex>	panicbit: Goodnight! Thanks for the help
Mar 28 01:44:25 <panicbit>	LambdaComplex: Maybe tomorrow we'll make some more progress :)t
Mar 28 01:45:15 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 28 01:52:08 *	benhinchley has quit (Quit: WeeChat 1.4)
Mar 28 01:52:50 *	benhinchley (benhinchley@moz-df159d.bigpond.net.au) has joined
Mar 28 01:58:38 *	bjz_ (bjz@moz-tgc.as2.222.104.IP) has joined
Mar 28 01:59:01 *	schnozzle has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 02:00:00 *	woboats has quit (Client exited)
Mar 28 02:00:12 *	bjz has quit (Ping timeout: 121 seconds)
Mar 28 02:01:17 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 28 02:02:26 *	ncarrillo (ncarrillo@moz-29rklo.sm.ptd.net) has joined
Mar 28 02:04:59 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 28 02:05:23 *	Aedylthryd (Thingus@moz-obq.d8m.98.75.IP) has joined
Mar 28 02:06:35 *	ncarrillo has quit (Ping timeout: 121 seconds)
Mar 28 02:09:03 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 28 02:15:18 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 28 02:17:28 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 28 02:17:49 *	benhinchley has quit (Quit: WeeChat 1.4)
Mar 28 02:18:48 *	jas0 (jason@moz-ah9t0b.dyn.optonline.net) has joined
Mar 28 02:19:28 *	}ls{ has quit (Quit: User terminated by real life interrupt)
Mar 28 02:19:37 *	nairware has quit (Quit: Leaving.)
Mar 28 02:21:15 *	Saevitus has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 02:21:31 *	llandersll has quit (Ping timeout: 121 seconds)
Mar 28 02:24:38 *	elementalest has quit (Ping timeout: 121 seconds)
Mar 28 02:24:49 *	elementalest (elementales@moz-fp6smh.internode.on.net) has joined
Mar 28 02:25:02 *	Saevitus (Mibbit@moz-cale3e.bigpond.net.au) has joined
Mar 28 02:25:06 *	brson has quit (Quit: leaving)
Mar 28 02:30:28 *	mib_geumam (Mibbit@moz-u6jv85.co.comcast.net) has joined
Mar 28 02:30:47 *	mib_geumam has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 28 02:31:12 *	bitshifter has quit (Quit: Leaving)
Mar 28 02:36:07 *	typelist has quit (Quit: Quit)
Mar 28 02:36:12 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 28 02:41:25 *	kroltan has quit (Connection closed)
**** ENDING LOGGING AT Mon Mar 28 02:45:37 2016

**** BEGIN LOGGING AT Mon Mar 28 23:51:18 2016

Mar 28 23:51:18 *	Now talking on #rust-beginners
Mar 28 23:51:18 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 28 23:51:18 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 28 23:51:45 *	lberezy has quit (Connection closed)
Mar 28 23:51:48 *	lberezy (lberezy@moz-qko8a8.oot8.dpcm.d501.2406.IP) has joined
Mar 28 23:53:59 *	ljc (who@moz-svd.up4.174.101.IP) has joined
Mar 28 23:54:47 <LambdaComplex>	panicbit: Hm, should I be using unwrap() or unwrap_or()? 
Mar 28 23:55:08 <panicbit>	LambdaComplex: Can you provide a fallback value?
Mar 28 23:55:22 <LambdaComplex>	panicbit: The value is a Cookie so....not really? No?
Mar 28 23:55:31 <panicbit>	LambdaComplex: No, the value is a reply :P
Mar 28 23:55:40 <panicbit>	A `GetWindowAttributesReply`
Mar 28 23:55:52 <LambdaComplex>	My bad >.>
Mar 28 23:56:08 <panicbit>	In that case .unwrap_or is probably out of the window
Mar 28 23:56:12 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 28 23:56:29 <carllerche>	LambdaComplex: My rule of thumb is that `unwrap` should only be used for "getting code to work" and not production code
Mar 28 23:56:49 <LambdaComplex>	panicbit: Wanna see what I have so far?
Mar 28 23:56:52 <panicbit>	Except you want to calculate some value, then you could .map to calculate that value and then .unwrap_or to provide a default value
Mar 28 23:56:55 <panicbit>	LambdaComplex: sure
Mar 28 23:57:18 <carllerche>	`unwrap_or` is great to use in prod code
Mar 28 23:57:23 <panicbit>	carllerche: These are little tools which do just one single thing
Mar 28 23:57:28 <panicbit>	carllerche: An error is usually fatal
Mar 28 23:57:43 <LambdaComplex>	panicbit: http://sprunge.us/iJMH?rust
Mar 28 23:57:48 <panicbit>	carllerche: So .unwrap on a Result is probably not too bad
Mar 28 23:58:02 <carllerche>	if I'm going to "unwrap", I tend to do .ok().expect("better error message")... if it's just a simple tool where you don't care too much about error messages then sure
Mar 28 23:58:08 <panicbit>	(but for Option I'd recommend .expect)
Mar 28 23:58:17 <panicbit>	yeah
Mar 28 23:58:18 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 28 23:58:25 <carllerche>	I personally like searching through my code for stray `unwrap`s before "shipping"
Mar 28 23:58:30 <carllerche>	anyway, just thought I'd share my thoughts :P
Mar 28 23:58:32 <carllerche>	carry on
Mar 28 23:58:46 <panicbit>	You can call .expect on Results directly by now :)
Mar 28 23:58:54 *	klue has quit (Ping timeout: 121 seconds)
Mar 28 23:59:31 <carllerche>	i'm out of date
Mar 28 23:59:35 <LambdaComplex>	panicbit: So whatcha think?
Mar 29 00:00:24 *	Damaki has quit (Ping timeout: 121 seconds)
Mar 29 00:00:46 *	guacamole (Mibbit@moz-et8.pio.43.175.IP) has joined
Mar 29 00:01:45 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 00:01:56 *	guacamole has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 00:02:19 <panicbit>	LambdaComplex: Use .expect("useful message") on the Result
Mar 29 00:02:22 *	desophos has quit (Ping timeout: 121 seconds)
Mar 29 00:02:36 <panicbit>	LambdaComplex: Because the error is a GenericError, which is a xcb_general_error_t
Mar 29 00:02:51 <panicbit>	LambdaComplex: And the Debug impl doesn't have any useful info
Mar 29 00:03:03 <panicbit>	it's just a bunch of ints which are useless to the user
Mar 29 00:03:05 <panicbit>	https://gist.github.com/anonymous/ef124a2a64ce50a02661
Mar 29 00:03:34 <panicbit>	(Basically what you sometimes see when when an X app derps)
Mar 29 00:03:34 *	Peach (Peach@moz-q01.nag.102.75.IP) has joined
Mar 29 00:03:54 <panicbit>	I recognize the major/minor code things :P
Mar 29 00:04:44 <LambdaComplex>	panicbit: So change the .unwrap() to .unwrap().expect() ?
Mar 29 00:05:06 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 29 00:05:19 <panicbit>	LambdaComplex: No, just use .expect(...) instead of .unwrap()
Mar 29 00:05:42 <panicbit>	LambdaComplex: .expect does the same as .unwrap but let's you pass in a message to be shown instead
Mar 29 00:06:42 <LambdaComplex>	panicbit: And when will that message be shown?
Mar 29 00:06:45 <panicbit>	LambdaComplex: Yeah
Mar 29 00:07:20 <LambdaComplex>	That wasn't a yes or no question...
Mar 29 00:08:17 <panicbit>	LambdaComplex: http://is.gd/GOD2XY
Mar 29 00:08:22 <panicbit>	Oh sorry
Mar 29 00:08:29 <panicbit>	LambdaComplex: it will be shown if the Result is an Err
Mar 29 00:08:45 <panicbit>	(Like in my example)
Mar 29 00:09:09 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 29 00:09:41 <panicbit>	"ugly error message" depends on the Debug implementation of the Error
Mar 29 00:10:15 <panicbit>	In your Cookie case, that struct that I previously posted will be printed
Mar 29 00:10:54 <panicbit>	but it will be prefixed with your "pretty error message"
Mar 29 00:11:15 *	ljc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 00:11:43 <LambdaComplex>	panicbit: Something like this? http://sprunge.us/eBMF?rust
Mar 29 00:12:01 <panicbit>	Yup, that's perfect
Mar 29 00:12:22 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 29 00:12:26 *	ljc (who@moz-svd.up4.174.101.IP) has joined
Mar 29 00:13:30 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 00:14:22 <panicbit>	LambdaComplex: Btw, you may want to use `.map_state()` instead of that unsafe filth :P
Mar 29 00:15:16 <panicbit>	Just `let map_state = win_attrib_cookie_reply_result.expect("Failed to get window status").map_state();` is fine
Mar 29 00:16:16 <panicbit>	LambdaComplex: Personally I'd move the .expect() to the end of the line with the `.get_reply()`
Mar 29 00:16:28 <panicbit>	and rename the variable accordingly
Mar 29 00:17:52 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 29 00:17:59 <panicbit>	But that depends a bit on your personal taste
Mar 29 00:18:12 <LambdaComplex>	Oh, there's a map_state(). I totally knew that. I was just testing you >.>
Mar 29 00:19:34 <LambdaComplex>	panicbit: Are you talking about getting rid of one of the vars?
Mar 29 00:19:54 <panicbit>	LambdaComplex: If you see no other way than using unsafe in a higher level crate then you are either Doing It Wrong™ or the crate needs to be improved
Mar 29 00:20:07 <panicbit>	Or you are doing something special
Mar 29 00:20:12 <panicbit>	LambdaComplex: No
Mar 29 00:20:35 <panicbit>	LambdaComplex: I'm just talking about rebalancing the chains of functions a bit
Mar 29 00:20:42 <panicbit>	But that's not so important right now
Mar 29 00:21:26 <LambdaComplex>	let map_state = win_attrib_cookie_reply_result.expect("Failed to get window status").map_state();
Mar 29 00:21:28 <LambdaComplex>	That good?
Mar 29 00:22:43 <panicbit>	Isn't that what I posted before proposing the "rebalancing"? =D
Mar 29 00:22:52 <panicbit>	But yeah, that's good
Mar 29 00:23:32 <panicbit>	I personally like to have `.expect()` at the end of the line to increase the visibility of it
Mar 29 00:23:41 <LambdaComplex>	DETAILS
Mar 29 00:23:45 <LambdaComplex>	I'll think about it :P
Mar 29 00:23:46 <panicbit>	Exactly
Mar 29 00:23:53 <panicbit>	It's not important right now
Mar 29 00:24:43 <panicbit>	You'll probably start to do and think about these kind of things once you get more comfortable with them
Mar 29 00:30:32 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 00:34:01 *	ljc has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 00:40:43 *	cbrewster has quit (Connection closed)
Mar 29 00:40:50 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 00:44:53 *	fl0w has quit (Ping timeout: 121 seconds)
Mar 29 00:58:43 *	qg_ has quit (Connection closed)
Mar 29 00:59:04 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 01:02:55 <LambdaComplex>	How do I iterate over a Vector but skip the first n indexes?
Mar 29 01:03:04 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 29 01:03:08 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 29 01:05:31 *	LambdaComplex has quit (Quit: WeeChat 1.4)
Mar 29 01:07:43 <curtism>	Dammit
Mar 29 01:07:51 <curtism>	vec.iter().skip(n)
Mar 29 01:08:57 <mbrubeck>	`vec[n..].iter()` might be faster (at least in non-optimized builds... LLVM can probably do something smart with optimizations)
Mar 29 01:09:59 *	stephanbuys1 has quit (Quit: Leaving.)
Mar 29 01:10:18 *	shmoo (Mibbit@moz-5a0msf.ca.comcast.net) has joined
Mar 29 01:14:08 <shmoo>	noob here.  i have a struct that doesn't outlive its fields, like Blah<'a> {  pub stuff: &'a InnerType }.  now i want to have another struct which has a Blah in it.  pub struct Other { pub blah: Blah }.  why must i declare a lifetime? 
Mar 29 01:15:04 *	woboats has quit (Client exited)
Mar 29 01:15:23 <durka42>	shmoo: because now Other transitively contains references which it must outlive
Mar 29 01:15:53 <shmoo>	is that so?  what if i want to do things like other.blah = blah2
Mar 29 01:16:34 <durka42>	you should be able to do that
Mar 29 01:18:13 <durka42>	annotating it with <'a> means "references of lifetime 'a can be reached through this struct" so if that's true for Blah, it's also true for Other
Mar 29 01:19:22 <shmoo>	i see, i'll need to think about it a bit
Mar 29 01:19:40 *	anowell (uid81535@moz-64klnd.tooting.irccloud.com) has joined
Mar 29 01:19:55 <shmoo>	so am i wrong to interpret  Blah<'a> {  pub stuff: &'a InnerType } as, stuff must live at least as long as a blah containing it, i.e. blah is not allowed to move stuff out?
Mar 29 01:20:22 <shmoo>	i regret my choice of dummy type names
Mar 29 01:20:31 <niconii>	shmoo: you can even think of &'a InnerType as being like Ref<'a, InnerType>; just like the 'a carries from &'a InnerType to Blah<'a>, it carries from Blah<'a> to Other<'a>
Mar 29 01:21:16 <niconii>	it's just not as visually obvious because of the syntax used for reference types
Mar 29 01:22:31 <shmoo>	i'm not familiar with Ref, but i'll take a look, thanks guys!
Mar 29 01:22:33 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 01:22:46 <niconii>	shmoo: Ref isn't a real thing, i was just using it as an example
Mar 29 01:23:15 <niconii>	shmoo: i was saying that if &'a T had syntax more like other rust types, it would be written something like Ref<'a, T>
Mar 29 01:23:41 <shmoo>	oh i see what you're saying
Mar 29 01:25:08 *	geemili (geemili@moz-7n7.boh.50.50.IP) has joined
Mar 29 01:25:25 <niconii>	to put it another way, if you had `struct Foo<T> { x: T }`, and wanted to put that in a Bar without specifying what T is, you'd need `struct Bar<T> { foo: Foo<T> }`
Mar 29 01:25:47 <niconii>	it works the same way for lifetimes; it's just that the only *specific* lifetime you can actually give is 'static
Mar 29 01:26:50 <niconii>	you could write `struct Other { blah: Blah<'static> }`, and not have to have the lifetime parameter on Other
Mar 29 01:27:00 <niconii>	but if you want a lifetime other than 'static, you'd need to
Mar 29 01:28:43 <shmoo>	ah
Mar 29 01:29:04 <shmoo>	that helps
Mar 29 01:29:29 <shmoo>	is there somewhere i can read that explains this in detail?
Mar 29 01:30:26 <shmoo>	i'd read https://doc.rust-lang.org/book/lifetimes.html but i guess i didn't fully understand what the syntax meant still
Mar 29 01:32:05 <niconii>	mmm, i'm not sure if there's a resource that really makes it clear that lifetime parameters are just like generic type parameters
Mar 29 01:33:35 <shmoo>	so let's say i have: struct Foo<'a> { x: &'a i32 }
Mar 29 01:34:12 <shmoo>	the book says this means a reference to Foo can't outlive a reference to the x it contains
Mar 29 01:34:21 <durka42>	that's true
Mar 29 01:34:46 <shmoo>	however, could i still do let foo = Foo::new(&4); foo.x = &5
Mar 29 01:34:49 <shmoo>	?
Mar 29 01:35:16 <durka42>	playbot: struct Foo<'a>(&'a i32);     let mut foo = Foo(&4); foo.0 = &5;
Mar 29 01:35:16 -playbot/#rust-beginners-	<anon>:9:57: 9:58 error: borrowed value does not live long enough
Mar 29 01:35:16 -playbot/#rust-beginners-	<anon>:9         struct Foo<'a>(&'a i32);     let mut foo = Foo(&4); foo.0 = &5;
Mar 29 01:35:16 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1TfCXOy
Mar 29 01:35:37 <durka42>	apparently not
Mar 29 01:35:53 <niconii>	playbot: struct Foo<'a>(&'a i32);     let a = 4; let b = 5; let mut foo = Foo(&a); foo.0 = &b;
Mar 29 01:35:54 -playbot/#rust-beginners-	()
Mar 29 01:36:11 <durka42>	something weird with literals
Mar 29 01:36:14 <durka42>	but you can replace the field fine
Mar 29 01:37:06 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 29 01:37:14 <shmoo>	playbot: struct Foo<'a>(&'a i32);     let a = 4; let mut foo = Foo(&a); { let b = 5; foo.0 = &b; }
Mar 29 01:37:15 -playbot/#rust-beginners-	<anon>:9:94: 9:95 error: `b` does not live long enough
Mar 29 01:37:15 -playbot/#rust-beginners-	<anon>:9         struct Foo<'a>(&'a i32);     let a = 4; let mut foo = Foo(&a); { let b = 5; foo.0 = &b; }
Mar 29 01:37:15 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/21QpmNY
Mar 29 01:37:19 <niconii>	playbot: struct Foo<'a>(&'a i32);     let a = 4; let mut foo = Foo(&a); let b = 5; foo.0 = &b;
Mar 29 01:37:20 -playbot/#rust-beginners-	<anon>:9:92: 9:93 error: `b` does not live long enough
Mar 29 01:37:20 -playbot/#rust-beginners-	<anon>:9         struct Foo<'a>(&'a i32);     let a = 4; let mut foo = Foo(&a); let b = 5; foo.0 = &b;
Mar 29 01:37:20 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1TfDaBi
Mar 29 01:37:25 <niconii>	b has to be created before foo
Mar 29 01:37:32 <shmoo>	got it
Mar 29 01:37:37 <shmoo>	so i can't in fact do what i want
Mar 29 01:37:41 <shmoo>	interesting
Mar 29 01:37:44 <durka42>	what do you want to do?
Mar 29 01:38:34 <shmoo>	so i'm making a game
Mar 29 01:38:41 <shmoo>	in which there's a board state class
Mar 29 01:38:46 <shmoo>	struct*
Mar 29 01:38:56 *	ZX21T32K (ZX21T32K@moz-qir4sg.elisa-laajakaista.fi) has joined
Mar 29 01:39:05 <shmoo>	then there's a struct called GameView, which is full of references, for efficiency reasons
Mar 29 01:39:41 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 01:40:01 <shmoo>	however, i want to have a struct like Strategy { last_view: GameView }
Mar 29 01:40:07 <shmoo>	which stores the view that it saw in the last round of the game
Mar 29 01:40:28 <shmoo>	the strategy is presented from the simulator with GameView at each round, and GameView implements clone, so it just clones it
Mar 29 01:40:42 <shmoo>	(however, for other strategies, they usually only borrow it and leave it alone, for efficiency)
Mar 29 01:40:44 <shmoo>	i dunno if that made sense
Mar 29 01:40:58 <durka42>	you can do that if the GameView is going to outlive the Strategy
Mar 29 01:41:05 <durka42>	otherwise yeah you'll need to clone everything
Mar 29 01:41:26 <shmoo>	each game view is short lived
Mar 29 01:41:37 <shmoo>	however, strategy never moves a game view, even when owned
Mar 29 01:41:43 <niconii>	what about the things those GameViews point to
Mar 29 01:41:43 <shmoo>	if that makes sense
Mar 29 01:41:43 <durka42>	so, rust is saving you from having a strategy full of dangling pointers and crashing the program :)
Mar 29 01:41:54 <niconii>	how short-lived are those
Mar 29 01:42:26 <shmoo>	they live at least as long as the GameView
Mar 29 01:42:53 <shmoo>	game view looks something like this
Mar 29 01:43:25 <shmoo>	GameView<'a> { &'a public_info, &'a my_info }
Mar 29 01:44:14 <durka42>	so do those info thingies live as long as the Strategy?
Mar 29 01:44:23 <shmoo>	nope
Mar 29 01:44:29 <durka42>	then you can't store pointers to them in a Strategy :)
Mar 29 01:44:39 <durka42>	do you see why?
Mar 29 01:45:22 <shmoo>	right, i see
Mar 29 01:45:27 <tyoc213>	I no
Mar 29 01:46:35 *	Xal has quit (Quit: bye)
Mar 29 01:46:44 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 29 01:46:58 <shmoo>	but conceptually it would be okay if i make sure they live as long as the view, and ensure the strategy always has some view?
Mar 29 01:47:46 <durka42>	hmm yeah but the borrow checker is not able to track that
Mar 29 01:47:55 <durka42>	it has to know that whatever is in the struct at all times satisfies the lifetime bound
Mar 29 01:48:16 <durka42>	it doesn't have a concept of "I promise to move this out before the lifetime is up"
Mar 29 01:48:53 <shmoo>	yeah, makes sense.  that would be complicated
Mar 29 01:49:27 <shmoo>	but i think it may be what i want?  i would be happy with a workaround though
Mar 29 01:49:51 <shmoo>	i could just have GameView be able to replace itself from another one
Mar 29 01:56:20 *	starblue (juergen@moz-qgeleq.web.vodafone.de) has joined
Mar 29 01:59:07 <shmoo>	ah but the borrow checker was indeed preventing me from doing something stupid though.  because the clone derived for GameView only cloned the references
Mar 29 01:59:31 *	alicemaz (alice@moz-4nq892.PUBLIC.monkeybrains.net) has joined
Mar 29 01:59:33 <shmoo>	thanks again, durka42 and niconii
Mar 29 02:00:33 <niconii>	sure thing
Mar 29 02:01:03 *	musiKk (foobar@moz-55iqrf.pools.vodafone-ip.de) has joined
Mar 29 02:01:16 *	cbrewster has quit (Quit: )
Mar 29 02:05:58 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 29 02:06:23 *	starblue has quit (Ping timeout: 121 seconds)
Mar 29 02:10:01 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 29 02:19:48 *	skade (skade@moz-oocafb.web.vodafone.de) has joined
Mar 29 02:23:02 *	qg_ has quit (Connection closed)
Mar 29 02:23:17 *	free-store has quit (Quit: leaving)
Mar 29 02:23:26 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 02:24:07 *	free-store (cerulean@moz-79lufs.stud.ntnu.no) has joined
Mar 29 02:24:56 *	free-store has quit (Quit: leaving)
Mar 29 02:25:05 *	free-store (cerulean@moz-79lufs.stud.ntnu.no) has joined
Mar 29 02:25:34 *	stephanbuys (Adium@moz-iqes92.telkomadsl.co.za) has joined
Mar 29 02:25:42 *	free-store has quit (Quit: leaving)
Mar 29 02:25:45 *	free-store (cerulean@moz-79lufs.stud.ntnu.no) has joined
Mar 29 02:27:29 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 29 02:27:56 *	stephanbuys has quit (Quit: Leaving.)
Mar 29 02:36:13 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 29 02:37:00 *	skade has quit (Ping timeout: 121 seconds)
Mar 29 02:39:38 *	skade (skade@moz-j855cp.web.vodafone.de) has joined
Mar 29 02:40:11 *	fbegou (fbegou@moz-841.mmv.237.109.IP) has joined
Mar 29 02:43:11 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 29 02:45:54 *	cpup has quit (Ping timeout: 121 seconds)
Mar 29 02:46:24 *	martianwars (uid124042@moz-1flne0.brockwell.irccloud.com) has joined
Mar 29 02:46:25 *	skade has quit (Ping timeout: 121 seconds)
Mar 29 02:47:13 *	llandersll has quit (Ping timeout: 121 seconds)
Mar 29 02:47:44 *	skade (skade@moz-rdo8um.web.vodafone.de) has joined
Mar 29 02:47:59 *	cpup (cpup@moz-r39.b21.218.32.IP) has joined
Mar 29 02:48:58 *	nicholasf has quit (Ping timeout: 121 seconds)
Mar 29 02:56:05 *	Itkovian (Itkovian@moz-miq.coq.189.188.IP) has joined
Mar 29 02:58:04 *	shmoo has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 03:02:26 *	Adals (Adals@moz-bfm.isk.186.95.IP) has joined
**** ENDING LOGGING AT Tue Mar 29 03:02:53 2016

**** BEGIN LOGGING AT Tue Mar 29 15:45:28 2016

Mar 29 15:45:28 *	Now talking on #rust-beginners
Mar 29 15:45:28 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 29 15:45:28 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 29 15:45:31 <mbrubeck>	riverm: See my second example
Mar 29 15:45:57 <mbrubeck>	http://is.gd/8leDmQ should work
Mar 29 15:46:17 <mbrubeck>	you can also write this as http://is.gd/qINp9A
Mar 29 15:49:38 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 29 15:50:28 *	betasve has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 15:51:05 *	Guest92 is now known as Mouser
Mar 29 15:51:28 <riverm>	mbrubeck: Works, thank you so much. 
Mar 29 15:52:13 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 29 15:53:43 *	qg_ has quit (Connection closed)
Mar 29 15:55:18 *	woboats has quit (Client exited)
Mar 29 15:56:35 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 29 15:56:42 *	Damaki (damaki@moz-biuqal.cable.rogers.com) has joined
Mar 29 15:56:56 <jfhumann>	I got a question, too: What exactly does the "self" keyword in the first line of the following two lines from a mod.rs so (and why does only one of them include the keyword?)
Mar 29 15:57:40 <jfhumann>	use serde::de::{self, Deserialize, Deserializer};
Mar 29 15:57:47 <jfhumann>	use serde::ser::{Serialize, Serializer};
Mar 29 16:00:31 <steveklabnik>	use serde::de::self; is the same as use serde::de;
Mar 29 16:00:52 <steveklabnik>	it's a way to do 'use serde::de; use serde::de::{Deserialize, Deserializer}; in one line
Mar 29 16:01:09 <steveklabnik>	in the second line, they don't want serde::ser to be in scope directly, just some sub-types of it
Mar 29 16:01:58 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 16:03:43 *	riverm has quit (Client exited)
Mar 29 16:05:08 *	ph88 (ph88@moz-tna.lh9.205.89.IP) has joined
Mar 29 16:06:14 *	woboats has quit (Ping timeout: 121 seconds)
Mar 29 16:06:19 *	MoSal (None@moz-r3e.ed3.200.149.IP) has joined
Mar 29 16:07:00 <jfhumann>	Thank you
Mar 29 16:08:07 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 16:10:01 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 16:10:15 <MoSal>	Is there a way to use a variable width in format_spec ?
Mar 29 16:10:29 <MoSal>	format!("{->10}", "bla") // what if I want 10 to be variable
Mar 29 16:10:47 *	niconii (nicole@moz-s50lqo.midco.net) has joined
Mar 29 16:10:47 *	ChanServ gives channel operator status to niconii
Mar 29 16:11:05 <steveklabnik>	i don't believe so, as the format string must be a string literal
Mar 29 16:11:10 <steveklabnik>	maybe through a compiler extension?
Mar 29 16:11:15 <steveklabnik>	those aren't yet stable though
Mar 29 16:11:20 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 29 16:12:52 <MoSal>	steveklabnik: Why '*' is only available for precision?
Mar 29 16:13:04 *	fatcatt316 has quit (A TLS packet with unexpected length was received.)
Mar 29 16:13:42 <MoSal>	steveklabnik: So, I would have to create a second string pushing "-" in a loop, right? There is no simpler way?
Mar 29 16:13:46 <steveklabnik>	it shouldn't be
Mar 29 16:13:53 <steveklabnik>	http://doc.rust-lang.org/stable/std/fmt/#syntax
Mar 29 16:13:58 <steveklabnik>	precision := count | '*'
Mar 29 16:14:18 <steveklabnik>	http://doc.rust-lang.org/stable/std/fmt/#precision has more with examples
Mar 29 16:14:33 <steveklabnik>	ah ha!
Mar 29 16:14:41 <steveklabnik>	An integer followed by dollar sign .N$:
Mar 29 16:14:41 <steveklabnik>	use format argument N (which must be a usize) as the precision.
Mar 29 16:14:56 <steveklabnik>	so it looks like you can actually get variable width precisions, at least
Mar 29 16:15:03 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 16:15:22 <steveklabnik>	i didn't realize it supported that in the syntax; i just knew that you couldn't directly interpolate a variable
Mar 29 16:16:57 <MoSal>	steveklabnik: yeah, I just wished "{:*}" worked just like "{:.*}" works.
Mar 29 16:21:55 *	nicholasf (nicholasf@moz-a9dqgc.internode.on.net) has joined
Mar 29 16:28:50 *	Xion only sees some strange emojis.
Mar 29 16:33:47 *	noidea has quit (Connection closed)
Mar 29 16:34:08 *	zelda (Mibbit@moz-mf9.vq3.158.192.IP) has joined
Mar 29 16:34:17 *	rsanting (rsanting@moz-hlpuvt.speed.planet.nl) has joined
Mar 29 16:35:19 *	zelda has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 16:36:00 *	ob has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 16:36:02 *	riverm (riverm@moz-v3aivp.priv.bahnhof.se) has joined
Mar 29 16:36:03 <rsanting>	I'm looking to create a webserver that responds to a post request by sending back a pgp encrypted json payload, should I look at using hyper or is using iron easier?
Mar 29 16:36:13 *	ob (ob@moz-db2l7g.ca.comcast.net) has joined
Mar 29 16:36:27 *	rtrt (Mibbit@moz-778.jcg.51.106.IP) has joined
Mar 29 16:37:04 *	durka42 has quit (Client exited)
Mar 29 16:37:21 <steveklabnik>	hyper is lower-level
Mar 29 16:37:27 <steveklabnik>	most other frameworks are built on top of hyper
Mar 29 16:38:42 <rsanting>	I guess I'll try it with iron first then. I've never used rust before.
Mar 29 16:39:37 <Xion>	rsanting: You can try Pencil, it may be simpler than Iron.
Mar 29 16:39:48 <Xion>	If you used Python before with Flask, you'll find that familiar.
Mar 29 16:41:10 <steveklabnik>	rsanting: http://www.arewewebyet.org/ might be helpful in your endevaors as well
Mar 29 16:41:13 <rsanting>	Thanks I'll look into it. I've only ever done shell scripting before really.
Mar 29 16:41:31 <bungoman>	So, this is probably a silly question: is there ever a case where "whatever".chars().collect::<Vec<char>>() wouldn't get me a Vec with valid UTF-8 characters?
Mar 29 16:45:01 <steveklabnik>	no silly quesitons in #rust-beginners
Mar 29 16:45:31 <steveklabnik>	and the answer is "no"
Mar 29 16:45:45 <steveklabnik>	char is _always_ a valid Unicode Scalar Value
Mar 29 16:46:07 <steveklabnik>	i should also note that Vec<char> uses a _lot_ more memory than a string will
Mar 29 16:46:15 <steveklabnik>	especially for western text
Mar 29 16:46:19 *	jfhumann has quit (Connection closed)
Mar 29 16:46:24 <steveklabnik>	that may or may not matter to you :)
Mar 29 16:46:40 <bungoman>	define a lot
Mar 29 16:46:41 <bungoman>	lol
Mar 29 16:47:03 <steveklabnik>	up to 4x
Mar 29 16:47:17 <steveklabnik>	"whatever" will take 8 bytes
Mar 29 16:47:22 <steveklabnik>	the resulting Vec will take 24
Mar 29 16:47:26 <steveklabnik>	err 32
Mar 29 16:49:48 *	starblue has quit (Ping timeout: 121 seconds)
Mar 29 16:49:59 <bungoman>	ah, that's about what i figured
Mar 29 16:50:17 <bungoman>	i don't think that'll be an issue
Mar 29 16:50:28 *	jfhumann (jfhumann@moz-mh7461.dynamic.kabel-deutschland.de) has joined
Mar 29 16:51:35 *	iiv (Thunderbird@moz-8gc27m.bredband.telia.com) has left
Mar 29 16:51:43 <steveklabnik>	basically, char is always 4 bytes
Mar 29 16:51:51 <steveklabnik>	but strings are u8s
Mar 29 16:51:54 <bungoman>	i guess my next question is, is it considered idiomatic to work with a Vec<char> when you need to do stuff like use windows() on an iterator over the characters?
Mar 29 16:52:14 <steveklabnik>	well, the first question is "are you sure that 'character' is what you mean here?
Mar 29 16:52:21 <steveklabnik>	unicode. it's tough
Mar 29 16:52:24 <bungoman>	yeah
Mar 29 16:52:29 <bungoman>	every time i think i get it
Mar 29 16:52:32 <bungoman>	i find out i dont
Mar 29 16:52:33 <steveklabnik>	you _may_ want grapheme clusters rather than unicode scalar values
Mar 29 16:53:39 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 29 16:54:00 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 16:54:48 <bungoman>	okay i just had to google that
Mar 29 16:54:50 <bungoman>	ugh
Mar 29 16:55:22 <steveklabnik>	hehe
Mar 29 16:55:22 <steveklabnik>	so
Mar 29 16:55:45 <bungoman>	http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries
Mar 29 16:55:49 <bungoman>	:(
Mar 29 16:55:54 <steveklabnik>	hehe
Mar 29 16:55:56 <steveklabnik>	yeah
Mar 29 16:56:02 <steveklabnik>	i am laughing in like, a dark humor way
Mar 29 16:56:13 *	durka42 (durka42@moz-c3rb4b.wireless-pennnet.upenn.edu) has joined
Mar 29 16:57:03 <steveklabnik>	so i guess the first question is
Mar 29 16:57:10 <steveklabnik>	is this text ever going to be non-ascii
Mar 29 16:57:21 <steveklabnik>	if it's not, then you can just ignore all of this
Mar 29 16:57:26 <steveklabnik>	if it is going to be ascii
Mar 29 16:57:35 <steveklabnik>	if it is going to be non-ascii, then you have to think about it
Mar 29 16:57:43 <mbrubeck>	bungoman: For a lot of stuff you can keep the data in utf-8, and build stuff on the .chars() iterator, or .char_indices() and slicing
Mar 29 16:58:02 <steveklabnik>	https://crates.io/crates/unicode-segmentation
Mar 29 16:58:03 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 29 16:58:10 <Soni>	does this look like a good event system? event.rs: http://sprunge.us/KTBC main.rs: http://sprunge.us/aRHG
Mar 29 16:58:55 <bungoman>	well i'm only trying to solve project euler problems right now so it'll be ascii, but i'm just curious since i banged my head against strings in rust for a day before it made some amount of sense
Mar 29 16:59:12 <Soni>	(a non-static event bus would be better, but then I lose type safety)
Mar 29 16:59:27 <bungoman>	i suspect my mental model is still not quite accurate
Mar 29 16:59:35 *	junqed (junqed@moz-m12.7jq.70.178.IP) has joined
Mar 29 17:01:03 *	cbrewster (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 29 17:01:03 <bungoman>	i actually came across that unicode-segmentation crate on github, i'm guessing that's the "standard" way of handling grapheme clusters?
Mar 29 17:02:01 <bungoman>	i haven't even tried installing third party rust libraries yet, i'm just writing toy programs to get a grasp on things in rust
Mar 29 17:02:25 <steveklabnik>	yeah, it's the usual grapheme cluster solution
Mar 29 17:02:33 <steveklabnik>	are you using cargo or sticking with rustc?
Mar 29 17:02:53 <bungoman>	so far i've just been using rustc
Mar 29 17:03:31 <steveklabnik>	if you use cargo, pulling that in is trivial
Mar 29 17:03:53 <steveklabnik>	you add that "unicode-segmentation = "0.1.2"" line to a config file, and it just handles the rest
Mar 29 17:03:55 *	nice (nice@moz-spp.oah.143.95.IP) has joined
Mar 29 17:03:57 <bungoman>	http://doc.crates.io/guide.html <-- this a good place to start?
Mar 29 17:03:58 <steveklabnik>	with rustc it's more complex
Mar 29 17:04:09 <steveklabnik>	it's pretty okay. i wrote it, so i'm biased ;)
Mar 29 17:04:52 <nice>	hello ! how do you read a keypress in rust ? reading a line from stin is easy, but I don't find how to handle single presses
Mar 29 17:05:23 <steveklabnik>	nice: i believe that requires a library to interact with the terminal's api
Mar 29 17:06:55 <nice>	steveklabnik, I'll dig into that
Mar 29 17:07:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 29 17:13:04 *	woboats has quit (Client exited)
Mar 29 17:13:33 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 29 17:15:21 <steveklabnik>	i think i've heard good things baout
Mar 29 17:15:23 <steveklabnik>	!crate termbox
Mar 29 17:15:23 <rustbot>	termbox (0.1.0) - High level binding for Termbox. -> https://crates.io/crates/termbox
Mar 29 17:15:26 <steveklabnik>	nice: ^
Mar 29 17:17:36 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 29 17:20:16 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 17:20:54 <Xion>	So crates.io is for distributing libs. What about binaries? Does it have to be handled in a system-specific way, with install script / distro packages / etc.?
Mar 29 17:21:15 <Xion>	And if so, are there Rust specific helpers? E.g. Python has poet package for generating Homebrew formulae.
Mar 29 17:21:46 <Xion>	...Actually, this seems sufficiently open ended a question that I should pose it in /r/rust.
Mar 29 17:22:33 <steveklabnik>	so
Mar 29 17:22:35 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 29 17:22:46 <steveklabnik>	crates.io is only really for distributing binaries that are useful for rust-specific stuff
Mar 29 17:22:49 <steveklabnik>	see 'cargo install'
Mar 29 17:22:57 <steveklabnik>	it's not meant to be a replacement for your systems' stuff
Mar 29 17:22:58 <Xion>	Right, since you need the toolchain.
Mar 29 17:23:15 <steveklabnik>	i would like to see 'cargo deb' and such
Mar 29 17:23:19 <steveklabnik>	but they havne't come up yet
Mar 29 17:23:57 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 29 17:24:01 <steveklabnik>	see https://github.com/rust-lang/rfcs/blob/master/text/1200-cargo-install.md
Mar 29 17:24:02 <Xion>	$ cargo bundle msi,homebrew,deb,rpm
Mar 29 17:24:04 <Xion>	One can dream.
Mar 29 17:24:06 <steveklabnik>	yeah
Mar 29 17:24:09 <steveklabnik>	i think it will happen
Mar 29 17:24:18 <steveklabnik>	especially once rustc is packaged in more distros
Mar 29 17:25:02 <Soni>	does this look like a good event system? event.rs: http://sprunge.us/KTBC main.rs: http://sprunge.us/aRHG
Mar 29 17:25:07 <Xion>	We need that, plus good UI toolkit, plus great IDE, and Rust can become the new Delphi: a tool for writing multiplatform, fast, native UI apps! :)
Mar 29 17:25:12 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 17:25:20 <steveklabnik>	Soni: i don't know enough about event systems to say, sorry :)(
Mar 29 17:25:22 <steveklabnik>	:(
Mar 29 17:26:13 <Soni>	steveklabnik, is there any way to replace that HashMap<&'static ...> stuff with a WeakHashMap<...> or something similar?
Mar 29 17:26:40 <Soni>	I kinda don't want static event busses
Mar 29 17:26:44 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 29 17:26:50 <steveklabnik>	i don't know what a WeakHashMap is
Mar 29 17:27:00 <Soni>	it's a HashMap with weak keys
Mar 29 17:27:25 <steveklabnik>	weak like, reference counted but weakly so?
Mar 29 17:27:32 <Soni>	yeah
Mar 29 17:27:53 <steveklabnik>	yeah, you'd use 
Mar 29 17:27:57 *	musiKk has quit (Quit: Konversation terminated!)
Mar 29 17:27:57 <steveklabnik>	http://doc.rust-lang.org/std/rc/struct.Weak.html
Mar 29 17:28:06 <Soni>	but it needs to be thread-safe
Mar 29 17:28:15 <steveklabnik>	oh, then the Arc version
Mar 29 17:28:26 *	cbrewste_ (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 29 17:28:28 <mbrubeck>	http://doc.rust-lang.org/std/sync/struct.Arc.html#method.downgrade
Mar 29 17:28:37 <steveklabnik>	yeah
Mar 29 17:28:58 <Soni>	but it needs to deallocate the value
Mar 29 17:31:00 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 29 17:31:04 <Soni>	also why no .oopsyntax() with Arc?
Mar 29 17:32:24 <steveklabnik>	what's that?
Mar 29 17:32:37 <Soni>	&self and stuff
Mar 29 17:33:10 <steveklabnik>	oh, i think it's just because of history
Mar 29 17:33:16 <steveklabnik>	no special reason, they should be equivalent
Mar 29 17:33:20 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 29 17:33:25 <Soni>	you call it with obj.func() instead of Type::func(obj)
Mar 29 17:33:52 <steveklabnik>	you should be able to do both with both syntaxes
Mar 29 17:34:17 <Soni>	I don't think you can...
Mar 29 17:34:22 <steveklabnik>	you should be able to
Mar 29 17:35:23 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 29 17:36:16 <Soni>	I don't think you can... http://is.gd/BnplJV
Mar 29 17:38:23 <durka42>	the smart pointers don't have instance methods, the idea is to reduce interference with methods on the actual types inside
Mar 29 17:39:12 <steveklabnik>	oh strange
Mar 29 17:39:20 <steveklabnik>	i did not realize that those forms were not actually equivalent
Mar 29 17:39:26 <steveklabnik>	i guess if it used Self instead, it would work?
Mar 29 17:39:37 <durka42>	it's one way
Mar 29 17:39:44 <durka42>	if you can write a.b() then you can use UFCS, but not the other way around
Mar 29 17:39:46 <steveklabnik>	though i see what you mean baout conflicts
Mar 29 17:39:48 <steveklabnik>	gotcha
Mar 29 17:39:56 *	nicholasf has quit (Connection closed)
Mar 29 17:40:08 <durka42>	which I think is exactly the opposite of what some other languages call UFCS :p
Mar 29 17:41:12 <steveklabnik>	hehe
Mar 29 17:41:16 <steveklabnik>	yeah, i still have to chage that
Mar 29 17:41:22 <steveklabnik>	i think "associated item syntax" was what we chose?
Mar 29 17:43:37 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 17:43:49 <durka42>	https://github.com/rust-lang/rust/pull/23844#issuecomment-87773947
Mar 29 17:44:39 <steveklabnik>	nice
Mar 29 17:45:24 <durka42>	actually what I said isn't really true since you can't use associated item syntax to get an inherent method
Mar 29 17:45:54 <durka42>	I wonder if we'll ever add syntax for that
Mar 29 17:46:04 <durka42>	strawman <Type as Type>::inherent()
Mar 29 17:49:48 *	arielby has quit (Ping timeout: 121 seconds)
Mar 29 17:56:48 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 17:58:58 <whyrlpool>	is there an easy way to perform iter.any() asynchronously?
Mar 29 18:02:13 *	MoSal (None@moz-r3e.ed3.200.149.IP) has left ("Gotta go")
Mar 29 18:03:17 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 29 18:04:57 <durka42>	!crate rayon
Mar 29 18:04:58 <rustbot>	rayon (0.3.1) - Simple work-stealing parallelism for Rust -> https://crates.io/crates/rayon
Mar 29 18:05:35 <durka42>	whyrlpool: there might be something in this parallel iterator library ^
Mar 29 18:06:10 <whyrlpool>	thanks, I'll take a look at it :D
Mar 29 18:06:46 *	saml has quit (Quit: Leaving)
Mar 29 18:07:15 *	bungoman has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 18:09:57 *	arielby (Ariel@moz-1hdjvc.cablep.bezeqint.net) has joined
Mar 29 18:10:23 *	rsanting has quit (Quit: Leaving)
Mar 29 18:12:06 *	starblue has quit (Ping timeout: 121 seconds)
Mar 29 18:12:32 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 29 18:13:09 *	saml (saml@moz-0pt9vd.cst.lightpath.net) has joined
Mar 29 18:13:41 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 18:16:34 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:16:34 *	bjz_ has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 18:16:46 *	bjz (bjz@moz-hv8.as2.222.104.IP) has joined
Mar 29 18:17:26 *	skade (skade@moz-pr5v7e.pools.vodafone-ip.de) has joined
Mar 29 18:18:05 *	fl3 (fl3@moz-ghm.6bs.172.109.IP) has joined
Mar 29 18:19:02 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:20:36 *	skade (skade@moz-pr5v7e.pools.vodafone-ip.de) has joined
Mar 29 18:20:42 *	Vtec234 has quit (Quit: Bye!)
Mar 29 18:21:36 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 29 18:23:20 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 18:24:06 *	klue has quit (Ping timeout: 121 seconds)
Mar 29 18:25:13 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 18:29:47 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:29:59 *	woboats has quit (Client exited)
Mar 29 18:30:32 *	skade (skade@moz-pr5v7e.pools.vodafone-ip.de) has joined
Mar 29 18:31:04 *	pbor has quit (Quit: Sto andando via)
Mar 29 18:32:35 *	fl0w has quit (Client exited)
Mar 29 18:33:13 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:34:27 *	fl0w has quit (Client exited)
Mar 29 18:34:45 *	wldcordeiro (wldcordeiro@moz-806.5he.186.208.IP) has joined
Mar 29 18:35:17 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:36:19 *	fl0w has quit (Client exited)
Mar 29 18:37:01 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:39:23 *	fl0w has quit (Client exited)
Mar 29 18:39:53 *	fl0w (fl0w@moz-h5d.ag8.254.92.IP) has joined
Mar 29 18:50:19 *	himi has quit (Ping timeout: 121 seconds)
Mar 29 18:50:46 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 29 18:56:40 *	tycoon177 has quit (Connection closed)
Mar 29 18:57:46 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 29 18:58:46 *	riverm has quit (Client exited)
Mar 29 19:00:22 *	stephanbuys (Adium@moz-iqes92.telkomadsl.co.za) has joined
Mar 29 19:00:25 *	stephanbuys has quit (Quit: Leaving.)
Mar 29 19:00:32 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 29 19:01:51 *	tycoon177 has quit (Ping timeout: 121 seconds)
Mar 29 19:03:49 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 19:08:08 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 29 19:08:58 *	woboats has quit (Ping timeout: 121 seconds)
Mar 29 19:09:25 *	Sgeo (Sgeo@moz-cqm03c.dyn.optonline.net) has joined
Mar 29 19:11:00 *	jas0 has quit (Ping timeout: 121 seconds)
Mar 29 19:11:02 *	DaSpirit (DaSpirit@moz-cspleg.fios.verizon.net) has joined
Mar 29 19:14:23 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 29 19:18:27 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 29 19:23:44 *	plutoniix has quit (Quit: จรลี จรลา)
Mar 29 19:25:07 *	aatch (james@moz-uhn.omt.54.210.IP) has joined
Mar 29 19:25:47 *	wldcordeiro has quit (Ping timeout: 121 seconds)
Mar 29 19:26:06 *	bluss_ (bluss@moz-rip51k.cust.bredbandsbolaget.se) has joined
Mar 29 19:27:03 *	aatch has quit (Quit: Leaving)
Mar 29 19:27:11 *	aatch (james@moz-uhn.omt.54.210.IP) has joined
Mar 29 19:28:58 *	bluss has quit (Ping timeout: 121 seconds)
Mar 29 19:51:10 *	frankmcsherry has quit (Connection closed)
Mar 29 19:53:09 *	Aedylthryd (Thingus@moz-obq.d8m.98.75.IP) has joined
Mar 29 19:58:34 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 29 20:01:18 *	wldcordeiro (wldcordeiro@moz-ul1rm9.ut.comcast.net) has joined
Mar 29 20:03:15 *	qbg (qbg@moz-9799i9.mncable.net) has joined
Mar 29 20:06:56 *	oln has quit (A TLS packet with unexpected length was received.)
Mar 29 20:12:11 *	Damaki has quit (Connection closed)
Mar 29 20:15:01 <whyrlpool>	My code is ending up twice as slow once I thread it :c
Mar 29 20:15:37 *	arielby has quit (Quit: Leaving)
Mar 29 20:15:48 <aatch>	whyrlpool, that's not entirely unexpected. Poor use of multithreading often results in slower code.
Mar 29 20:15:52 <mbrubeck>	One downside to doing any() in parallel is that it's harder to short-circuit
Mar 29 20:16:24 *	fl3 has quit (Connection closed)
Mar 29 20:18:19 <rtrt>	Hi. I have a linked list in a mutex which is shared across 2 threads. One thread will push to the queue and other thread will read the queue and if some conditions are satisfied, pops the element. Now 1st thread should be blocked while adding new elements if queue is full (i'll set max length)
Mar 29 20:18:43 <rtrt>	Any suggested way to do this or should I manage blockings myself ?
Mar 29 20:19:01 <durka42>	are you using std::sync::Mutex?
Mar 29 20:19:54 <rtrt>	Yes
Mar 29 20:19:55 *	mib_ff5pf7 (Mibbit@moz-odh2qp.range86-153.btcentralplus.com) has joined
Mar 29 20:20:07 <durka42>	so what's the question exactly? Mutex handles the locking
Mar 29 20:20:31 *	mib_ff5pf7 has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 20:20:41 <durka42>	Mutex::lock blocks until the other thread releases the mutex
Mar 29 20:20:51 <aatch>	parallel any will only be faster if the chances of any given element being `true` is quite low.
Mar 29 20:21:14 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 20:23:02 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 20:23:10 *	Altonymous (Altonymous@moz-q9a.s9e.95.209.IP) has joined
Mar 29 20:23:19 <panicbit>	And if the set of elements is quite large
Mar 29 20:24:59 <rtrt>	@durka42 I want this queue to blocked in 1st thread if queue size is full (because 2nd thread isn't able to pop some elements) . Are you suggesting to no unlock in the first thread until queue length isn't less than max length?
Mar 29 20:25:21 <rtrt>	*not unlock in 2nd thread
Mar 29 20:25:42 <durka42>	oh I missed the part about the queue filling up
Mar 29 20:25:53 <durka42>	that does seem like a possible solution, just have the reader thread hold the mutex until it pops enough
Mar 29 20:28:09 <rtrt>	@durka42 Thanks. Will try that
Mar 29 20:28:47 <cn>	i'm trying to get clippy to work with my project, but a bunch of features "may not be used on the stable release channel"
Mar 29 20:29:02 <cn>	cargo -V outputs.. wait
Mar 29 20:29:08 *	Fishrock123 has quit (Connection closed)
Mar 29 20:29:22 *	chain_chan has quit (A TLS packet with unexpected length was received.)
Mar 29 20:29:23 *	Mouser has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 29 20:29:25 <cn>	cargo 0.7.0-nightly (1af03be 2015-12-08)
Mar 29 20:29:28 <cn>	that date doesn't seem right
Mar 29 20:29:44 <mbrubeck>	cn: `rustc -V` is the important part
Mar 29 20:29:50 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 20:29:53 <peschkaj>	cn: rustup did that to me with cargo
Mar 29 20:30:06 <peschkaj>	cn: everything still works, though, so ¯\_(ツ)_/¯ 
Mar 29 20:30:07 <cn>	mbrubeck: ah, i guess i'll have to remove my old versions
Mar 29 20:30:45 <cn>	there we go, i had sort of assumed it would overwrite old versions
Mar 29 20:32:19 *	ParadoxSpiral_ has quit (Quit: cya)
Mar 29 20:32:52 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 29 20:33:36 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 29 20:34:48 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 29 20:35:39 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 29 20:35:52 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 20:37:12 *	badon has quit (Ping timeout: 121 seconds)
Mar 29 20:39:06 *	badon_ is now known as badon
Mar 29 20:39:16 *	himi (fow035@moz-9pb.ksq.203.150.IP) has joined
Mar 29 20:40:03 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 20:45:36 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 29 20:50:01 *	martianwars has quit (Quit: Connection closed for inactivity)
Mar 29 20:50:37 *	qg_ has quit (Connection closed)
Mar 29 20:51:26 *	mib_y8myog (Mibbit@moz-obsq3i.bru-hsp1.atcjet.net) has joined
Mar 29 20:51:53 *	mib_y8myog has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 20:57:06 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 20:58:11 *	nicholasf2 (nicholasf@moz-r4g.qhj.136.1.IP) has joined
Mar 29 20:58:33 *	nicholasf has quit (Ping timeout: 121 seconds)
Mar 29 21:01:31 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 29 21:01:35 *	cbrewster has quit (Connection closed)
Mar 29 21:04:46 *	mib_kkn1mu (Mibbit@moz-ss8.aqe.21.202.IP) has joined
Mar 29 21:07:20 <cn>	i'm running into this error which i'm not sure how to solve http://is.gd/n696Bs
Mar 29 21:08:01 *	Jayflux has quit (Connection closed)
Mar 29 21:08:08 <cn>	i used io::std(in|out) before on stable which worked, but switching to nightly i ran into the same general error
Mar 29 21:08:12 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 29 21:09:15 <cn>	with matches to test input, which would panic because nothing is input
Mar 29 21:09:34 *	mib_kkn1mu has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 21:10:17 <whyrlpool>	0.313s without threading,  4.835s with threading (avg of three, both built with release). Any ideas how I can improve my threading code? https://gist.github.com/anonymous/392fa0286782c895caa9aa434bcd1eae Valgrind measured 24k calls to str::pattern::StrSearcher but 16k to je_mallox and another 16k to arena_dalloc_bin_locked_impl.isra.32 and 14k to je_arena_tcache_fill_small. Is there something wro
Mar 29 21:10:24 <whyrlpool>	ng with how I'm doing threading?
Mar 29 21:10:41 <whyrlpool>	https://gist.github.com/anonymous/f55406e54571d2c47f8ca011b3a33787 <- better gist with comments
Mar 29 21:10:45 *	fl0w has quit (Client exited)
Mar 29 21:12:00 <whyrlpool>	I wasnt expecting a 15x performance hit by threading it :/
Mar 29 21:16:51 *	cbrewster has quit (Quit: )
Mar 29 21:17:39 <cn>	actually, this fails with the same error https://github.com/oli-obk/rust-si/blob/master/examples/test_read_simple.rs
Mar 29 21:17:49 <aatch>	whyrlpool, so the problem is that you're copying the search string into every thread
Mar 29 21:18:08 *	desophos has quit (Ping timeout: 121 seconds)
Mar 29 21:18:29 <aatch>	whyrlpool, the test string, rather.
Mar 29 21:18:34 <cn>	it works on stable though, so i guess i'll move back to that
Mar 29 21:19:23 <aatch>	whyrlpool, further more, the way the test is set up means that the serial version will *always* do less work than the async version.
Mar 29 21:20:12 <aatch>	whyrlpool, since the first elements of the vector will always match your test string.
Mar 29 21:21:18 <aatch>	whyrlpool, so it's actually a bad test as much as anything. As I said earlier, you need a pretty low likelyhood of "yes" occurring for the parallel version to out-do a serial version.
Mar 29 21:22:18 <aatch>	whyrlpool, basically, it's only going to be faster when done in parallel if the expected number of matches in your set is < 1
Mar 29 21:22:28 <whyrlpool>	I ran it over 200MB of text and async found one result in 2 minutes, serial found it in 8 seconds
Mar 29 21:23:01 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 29 21:23:06 <aatch>	whyrlpool, no, the parallel version found one result in 8 seconds, then continued to look in the rest of the text.
Mar 29 21:24:02 <whyrlpool>	I was iterating over several thousand if not million (I havent counted) vectors of a couple hundred lines, not one vector of several thousand lines
Mar 29 21:24:10 <aatch>	whyrlpool, doesn't matter.
Mar 29 21:24:10 *	nicholasf2 has quit (Ping timeout: 121 seconds)
Mar 29 21:24:36 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 21:24:52 <whyrlpool>	right, so if my test now guarantees no match, async should be faster?
Mar 29 21:25:23 <aatch>	whyrlpool, should be.
Mar 29 21:26:02 <aatch>	whyrlpool, though spawning a thread for each entry and copying the "needle" each time might still put it behind.
Mar 29 21:26:54 <aatch>	whyrlpool, it's probably better to split the input vec into chunks and do a serial search through each chunk.
Mar 29 21:27:09 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 29 21:27:28 <whyrlpool>	0.20s for serial, 1.49s for async
Mar 29 21:28:16 <aatch>	whyrlpool, yeah, that's probably the overhead from copying and context switching between the threads.
Mar 29 21:28:31 <aatch>	whyrlpool, you've got 1000 threads viaing for time on 4-8 cores.
Mar 29 21:28:40 <aatch>	vying*
Mar 29 21:28:54 *	nicholasf has quit (Connection closed)
Mar 29 21:29:30 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 29 21:29:45 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 29 21:30:13 <whyrlpool>	aatch, so I should change my code to spawn a new thread for each vector rather than for each element of the vector?
Mar 29 21:32:22 <aatch>	whyrlpool, well you only have one vector at this point. That said, are you reading from a file for this, because it sounds like you are.
Mar 29 21:34:17 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 29 21:35:04 <whyrlpool>	aatch, I'm reading a file into a vector until it begins with a specific string, and then searching up until that point for a different string, outputting if there is a match, and then continuing through the file
Mar 29 21:36:02 <aatch>	whyrlpool, why read in a vector at all? Why not just stream the data?
Mar 29 21:37:18 <whyrlpool>	because once it hits a match it's outputing a string several lines before it
Mar 29 21:37:18 <LambdaComplex>	I'm iterating over the chars in a String. How can I determine if I'm on the last iteration?
Mar 29 21:37:56 <aatch>	whyrlpool, either way, you're best off not using multithreading here all really.
Mar 29 21:38:21 <aatch>	whyrlpool, since you're almost certainly limited by IO speed.
Mar 29 21:42:49 <whyrlpool>	aatch, before I tried doing it with async io, the bottleneck was string.contains, not IO speed
Mar 29 21:42:54 *	Altonymous has quit (Client exited)
Mar 29 21:43:03 <whyrlpool>	aatch, *async searching
Mar 29 21:44:26 *	cpup has quit (Ping timeout: 121 seconds)
Mar 29 21:45:45 *	cpup (cpup@moz-6od.jer.218.32.IP) has joined
Mar 29 21:45:58 <aatch>	whyrlpool, you sure?
Mar 29 21:46:39 <mbrubeck>	LambdaComplex: One way is to use .char_indices() so you know where the current char starts, and then add `current_char.len_utf8()` to find where it ends, and compare to `string.len()`
Mar 29 21:47:29 <mbrubeck>	LambdaComplex: Another way is to do `let mut iter = string.chars().peekable(); while let Some(c) = iter.next() { if iter.peek() == None { /* last char! */ } ... }`
Mar 29 21:48:03 <mbrubeck>	the latter method is more general; can be used with any iterator
Mar 29 21:52:44 <whyrlpool>	aatch, was eating 100% CPU, valgrind had ~150bn for StrSearcher, 50bn for file decompression, and iowait was normal
Mar 29 21:52:57 <whyrlpool>	aatch, well, 100% of one core
Mar 29 21:54:00 *	brson has quit (Quit: leaving)
Mar 29 21:54:27 <aatch>	whyrlpool, hmm. it's possible that the file was cached in memory. 
Mar 29 21:54:46 *	niconii has quit (Quit: brb)
Mar 29 21:55:13 <whyrlpool>	aatch, I dont have 9 gigs of memory on this thing, was using a bufreader
Mar 29 21:56:44 *	niconii (USER@moz-qnllue.jhek.me72.48f8.2001.IP) has joined
Mar 29 21:56:44 *	ChanServ gives channel operator status to niconii
Mar 29 21:57:20 <aatch>	whyrlpool, wait, valgrind? Doesn't valgrind just do allocation stuff, not profiling?
Mar 29 21:58:20 *	niconii has quit (Quit: WeeChat 1.4)
Mar 29 21:58:31 *	niconii (nicole@moz-qnllue.jhek.me72.48f8.2001.IP) has joined
Mar 29 21:58:31 *	ChanServ gives channel operator status to niconii
Mar 29 21:58:37 <whyrlpool>	aatch, using `valgrind --tool=callgrind target/release/test` and then `callgrind_annotate callgrind.out.10172`
Mar 29 21:59:38 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 29 21:59:53 <mbrubeck>	I assume your performance measurements are done on runs *without* valgrind :)
Mar 29 22:00:22 <whyrlpool>	measuring the time taken to execute was just done with `time cargo run --release`
Mar 29 22:00:39 *	badon has quit (Connection closed)
Mar 29 22:00:43 <whyrlpool>	ignoring the first result
Mar 29 22:01:35 <whyrlpool>	I wont claim to be great at this, and I'm probably doing everything wrong, but hey, willing to learn how to do it right.
Mar 29 22:02:15 <aatch>	whyrlpool, I'm not sure multithreading is really going to help much here. It tends not to with IO, as IO is almost always the bottleneck.
Mar 29 22:03:11 <aatch>	At least, with file IO multithreading doesn't help much.
Mar 29 22:03:21 *	badon_ is now known as badon
Mar 29 22:03:33 *	Powersource has quit (Quit: Leaving)
Mar 29 22:03:39 <aatch>	Since you can only physically read from a single file at a time.
Mar 29 22:03:55 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 29 22:04:47 *	peschkaj has quit (Connection closed)
Mar 29 22:05:18 <whyrlpool>	I'll split the file into four then and run four instances of my code
Mar 29 22:05:31 *	Altonymous (Altonymous@moz-q2m3mb.dhcp.embarqhsd.net) has joined
Mar 29 22:06:10 <aatch>	whyrlpool, that wont help unless the file is on four separate discs.
Mar 29 22:06:44 <aatch>	whyrlpool, since there's only one read head.
Mar 29 22:07:23 <whyrlpool>	aatch, but surely I would observe iowait if the disk was the bottleneck, no?
Mar 29 22:07:40 <whyrlpool>	aatch, I'm not observing any iowait
Mar 29 22:08:07 *	Altonymous_ (Altonymous@moz-q9a.s9e.95.209.IP) has joined
Mar 29 22:09:11 <aatch>	whyrlpool, I have no idea. That said, it might be useful to know what the minimum time for this would be to start with, so you can get a sense of scale.
Mar 29 22:09:33 *	Altonymous has quit (Ping timeout: 121 seconds)
Mar 29 22:09:33 *	Altonymous_ is now known as Altonymous
Mar 29 22:09:39 *	qg_ has quit (Connection closed)
Mar 29 22:10:11 <aatch>	whyrlpool, if it's a 9GB file, then reading the entire thing at ~50MBs (which is quite fast for a HDD) would take ~100s, or around 2 minutes.
Mar 29 22:12:22 <whyrlpool>	iotop: Actual DISK READ:      47.53 M/s
Mar 29 22:12:48 <aatch>	M-whats?
Mar 29 22:12:50 *	plutoniix (q@moz-uem.puq.249.43.IP) has joined
Mar 29 22:13:41 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 22:13:55 *	Damaki (damaki@moz-biuqal.cable.rogers.com) has joined
Mar 29 22:14:05 <whyrlpool>	Megabytes
Mar 29 22:15:51 <LambdaComplex>	mbrubeck: So what exactly does that produce? Do I iterate over `iter`?
Mar 29 22:16:01 <whyrlpool>	aatch: zgrep  /mnt/test/dump.xml.gz  201.65s user 14.68s system 85% cpu 4:14.25 total
Mar 29 22:17:14 <aatch>	whyrlpool, is zgrep what you're writing?
Mar 29 22:18:00 <whyrlpool>	aatch, the equivalent of, yeah. Except upon getting a match it returns a string before that match
Mar 29 22:18:41 <aatch>	whyrlpool, so one place threads might help is splitting decompression and searching.
Mar 29 22:19:50 <aatch>	whyrlpool, so you read + decompress one block, then send it to another thread to search while you read + decompress the next block.
Mar 29 22:20:30 <whyrlpool>	aatch, alright. That'd work.
Mar 29 22:20:48 <whyrlpool>	aatch, no clue how I'd do that with flate2 though
Mar 29 22:21:20 <whyrlpool>	aatch, any pointers you could give me?
Mar 29 22:22:50 *	qbg has quit (Quit: Konversation terminated!)
Mar 29 22:22:57 *	tycoon177 (tycoon177@moz-ib495f.client.mchsi.com) has joined
Mar 29 22:25:06 <aatch>	whyrlpool, I think just reading some number of lines via GzDecoder (which I assume is what you're using at the moment), then sending that over a channel to the other thread will work fine.
Mar 29 22:26:56 <whyrlpool>	aatch, thanks. Will let you know how it goes
Mar 29 22:27:33 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 22:32:06 *	tycoon177 has quit (Connection closed)
Mar 29 22:32:54 *	Saevitus (Mibbit@moz-cale3e.bigpond.net.au) has joined
Mar 29 22:32:58 *	aruniiird (aruniiird@moz-p6i.r9h.126.45.IP) has joined
Mar 29 22:37:00 *	Fishrock123 has quit (Quit: Leaving...)
Mar 29 22:37:33 *	saml_ (saml@moz-rkfmct.res.rr.com) has joined
Mar 29 22:39:16 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 29 22:40:31 <Saevitus>	hello people
Mar 29 22:40:36 *	aruniiird has quit (Quit: Leaving)
Mar 29 22:42:14 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 29 22:42:44 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 22:44:51 *	partycoder (partycoder@moz-3mm.4lh.87.199.IP) has joined
Mar 29 22:45:44 *	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined
Mar 29 22:46:16 <Saevitus>	Would anyone know how I could start with reading/writing memory in linux?
Mar 29 22:46:17 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 29 22:47:20 <durka42>	Saevitus: do you mean reading and writing files?
Mar 29 22:48:29 <Saevitus>	no, memory. like, getting PID, modules, and such.
Mar 29 22:48:58 <durka42>	oh like reading into your process' memory
Mar 29 22:49:25 <Saevitus>	I'd imagine if we're able to call WinAPI things like ReadProcessMemory, we should be able to do the linux equivalent, right?
Mar 29 22:49:37 <durka42>	getpid is in libc...
Mar 29 22:49:45 <durka42>	I don't know what functions are generally used to do that on linux
Mar 29 22:49:49 <durka42>	also you can look in /proc
Mar 29 22:50:03 <Saevitus>	hmm
Mar 29 22:51:22 <aatch>	Saevitus, if you want to get process information, then you can find it in `/proc/<pid>` (there's also `/proc/self` for the "current" process).
Mar 29 22:51:41 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 29 22:53:10 <Saevitus>	ah, so we can use linux system calls?
Mar 29 22:53:35 <aatch>	Saevitus, not exactly. Everything is exposed via special files.
Mar 29 22:54:13 <aatch>	Saevitus, do some research on /proc, that should point you in the right direction.
Mar 29 22:59:46 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 29 23:00:09 *	luc has quit (Ping timeout: 121 seconds)
Mar 29 23:00:40 <Saevitus>	idk if it'd be better for me to write what I want to write in c++, I honestly have no idea where to start in rust.
Mar 29 23:01:33 <durka42>	since it's exposed through a special filesystem, it's going to be basically all file I/O
Mar 29 23:01:59 *	Altazimuth has quit (Ping timeout: 121 seconds)
Mar 29 23:02:53 *	julienXX_ (julienXX@moz-vrdhjo.abo.wanadoo.fr) has joined
Mar 29 23:03:23 *	julienXX has quit (Ping timeout: 121 seconds)
Mar 29 23:03:25 <aatch>	Saevitus, it's not going to be much different in C++. If anything, it's probably easier in Rust, I find I/O generally easier in Rust than I do C++ at any rate.
Mar 29 23:05:31 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 29 23:06:34 *	DaSpirit has quit (Quit: Leaving)
Mar 29 23:06:39 <Saevitus>	hmm, okay.
Mar 29 23:06:44 <Saevitus>	Am I able to make classes in rust?
Mar 29 23:06:53 <durka42>	yes, but we call them structs
Mar 29 23:07:21 <aatch>	Saevitus, pro-tip: don't try and write class-based OO code in Rust.
Mar 29 23:07:38 <partycoder>	why
Mar 29 23:07:56 <aatch>	partycoder, because it doesn't work very well and you end up getting frustrated.
Mar 29 23:08:07 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 29 23:08:09 <Saevitus>	alright, thanks for the info
Mar 29 23:08:14 <partycoder>	what do you mean by doesn't work very well
Mar 29 23:08:18 <durka42>	translating inheritance hierarchies directly from C++ doesn't often go well
Mar 29 23:08:22 <durka42>	because rust doesn't have inheritance
Mar 29 23:08:30 <durka42>	but usually it can be done in a cleaner way using composition and traits
Mar 29 23:08:38 <durka42>	or just... functions
Mar 29 23:08:40 *	bluss_ has quit (Ping timeout: 121 seconds)
Mar 29 23:08:49 <durka42>	but I'm one of those crazy functional programmers so don't listen to me
Mar 29 23:09:07 <partycoder>	no it's fine
Mar 29 23:09:36 <partycoder>	a good approach to avoid things like: https://github.com/EnterpriseQualityCoding/FizzBuzzEnterpriseEdition
Mar 29 23:09:55 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 29 23:10:02 <aatch>	partycoder, what durka42 said. Basically, you can sort-of write inheritance-based code in Rust, but Rust isn't designed for it and lacks a number of features that languages like Java and C++ have to make working with the type heirarchies easier.
Mar 29 23:10:34 *	kimundi (kimundi@moz-kpiu20.dip0.t-ipconnect.de) has joined
Mar 29 23:10:42 <partycoder>	sounds reasonable
Mar 29 23:10:53 <Saevitus>	is there no equivalent of private: in rust?
Mar 29 23:11:02 <aatch>	Saevitus, it's the default.
Mar 29 23:11:08 <partycoder>	this channel is full of reasonable, friendly people. i almost forgot i am in irc.
Mar 29 23:11:14 <Saevitus>	ah, I see.
Mar 29 23:12:14 <durka42>	privacy is done by module
Mar 29 23:12:30 <durka42>	so code in the same module can always get into a struct
Mar 29 23:12:52 *	carols10cents (carolnichol@moz-1kh55q.fios.verizon.net) has joined
Mar 29 23:13:58 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 29 23:17:17 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 23:17:46 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 23:20:21 <whyrlpool>	aatch: an unknown error occurred and it terminated, BUT it did so after 2m10s. So I assume that's me not handling reaching the end of file correctly and it's all working
Mar 29 23:22:08 <whyrlpool>	aatch, gonna head to bed as it's 3am. Thanks for your help, I'll sort out the unexpected termination in the morning/afternoon/when I get up
Mar 29 23:25:14 *	carols10cents has quit (Quit: leaving)
Mar 29 23:25:44 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 29 23:26:22 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 29 23:28:50 *	durka42 has quit (Client exited)
Mar 29 23:28:51 *	mada has quit (Ping timeout: 121 seconds)
Mar 29 23:30:30 *	desophos has quit (Ping timeout: 121 seconds)
Mar 29 23:30:50 *	carols10cents (carols10cen@moz-1kh55q.fios.verizon.net) has joined
Mar 29 23:32:17 <mbrubeck>	LambdaComplex: `iter` in my example is just like string.chars() except that it has a .peek() method to peek at the next item
Mar 29 23:32:26 *	luc has quit (Ping timeout: 121 seconds)
Mar 29 23:32:34 <mbrubeck>	http://doc.rust-lang.org/std/iter/trait.Iterator.html#method.peekable
Mar 29 23:33:05 <mbrubeck>	Saevitus: By the way, if you *do* want to make syscalls directly, see https://crates.io/crates/syscall
Mar 29 23:33:29 *	llandersll has quit (Connection closed)
Mar 29 23:33:31 *	carols10cents has quit (Quit: leaving)
Mar 29 23:33:34 *	carols10cents (carols10cen@moz-1kh55q.fios.verizon.net) has joined
Mar 29 23:34:11 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 29 23:35:05 *	carols10cents has quit (Quit: leaving)
Mar 29 23:35:35 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 23:36:44 <Saevitus>	mbrubeck: thanks, I'll have to check that out later.
Mar 29 23:42:48 *	keret (Mibbit@moz-fib.231.246.83.IP) has joined
Mar 29 23:43:05 *	keret has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 29 23:47:23 <kefin>	Does for call different funcs dependent on the signature?
Mar 29 23:47:38 <kefin>	Like for x in &vector calls iter(), but for x in vector calls into_iter?
Mar 29 23:48:15 *	luc has quit (Ping timeout: 121 seconds)
Mar 29 23:48:37 <aatch>	kefin, not exactly. `for` always calls `into_iter()` on the thing-to-iterate-over.
Mar 29 23:49:13 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 29 23:49:19 <aatch>	kefin, but in the case of &Vec, it'll forward to iter()
Mar 29 23:49:28 *	monti (monti@moz-aidh09.broadband.corbina.ru) has joined
Mar 29 23:49:36 <aatch>	kefin, there's an IntoIterator trait that is used to get the appropriate iterator.
Mar 29 23:49:49 *	makoLine has quit (Ping timeout: 121 seconds)
Mar 29 23:49:52 <kefin>	aatch: Ok I'm just trying to understand what's called when and how
Mar 29 23:51:03 <aatch>	kefin, well Rust turns `for x in &vector` into (roughly) `let mut iter = IntoIterator::into_iter(&vector); while let Some(x) = iter.next() { ... }`
Mar 29 23:51:09 <kefin>	How does into_iter know which delegation to pick>
Mar 29 23:51:21 <aatch>	kefin, it's up to the implementation.
Mar 29 23:51:45 <aatch>	kefin, IntoIterator is implemented on both `&Vec` and `Vec` (and `&mut Vec`).
Mar 29 23:51:46 <kefin>	Would into_iter(&vector) likely internally call .iter() on vector?
Mar 29 23:52:01 <aatch>	kefin, no "likely" about it, it does exactly that.
Mar 29 23:52:32 <kefin>	Hmm... ah, so it basically overloads based on whether vector is a &, &mut, or just Vec?
Mar 29 23:53:15 <aatch>	kefin, correct. But the for loop construct itself doesn't care. In fact, it can't care, since it doesn't have the information to know that &vector is a &Vec
Mar 29 23:53:45 <kefin>	It's merely IntoIterator::into_iter that concerns itself with it due to overloading, right?
Mar 29 23:53:48 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 29 23:53:58 <aatch>	kefin, even then it's just up to the implementation.
Mar 29 23:54:06 <kefin>	The overloading analogy made it click ^_^ thx
Mar 29 23:54:14 <aatch>	kefin, overloading is just a handy side-effect.
Mar 29 23:55:19 <aatch>	kefin, what might help to know is that the apparent similarity between &Vec and Vec is a red herring. What is going on is no different to calling a trait method on Vec<T> and u32.
Mar 29 23:56:27 <kefin>	aatch: but the latter case will "consume" the Vec right? Because it's like calling into_iter(vector), which moves it.
Mar 29 23:56:50 <aatch>	kefin, correct.
Mar 29 23:58:12 <aatch>	kefin, the IntoIterator::into_iter(&vector) is part of UFCS (uniform function call syntax), which basically allows you to call a method without using dot-syntax. Which is useful when the dot-syntax might be ambiguous.
Mar 29 23:58:14 *	partycoder has quit (Quit: zzz)
Mar 29 23:59:17 <kefin>	aatch: can you specify (disambiguate) the call whilst still using dot syntax like in C++?
Mar 29 23:59:49 *	Greyton (Mibbit@moz-jmn.vej.111.75.IP) has joined
Mar 29 23:59:51 *	kimundi- (kimundi@moz-7rgigm.480r.qpnh.4fe2.2002.IP) has joined
Mar 29 23:59:52 <aatch>	kefin, nope. UFCS is how Rust does disambiguation.
Mar 30 00:00:06 <kefin>	aatch: that makes life so much simpler :)
Mar 30 00:00:56 <kefin>	Also what's with the PartialEq for [B; 0], [B; 1], ... [B; 32] ? It's cluttering docs
Mar 30 00:01:11 <monti>	kefin, and how to specify that in c++?
Mar 30 00:01:17 *	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined
Mar 30 00:01:32 <kefin>	monti: afaik it's b.Type::func()
Mar 30 00:01:59 <aatch>	kefin, there's no way (yet) to be generic over the size of a fixed-size array, so you have to do it manually.
Mar 30 00:02:27 <monti>	Ah, inheritance. But here is overloads. The only way is function casting
Mar 30 00:02:35 *	plutoniix has quit (Quit: จรลี จรลา)
Mar 30 00:02:37 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 30 00:02:37 *	kimundi- is now known as kimundi
Mar 30 00:02:47 *	urcra has quit (Connection closed)
Mar 30 00:02:56 <aatch>	kefin, so we have impls for a number of traits up to a limit.
Mar 30 00:03:09 <aatch>	kefin, it's not brilliant, we know, but hopefully not permanent
Mar 30 00:03:20 <kefin>	aatch: heard generics over constants are coming to Rust though, that'd be cool
Mar 30 00:03:35 <monti>	aatch, is there any future directions about fixed size arrays?
Mar 30 00:04:44 <aatch>	kefin, well, they've been "coming" for a while now.
Mar 30 00:05:07 <aatch>	monti, other than integer/constant generics? Not that I know of.
Mar 30 00:06:03 <kefin>	aatch: Development on it been slow?
Mar 30 00:07:22 <aatch>	kefin, sort of. It's a combination of being quite tricky, requires a lot of dependent work in the compiler and being lower priority than some other things.
Mar 30 00:07:23 <monti>	Constant generics? Thanks, going to search about it
Mar 30 00:07:38 <kefin>	monti: C++ has it
Mar 30 00:07:54 <kefin>	Or well, "templates". I don't know if Java does though.
Mar 30 00:08:04 <aatch>	I don't think Java does.
Mar 30 00:08:16 *	Altonymous has quit (Client exited)
Mar 30 00:08:24 <monti>	kefin, that template <int N>?
Mar 30 00:08:46 <kefin>	monti: yes, or any other POD
Mar 30 00:08:57 <monti>	mhm
Mar 30 00:09:45 <monti>	!rfc constant generics
Mar 30 00:10:20 <aatch>	C++ being templates is what makes it easier for them compared to us. Rust really, really doesn't like monomorphisation-related errors, so we have to make sure every possible substitution in type parameters is valid.
Mar 30 00:13:35 *	Damaki has quit (Ping timeout: 121 seconds)
Mar 30 00:14:09 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 30 00:14:26 *	llandersll has quit (Connection closed)
Mar 30 00:14:27 *	llandersll (anders@moz-imbsc9.mc.videotron.ca) has joined
Mar 30 00:14:31 <whyrlpool>	aatch, I decided against sleep. My program now keeps getting sigkill'd. memory usage is 0-4% of 4GB until about half a minute in, at which point it rises at about 45MB/s until it gets terminated.
Mar 30 00:14:54 <whyrlpool>	aatch, I dont know how to debug this.
Mar 30 00:15:10 <aatch>	whyrlpool, you're probably keeping too much data around.
Mar 30 00:15:17 <kefin>	whyrlpool, can I see the code?
Mar 30 00:15:41 <whyrlpool>	kefin, sure I guess
Mar 30 00:15:43 *	Greyton has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 00:17:20 *	Saevitus has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 00:17:30 *	Saevitus (Mibbit@moz-cale3e.bigpond.net.au) has joined
Mar 30 00:17:55 <whyrlpool>	kefin, https://gist.github.com/anonymous/47055135b2081b0c65346bd2d3e9f946
Mar 30 00:18:58 <Saevitus>	anyone know how I'd use WinAPI's beep function? lol
Mar 30 00:19:11 <whyrlpool>	kefin, dump.xml.gz is 9GB of text, jsyk
Mar 30 00:20:48 <aatch>	whyrlpool, well you have a little too much copying, but I'm not sure how that'd cause memory usage to balloon.
Mar 30 00:21:57 <Xion>	Since Error::description must return &str, how am I supposed to make a description out of some additional data attached to the error?
Mar 30 00:22:57 <kefin>	whyrlpool, I agree with aatch, and I don't see where anything would clog, you're clearing every channel...
Mar 30 00:23:28 <aatch>	whyrlpool, the only thing I can think of is a stall in the print loop, which would cause the channel to fill up, but that seems kinda unlikely.
Mar 30 00:24:01 <kefin>	whyrlpool, what if you put a thread sleep on one of the threads? Just to see what happens.
Mar 30 00:24:06 <monti>	Saevitus, !crate winapi
Mar 30 00:24:21 <whyrlpool>	aatch, wait. The only result is about 30s in. Let me check if that's when it starts ballooning
Mar 30 00:24:26 <aatch>	whyrlpool, you could try to use sync_channel with a reasonable bound like 10 and see if that changes anything.
Mar 30 00:24:45 *	klue has quit (Ping timeout: 121 seconds)
Mar 30 00:24:49 <whyrlpool>	aatch, well, it's half a second in, not 30s so that's not it
Mar 30 00:25:09 <kefin>	whyrlpool, what if you do not send to tx0? Maybe the error is in gzdecoder.
Mar 30 00:31:33 <whyrlpool>	kefin: changed it to send "".to_string rather than a line and its still ballooning, albeit (I think) slower
Mar 30 00:31:44 *	nhirata_ has quit (Client exited)
Mar 30 00:32:00 <kefin>	whyrlpool, I was thinking to just send nothing, just consume the lines() and do absolutely nothing.
Mar 30 00:32:40 *	mib_iw6me6 (Mibbit@moz-00i.595.135.61.IP) has joined
Mar 30 00:33:23 *	mib_iw6me6 (Mibbit@moz-00i.595.135.61.IP) has left
Mar 30 00:33:49 *	nhirata_ (nhirata_@moz-5b2rpj.ca.comcast.net) has joined
Mar 30 00:35:48 <aatch>	whyrlpool, yeah, that suggests to me that it might be a stall somewhere in the pipeline causing one of the channels to fill up.
Mar 30 00:37:20 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 30 00:37:29 <aatch>	whyrlpool, a sync_channel might help here since it provides "backpressure" when this kind of thing happens.
Mar 30 00:37:55 <whyrlpool>	aatch, I'll look at a sync_channel then
Mar 30 00:38:21 <LambdaComplex>	So, I need to use the get_reply() function on a GetWindowAttributesCookie, and then I need to look at the cookie and see if the window exists or not. I think. Fun stuff :D
Mar 30 00:39:43 <Xion>	steveklabnik: FWIW, I posted my question from earlier today as https://www.reddit.com/r/rust/comments/4cj41s/distribution_of_rustbuilt_binaries/
Mar 30 00:39:43 <Saevitus>	Okay, so far I have this: https://gist.github.com/805ed79b3778d22daa5d8f434b5816c1 using info from this: https://liebharc.github.io/basic_dsp/kernel32/fn.Beep.html and this: https://msdn.microsoft.com/en-au/library/windows/desktop/ms679277(v=vs.85).aspx
Mar 30 00:39:52 *	nhirata_ has quit (Ping timeout: 121 seconds)
Mar 30 00:39:56 <Saevitus>	but I have no idea what to put inside the Beep function.
Mar 30 00:40:48 <whyrlpool>	kefin, sending absolutely nothing produces no ballooning. Going with aatch's suggestion of using sync_channel
Mar 30 00:41:16 <kefin>	Saevitus: frequency and duration
Mar 30 00:41:23 <durka42>	Saevitus: it should be "extern crate kernel32;" I believe (you'll need to put the crate in your Cargo.toml to depend on it) and then you don't need to declare the Beep function yourself, as it's in the crate
Mar 30 00:41:51 <Saevitus>	yeah, I forgot to put that, thanks.
Mar 30 00:42:06 <aatch>	whyrlpool, using sync_channel for this is a reasonably good idea anyway, you can always set the bound to be quite large at any rate.
Mar 30 00:42:19 *	luc has quit (Ping timeout: 121 seconds)
Mar 30 00:42:32 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 30 00:43:07 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 00:43:27 <durka42>	Saevitus: based on this https://github.com/retep998/winapi-rs#example my guess is you depend on winapi and kernel32-sys, and then import them as "extern crate winapi; extern crate kernel32;" and then the call is "unsafe { kernel32::Beep(frequency, duration); }"
Mar 30 00:43:53 <kefin>	what does the ! mean in impl<T> !Sync ?
Mar 30 00:44:02 <Saevitus>	ah, I see. I thought I'd actually have to code the functions, nice. 
Mar 30 00:44:03 <durka42>	kefin: it means "not"
Mar 30 00:44:29 <kefin>	So it implements not Sync for something?
Mar 30 00:44:32 <durka42>	well they are implemented in the kernel so that would be difficult :p
Mar 30 00:44:35 <durka42>	kefin: right
Mar 30 00:44:43 *	nhirata_ (nhirata_@moz-5b2rpj.ca.comcast.net) has joined
Mar 30 00:44:47 <kefin>	durka42: What does that even mean? xD
Mar 30 00:44:53 <durka42>	kefin: types automatically implement Sync if their contents do, so types which do unsafe bad things need to explicitly opt out
Mar 30 00:45:44 <durka42>	"impl !Sync" says "dear compiler, this struct is not thread-safe despite appearances, don't let anybody share references to it across threads"
Mar 30 00:45:54 <durka42>	this is unstable syntax though
Mar 30 00:46:06 *	tennix (vagrant@moz-kjb.7qo.39.106.IP) has joined
Mar 30 00:46:41 <kefin>	Ah ok, so impl !Sync for X would make X not be Sync basically?
Mar 30 00:46:43 <Saevitus>	nice, now I have a program that loops beeps.
Mar 30 00:46:44 <Saevitus>	sweet.
Mar 30 00:46:49 <durka42>	right
Mar 30 00:47:00 *	aatch has quit (Ping timeout: 121 seconds)
Mar 30 00:47:10 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 30 00:48:22 <whyrlpool>	aatch, set it to 100, no ballooning yet, but it's only been going for 2m.
Mar 30 00:51:16 <whyrlpool>	aatch, sync_channel is awesome :D thanks for the help!
Mar 30 00:51:21 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 30 00:56:01 *	plutoniix (q@moz-uem.puq.249.43.IP) has joined
Mar 30 00:56:40 <Saevitus>	I might actually have to recode the beep function, because it takes a u32 type, but lots of my beep code from C++ is using floats...
Mar 30 00:59:27 *	Peach (Peach@moz-q01.nag.102.75.IP) has joined
Mar 30 01:01:02 *	saml_ has quit (Quit: Leaving)
Mar 30 01:01:45 *	luc (user@moz-mr1mj4.eduroam-public.du.edu) has joined
Mar 30 01:02:15 *	monti has quit (Ping timeout: 121 seconds)
Mar 30 01:02:51 *	tycoon177 (tycoon177@moz-ib495f.client.mchsi.com) has joined
Mar 30 01:03:39 <kefin>	If a thread panics, and a Drop on any local data also panics, will the stack continue to unwind, and will the potential resource be freed?
Mar 30 01:05:05 <durka42>	panic during unwinding aborts the process
Mar 30 01:05:13 <durka42>	just like C++
Mar 30 01:05:27 <kefin>	It doesn't continue unwinding?
Mar 30 01:05:31 <durka42>	no, it aborts :)
Mar 30 01:05:40 <kefin>	Hmmm, but the initial panic does unwind, right?
Mar 30 01:06:16 <durka42>	yep, right up until the second one
Mar 30 01:06:39 <kefin>	It aborts the entire program? Also other threads?
Mar 30 01:06:57 *	cteef (derrick@moz-14a.4dn.78.172.IP) has left
Mar 30 01:07:15 <durka42>	the whole kaboozle
Mar 30 01:07:16 <bstrie>	kefin: the typical behavior for SIGABRT
Mar 30 01:07:21 <durka42>	kefin: here's a demo http://is.gd/8OIVaL
Mar 30 01:07:34 <durka42>	scroll down in the output to see "panicked while panicking. aborting" and note that Loud #1 is never dropped
Mar 30 01:08:11 <kefin>	durka42: thanks
Mar 30 01:08:33 <kefin>	Kinda makes sense tho, a panic during stack unwinding could leak memory.
Mar 30 01:08:34 <durka42>	bottom line: don't panic in a Drop impl :)
Mar 30 01:09:19 <durka42>	btw, panicking == unwinding is not always true
Mar 30 01:09:29 <durka42>	some setups turn all panics into aborts
Mar 30 01:09:47 <kefin>	There's no spec that says panics must unwind?
Mar 30 01:11:01 <durka42>	there's no spec at all AFAIK :p
Mar 30 01:11:23 <durka42>	panic!() definitely doesn't continue execution, but it's always been the plan to make the behavior configurable
Mar 30 01:11:26 <kefin>	durka42: what do I do if I just want to exit a thread without returning manually?
Mar 30 01:11:56 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 01:12:00 <durka42>	panic fulfills that use case, I guess, though it prints an ugly message to the console
Mar 30 01:12:38 <kefin>	But durka42: didn't you say panic may also abort? Doesn't that terminate all threads that are children of the main thread?
Mar 30 01:12:41 <durka42>	actually I don't know whether there's a way to panic a single thread if you set panics to aborts...
Mar 30 01:12:49 *	}ls{ has quit (Ping timeout: 121 seconds)
Mar 30 01:13:12 <durka42>	good question, I hope someone else knows the answer
Mar 30 01:13:35 *	frankmcsherry has quit (Connection closed)
Mar 30 01:14:58 *	pseudo has quit (Ping timeout: 121 seconds)
Mar 30 01:15:15 <durka42>	there's an RFC about it with a ridiculous number of comments https://github.com/rust-lang/rfcs/pull/1513
Mar 30 01:15:32 <durka42>	it sounds like if you want panics to be recoverable at thread boundaries, then you have to keep it set as panic=unwind
Mar 30 01:15:33 *	anastiel (anastiel@moz-k9v.b8f.23.191.IP) has joined
Mar 30 01:17:25 *	chain_chan (chainChan@moz-f67ffr.slkc.qwest.net) has joined
Mar 30 01:18:31 *	chain_kun (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 30 01:18:51 <anastiel>	how to programming in rust?
Mar 30 01:19:05 *	lika (lika@moz-hpg.2t0.139.14.IP) has joined
Mar 30 01:19:06 *	luc has quit (Connection closed)
Mar 30 01:19:47 <rfolsom>	hey everyone, is there a better way to do this? need to do variable interpolation into a string, then use the combined string for a function argument: socket.write(format!("NICK {}\r\n", config.username).as_bytes());
Mar 30 01:19:50 <durka42>	kefin: your question is brought up here https://github.com/rust-lang/rfcs/pull/1513#issuecomment-189669018
Mar 30 01:20:02 <rfolsom>	feels a bit clunky, like I'm doing something wrong
Mar 30 01:21:40 *	chain_chan has quit (Ping timeout: 121 seconds)
Mar 30 01:23:11 <durka42>	kefin: so the conclusion seems to be "don't use panics for this, just return from the thread"
Mar 30 01:24:14 *	wldcordeiro has quit (Ping timeout: 121 seconds)
Mar 30 01:24:48 <Saevitus>	how would one go about changing the console title in rust?
Mar 30 01:25:19 <Saevitus>	console/program title, I guess.
Mar 30 01:25:23 <kefin>	Saevitus I don't think that's possible, you probably need to use X to change it
Mar 30 01:25:46 <durka42>	the same way you would do it from C
Mar 30 01:25:53 <Saevitus>	SetConsoleTitle("Rpm Bhop"); ?
Mar 30 01:25:59 <kefin>	wmctrl -a "name" can rename on Linux,..
Mar 30 01:26:01 <durka42>	but I don't know that way, because I don't use windows anymore
Mar 30 01:26:03 <kefin>	Oh you mean winapi xD
Mar 30 01:26:13 <Saevitus>	nope, I just mean changing it in general.
Mar 30 01:26:24 <kefin>	Depends on the windowing system
Mar 30 01:26:47 <kefin>	on X11 you can use wmctrl, on Windows idk :/
Mar 30 01:26:51 <durka42>	looks like SetConsoleTitle is also in kernel32-sys
Mar 30 01:27:10 <kefin>	I think this is more a task for the command interpreter on the machine though, as this will make your code more OS-dependent.
Mar 30 01:27:52 *	anastiel has quit (Quit: Leaving)
Mar 30 01:29:03 <Saevitus>	oh yeah, look at that. I can use winapi to set it.
Mar 30 01:31:40 <LambdaComplex>	is it safe to turn a u16 into an i32?
Mar 30 01:32:20 <durka42>	any value of a u16 can fit in a i32
Mar 30 01:33:16 *	LucaRood has quit (Quit: Leaving)
Mar 30 01:33:25 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 30 01:34:17 <LambdaComplex>	That's what I was hoping
Mar 30 01:36:03 *	pseudo (pseudo@moz-bvvcvm.at.cox.net) has joined
Mar 30 01:36:27 <LambdaComplex>	panicbit: Don't suppose you're up?
Mar 30 01:36:37 <panicbit>	LambdaComplex: I am
Mar 30 01:36:44 <panicbit>	LambdaComplex: i just waned to go to bed now
Mar 30 01:36:51 <LambdaComplex>	panicbit: Can you help me with one teeny little thing? :P
Mar 30 01:37:12 <panicbit>	I just finished this super sick macro :)
Mar 30 01:37:15 *	lika has quit (Quit: Leaving)
Mar 30 01:37:16 <panicbit>	LambdaComplex: Sure
Mar 30 01:37:28 <LambdaComplex>	panicbit: https://github.com/wmutils/core/blob/master/util.c#L55-L58
Mar 30 01:37:44 <LambdaComplex>	panicbit: Basically looking at a window attributes reply and trying to determine if it's null or not
Mar 30 01:37:58 <LambdaComplex>	Actually that part is from the wrong function but whatever
Mar 30 01:38:17 <LambdaComplex>	(trying to do the exists() function)
Mar 30 01:38:27 *	durka42 perks up a mention of sick macros
Mar 30 01:38:56 <panicbit>	durka42: Interested?
Mar 30 01:39:01 <durka42>	always :D
Mar 30 01:39:14 <panicbit>	durka42: https://play.rust-lang.org/?gist=4ed50fc8f1c733bfe43c9d53ab0cfc10&version=stable
Mar 30 01:39:27 <Saevitus>	okay.. that's a bit strange, SetConsoleTitleW is expecting a '*const u16' type, instead of a string.
Mar 30 01:39:51 <panicbit>	LambdaComplex: But that's already provided by the fact that the get_reply returns a Result
Mar 30 01:39:57 <durka42>	panicbit: very nice!
Mar 30 01:40:02 <panicbit>	LambdaComplex: If you can .unwrap() it, then it's not null
Mar 30 01:40:22 <durka42>	we don't need no RFC for this
Mar 30 01:40:22 <panicbit>	(i.e. if it is an Ok value, then the reply is not null)
Mar 30 01:40:35 <LambdaComplex>	panicbit: It seems like it _always_ is Ok though
Mar 30 01:40:40 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 01:40:52 <Saevitus>	anyone here on windows able to give me a hand? lol
Mar 30 01:41:20 <durka42>	panicbit: you going to publish this?
Mar 30 01:41:25 <panicbit>	durka42: Sure
Mar 30 01:41:42 <panicbit>	durka42: I'm not doing such crazy shit for lulz :D
Mar 30 01:41:48 <durka42>	:)
Mar 30 01:42:24 <panicbit>	"Eh, got this awesome macro. *shrug, deletes it*"
Mar 30 01:43:43 <durka42>	me: "eh, got this awesome macro. *saves in github forked gists* *forgets about it* *never starts promised blog*
Mar 30 01:43:54 <LambdaComplex>	panicbit: You're saying this should work, right? http://sprunge.us/OTPF?rust
Mar 30 01:44:42 <durka42>	Saevitus: the windows API doesn't exactly use Rust strings
Mar 30 01:44:51 <durka42>	so you'll have to convert it somehow
Mar 30 01:44:51 <panicbit>	LambdaComplex: Interesting, the reply pointer is not null-checked https://gist.github.com/anonymous/c268a3bcb503e6381aba72f145a16b24
Mar 30 01:44:51 <Saevitus>	Ahhhh
Mar 30 01:45:20 <LambdaComplex>	panicbit: I.e. it returns Ok no matter what?
Mar 30 01:45:20 <Saevitus>	hmmm
Mar 30 01:45:28 <panicbit>	LambdaComplex: No
Mar 30 01:45:45 <panicbit>	LambdaComplex: The get_window_attributes function has a way to return errors
Mar 30 01:46:07 <panicbit>	LambdaComplex: And if an error is returned, then the Rust bindings return it in an Err 
Mar 30 01:46:28 <panicbit>	LambdaComplex: Though, you can probably assume that there will be an error thrown, when the result is null
Mar 30 01:46:29 <LambdaComplex>	panicbit: But a null pointer doesn't cause an Err?
Mar 30 01:46:38 <panicbit>	LambdaComplex: But i wonder what that self.checked stuff is
Mar 30 01:46:52 <panicbit>	LambdaComplex: Right, a null ptr would not cause an error here
Mar 30 01:46:53 *	LambdaComplex is confused :(
Mar 30 01:47:05 <panicbit>	LambdaComplex: I am as well
Mar 30 01:47:13 <LambdaComplex>	panicbit: So a null ptr _should_ cause an error here?
Mar 30 01:47:15 <Saevitus>	so how the hell would I convert my string to an u16 int, then back to a string for WinAPI to read? O.O
Mar 30 01:47:18 <panicbit>	LambdaComplex: It's probably best to peek into the original xcb doc
Mar 30 01:48:16 <durka42>	Saevitus: it looks like you want to use OsStr and encode_wide
Mar 30 01:48:41 <durka42>	WindowsBunnies would know
Mar 30 01:48:42 <panicbit>	LambdaComplex: Heh, are you using `get_window_attributes` ?
Mar 30 01:49:06 <panicbit>	LambdaComplex: In that case you will ALWAYS get an Ok :D
Mar 30 01:49:25 <panicbit>	LambdaComplex: There's `get_window_attributes_checked` which also checks for an error X.x
Mar 30 01:49:53 <panicbit>	(it sets the `checked` attribute of the Cookie to true)
Mar 30 01:50:34 <panicbit>	(and the get_reply method only checks if an error occured when that field is set to true)
Mar 30 01:50:38 <LambdaComplex>	panicbit: So....what should I do? O.o
Mar 30 01:50:46 <panicbit>	LambdaComplex: Use `get_window_attributes_checked`
Mar 30 01:51:33 <Saevitus>	oh god, that was way too complex. 
Mar 30 01:51:42 <LambdaComplex>	panicbit: Uh...are you sure that's a thing? I'm not seeing it
Mar 30 01:51:45 <Saevitus>	I think I'll avoid setting my console title for now.
Mar 30 01:52:00 <panicbit>	LambdaComplex: Yeah I am
Mar 30 01:52:17 <LambdaComplex>	error: unresolved name `xproto::get_window_attributes_checked`
Mar 30 01:52:53 <panicbit>	LambdaComplex: Oh wait
Mar 30 01:52:58 <LambdaComplex>	there's a get_window_attributes_unchecked()
Mar 30 01:53:00 <panicbit>	LambdaComplex: Lol
Mar 30 01:53:03 <LambdaComplex>	wtf
Mar 30 01:53:06 <panicbit>	LambdaComplex: There's a mistake in the api
Mar 30 01:53:18 <LambdaComplex>	That _unchecked should be _checked, shouldn't it?
Mar 30 01:53:25 <WindowsBunnies>	Saevitus: Oh, are you trying to work with winapi and unicode wide strings?
Mar 30 01:53:30 <panicbit>	LambdaComplex: Well, no
Mar 30 01:53:46 <LambdaComplex>	panicbit: So what's the mistake?
Mar 30 01:53:49 <WindowsBunnies>	Saevitus: https://github.com/retep998/wio-rs/blob/master/src/wide.rs
Mar 30 01:53:52 <panicbit>	LambdaComplex: If you assume the names are correct
Mar 30 01:54:04 <LambdaComplex>	panicbit: Then the one I'm using should be checked?
Mar 30 01:54:05 <panicbit>	LambdaComplex: Then the version that you uses should be the checked one
Mar 30 01:54:07 <panicbit>	LambdaComplex: Yup
Mar 30 01:54:13 <panicbit>	LambdaComplex: But look at the implementation: https://play.rust-lang.org/?gist=d8642b7c85672b7666bebcde8a427a0e&version=stable
Mar 30 01:54:22 <panicbit>	Notice anything peculiar? :)
Mar 30 01:54:31 <Saevitus>	WindowsBunnies:  I'm just trying to use SetConsoleTitle(), but it requires a bunch of extra string converting and such. 
Mar 30 01:54:35 <LambdaComplex>	checked: false?
Mar 30 01:54:38 <panicbit>	Eeeeyup
Mar 30 01:55:02 <LambdaComplex>	...Shall I go open an(other) issue?
Mar 30 01:55:09 <panicbit>	LambdaComplex: So two options: Either set that to true or rename the unchecked function to checked and make that one actually checked
Mar 30 01:55:13 <panicbit>	LambdaComplex: Definitely
Mar 30 01:55:13 <WindowsBunnies>	SetConsoleTitleW("hi".to_wide_null().as_ptr());
Mar 30 01:55:16 <WindowsBunnies>	Saevitus: Like that?
Mar 30 01:55:31 <Saevitus>	wait, that'd seriously work? oh wow.
Mar 30 01:55:32 <LambdaComplex>	Siiiigh
Mar 30 01:55:38 <panicbit>	LambdaComplex: The naming of the api should probably more consistent here
Mar 30 01:55:38 <WindowsBunnies>	Saevitus: Well, using my ToWide trait it does
Mar 30 01:55:47 <panicbit>	LambdaComplex: So technically there should be two issues ;)
Mar 30 01:55:58 <WindowsBunnies>	Saevitus: That's why I have that ToWide and FromWide, it makes it really trivial to do that sort of stuff
Mar 30 01:56:08 <panicbit>	LambdaComplex: but, eh, it should be fine squeezing it into one issue
Mar 30 01:56:30 <LambdaComplex>	panicbit: Want me to mention both? Or do you wanna just point out the inconsistent naming in a comment?
Mar 30 01:56:55 <Saevitus>	WindowsBunnies: Awesome, thanks for the help!
Mar 30 01:56:59 <panicbit>	LambdaComplex: Just point it out in the issue
Mar 30 01:57:23 <LambdaComplex>	panicbit: Specifically how most things are foo() (unchecked) and foo_checked() (checked)?
Mar 30 01:57:28 <panicbit>	LambdaComplex: Maybe ask if there's a particular reason for it
Mar 30 01:57:51 <panicbit>	yeah
Mar 30 01:58:23 <LambdaComplex>	panicbit: The two get_window_attributes() functions are completely identical, aren't they?
Mar 30 01:58:39 <panicbit>	LambdaComplex: Well, there are 159 occurences of `_checked(` and 88 occurences of `_unchecked(`
Mar 30 01:59:07 <panicbit>	LambdaComplex: Yeah they should be
Mar 30 01:59:14 <panicbit>	LambdaComplex: well, except that flag
Mar 30 02:00:40 <panicbit>	LambdaComplex: They differ a little bit. There are FFI equivalents for the `foo` and `foo_unchecked` methods
Mar 30 02:00:47 *	Saevitus has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 02:00:47 <panicbit>	Which they are calling
Mar 30 02:01:39 *	badon_ (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 30 02:03:23 *	badon has quit (Ping timeout: 121 seconds)
Mar 30 02:03:53 *	skade (skade@moz-c1c8jq.pools.vodafone-ip.de) has joined
Mar 30 02:04:14 <panicbit>	LambdaComplex: Hm, the issue isn't limited to get_windows_attributes
Mar 30 02:04:22 *	bjz (bjz@moz-uh0c9h.optusnet.com.au) has joined
Mar 30 02:04:41 <LambdaComplex>	panicbit: Which issue?
Mar 30 02:04:43 <panicbit>	LambdaComplex: I picked another pair of  `x` and `x_unchecked methods and it had the same issue
Mar 30 02:04:51 <LambdaComplex>	panicbit: With them being identical?
Mar 30 02:04:54 <panicbit>	LambdaComplex: The wrong bool
Mar 30 02:04:58 <panicbit>	Yeah
Mar 30 02:05:11 <LambdaComplex>	Which bool? `checked`?
Mar 30 02:05:28 <panicbit>	Yup
Mar 30 02:05:52 <panicbit>	They appear to be all set to `false` when they actually would need to be `true`
Mar 30 02:05:57 *	badon_ is now known as badon
Mar 30 02:06:22 <panicbit>	It appears to be true for every function `x` that has a `x_unchecked` version
Mar 30 02:06:45 <panicbit>	It does _not_ appear to be true for functions with a `x_checked` variant (so everythings fine there) 
Mar 30 02:07:36 <LambdaComplex>	panicbit: Alright, I'll include that in the issue
Mar 30 02:08:27 *	bjz has quit (Ping timeout: 121 seconds)
Mar 30 02:08:59 <panicbit>	It's 7AM, I'm probably going to skip sleep tonight
Mar 30 02:09:36 <LambdaComplex>	Nice :D
Mar 30 02:09:36 <panicbit>	Good prospects for friday's uni exam
Mar 30 02:09:38 <LambdaComplex>	(not really)
Mar 30 02:09:42 <panicbit>	:/
Mar 30 02:09:43 <LambdaComplex>	Oh dear god :p
Mar 30 02:11:50 *	typelist (typelist@moz-7o7po9.ca.comcast.net) has joined
Mar 30 02:14:46 <LambdaComplex>	panicbit: Think I should recommend having `foo_unchecked()` and `foo_checked()`?
Mar 30 02:14:52 <LambdaComplex>	I'm honestly not sure what form I prefer
Mar 30 02:15:12 <LambdaComplex>	Either that or `foo()` and `foo_checked()`
Mar 30 02:15:14 <LambdaComplex>	Hm
Mar 30 02:15:48 *	Saevitus (Mibbit@moz-cale3e.bigpond.net.au) has joined
Mar 30 02:15:57 <panicbit>	LambdaComplex: Your first idea would probably the most conservative
Mar 30 02:16:10 <LambdaComplex>	panicbit: But I voted Democrat :(
Mar 30 02:16:11 <panicbit>	LambdaComplex: The other idea could lead to unexpected behaviour
Mar 30 02:16:19 <Saevitus>	Alright, I'm back. Just had to switch to Linux again because I was having stupid compiler errors on windows again.
Mar 30 02:16:53 <panicbit>	LambdaComplex: Imagine code that currently uses foo(), expecting it to be unchecked, and then suddenly it is checked
Mar 30 02:17:03 <LambdaComplex>	panicbit: True...
Mar 30 02:17:32 <panicbit>	LambdaComplex: OTOH, xcb would just need to increment its major version to be safe (at least as much as semver is concerened)
Mar 30 02:18:18 <LambdaComplex>	panicbit: Yeah, fixing the discrepancy is gonna require a major version change either way
Mar 30 02:18:36 <panicbit>	LambdaComplex: I think this justifies a seperate issue for discussion then
Mar 30 02:18:59 <LambdaComplex>	panicbit: Eh, why the hell not? I'll make two!
Mar 30 02:19:04 <panicbit>	Yeah :)
Mar 30 02:19:34 *	slayerjain has quit (Quit: Connection closed for inactivity)
Mar 30 02:21:19 *	Joefish (Joefish@moz-tsk0jg.dip0.t-ipconnect.de) has joined
Mar 30 02:21:28 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 30 02:21:58 *	slayerjain (uid117577@moz-kmas3q.brockwell.irccloud.com) has joined
Mar 30 02:23:57 *	niconii has quit (Quit: WeeChat 1.4)
Mar 30 02:26:06 <LambdaComplex>	panicbit: Aaaaand done. Which you probably know since I mentioned you in both of them :P
Mar 30 02:27:18 <panicbit>	Didn't check mail yet, eating
Mar 30 02:35:21 *	Saevitus has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 02:37:41 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 02:38:37 *	tycoon177 has quit (Connection closed)
Mar 30 02:38:49 <panicbit>	LambdaComplex: Done, nice work :)
Mar 30 02:43:39 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 02:44:00 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 02:45:43 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 30 02:48:03 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 30 02:48:44 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 30 02:54:29 *	jeffdb has quit (Ping timeout: 121 seconds)
Mar 30 02:59:40 *	barometz has quit (Ping timeout: 121 seconds)
Mar 30 03:03:05 *	jeffdb (JeffDB@moz-gujimv.ca.comcast.net) has joined
Mar 30 03:03:47 *	ontop (ontop@moz-qebb76.ipv6.telus.net) has joined
Mar 30 03:04:06 <ontop>	Trying to figure out the modules thing. Is lib.rs some sort of special "library entrypoint" file?
Mar 30 03:04:24 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 03:04:29 <ontop>	I don't know why in main.rs I have to do "extern crate module;" but in the lib.rs I do "pub mod module;"
Mar 30 03:04:49 <ontop>	Also - I can't seem to use my module in my lib.rs :(
Mar 30 03:04:55 <panicbit>	ontop: It's by cargo regarded to be a library by convention
Mar 30 03:05:10 <ontop>	Okay. So it is special. As long as I know how then that's cool :)
Mar 30 03:05:19 <panicbit>	But to rust there's nothing special about it
Mar 30 03:06:00 <ontop>	panicbit: So, when I put "pub mod module;" in lib.rs, it should be happy to use types from "src/module.rs" correct?
Mar 30 03:06:03 <panicbit>	The most important thing to know is that this means that lib.rs is a top-level module by default
Mar 30 03:06:12 <panicbit>	ontop: yup
Mar 30 03:06:29 <ontop>	Is it maybe because I have mod test {} and I'm trying to use types inside there that it's not working?
Mar 30 03:06:43 <panicbit>	ontop: What are the error messages that you are getting?
Mar 30 03:07:01 <ontop>	src\lib.rs:7:16: 7:37 error: failed to resolve. Use of undeclared type or module `buckets` [E0433]
Mar 30 03:07:06 <durka42>	"pub mod module;" means "look in module.rs or module/mod.rs for the code"
Mar 30 03:07:10 <durka42>	you still have to import what you use from the module
Mar 30 03:07:24 <ontop>	Still have to import it. With using?
Mar 30 03:07:27 <durka42>	yes
Mar 30 03:07:34 <durka42>	in main.rs you would have "extern crate your_crate_name;"
Mar 30 03:07:36 *	barometz (dominic@moz-vot83i.ip.telfort.nl) has joined
Mar 30 03:07:39 <panicbit>	ontop: You probably want to either use `module::buckets` or pur `use moudle::buckets` into your file
Mar 30 03:07:44 <panicbit>	put*
Mar 30 03:07:51 <panicbit>	module*
Mar 30 03:08:08 <ontop>	durka42: Yeah, that's fine for main.rs and it works. But it doesn't seem to work in lib.rs
Mar 30 03:08:14 *	jfhumann (jfhumann@moz-mh7461.dynamic.kabel-deutschland.de) has joined
Mar 30 03:08:51 <ontop>	Hm.
Mar 30 03:08:56 <ontop>	Looking up docs on the "use" statement.
Mar 30 03:08:59 <panicbit>	ontop: Can you post your code?
Mar 30 03:09:03 <ontop>	Yes absolutely, one moment.
Mar 30 03:09:29 <durka42>	pub mod module; use module::buckets;
Mar 30 03:09:30 <panicbit>	preferably at least main.rs, lib.rs and the module you try to use
Mar 30 03:10:10 <ontop>	http://kopy.io/gzaeY
Mar 30 03:10:13 <ontop>	Hopefully that's useful.
Mar 30 03:10:22 <ontop>	main.rs is working, so I don't care about it.
**** BEGIN LOGGING AT Wed Mar 30 09:17:36 2016

Mar 30 09:17:36 *	Now talking on #rust-beginners
Mar 30 09:17:36 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 30 09:17:36 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 30 09:20:52 *	nicholasf has quit (Connection closed)
Mar 30 09:23:50 *	elementalest has quit (Ping timeout: 121 seconds)
Mar 30 09:24:28 *	elementalest (elementales@moz-fp6smh.internode.on.net) has joined
Mar 30 09:25:29 *	chain_kun has quit (Connection closed)
Mar 30 09:26:30 *	chain_chan (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 30 09:26:33 *	llandersll (anders@moz-n00.ucm.28.4.IP) has joined
Mar 30 09:27:20 *	vmesons (rmacleod@moz-hq5.1km.224.128.IP) has joined
Mar 30 09:33:44 *	romanlevin has quit (Quit: Leaving)
Mar 30 09:34:39 *	romanlevin (romanlevin@moz-jhq.qet.40.164.IP) has joined
Mar 30 09:40:13 *	klue has quit (Ping timeout: 121 seconds)
Mar 30 09:41:20 <panicbit>	mib_9bdr5c: Heh, I few hours I heard that the language looks too complicated :P
Mar 30 09:41:24 *	Damaki (damaki@moz-biuqal.cable.rogers.com) has joined
Mar 30 09:41:44 <panicbit>	mib_9bdr5c: Anyway, you should be able to do almost anything with Rust
Mar 30 09:42:09 <panicbit>	mib_9bdr5c: Are there any areas that interest you specifically?
Mar 30 09:42:16 <mib_9bdr5c>	Tbh I think there's nothing as (needlessly) complicated as php :D
Mar 30 09:42:16 <panicbit>	(e.g. web backend?)
Mar 30 09:42:24 <panicbit>	;)
Mar 30 09:42:29 *	panicbit agrees
Mar 30 09:43:12 <mib_9bdr5c>	I always worked with web, but I'd like to move on. So right now I don't even know what I could do with rust eheh
Mar 30 09:45:19 *	mib_u94ckl (Mibbit@moz-dt8.0m6.17.218.IP) has joined
Mar 30 09:45:55 *	fl0w has quit (Client exited)
Mar 30 09:46:44 *	mib_u94ckl (Mibbit@moz-dt8.0m6.17.218.IP) has left
Mar 30 09:48:19 *	Sgeo has quit (Ping timeout: 121 seconds)
Mar 30 09:49:11 *	kefin has quit (Quit: Leaving)
Mar 30 09:49:13 <panicbit>	mib_9bdr5c: For web stuff you might be interested in http://arewewebyet.com/
Mar 30 09:49:14 *	kefin (kefin@moz-t5j.bbc.113.188.IP) has joined
Mar 30 09:49:34 *	slayerjain has quit (Quit: Connection closed for inactivity)
Mar 30 09:50:35 *	stephanbuys has quit (Ping timeout: 121 seconds)
Mar 30 09:50:48 *	Emilgardis has quit (Ping timeout: 121 seconds)
Mar 30 09:51:27 <mib_9bdr5c>	Ahah cool! My secret dream is to be a game developer, but sadly I need to earn money to eat 
Mar 30 09:52:00 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 09:55:55 *	cpup has quit (Ping timeout: 121 seconds)
Mar 30 09:56:14 *	LambdaComplex has quit (Ping timeout: 121 seconds)
Mar 30 09:56:43 *	martinfeckie (user@moz-ll0530.bigpond.net.au) has joined
Mar 30 09:56:48 <martinfeckie>	Hey Folks
Mar 30 09:56:53 *	cpup (cpup@moz-6od.jer.218.32.IP) has joined
Mar 30 09:57:16 <martinfeckie>	Anyone know the simple way to cast char to &str ?
Mar 30 09:58:18 <panicbit>	playbot: let foo: String = String::new(); let bar: &str = &foo;
Mar 30 09:58:19 -playbot/#rust-beginners-	()
Mar 30 09:58:41 <panicbit>	(the type annotations are only for demonstation)
Mar 30 09:59:09 *	bjz (bjz@moz-puppgq.tpgi.com.au) has joined
Mar 30 09:59:39 *	bjz_ has quit (Ping timeout: 121 seconds)
Mar 30 09:59:40 <panicbit>	martinfeckie: if you have a `foo` of type String, then you can in most cases just use `&foo`. A bit more explicit it `&foo[..]` or `foo.as_str()`
Mar 30 10:02:16 <martinfeckie>	panicbit: OK, so imagine this `input_string.chars().map(|c| // something to make it &str)` where am I going wrong?
Mar 30 10:02:16 <martinfeckie>	 
Mar 30 10:02:29 <kimundi>	martinfeckie: a char can not directly be case to a &str, since a &str is just a reference to something else that contains string data, and a char does not contain string data in the correct format (strings assume utf8 encoding, but a char is just a integer)
Mar 30 10:02:51 <martinfeckie>	Thanks!
Mar 30 10:03:10 <panicbit>	It's annoying but in that case you need to allocate a String
Mar 30 10:03:33 <kimundi>	martinfeckie: You can get a &str by creating a one-char string, which is kinda inefficient since you need to heap allocate, or if you know you only have a single char each time you can also do this stuff with a 4-byte buffer on the stack
Mar 30 10:04:18 <kefin>	str::from_utf8, but it's unsafe
Mar 30 10:04:22 *	bletch (Mibbit@moz-9932bg.tpgi.com.au) has joined
Mar 30 10:04:31 <kimundi>	Its not?
Mar 30 10:05:20 <kefin>	You're right
Mar 30 10:05:31 <bletch>	Hey I'm having trouble trying to do something is rust, here's what I currently have that's working: https://gist.github.com/sebglazebrook/cf7cdeb33c3ded897cccc1f50ea061c1
Mar 30 10:05:37 <martinfeckie>	Hmm, so usecase is this.  I'm still learning Rust and am working through problems on exercism.io  .  The challenge is to parse hexadecimal strings to integers without using inbuilt conversion.
Mar 30 10:05:38 <kefin>	The docs gave an example with from_utf8 inside an unsafe block
Mar 30 10:06:19 <martinfeckie>	I can iterate over individual chars and pattern match, which works until I reach 10 ...
Mar 30 10:06:51 <kefin>	Use 'A' instead of 10?
Mar 30 10:07:19 <kimundi>	martinfeckie: Okay, in that case you can use a bit of the extra knowledge you have: hexadecimals mean problably just the range 0-9,a-f, which is entirely ascii. Which means you can cast the chars to an u8 and back without trouble, which makes it a bit easier to create a one-char &str slice
Mar 30 10:07:48 <martinfeckie>	I wonder if there is just a problem with the specs then ...
Mar 30 10:07:59 <ivan>	https://gist.github.com/ivan/420ae7a7e2cf72c4ae866bd33599f9ef#file-lifetimes-rs-L103 I added some lifetimes to my structs and impls and have no idea how to think about what rustc wants. I also have zero understanding of why types themselves need lifetimes
Mar 30 10:08:13 <martinfeckie>	Because the assertion is input "10" expected output is 16
Mar 30 10:08:36 <kimundi>	playbot: let c = 'f'; std::str::from_utf8(&[c as u8]).unwrap()
Mar 30 10:08:37 -playbot/#rust-beginners-	"f"
Mar 30 10:08:55 <kimundi>	^ that gives you a one-ascii-char &str
Mar 30 10:09:21 <panicbit>	ivan: Here's your clue: `note: type must outlive the static lifetime`
Mar 30 10:09:34 <panicbit>	ivan: I think you have to write `H: Handler + 'static`
Mar 30 10:09:58 *	tyoc213 (tyoc@moz-d3a.m00.243.189.IP) has joined
Mar 30 10:10:17 <martinfeckie>	Thanks kimundi It seems like I've misunderstood how to parse it :)
Mar 30 10:10:21 <panicbit>	ivan: by specifying `+ 'static` you specify that the H must outlive the 'static lifetime
Mar 30 10:10:29 <ivan>	panicbit: I tried that on both the struct and impl but I see the same thing
Mar 30 10:10:59 <panicbit>	hm
Mar 30 10:11:09 <ivan>	maybe I'm missing it somewhere else
Mar 30 10:11:19 <kimundi>	ivan: lifetime bounds on types mean "does not contain a reference with a lifetime shorter than that"
Mar 30 10:12:05 <ivan>	you mean everything that has that type lacks such a reference?
Mar 30 10:12:13 <kimundi>	so both &static str and for example u8 have lifetime bound 'static, but &'a str would not
Mar 30 10:14:14 <kimundi>	ivan: every type that has a lifetime bound does not contain-or-is a reference with a shorter lifetime. Contains in this sense: &'a T, (&'a T, u8) , struct Foo { bar: &'a str } all contain a reference with lifetime 'a
Mar 30 10:14:33 *	martinfeckie has quit (Connection closed)
Mar 30 10:15:03 <kimundi>	ivan: Oh, wait! Before I confuse you more, I might have misuderstood. Do you mean lifetime parameters like Foo<'a>, or lifetime bounds like Foo: 'a ?
Mar 30 10:15:24 <kimundi>	(+ 'a is also a lifetime bound specific to trait object syntax)
Mar 30 10:15:33 <ivan>	I don't know what Foo: 'a means. ok, that is good to know
Mar 30 10:15:59 <ivan>	no trait objects here
Mar 30 10:16:37 <kimundi>	ivan: The : 'a stuff was what panicbit means with H: Handler + 'static
Mar 30 10:16:56 <kimundi>	which could also be written as H: 'static + Handler
Mar 30 10:17:09 <kimundi>	Or H: 'static, H: Handler in a where clause
Mar 30 10:17:34 *	kimundi has a feeling he is just confusing right now
Mar 30 10:17:43 <kimundi>	sorry!
Mar 30 10:18:29 <ivan>	since that doesn't work, maybe H isn't 'static?
Mar 30 10:18:33 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 30 10:19:23 <ivan>	I should publish this whole thing
Mar 30 10:19:51 <ivan>	or make a better test case
Mar 30 10:19:55 <kimundi>	impl<'a, H: Handler> Handler for SessionMiddlewareHandler<'a, H> - since the error points at the implementing trait, I think your issue is that SessionMiddlewareHandler<'a, H> itself is not 'static - which makes sense seening how it has a lifetime parameter 'a, which means it could be instantiated with a 'a != 'static
Mar 30 10:20:14 <kimundi>	So SessionMiddlewareHandler would have to loose its lifetime paramter
Mar 30 10:20:28 *	bletch has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 10:20:34 <kimundi>	Which means it would have to not contain a reference
Mar 30 10:20:48 <ivan>	it needs that reference :-)
Mar 30 10:21:34 <kimundi>	DOes it have to be a reference? If you use Arc<r2d2::Pool<PostgresConnectionManager>> instead it would be fine too
Mar 30 10:21:53 <kimundi>	Just means that the original r2d2::Pool<PostgresConnectionManager> has to live in a Arc itself
Mar 30 10:21:55 <ivan>	ah, maybe I could do that
Mar 30 10:22:42 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 30 10:23:40 <kimundi>	ivan: If you are wondering where the whole 'static restriction is coming from, this is likely because threads are involved. If you spawn a thread, you may only pass data to it that have 'static bound, since the new thread might live longer than the one that spawned it, which would make references into the other threads stack unsafe since the memory might be gone or changed.
Mar 30 10:24:23 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 10:24:31 <ivan>	ah, that is making more sense, thank you
Mar 30 10:24:43 <kimundi>	A solution for shareding data despite that is to ensure that the data lives as long as the longest-living thread, which is what happens if all threads shared Arc handles to the data
Mar 30 10:24:51 <kimundi>	sharing*
Mar 30 10:25:48 <kimundi>	(another solution, which allows non-'static references is to have the parent thread block until all child threads are done, but that seems not to be applicable here or you wouldn't have the issue)
Mar 30 10:26:18 <ivan>	http://ironframework.io/doc/src/iron/middleware/mod.rs.html#58-61 yeah I see Iron puts that restriction there for that reason
Mar 30 10:27:16 *	monti-2 (monti@moz-aidh09.broadband.corbina.ru) has joined
Mar 30 10:29:01 <ivan>	kimundi: maybe I could transmute my pool into a 'static? ;)
Mar 30 10:29:25 <ivan>	(I'll go with the Arc really)
Mar 30 10:30:22 *	romanlevin has quit (Quit: Leaving)
Mar 30 10:30:37 <kimundi>	ivan: that might actually be safe if you know that your pool outlives everything else (eg by living at the top of main)
Mar 30 10:30:44 <kimundi>	but yeah, better to be safe directly :)
Mar 30 10:30:58 <kimundi>	hm, actually
Mar 30 10:31:03 <kimundi>	!crate lazy_static
Mar 30 10:31:03 <rustbot>	lazy_static (0.1.15) - A macro for declaring lazily evaluated statics in Rust. -> https://crates.io/crates/lazy_static
Mar 30 10:31:12 *	fl0w has quit (Client exited)
Mar 30 10:31:20 <kimundi>	^ using that, you might just get a static variable containing the pool
Mar 30 10:31:32 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 10:31:37 <ivan>	oh right thanks
Mar 30 10:32:04 <kimundi>	not sure how much setup the pool needs though, and wether you really have just one
Mar 30 10:32:29 <halabund>	kimundi: I found this <https://github.com/rust-lang/rfcs/issues/859> plus the blog post linked at the end.
Mar 30 10:32:41 <halabund>	“Feature Request: OpenMP/TBB like Parallel For Loops"
Mar 30 10:33:06 *	skade (skade@moz-u1j.1t9.225.62.IP) has joined
Mar 30 10:33:39 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 10:33:41 <kimundi>	halabund: yeah, stuff like what is in the blog post are the kind of libraries that exist at the moment for this
Mar 30 10:34:38 *	plutoniix (q@moz-3ic7so.dynamic.totbb.net) has joined
Mar 30 10:38:16 *	jas0 (jason@moz-vvo.58k.122.38.IP) has joined
Mar 30 10:39:09 <musicmatze>	hello there!
Mar 30 10:39:28 <musicmatze>	I'm having a problem with a function which should return a Option<L> where L: Lister 
Mar 30 10:39:30 <musicmatze>	Lister is a trait
Mar 30 10:39:42 <musicmatze>	is that possible or am I doing something wrong with returning trait objects?
Mar 30 10:40:04 <kimundi>	halabund: For what it's worth, it would be relatively trivial to write a parallel_for(0..100, |n| { /* do stuff to n in parallel */ }) function - its just that that implies recreating a threadpool all the time and prevents a few other performance optimiziations, which is why the libraries that are being developed are somewhat more complex#
Mar 30 10:40:26 *	badon has quit (Ping timeout: 121 seconds)
Mar 30 10:41:00 <kimundi>	musicmatze: If the L choosen by the caller, or is ist choosen by the function body?
Mar 30 10:41:14 <halabund>	Sounds like even if not everything is in place for this, it will come soon.
Mar 30 10:41:20 <kimundi>	halabund: yeah
Mar 30 10:41:26 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 10:41:30 <musicmatze>	by the function body, kimundi
Mar 30 10:42:08 <kimundi>	musicmatze: the being generic over l is the wrong approach, since generics are allways choosen by the caller. you can return Option<Box<Listener>> or similar if you want to return a trait object
Mar 30 10:42:23 <musicmatze>	ah, okay
Mar 30 10:42:46 <kimundi>	Or return Option<ActualTypeThatImplementsListener>, which is what libstd does for the Iterator traits for example
Mar 30 10:42:59 <musicmatze>	but changing it to return Option<Box<Lister>> yields me an error that Lister + 'static is expected, but I gut ImplementsLister
Mar 30 10:43:31 <kimundi>	musicmatze: you need to create a Box<ImplementsLister> in order to be able to cast it to a Box<Listener>
Mar 30 10:43:43 <musicmatze>	jup, I do that
Mar 30 10:43:48 <musicmatze>	wait, I'm pasting the code
Mar 30 10:43:49 *	badon (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 30 10:43:50 <kimundi>	put a Box::new() around the return value
Mar 30 10:45:19 <musicmatze>	kimundi: http://is.gd/tPh09M
Mar 30 10:46:06 <musicmatze>	error is:  expected `core::option::Option<Box<lister::Lister + 'static>>`,
Mar 30 10:46:08 <musicmatze>	    found `core::option::Option<Box<listers::path::PathLister>>`
Mar 30 10:47:01 <kimundi>	ah, might be that it just can't do that conversion deeply. You just need to add the cast inside a map()
Mar 30 10:47:30 <kimundi>	try adding a .map(|b| b as Box<Listener>)
Mar 30 10:47:30 <halabund>	kimundi: Does Rust have features to allow for the sort of optimization done with expression templates in C++?  For example, the simple way to implement custom addition for matrices would be to have a *binary* operator + that takes two matrices and returns a third.  Then A+B+C would first compute T=A+B, then it would compute T+C and delete T. 
Mar 30 10:47:33 <halabund>	 This is not as efficient as a manual loop for (i=1..size) res[i] = A[i]+B[i]+C[i], which avoids the allocation of the temporary T. In C++ some libraries are able to use the notation A+B+C while still avoiding creating (and destroying) that temporary T.
Mar 30 10:48:43 <kimundi>	halabund: Do you still see temporary allocation as an issue if its just 4 floats on the stack, without any heap memory involved?
Mar 30 10:49:01 <musicmatze>	kimundi: trait Lister cannot be made into an object ...
Mar 30 10:49:51 <kimundi>	musicmatze: Ah, that is because Lister has a associated function. Did you mean for foo() to be a method? If yes, add a self paramter, like fn foo(&self)
Mar 30 10:49:54 *	chain_chan has quit (Connection closed)
Mar 30 10:50:08 <musicmatze>	kimundi: Here's the real source: https://github.com/matthiasbeyer/imag/pull/310/files#diff-c9a393263cb36f61c496b1201baf7c84R29
Mar 30 10:50:20 <halabund>	kimundi: of course if the matrices are big, say thousands of elements, then creating a temporary with only a tiny storage is not an issue
Mar 30 10:50:34 <halabund>	so it’s possible then?
Mar 30 10:50:44 <musicmatze>	kimundi: the Lister trait is here: https://github.com/matthiasbeyer/imag/blob/master/libimagentrylist/src/lister.rs
Mar 30 10:51:02 <kimundi>	halabund: Ah, right, there are matrices outside of game programming...
Mar 30 10:51:13 <kimundi>	halabund: Let me thing for a minute
Mar 30 10:51:17 <kimundi>	thin*
Mar 30 10:51:20 <kimundi>	think**
Mar 30 10:53:01 <halabund>	https://en.wikipedia.org/wiki/Expression_templates
Mar 30 10:53:26 <halabund>	Using C++ libraries which do this is great. Writing them is not so great from what I hear, but I never took the time to learn how…
Mar 30 10:53:41 *	adhoc has quit (Ping timeout: 121 seconds)
Mar 30 10:53:48 <kimundi>	halabund: So, Rusts binary operators like +, -, etc are defined as taking their operands by value, which means ownership transfer. So A+B+C would take ownership of A and B to produce a T, and then take ownership of T and B to produce the result. What this allows is for the operator to result the storage of one of the arguments if necessary, which would mean no additional allocation for a T
Mar 30 10:53:58 <halabund>	Well, actually sometimes using them is not so great either because you get multi-page indecifrable error messages as a punishment for just a tiny mistake ...
Mar 30 10:54:58 <kimundi>	halabund: And this would also allow you to produce only "what to do" result types like with expression templates, though you'd probably need a manual evaluation call at the end since Rust does not do implicit conversion
Mar 30 10:55:35 <halabund>	kimundi: and could it figure out automatically when that is necessary?  E.g. in most such cases A and B should not be touched and should not be modified.  But T *can* be modified.  So Result = A+B+C+D would first create T=A+B, then use the existing storage of T to compute T+C, then finally T+D, then finally possible transfer T (as is) into Result.
Mar 30 10:56:41 <bluss>	I'd love to know how to do expression templates in rust
Mar 30 10:56:47 <bluss>	I haven't really attempted anything
Mar 30 10:57:44 <kimundi>	halabund: The operators always take by value, but you can implement the operators for both Matrix and &Matrix, which would allow &A + &B + &C which leaves A, B, and C alone but produces T temporaries that get passed around regularily and can be reused
Mar 30 10:57:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 30 10:58:22 <halabund>	OK, too many questions and too little study.  I’ll get back to the tutorial
Mar 30 10:58:26 <halabund>	Thanks kimundi !
Mar 30 10:59:14 <halabund>	Should I look at anything else than rust-lang.org for learning?
Mar 30 10:59:35 <kimundi>	halabund: Also, maybe kind a cop-out, but rust makes it somewhat easier to define your own DSL in a macro. For example, you could write something that allows let result = mat!(A + B + C); and which expands to arbitrary code involving A, B and C. Maybe just (&A + &B + &C).eval() for example
Mar 30 11:00:07 <kimundi>	halabund: Most of the good stuff is linked from there, but Im also not an expert on what else is there :)
Mar 30 11:00:53 *	tyoc213 has quit (Quit: Leaving)
Mar 30 11:01:29 *	tennix has quit (Ping timeout: 121 seconds)
Mar 30 11:03:04 *	greister (greister@moz-ihr.7m9.63.45.IP) has joined
Mar 30 11:04:48 *	Joefish (Joefish@moz-tsk0jg.dip0.t-ipconnect.de) has joined
Mar 30 11:05:09 <halabund>	kimundi: Is there any other langauge (than Rust) at all which could be a viable alternative to C++ for my applications?  (Other than Fortran, which is not so great once one goes beyond plain linear algebra stuff…)  So far it seems to me that Rust is the only one.  Google Go forces using a garbage collector and has no operator overloading, both of which are deal breakers for me.
Mar 30 11:05:10 <kefin>	If I want to create a quad-tree using BTreeMap, should I impl partialEq and partialOrd and on a 2-tuple of position?
Mar 30 11:05:16 *	klue (foo@moz-ijksur.hfc.comcastbusiness.net) has joined
Mar 30 11:07:14 *	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined
Mar 30 11:07:48 *	fl0w has quit (Client exited)
Mar 30 11:08:30 <bluss>	that is not enough to mkae a quad tree
Mar 30 11:08:31 <kimundi>	halabund: Honestly, I wouldn't know. I know that Ada is sometimes thrown around as a something similar powerful to Rust, but I have no idea if it is applicable here
Mar 30 11:09:16 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 11:09:49 <halabund>	I heard of nothing else (except C++) advertising zero-overhead abstraction as a core principle.
Mar 30 11:10:54 <kimundi>	halabund: Ah, there is stuff like D and the zillion improvements-on-top-of-C/C++ languages
Mar 30 11:11:31 <halabund>	If something carries C++’s existing baggage then I’d rather stick to C++.  I forgot about D!
Mar 30 11:11:32 *	psd (uid62508@moz-6soqq9.richmond.irccloud.com) has joined
Mar 30 11:11:48 <kimundi>	heh, reasonable standpoint :)
Mar 30 11:12:47 *	}ls{ (uhelp@moz-lbcfju.dip0.t-ipconnect.de) has joined
Mar 30 11:12:58 <halabund>	When I was learning C++ many years ago, I used the Digital Mars compiler … reasonably compliant, free, affordable to download through dial-up.  That’s when I saw D, but never looked at it in detail.
Mar 30 11:13:13 *	skade_ (skade@moz-4eh.d50.201.212.IP) has joined
Mar 30 11:13:14 <kimundi>	halabund: https://en.wikipedia.org/wiki/Julia_%28programming_language%29 maybe?
Mar 30 11:13:49 <kimundi>	can, but doesn't need to compile to C
Mar 30 11:15:16 <kimundi>	I think I also heard about Nim as a possible interesting language for stuff like this
Mar 30 11:16:41 *	skade has quit (Ping timeout: 121 seconds)
Mar 30 11:16:48 *	fatcatt316 (fatcatt316@moz-d6u.04k.86.173.IP) has joined
Mar 30 11:17:56 *	dethos (dethos@moz-4u3337.dsl.telepac.pt) has joined
Mar 30 11:18:34 *	monti-2 has quit (Ping timeout: 121 seconds)
Mar 30 11:20:06 <halabund>	Ah, Julia is great, but it’s more high level and not as fast.  It is _very_ fast compared to things it can be an alternative to (R, MATLAB, Python), but it’s not a C++ replacement.  Julia is something to use interactively.
Mar 30 11:20:10 <halabund>	I never heard of Nim before.
Mar 30 11:22:17 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 30 11:24:15 *	WaltS48 (Thunderbird@moz-5sucui.east.verizon.net) has joined
Mar 30 11:24:19 *	bcasiello (Mibbit@moz-rno88s.ams.hpecore.net) has joined
Mar 30 11:25:58 *	urcra (urcra@moz-9lk9gn.cpe.webspeed.dk) has joined
Mar 30 11:32:17 <dseitz>	Rust is my replacement. Once I started learning about data-oriented code and move semantics, I found Rust to be a perfect replacement for me.
Mar 30 11:32:17 *	fatcatt316 has quit (Connection closed)
Mar 30 11:35:34 <dseitz>	Jonathan Blow had an interesting talk about it. He kinda comes to the same conclusions you've got.
Mar 30 11:37:11 *	wldcordeiro (wldcordeiro@moz-ul1rm9.ut.comcast.net) has joined
Mar 30 11:37:48 <Cardoe>	Anyone with experience with docopt? I'm taking an argument in that's a port number (so its a u16) but docopt allows the value to be overflowed and I'm wondering what the right way is to constrain it to a properly sized integer.
Mar 30 11:38:24 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 30 11:46:23 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 11:46:27 *	Arash-M_ has quit (Quit: Abbacadabra.... PoOoOof)
Mar 30 11:47:52 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 30 11:47:59 *	tycoon177 has quit (Connection closed)
Mar 30 11:49:32 *	Damaki has quit (Ping timeout: 121 seconds)
Mar 30 11:53:40 *	lipkab (the_new_lip@moz-ktjdl3.biatv.hu) has joined
Mar 30 11:53:54 *	ARM9 (ARM9@moz-0cvl51.customer.t3.se) has joined
Mar 30 11:54:04 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 11:56:01 *	fbegou has quit (Quit: leaving)
Mar 30 11:58:15 *	kefin has quit (Ping timeout: 121 seconds)
Mar 30 11:58:27 <halabund>	kimundi: One last question: I often interface C++ code with Mathematica.  Mathematica has a C API for this.  It uses unions unfortunately … like this: http://pastebin.com/651KApRc  That union represents a “function argument” passed by Mathematica to C, and the C programmer has to know its type and access it accordingly.  Is this at all possible to handle with Rust?
Mar 30 11:59:01 *	romanlevin (romanlevin@moz-rm5mc8.echostar.pl) has joined
Mar 30 11:59:08 <halabund>	The union always contains a pointer, but that pointer could point to either a basic type (long int, double, etc.) or to “something special” which is in practice another struct pointer, which can be used with some provided API functions.
Mar 30 11:59:43 <halabund>	I do see that Rust has good support for interfacing with C but I don’t know if this more weird stuff can be handled well.
Mar 30 12:00:03 *	tennix (vagrant@moz-m06.lfv.114.123.IP) has joined
Mar 30 12:04:02 <kimundi>	halabund: So, this is totally doable in Rust, but involves a tiny bit more dirty work than if it where a C struct. Reason being that Rust does not currently have the concept of a untagged union, so you'd have to do a few casts to ferry that union around as a void*
Mar 30 12:04:34 <kimundi>	as in, if all arguments are always just a pointer, you can just use a single pointer type
Mar 30 12:05:05 <halabund>	OK, that much is enough for now (knowing for certain that it is certainly possible) and I can figure out the details later.  Thanks!
Mar 30 12:05:43 <kimundi>	if you truly want to work with C unions, well the existing binding generators sadly need to use the workaround of a suitably-large byte array that is being cast to one of many possible structs
Mar 30 12:09:19 *	mib_9bdr5c has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 12:09:43 *	cafeclimber (cafeclimber@moz-1jd3qq.tamulink.tamu.edu) has joined
Mar 30 12:10:22 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 30 12:10:24 *	cafeclimber (cafeclimber@moz-1jd3qq.tamulink.tamu.edu) has joined
Mar 30 12:11:18 *	Aedylthryd has quit (Ping timeout: 121 seconds)
Mar 30 12:11:42 *	skade_ has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 12:13:32 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 30 12:16:33 *	chain_chan (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 30 12:17:56 *	jas0 has quit (Quit: Leaving)
Mar 30 12:19:01 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 30 12:19:27 *	fl0w has quit (Client exited)
Mar 30 12:20:05 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 30 12:21:45 *	kefin (kefin@moz-bvv72q.cgn.ntnu.no) has joined
Mar 30 12:22:17 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 12:24:07 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 30 12:24:37 *	fl0w has quit (Client exited)
Mar 30 12:26:39 *	fl0w (fl0w@moz-3ma2hr.customers.ownit.se) has joined
Mar 30 12:26:56 *	fl0w has quit (Client exited)
Mar 30 12:29:25 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 30 12:32:30 *	ironpillow (ironpillow@moz-0lv.lvk.77.192.IP) has joined
Mar 30 12:33:16 *	iew (Mibbit@moz-km3.ak4.206.115.IP) has joined
Mar 30 12:37:25 *	romanlevin has quit (Ping timeout: 121 seconds)
Mar 30 12:38:20 *	iew has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 12:38:44 *	ParadoxSpiral_ (ParadoxSpir@moz-0587or.dip0.t-ipconnect.de) has joined
Mar 30 12:38:45 *	lipkab has quit (Ping timeout: 121 seconds)
Mar 30 12:39:22 *	akarambir has quit (Quit: Leaving...)
Mar 30 12:40:08 *	ironpillow has quit (Quit: Bye all! Have a nice day :))
Mar 30 12:42:02 *	ParadoxSpiral has quit (Ping timeout: 121 seconds)
Mar 30 12:42:50 *	robojeb has quit (Quit: ZNC 1.6.3 - http://znc.in)
Mar 30 12:43:07 *	ironpillow (ironpillow@moz-0lv.lvk.77.192.IP) has joined
Mar 30 12:43:11 *	ironpillow has quit (Quit: Bye all! Have a nice day :))
Mar 30 12:44:09 *	tycoon177 has quit (Connection closed)
Mar 30 12:44:25 *	brson (brson@moz-u3dg2t.sfo1.mozilla.com) has joined
Mar 30 12:44:31 *	skade (skade@moz-glo3te.dip0.t-ipconnect.de) has joined
Mar 30 12:48:25 *	Zr40 (zr40@moz-92llkv.adsl.xs4all.nl) has joined
Mar 30 12:48:41 *	dethos has quit (Ping timeout: 121 seconds)
Mar 30 12:49:07 *	dethos (dethos@moz-4u3337.dsl.telepac.pt) has joined
Mar 30 12:49:11 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 30 12:49:11 *	cbrewster has quit (Connection closed)
Mar 30 12:49:37 *	vmesons has quit (Quit: Konversation terminated!)
Mar 30 12:49:48 *	vmeson (rmacleod@moz-hq5.1km.224.128.IP) has joined
Mar 30 12:50:04 *	durka42 has quit (Client exited)
Mar 30 12:57:24 *	starblue has quit (Ping timeout: 121 seconds)
Mar 30 13:00:48 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 13:04:54 *	frankmcsherry has quit (Connection closed)
Mar 30 13:09:42 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 30 13:15:23 *	Emilgardis (Emilgardis@moz-j1r0h9.tbcn.telia.com) has joined
Mar 30 13:18:46 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:21:23 *	jas0 (jason@moz-vvo.58k.122.38.IP) has joined
Mar 30 13:22:50 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 30 13:26:12 <halabund>	Silly beginner question … Reading through the tutorial I see that arrays are of fixed size.  How can I have a numerical array whose size is determined at runtime?  No need to resize it for now, but the size may depend e.g. on a function argument.
Mar 30 13:26:37 *	foser_ has quit (Client exited)
Mar 30 13:28:03 <halabund>	I see the section on vectors, but that doesn’t appear to be a basic type, so two questions: 1. how is such a thing implemented in terms of basic types?  2. vectors appear to have runtime bouds checking which will be a performance hit; how can I ensure good performance?
Mar 30 13:28:13 *	zrsmith92 (textual@moz-gehaap.sntcca.sbcglobal.net) has joined
Mar 30 13:30:03 <panicbit>	halabund: There are different ways how a dynamic array can be implemented so it is just implemented in a library instead of the language itself
Mar 30 13:30:26 <panicbit>	halabund: To implemente them yourself you probably need a tiny bit of unsafe code (raw pointer stuff)
Mar 30 13:30:36 <halabund>	OK, later then
Mar 30 13:30:37 <panicbit>	halabund: The performance hit is usually not too bad
Mar 30 13:30:48 <halabund>	What if it *is* too bad?  What would one do then?
Mar 30 13:30:52 <mbrubeck>	halabund: The Rostonomicon has a chapter about Vec internals: https://doc.rust-lang.org/nomicon/vec.html
Mar 30 13:30:56 <panicbit>	halabund: But if you want to avoid them, then there's get_unchecked
Mar 30 13:31:06 <halabund>	OK, thanks!
Mar 30 13:31:31 <panicbit>	halabund: Which btw is unsafe ;)
Mar 30 13:31:47 <mbrubeck>	halabund: The main trick is to iterate over Vec using iterators, rather than indices.  (Don't do `for i in 0..len { do_stuff(vec[i]); }`.)
Mar 30 13:32:01 <halabund>	Got it
Mar 30 13:32:16 <mbrubeck>	halabund: Rust's iterators are designed such that it's very easy for the optimizer to eliminate bounds checks when you use them.
Mar 30 13:32:18 <halabund>	At this stage I’m just learning, so don’t actually have a performance problem
Mar 30 13:32:41 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 13:32:58 <mbrubeck>	(A simple loop using indices might also have bounds checks eliminated, but it's harder to guarantee.)
Mar 30 13:33:55 *	hunt has quit (Ping timeout: 121 seconds)
Mar 30 13:34:09 <halabund>	For when I do need explicit indexing, what is the easiest or best way to do it in a way that bounds checking can be turned on or off?  (So I can check the actual performance impact.)
Mar 30 13:34:33 *	foser (foser@moz-vchu7j.dynamic.ziggo.nl) has joined
Mar 30 13:34:35 *	foser is now known as foser_
Mar 30 13:34:45 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 13:36:14 <halabund>	I mean, does that involve get_unchecked plus a manual (toggleable) check, or is there a nice builtin way?
Mar 30 13:36:57 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 13:37:46 *	WaltS48 (Thunderbird@moz-5sucui.east.verizon.net) has left
Mar 30 13:38:22 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:39:18 <mbrubeck>	halabund: There's no "turn off all bounds checks" option
Mar 30 13:39:23 *	psd has quit (Quit: Connection closed for inactivity)
Mar 30 13:39:42 *	hunt (hunt@moz-o0plju.range86-169.btcentralplus.com) has joined
Mar 30 13:40:08 <mbrubeck>	Maybe you could write a wrapper around Vec<[T]> with a `get` method that is either checked or not, with a #[cfg] switch to change it at compile time.
Mar 30 13:40:55 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 13:42:02 <halabund>	OK, got it
Mar 30 13:43:00 *	lipkab (the_new_lip@moz-ktjdl3.biatv.hu) has joined
Mar 30 13:45:02 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 30 13:45:09 *	carols10cents (carols10cen@moz-v0i.cad.89.208.IP) has joined
Mar 30 13:46:53 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 30 13:47:08 *	mib_h3gu0h (Mibbit@moz-hgrih3.web.vodafone.de) has joined
Mar 30 13:48:09 <mib_h3gu0h>	Is there a ruat equivalent of c++ std::aligned_storage_t?
Mar 30 13:48:40 <mib_h3gu0h>	*rust* equivalent
Mar 30 13:49:55 *	nadirs (nadirs@moz-64sll0.retail.telecomitalia.it) has joined
Mar 30 13:50:09 <steveklabnik>	i'm not sure there is
Mar 30 13:51:12 *	slayerjain (uid117577@moz-kmas3q.brockwell.irccloud.com) has joined
Mar 30 13:52:10 *	FLashM (Mibbit@moz-te6.6mc.14.130.IP) has joined
Mar 30 13:52:17 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 30 13:53:46 *	fjh has quit (Ping timeout: 121 seconds)
Mar 30 13:54:14 *	skade has quit (Connection closed)
Mar 30 13:54:16 *	skade_ (skade@moz-glo3te.dip0.t-ipconnect.de) has joined
Mar 30 13:54:24 *	halabund has quit (Client exited)
Mar 30 13:54:32 *	tycoon177 has quit (Connection closed)
Mar 30 13:55:25 *	tycoon177 (tycoon177@moz-psf.jgd.119.192.IP) has joined
Mar 30 13:55:45 *	jas0 has quit (Quit: Leaving)
Mar 30 13:55:50 *	fjh (fjh@moz-mof4p1.62vh.lq23.04f8.2a01.IP) has joined
Mar 30 13:57:45 *	cbrewster has quit (Connection closed)
Mar 30 13:57:56 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:58:28 *	aaaa (aa@moz-mff.9es.222.77.IP) has joined
Mar 30 13:58:29 *	cbrewster has quit (Connection closed)
Mar 30 13:59:01 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 13:59:19 *	LucaRood (LucaRood@moz-emgd4v.agyonet.com.br) has joined
Mar 30 13:59:33 *	tycoon177 has quit (Ping timeout: 121 seconds)
Mar 30 14:00:07 *	aaaa has quit (Quit: )
Mar 30 14:01:13 *	libercv (libercv@moz-auhdbr.user.ono.com) has joined
Mar 30 14:01:15 *	mib_h3gu0h has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 14:01:45 *	goldenbadger has quit (Quit: WeeChat 1.5-dev)
Mar 30 14:01:54 *	goldenbadger (GoldenBadge@moz-i7uquf.redbrick.dcu.ie) has joined
Mar 30 14:04:36 *	sprocket (Mibbit@moz-hgrih3.web.vodafone.de) has joined
Mar 30 14:05:04 *	sprocket has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 14:06:11 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 30 14:06:59 *	cpup has quit (Ping timeout: 121 seconds)
Mar 30 14:08:24 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 30 14:08:35 *	cafeclimber (cafeclimber@moz-tifnb4.tamulink.tamu.edu) has joined
Mar 30 14:08:36 *	woboats has quit (Client exited)
Mar 30 14:08:45 *	cpup (cpup@moz-oj5.69g.218.32.IP) has joined
Mar 30 14:12:28 *	jaysonsantos (quassel@moz-5dg.86n.210.62.IP) has joined
Mar 30 14:13:10 <jaysonsantos>	Sorry to repost this, I just realized that this channel exists.
Mar 30 14:13:10 <jaysonsantos>	Hey guys, I am writing a library to learn rust, I have no idea on publishing it on cargo because there are already some solutions. I was wondering if someone could just take a look so check if I am heading the right way on rust learning. You don't need to take a deep look, just scroll thru the main file is already ok :). I am also planning to create traits to implement cacheable types because for now I only do strings. https://github.
Mar 30 14:13:10 <jaysonsantos>	com/jaysonsantos/bmemcached-rs
Mar 30 14:13:40 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 14:14:27 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 30 14:17:09 *	jeffdb (JeffDB@moz-fp3.7hu.21.199.IP) has joined
Mar 30 14:21:37 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 30 14:23:01 *	woboats has quit (Client exited)
Mar 30 14:24:00 <pingveno>	jaysonsantos: I was noticing that in set_add_replace, you're using String, but key and value are never stored.
Mar 30 14:24:20 <pingveno>	If you take &str, that gives more flexibility.
Mar 30 14:24:52 *	lipkab has quit (Ping timeout: 121 seconds)
Mar 30 14:25:07 *	monti-2 (monti@moz-aidh09.broadband.corbina.ru) has joined
Mar 30 14:25:09 <pingveno>	For example, being able to use string literals directly instead of going through a to_owned() call
Mar 30 14:25:48 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 30 14:26:17 <jaysonsantos>	would it also coerse '&static str?
Mar 30 14:26:25 <pingveno>	Yeah
Mar 30 14:26:36 <jaysonsantos>	ah, nice :), I will change it
Mar 30 14:26:53 <pingveno>	You could even use generics and take AsRef<[u8]> to allow it to work with &str, &[u8], String, Vec, Path, etc.
Mar 30 14:28:17 *	rtrt (Mibbit@moz-778.jcg.51.106.IP) has joined
Mar 30 14:28:18 <jaysonsantos>	I am lost on that one, I will read about the AsRef
Mar 30 14:28:33 <jaysonsantos>	Would it also work for Result<&str, Error>?
Mar 30 14:29:04 <rtrt>	Can I set a timeout for sync_channel()?
Mar 30 14:29:26 <jaysonsantos>	because for example, after using from_utf8 I have to return Ok(data.to_owned()) because the value inside wouldn't live enough time
Mar 30 14:30:48 <pingveno>	fn set_add_replace<K, V>(&self, command: Command, key: K, value: V, time: u32) -> Result<...> where K: AsRef<[u8]>, V: AsRef<[u8]>
Mar 30 14:31:03 <pingveno>	let key = key.as_ref(); let value = value.as_ref();
Mar 30 14:32:59 *	lipkab (the_new_lip@moz-ktjdl3.biatv.hu) has joined
Mar 30 14:33:16 <pingveno>	I think you're asking because of this line: https://github.com/jaysonsantos/bmemcached-rs/blob/master/src/protocol.rs#L153
Mar 30 14:34:14 <pingveno>	You do need to return a Result<String, BMemCachedError> because you are allocating a string, then returning it.
Mar 30 14:34:46 <pingveno>	That said, you can avoid an allocation there by using String::from_utf8
Mar 30 14:35:33 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 14:36:06 <jaysonsantos>	The line I was wondering was this https://github.com/jaysonsantos/bmemcached-rs/blob/master/src/protocol.rs#L197
Mar 30 14:36:15 *	chridou (chridou@moz-tl1ku3.dip0.t-ipconnect.de) has joined
Mar 30 14:36:21 <jaysonsantos>	In this case I should maintain Result<String...?
Mar 30 14:36:27 *	chain_chan has quit (A TLS packet with unexpected length was received.)
Mar 30 14:36:43 <mbrubeck>	jaysonsantos: Yes, but you can avoid cloning the data by using String::from_utf8 instead of str::from_utf8
Mar 30 14:37:59 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 14:39:19 *	kefin has quit (Ping timeout: 121 seconds)
Mar 30 14:39:38 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 30 14:39:52 *	fl3 (fl3__@moz-ghm.6bs.172.109.IP) has joined
Mar 30 14:40:38 <pingveno>	jaysonsantos: The reason that you have to return a String is that someone has to have ownership over the memory that was allocated in the function.
Mar 30 14:41:17 <jaysonsantos>	got it, not like C 
Mar 30 14:42:10 <mbrubeck>	jaysonsantos: Well, in C someone needs to have ownership (otherwise the data would get leaked).  But there's no way to tell the compiler who the owner is. :)
Mar 30 14:42:17 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 14:42:31 <pingveno>	C: ownership is in your head. Rust: ownership is in your code
Mar 30 14:44:24 <mbrubeck>	(To be fair, C does make it easier to implement some ownership patterns (though not very easy to verify the implementations...).)
Mar 30 14:44:54 <pingveno>	mbrubeck: circular?
Mar 30 14:45:50 <chridou>	Hi! When serializing a uuid(from crate uuid) field with serde, do i have to build crate uuid from the repo or can i use the lib directly from crates.io? I get the error, that serde::ser::Serialize is not implemented for uuid. But in the source of crate uuid i see that it is there under a feature toggle.
Mar 30 14:45:53 <mbrubeck>	yeah, or you can have various dynamic shared ownership beyond just refcounting
Mar 30 14:46:07 <mbrubeck>	(I don't have a good example, mostly just thinking theoretically.)
Mar 30 14:46:28 <mbrubeck>	chridou: You can enable features for your dependencies in Cargo.toml
Mar 30 14:47:09 <chridou>	I did this: uuid = { version = "0.1.18", features = ["serde"] }. is this sufficient?
Mar 30 14:47:35 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 30 14:47:40 <mbrubeck>	chickadee: Yes, that should work
Mar 30 14:48:14 <chridou>	mhhh.. thanks. think i have to explore that a bit more...
Mar 30 14:48:20 <mbrubeck>	chridou: In Cargo.lock, what version(s) of serde are included?
Mar 30 14:49:44 <mbrubeck>	chridou: It looks like uuid 0.1.18 depends on serde 0.6.  You can either change your other code to use the same version, or ask acrichto to publish a new version of uuid that's compatible with serde 0.7.
Mar 30 14:50:56 <chridou>	"0.6.15" and "0.7.0". that's strange.. 
Mar 30 14:51:21 <mbrubeck>	chridou: By searching through Cargo.toml you can see which package depends on serde 0.7.
Mar 30 14:51:42 *	zrsmith92 (textual@moz-3mp.b4k.25.8.IP) has joined
Mar 30 14:52:00 <mbrubeck>	chridou: `uuid` master has already upgraded to 0.7, so you can fix this by temporarily using a git dependency for uuid.
Mar 30 14:52:25 <jaysonsantos>	mbrubeck: About C I was referring to the way I could just allocate a pointer on my function, fill it and return it for the calee take care of it
Mar 30 14:53:01 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 30 14:53:02 <jaysonsantos>	pingveno: I changed all String parameters to AsRef<[u8]> and it worked like a charm, thanks
Mar 30 14:53:50 *	woboats has quit (Client exited)
Mar 30 14:53:50 <mbrubeck>	jaysonsantos: Yeah.  You can think of String as "pointer to a string that is now the callee's responsability to deallocate" and "&str" as "pointer to a string that someone else is going to deallocate"
Mar 30 14:54:13 <chridou>	ah, I think that's me doing serde = "*". I'll try to fix my version and do pull request for uuid...
Mar 30 14:54:45 <chridou>	ah, ok. saw that with master
Mar 30 14:57:36 *	IanWhitney (Mibbit@moz-9p13jt.vpn.umn.edu) has joined
Mar 30 14:57:52 *	monti-2 has quit (Ping timeout: 121 seconds)
Mar 30 14:57:54 <rtrt>	Can I set a timeout for sync_channel()?
Mar 30 14:58:34 <IanWhitney>	Hi there. I'm wondering if Rust has something similar to Ruby's `cover?` or `include?` methods for ranges. If I have a range of (1..10). Is there a function I can use to see if a random integers is in that range?
Mar 30 14:59:04 <IanWhitney>	I dug around in the Range docs, but didn't see anything. But I figured I'd double check here.
Mar 30 15:00:24 <bluss>	IanWhitney: there's no such method, but it's being added
Mar 30 15:00:36 <IanWhitney>	cool. thanks.
Mar 30 15:00:41 <jaysonsantos>	IanWhitney: Is it something like this? https://doc.rust-lang.org/rand/rand/trait.Rng.html#method.choose
Mar 30 15:00:49 <mbrubeck>	rtrt: Not directly, though I guess you could start a thread that will send a timeout message after sleeping for some time.
Mar 30 15:00:55 <mbrubeck>	IanWhitney: It will be .contains()
Mar 30 15:01:36 <mbrubeck>	https://github.com/rust-lang/rfcs/blob/master/text/1434-contains-method-for-ranges.md
Mar 30 15:01:50 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 15:02:41 <IanWhitney>	I will watch for that to land, @mbrubek. Thanks.
Mar 30 15:05:39 <Xion>	AFAIK if you define a Contains trait, you can impl it for Ranges yourself.
Mar 30 15:05:45 <mbrubeck>	yup
Mar 30 15:08:20 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 15:09:22 *	kk has quit (Ping timeout: 121 seconds)
Mar 30 15:12:05 *	kefin (kefin@moz-t5j.bbc.113.188.IP) has joined
Mar 30 15:12:32 *	hastake has quit (Ping timeout: 121 seconds)
Mar 30 15:12:39 *	hastake (ack@moz-hcov7m.214.coditel.net) has joined
Mar 30 15:14:03 *	halabund (halabund@moz-3gn8bo.rev.sfr.net) has joined
Mar 30 15:14:10 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 30 15:36:41 *	Disconnected (Network is unreachable)
**** ENDING LOGGING AT Wed Mar 30 15:36:41 2016

**** BEGIN LOGGING AT Wed Mar 30 19:38:18 2016

Mar 30 19:38:18 *	Now talking on #rust-beginners
Mar 30 19:38:18 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 30 19:38:18 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 30 19:42:11 *	frankmcsherry has quit (Connection closed)
Mar 30 19:42:36 *	Malnormalulo (Malnormalul@moz-83aus5.cable.rcn.com) has joined
Mar 30 19:43:12 *	TheSpiritXIII (DaSpirit@moz-cspleg.fios.verizon.net) has joined
Mar 30 19:43:39 *	DaSpirit has quit (Connection closed)
Mar 30 19:46:09 *	monti-2 has quit (Ping timeout: 121 seconds)
Mar 30 19:50:12 *	ebvalaim has quit (Quit: Leaving.)
Mar 30 19:55:39 <aevitas>	any good ideas for a json library for rust?
Mar 30 19:55:40 *	cbrewste_ (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 19:55:56 <steveklabnik>	the two big ones are rustc-serilaize and serde
Mar 30 19:56:05 <steveklabnik>	serde is newer and fuller-featured but can be a pain to use on stable
Mar 30 19:56:20 <steveklabnik>	rustc-serialize is older, and is easier ot use, but may be missing a feture
Mar 30 19:57:33 *	Malnormalulo has quit (Ping timeout: 121 seconds)
Mar 30 19:57:57 *	pittaman has quit (Quit: ChatZilla 0.9.92 [Firefox 46.0/20160324011246])
Mar 30 19:58:24 <curtism>	Where "pain to use" is builds consistently fail from assertions and stack overflows!
Mar 30 19:59:06 <steveklabnik>	yeah, it has to rely on some complicated stuff
Mar 30 19:59:08 <steveklabnik>	there is work that will make it better
Mar 30 19:59:39 <aevitas>	just looking at serde, do I have to include all fields that are returned in json format in the struct
Mar 30 20:00:13 <aevitas>	so for example, a http request returns me a json object with 5 fields, can serde handle it if my struct only defines 4 of those fields and ommits one of them?
Mar 30 20:00:19 *	peschkaj has quit (Ping timeout: 121 seconds)
Mar 30 20:01:00 *	himi (fow035@moz-9pb.ksq.203.150.IP) has joined
Mar 30 20:02:08 <panicbit>	I thing that was recently changed/allowed in serde
Mar 30 20:02:12 <steveklabnik>	yes
Mar 30 20:05:01 <panicbit>	aevitas: There is `#[serde(deny_unknown_fields)` to stop parsing when unknown fields are encountered
Mar 30 20:05:12 <panicbit>	So default is to ignore unknown fields
Mar 30 20:05:28 <panicbit>	At least since serde > 0.6
Mar 30 20:05:43 <aevitas>	but even when encountering an unknown field it won't stop parsing the rest of the input stream right?
Mar 30 20:05:47 *	klue has quit (Ping timeout: 121 seconds)
Mar 30 20:05:49 <panicbit>	Yeah
Mar 30 20:06:07 <aevitas>	okay, let's give that a try :-) thank you
Mar 30 20:06:11 *	robojeb (Jeb@moz-vt9fre.4d09.d820.0401.2601.IP) has joined
Mar 30 20:07:45 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 30 20:08:28 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 30 20:12:31 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 30 20:12:47 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 30 20:14:29 *	Aceeri has quit (Quit: Connection closed for inactivity)
Mar 30 20:14:49 *	zhoeon (fc@moz-0t3.hcj.48.199.IP) has joined
Mar 30 20:15:37 <aevitas>	Serde is now throwing me an error, saying that the trait is not implemented
Mar 30 20:15:58 <aevitas>	however I added this to my struct #[derive(Deserialize, Debug)] 
Mar 30 20:16:19 <curtism>	What is the precise error?
Mar 30 20:16:31 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 20:17:04 <aevitas>	http://pastebin.com/jCpDHud2
Mar 30 20:17:06 *	skade (skade@moz-c1c8jq.pools.vodafone-ip.de) has joined
Mar 30 20:17:22 *	skade has quit (Connection closed)
Mar 30 20:17:29 <aevitas>	Can Serde generate code for custom datatypes?
Mar 30 20:18:50 <panicbit>	aevitas: Yes, but to do that you need to use the plugins (which only work on nightly rust)
Mar 30 20:19:29 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 30 20:19:42 <panicbit>	aevitas: Like in this example https://github.com/serde-rs/serde#using-serde-with-nightly-rust-and-serde_macros
Mar 30 20:22:57 <aevitas>	I am using 1.9
Mar 30 20:23:10 <aevitas>	that's why I am surprised that the example doesn't work.
Mar 30 20:23:33 <aevitas>	http://pastebin.com/dDKjX61H
Mar 30 20:23:37 <aevitas>	the code
Mar 30 20:23:54 <aevitas>	http://pastebin.com/NYfG8vEZ
Mar 30 20:23:56 <aevitas>	the toml
Mar 30 20:24:05 <aevitas>	and rustc 1.9.0-nightly (d5a91e695 2016-03-26)
Mar 30 20:24:30 <curtism>	aevitas: Please never use * dependencies
Mar 30 20:24:53 <curtism>	Probably serde, serde_json and serde_macros are not the right versions
Mar 30 20:25:30 <mbrubeck>	aevitas: I wonder if you need to `use` the traits
Mar 30 20:25:55 <curtism>	aevitas: shouldn't be
Mar 30 20:25:57 <curtism>	er
Mar 30 20:26:01 <curtism>	mbrubeck: shouldn't be
Mar 30 20:26:34 <mbrubeck>	yeah, the examples don't...
Mar 30 20:27:01 <curtism>	wildcard dependencies is very suspicious
Mar 30 20:27:19 <curtism>	It's likely different dependencies disagree on what Deserialize is
Mar 30 20:27:19 <b_jonas>	Hello. Is there a way to mark a function I define such that its definition (body) shall be available to other creates, so that the compiler can possible inline it in those crates or otherwise inspect its definition for optimizations?
Mar 30 20:27:21 <aevitas>	I am new to rust and am just hacking around
Mar 30 20:27:43 <aevitas>	that's why the wildcard deps
Mar 30 20:30:01 <durka42>	b_jonas: #[inline]
Mar 30 20:30:02 <curtism>	b_jonas: I believe marking a function #[inline] causes this to happen
Mar 30 20:30:02 <b_jonas>	I see
Mar 30 20:30:02 <curtism>	aevitas: crates.io gives you the recommended line to add to your Cargo.toml
Mar 30 20:30:02 <steveklabnik>	a bit of background
Mar 30 20:30:02 <steveklabnik>	rust/llvm will choose to inline stuff or not, always
Mar 30 20:30:02 <b_jonas>	thank you
Mar 30 20:30:02 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 30 20:30:02 <steveklabnik>	you can use that attribute to constrol int
Mar 30 20:30:02 <steveklabnik>	it
Mar 30 20:30:02 <steveklabnik>	control it.
Mar 30 20:30:02 <steveklabnik>	inline(always), inline(never)
Mar 30 20:30:02 <aevitas>	What do you mean by the use traits in context of getting serde to automatically create the deserialization code
Mar 30 20:30:02 <steveklabnik>	but, cross-crate inlining won't happen without the attribute
Mar 30 20:30:02 <b_jonas>	Does #[inline] add any sort of extra requirement for what I can put in the function definition? 
Mar 30 20:30:05 <durka42>	none
Mar 30 20:30:07 <b_jonas>	good, thank you
Mar 30 20:31:10 <panicbit>	aevitas: Serde uses the Deserialization trait to define an interface for types that can be deserialized. When you write `derive(Deserialize)` then the serde plugin should implement that trait for you.
Mar 30 20:31:10 <b_jonas>	Are the definition of const (not functions) always exported to other crates? 
Mar 30 20:31:56 <panicbit>	aevitas: And by `using` the Trait he means that it should be imported
Mar 30 20:31:56 <curtism>	Anything marked `pub` at the crate level is exported to other crates
Mar 30 20:31:56 <panicbit>	aevitas: Using the `use`
Mar 30 20:32:13 <b_jonas>	curtism: sure, but that's the declaration. I mean the same way as #[inline] functions, so that the definition (value) of the const is available to the optimizer from other crates.
Mar 30 20:32:45 <curtism>	Presumably a const declaration _is_ its definition
Mar 30 20:32:53 *	towynlin (towynlin@moz-4d2.4lh.87.199.IP) has joined
Mar 30 20:32:56 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 30 20:33:39 <zhoeon>	What would be a typical way to make conditional compiling based on the fact that I am building debug or release ? I can build conditionally with plugins with cargo but not this yet.
Mar 30 20:33:43 <aevitas>	mh, using "use serde::de::Deserialize; " or "use serde::Deserialize; " makes no difference. Still the same error. Is this error message telling me that the Serge macro failed to generate the code or is it that something else failed?
Mar 30 20:34:58 *	aevitas has quit (A TLS packet with unexpected length was received.)
Mar 30 20:35:15 *	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined
Mar 30 20:35:22 <mbrubeck>	I think aevitas was missing #![plugin(serde_macros)]
Mar 30 20:35:36 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 20:35:52 <curtism>	How is there no error from that?
Mar 30 20:36:09 <curtism>	playbot: #[derive(Foobar)] struct A;
Mar 30 20:36:10 -playbot/#rust-beginners-	<anon>:9:18: 9:24 error: `#[derive]` for custom traits is not stable enough for use and is subject to change (see issue #29644)
Mar 30 20:36:10 -playbot/#rust-beginners-	<anon>:9         #[derive(Foobar)] struct A;
Mar 30 20:36:10 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1WYJH2u
Mar 30 20:36:12 <kimundi>	b_jonas: There both "const" and "static" items in Rust, and the major difference between the two is that the former acts as a rvalue/always aviable inlineable value, while the latter is a static memory location and downstream crates might just see the symbol and type
Mar 30 20:36:30 <curtism>	playbot-mini: #![custom_derive] #[derive(Foobar)] struct A;
Mar 30 20:36:30 -playbot-mini/#rust-beginners-	<anon>:1:28: 1:34 error: `#[derive]` for custom traits is not stable enough for use and is subject to change (see issue #29644)
Mar 30 20:36:30 -playbot-mini/#rust-beginners-	<anon>:1 #![custom_derive] #[derive(Foobar)] struct A;
Mar 30 20:36:30 -playbot-mini/#rust-beginners-	output truncated; full output at: http://bit.ly/22Q4xIn
Mar 30 20:36:51 <curtism>	ugh
Mar 30 20:38:16 <curtism>	http://is.gd/fkCDhg
Mar 30 20:38:16 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 30 20:38:16 <curtism>	Okay that's kind of scary
Mar 30 20:38:16 *	rtrt (Mibbit@moz-778.jcg.51.106.IP) has joined
Mar 30 20:38:18 <b_jonas>	kimundi: ok, that means const always export the definition to other crates too. thank you
Mar 30 20:39:21 <curtism>	Hm, it does give a warning though
Mar 30 20:39:33 <curtism>	And that wasn't in the output they pasted
Mar 30 20:39:49 <rtrt>	If I create a binary with armv7-unknown-linux-gnueabihf as target, will it work on android ?
Mar 30 20:39:56 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 30 20:41:14 *	cbrewste_ is now known as cbrewster
Mar 30 20:41:31 *	cbrewster has quit (Quit: )
Mar 30 20:41:35 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 30 20:41:39 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 20:42:02 <kimundi>	b_jonas: yep
Mar 30 20:42:30 <panicbit>	rtrt: I think yes. But only on phones that support armv7 and that have hard fp support
Mar 30 20:42:49 <panicbit>	rtrt: I think my Asus transformer for example only has an arm6
Mar 30 20:43:59 <towynlin>	I want to iterate over graphemes in a &str. I see references on the web to a .graphemes() function on &str. However, I can't find it in the &str docs or the String docs and get this compiler error: "no method named `graphemes` found for type `&str` in the current scope". Removed? Is there a better way? I'm very new to rust so totally could be missing something simple.
Mar 30 20:44:00 <rtrt>	So everything I require is statically compiled into the libray? Rust isn't dependent on any other system libraries?
Mar 30 20:44:01 <panicbit>	I might be wrong though
Mar 30 20:44:34 <panicbit>	rtrt: It should depend a bit on libc
Mar 30 20:44:36 <rtrt>	*statically compiled into binary
Mar 30 20:44:58 <panicbit>	rtrt: So without a chroot you probably won't be able to run the binary as is
Mar 30 20:45:10 <rtrt>	But android won't have glibc
Mar 30 20:45:14 <rtrt>	Yeah
Mar 30 20:45:22 <panicbit>	(or without setting up LD_PRELOAD_PATH
Mar 30 20:45:23 <panicbit>	)
Mar 30 20:45:24 <durka42>	towynlin: you may be looking at old docs. the 'unicode-segmentation' crate provides such a function
Mar 30 20:45:25 *	skade (skade@moz-c1c8jq.pools.vodafone-ip.de) has joined
Mar 30 20:45:34 <panicbit>	rtrt: Maybe musl could be used in this case
Mar 30 20:46:02 <towynlin>	durka42: Thanks. Goes looking...
Mar 30 20:46:32 <durka42>	!crate unicode-segmentation
Mar 30 20:46:32 <rustbot>	unicode-segmentation (0.1.2) - This crate provides Grapheme Cluster and Word boundariesaccording to Unicode Standard Annex #29 rules. -> https://crates.io/crates/unicode-segmentation
Mar 30 20:47:01 <towynlin>	durka42: Thank you!
Mar 30 20:47:05 <panicbit>	rtrt: This section of the book describes how to https://doc.rust-lang.org/book/advanced-linking.html#linux
Mar 30 20:48:05 <panicbit>	rtrt: "This binary [with musl] can be copied to almost any Linux machine with the same machine architecture and run without issues."
Mar 30 20:48:19 <mbrubeck>	rtrt: Is there a reason you aren't compiling for arm-linux-androideabi?
Mar 30 20:49:19 <rtrt>	I just wanted to know the difference between arm-linux-androideabi target and armv7-unknown target
Mar 30 20:49:40 <rtrt>	So musl target is totally static?
Mar 30 20:49:56 *	cbrewster has quit (Connection closed)
Mar 30 20:50:01 *	martianwars has quit (Quit: Connection closed for inactivity)
Mar 30 20:50:09 *	cc0_ (cc0_@moz-1bqsob.mn.comcast.net) has joined
Mar 30 20:50:49 *	Xal (xal@moz-5ijoa3.vw.shawcable.net) has joined
Mar 30 20:52:06 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 30 20:52:31 <rtrt>	I'm trying to use rust for production and I have a working binary compiled using armv7-unknown-linux-gnueabihf target which working well on traditional linux (yocto). We might switch to android in future and I want know how easy it is to port
Mar 30 20:54:53 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 30 20:57:07 <rtrt>	@panicbit I couldn't find any arm musl targets
Mar 30 20:58:23 <panicbit>	rtrt: I have no idea what is exactly required to use musl in this case but it looks like this is useful http://wiki.musl-libc.org/wiki/Getting_started#Notes_on_ARM_Float_Mode
Mar 30 21:00:46 <rtrt>	@panicbit Thanks. Will check it out
Mar 30 21:01:09 *	dethos has quit (Ping timeout: 121 seconds)
Mar 30 21:02:09 <towynlin>	durka: Thank you. I'm successfully compiling now. 👍  Had to add the dependency to Crate.toml, and "extern crate" and "use" statements in my source. Now I've learned that in the future I should search crates.io, which I didn't know about before.
Mar 30 21:02:23 <durka42>	yes crates.io has all sorts of goodies :)
Mar 30 21:03:32 <durka42>	and don't trust any documentation from before 2015
Mar 30 21:03:32 <durka42>	as everything about rust was in flux before then
Mar 30 21:03:32 *	bjz_ (bjz@moz-7au.as2.222.104.IP) has joined
Mar 30 21:04:20 <towynlin>	Gotcha gotcha. Yeah, was looking here http://www.steveklabnik.com/rust-issue-17340/ and here https://doc.rust-lang.org/std/primitive.str.html
Mar 30 21:04:53 *	bjz has quit (Ping timeout: 121 seconds)
Mar 30 21:06:05 *	stephank has quit (Ping timeout: 121 seconds)
Mar 30 21:06:12 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 21:06:15 <durka42>	yeah that first page is old
Mar 30 21:06:17 <durka42>	steveklabnik: ^
Mar 30 21:10:45 *	stephank (stephank@moz-csb70m.1hdc.4dv7.0058.2a02.IP) has joined
Mar 30 21:16:40 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 30 21:18:49 *	bjz (bjz@moz-puppgq.tpgi.com.au) has joined
Mar 30 21:19:20 *	bjz_ has quit (Ping timeout: 121 seconds)
Mar 30 21:20:38 *	ParadoxSpiral_ has quit (Quit: cya)
Mar 30 21:21:02 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 30 21:21:28 *	anastiel has quit (Connection closed)
Mar 30 21:21:58 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 30 21:22:24 *	anastiel has quit (Connection closed)
Mar 30 21:23:46 *	soundwave_rk has quit (Ping timeout: 121 seconds)
Mar 30 21:23:48 *	fl3 has quit (Connection closed)
Mar 30 21:25:11 *	zucchini (Mibbit@moz-5kvdk1.rsnweb.ch) has joined
Mar 30 21:25:53 *	zrsmith92 has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 21:27:59 *	woboats has quit (Client exited)
Mar 30 21:27:59 *	hectorgrey has quit (Ping timeout: 121 seconds)
Mar 30 21:28:47 *	zucchini has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 30 21:29:10 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 30 21:31:46 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 30 21:34:19 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 30 21:34:26 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 30 21:34:58 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 30 21:35:12 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 21:35:18 *	Malnormalulo (Malnormalul@moz-83aus5.cable.rcn.com) has joined
**** BEGIN LOGGING AT Wed Mar 30 23:24:52 2016

Mar 30 23:24:52 *	Now talking on #rust-beginners
Mar 30 23:24:52 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 30 23:24:52 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 30 23:25:14 <panicbit>	LambdaComplex: Hm, maybe it's worth storing the args in a Vec after all
Mar 30 23:26:41 <panicbit>	Oh, it might also be worth pointing out that there are magic argument parsers like docopt
Mar 30 23:27:17 <LambdaComplex>	yeah, i know about docopt and clap and such
Mar 30 23:27:25 <LambdaComplex>	but i think that's overkill for this :P
Mar 30 23:27:32 <panicbit>	I thought so
Mar 30 23:27:50 <panicbit>	But maybe not
Mar 30 23:34:20 <panicbit>	LambdaComplex: So if you want this to be done quick and dirty: http://is.gd/vuio8w
Mar 30 23:34:20 <panicbit>	LambdaComplex: Which I think is what you had originally, right?
Mar 30 23:34:20 <panicbit>	You at least had a Vec
Mar 30 23:34:20 <LambdaComplex>	panicbit: Basically, yeah
Mar 30 23:34:20 <LambdaComplex>	Which works pretty nicely since I can just call remove() as necessary
Mar 30 23:34:20 <LambdaComplex>	I think I have the argument handling working correctly so I think I'm gonna actually write resize() now :P
Mar 30 23:34:20 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 30 23:36:11 *	Xal has quit (Quit: WeeChat 1.4)
Mar 30 23:37:36 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 30 23:39:05 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 30 23:41:45 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 30 23:43:00 <cstearns>	Hey, can somebody give me a sanity check? I'm trying to add serde_macros to my project, and it's failing to compile on dep 'aster' (I'm on 1.9 nightly). I tried making a new project w/ cargo and only adding aster, and it also fails, but both aster and serde_macros are green on travis (https://travis-ci.org/serde-rs/aster). Am I missing something?
Mar 30 23:43:30 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 30 23:46:45 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 30 23:47:05 *	duncan (paul@moz-83kscv.mi.charter.com) has joined
Mar 30 23:50:49 *	desophos has quit (Ping timeout: 121 seconds)
Mar 30 23:51:05 *	urcra has quit (Ping timeout: 121 seconds)
Mar 30 23:51:08 <panicbit>	cstearns: You're probably using an older or newer version of rust than was used for the build on travis
Mar 30 23:51:24 *	duncan has quit (Ping timeout: 121 seconds)
Mar 30 23:52:21 *	TechnoCrunch (Tech@moz-ant.ip3.100.101.IP) has joined
Mar 30 23:53:18 <panicbit>	cstearns: i just tried on 2016-03-19, works there
Mar 30 23:53:24 <cstearns>	according to the logs, travis' last build (22 hours ago) was on 1.9.0-nightly (d5a91e695 2016-03-26), and I'm on 1.9.0-nightly (b678600ac 2016-03-29), so 3 days ahead. I don't suppose you know when travis actually updates its nightly?
Mar 30 23:53:50 <cstearns>	do you know if there's a way for me to downgrade to a specific version to test?
Mar 30 23:54:04 <panicbit>	cstearns: AFAIK the latest build get's pulled on each build
Mar 30 23:54:34 <panicbit>	cstearns: So that probably means that there was no code push in the last 3 days that triggered a rebuild
Mar 30 23:54:49 *	peschkaj has quit (Quit: Leaving)
Mar 30 23:55:33 <cstearns>	travis said it ran 22 hours ago, if I'm reading that correctly, but regardless I'll see if I can get on an older version to see if it works
Mar 30 23:55:36 <panicbit>	cstearns: it also seems to build on 2016-03-29
Mar 30 23:55:53 <cstearns>	am I looking in the wrong place?
Mar 30 23:55:53 <cstearns>	https://travis-ci.org/serde-rs/aster/jobs/119439150
Mar 30 23:55:56 *	peschkaj (peschkaj@moz-vr7pjk.or.comcast.net) has joined
Mar 30 23:56:19 <cstearns>	ohh you're saying you built it on 3/29
Mar 30 23:56:21 <cstearns>	sorry
Mar 30 23:56:41 <panicbit>	Yeah
Mar 30 23:56:45 <panicbit>	I did
Mar 30 23:57:10 <panicbit>	cstearns: What's the error that you're getting?
Mar 30 23:57:28 <panicbit>	cstearns: Also, what did you add to your Cargo.toml
Mar 30 23:57:31 <cstearns>	48 compiler errors
Mar 30 23:57:31 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 30 23:58:19 <cstearns>	and I added `aster = "0.3.0"` under dependencies
Mar 30 23:58:33 <panicbit>	cstearns: Do you need aster?
Mar 30 23:58:51 <panicbit>	cstearns: The current version seems to be 0.14.0
Mar 30 23:58:58 <panicbit>	That serde_macros requires
Mar 30 23:59:45 <panicbit>	just `serde_macros = "0.7.0"` should be enough
Mar 30 23:59:49 <cstearns>	it's the version I got after chasing down the macros error.. did you run with serde_marcros = "0.7.0"?
Mar 30 23:59:51 <cstearns>	ok
Mar 30 23:59:52 <panicbit>	(and `serde = "0.7.0")
Mar 30 23:59:58 <panicbit>	cstearns: yup
Mar 31 00:01:08 <cstearns>	oh. well. serde_macros compiles now :embarrassed:. I'm not sure what I changed, or what I got wrong in the first place
Mar 31 00:01:17 *	kimundi has quit (Ping timeout: 121 seconds)
Mar 31 00:01:21 <cstearns>	thanks for your help though :p
Mar 31 00:01:27 <panicbit>	¯\_(ツ)_/¯
Mar 31 00:01:47 *	frankmcsherry has quit (Ping timeout: 121 seconds)
Mar 31 00:02:22 <panicbit>	cstearns: Let's hope that compiler plugins will be stabilized in a not so distant future :)
Mar 31 00:02:31 <cstearns>	yeah
Mar 31 00:04:21 *	rumpler (Mibbit@moz-mvhbhq.dsl-w.verizon.net) has joined
Mar 31 00:04:34 *	rumpler has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 00:06:20 *	kimundi (kimundi@moz-n9cgd9.b49l.0hep.4fe2.2002.IP) has joined
Mar 31 00:09:00 *	duncan (paul@moz-83kscv.mi.charter.com) has joined
Mar 31 00:10:14 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 00:14:18 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 00:16:23 <josh>	This line of code isn't compiling for me and I'm not sure why:
Mar 31 00:16:30 <josh>	let mut file = try!(File::open("./foo.txt"));
Mar 31 00:17:09 <Xion>	josh: What's the return type of the function you've put it in?
Mar 31 00:17:38 <Xion>	When you use try!, the outer function must also return Result.
Mar 31 00:19:03 <josh>	This is a line of code from the std::fs::File reference:
Mar 31 00:19:09 <josh>	let mut f = try!(File::open("foo.txt"));
Mar 31 00:19:42 <josh>	Open returns Result<File>
Mar 31 00:22:34 <Xion>	It's an incomplete snippet. If you click on 'Run' there, it's gonna give you this playpen code: http://is.gd/GNGQLw
Mar 31 00:22:47 <Xion>	Where you can see a foo() function which returns Result.
Mar 31 00:22:54 <Xion>	This is necessary for error propagation from try!
Mar 31 00:23:40 <josh>	ah, I get it, thanks!
Mar 31 00:26:34 *	Aceeri (uid29649@moz-opi9bt.tooting.irccloud.com) has joined
Mar 31 00:27:44 *	mada has quit (Ping timeout: 121 seconds)
Mar 31 00:31:53 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 00:33:01 *	tennix (vagrant@moz-kjb.7qo.39.106.IP) has joined
Mar 31 00:34:38 *	waynr has quit (Quit: WeeChat 1.4)
Mar 31 00:34:44 *	waynr (waynr@moz-vmtvfl.net) has joined
Mar 31 00:35:40 *	zrsmith92 (textual@moz-pas.mfr.141.50.IP) has joined
Mar 31 00:35:56 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 00:38:10 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 00:38:21 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 00:41:49 *	zhoeon_ has quit (Quit: leaving)
Mar 31 00:42:26 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 00:49:21 *	nicholasf has quit (Connection closed)
Mar 31 00:49:56 *	alicemaz (alice@moz-4nq892.PUBLIC.monkeybrains.net) has joined
Mar 31 00:50:58 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 31 00:52:21 *	memorion has quit (Ping timeout: 121 seconds)
Mar 31 00:53:11 *	memorion (memorion@moz-51aa3g.pools.vodafone-ip.de) has joined
Mar 31 00:57:03 *	fuogo has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 01:02:54 *	Aedylthryd (Thingus@moz-obq.d8m.98.75.IP) has joined
Mar 31 01:08:10 <klue>	Why doesn't this compile? http://pastebin.com/t1K3DSSB
Mar 31 01:08:33 <klue>	However, when I add an else clause to return the a, it compiles and runs fine.
**** BEGIN LOGGING AT Thu Mar 31 09:22:47 2016

Mar 31 09:22:47 *	Now talking on #rust-beginners
Mar 31 09:22:47 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 31 09:22:47 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 31 09:22:53 *	chain_chan (chainChan@moz-f67ffr.slkc.qwest.net) has joined
Mar 31 09:23:34 *	chain_kun (chainChan@moz-q1cbvj.ip.veracitynetworks.com) has joined
Mar 31 09:25:32 *	Sgeo has quit (Ping timeout: 121 seconds)
Mar 31 09:26:59 *	chain_chan has quit (Ping timeout: 121 seconds)
Mar 31 09:28:10 *	jo (user@moz-vg7f5t.cable.virginm.net) has joined
Mar 31 09:32:26 *	llandersll (anders@moz-n00.ucm.28.4.IP) has joined
Mar 31 09:32:36 *	llandersll has quit (Connection closed)
Mar 31 09:32:37 *	llandersll (anders@moz-n00.ucm.28.4.IP) has joined
Mar 31 09:38:35 *	Damaki has quit (Ping timeout: 121 seconds)
Mar 31 09:39:11 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 31 09:53:15 *	cpup has quit (Ping timeout: 121 seconds)
Mar 31 09:55:26 <JP||>	again banging my head against the wall...
Mar 31 09:55:36 *	cpup (cpup@moz-m41.b21.218.32.IP) has joined
Mar 31 09:55:41 <JP||>	how do I declare a Peekable<Iterator<Sometype>> field in a struct?
Mar 31 09:55:51 <JP||>	that doesn't work since Iterator isn't a concrete type
Mar 31 09:57:44 *	NeverDie has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 10:00:13 *	jo` (user@moz-vg7f5t.cable.virginm.net) has joined
Mar 31 10:00:19 *	jo has quit (A TLS packet with unexpected length was received.)
Mar 31 10:00:19 *	jo` has quit (A TLS packet with unexpected length was received.)
Mar 31 10:04:52 *	oln (smuxi@moz-h6kap0.customer.cdi.no) has joined
Mar 31 10:07:02 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 31 10:08:56 <JP||>	hmm, managed to get that working
Mar 31 10:14:45 *	durka42 has quit (Client exited)
Mar 31 10:15:00 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 31 10:30:53 *	Disconnected (Invalid argument)
**** ENDING LOGGING AT Thu Mar 31 10:30:53 2016

**** BEGIN LOGGING AT Thu Mar 31 11:50:46 2016

Mar 31 11:50:46 *	Now talking on #rust-beginners
Mar 31 11:50:46 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 31 11:50:46 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 31 11:57:01 <Confused>	I guess what really got me confused was thinking that "let x: String = "Hello!";" is valid.
Mar 31 11:58:08 *	durka42 has quit (Client exited)
Mar 31 11:58:22 <Confused>	But that returns a compiler error, telling me of mismatched types between collections::string::String and &'static str
Mar 31 11:59:42 *	}ls{ (uhelp@moz-l4oe9n.dip0.t-ipconnect.de) has joined
Mar 31 12:01:34 *	tennix (vagrant@moz-m06.lfv.114.123.IP) has joined
Mar 31 12:05:46 <Confused>	But yeah, I get it now, after reading up on it.
Mar 31 12:08:02 *	Noldorin has quit (Ping timeout: 121 seconds)
Mar 31 12:09:25 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:10:25 <Confused>	So... Would this logic be correct --> If we have the statement: let x: &str = "Example"; we can actually break this down into three components. "Example", which is our slice of data and exists in physical memory, &str which is an immediate reference to this location, and finally x which permanently binds this reference to itself.
Mar 31 12:10:30 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:10:52 <LambdaComplex>	Compared to a String, which is more similar to a Vector
Mar 31 12:11:17 <kimundi>	Confused: That would be roughly correct, yeah
Mar 31 12:11:34 <Confused>	I'm really new to systems programming and pointers and memory are kinda new to me.
Mar 31 12:11:46 <Confused>	But that is my rough understanding of this.
Mar 31 12:11:51 *	martianwars|afk is now known as martianwars
Mar 31 12:12:37 <kimundi>	Confused: You'll get it with time :). One thing I'm not sure if its clear though: &str is the type, while "Hello" is a expression
Mar 31 12:12:39 <Confused>	Don't really have a background in C or C++ so I'm taking a whole bunch of different concepts at once in Rust.
Mar 31 12:12:50 *	ob has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 12:13:09 <Confused>	kimundi: Yeah, I understand that. :)
Mar 31 12:13:12 <kimundi>	:)
Mar 31 12:13:27 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 12:13:28 <LambdaComplex>	Confused: I know how you feel. Same boat :P
Mar 31 12:14:08 <kimundi>	Tackling Rust without knowing C/C++ is fine, was the same with me. In fact, without Rust I still wouldn't have dabbled much with C/C++ I think
Mar 31 12:14:33 *	baransu (Mibbit@moz-vvg0vp.mynet.com.pl) has joined
Mar 31 12:14:58 *	baransu (Mibbit@moz-vvg0vp.mynet.com.pl) has left
Mar 31 12:15:01 <Confused>	Somehow, even though it doesn't make any sense, C and C++ scare me as a language.
Mar 31 12:15:12 <LambdaComplex>	Learning how to use Rust's XCB binding has been forcing me to read a bunch of C code
Mar 31 12:15:15 <Confused>	Perhaps due to lack of understanding. X_X
Mar 31 12:16:12 <LambdaComplex>	C is pretty simple
Mar 31 12:16:20 <Confused>	Syntax-wise C is really simple.
Mar 31 12:16:22 <LambdaComplex>	(note that simple != easy)
Mar 31 12:16:40 <Confused>	And C is actually a really small language footprint wise.
Mar 31 12:16:44 <kimundi>	Confused: Same with me. I liked Rust initially because of the prospect to have a C/C++-performance-like language that is actually sane and doesn't cause bazillion subtle bugs while learning it. :P
Mar 31 12:16:47 <Confused>	Like... just bare C.
Mar 31 12:17:11 <Confused>	kimundi: That's pretty much what drew me to Rust.
Mar 31 12:17:35 <LambdaComplex>	Someone linked an article the other day in a different channel. One of the things had some example of "useful" (but confusing) code
Mar 31 12:17:46 <Confused>	kimundi: I feel as if though Rust is a REALLY great language to introduce system programming concepts to a whole bunch of people.
Mar 31 12:17:47 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 31 12:18:04 <LambdaComplex>	It was like... using `if var != null` instead of `if var == null` because he was afraid he would type `if var = null`
Mar 31 12:18:14 *	klue (foo@moz-ijksur.hfc.comcastbusiness.net) has joined
Mar 31 12:18:14 <LambdaComplex>	Which apparently causes a reassignment in C
Mar 31 12:18:22 <Confused>	Ahahhahaha
Mar 31 12:18:43 <LambdaComplex>	And then he told me that Rust wouldn't let you do that because you'd have to make var mutable
Mar 31 12:18:46 <LambdaComplex>	And I was like, nah
Mar 31 12:18:54 *	aevitas has quit (A TLS packet with unexpected length was received.)
Mar 31 12:18:56 <LambdaComplex>	It doesn't let you do that because `if` takes a bool statement
Mar 31 12:19:05 <LambdaComplex>	It fails even if var is mutable
Mar 31 12:19:09 <kimundi>	(The "disadvantage" is that if you learn C/C++ afterwards you basically just get into fights with the arcane non-programming related aspects of language because verything else you already know how to do correctly ;))
Mar 31 12:19:24 <Confused>	kimundi: That's true.
Mar 31 12:19:46 <LambdaComplex>	kimundi: Yeah, I keep looking at some C code and saying to myself "What the hell is with all these global variables?"
Mar 31 12:20:30 <Confused>	There is another question I would like to ask, if you guys don't mind.
Mar 31 12:20:58 <LambdaComplex>	Asking questions in a support channel? Madness!
Mar 31 12:20:58 *	martianwars is now known as martianwars|afk
Mar 31 12:21:06 <Confused>	Say, I make a function: fn say_hello<'a>() -> &'a str
Mar 31 12:21:11 <kimundi>	LambdaComplex: Or "Why do I have to maintain 2.5 copies of the same code in the source between headers, code files, and templates" :P
Mar 31 12:21:15 <Confused>	Obviously it returns a string, all checks out.
Mar 31 12:21:24 <Confused>	I understand lifetimes in this context.
Mar 31 12:21:27 <LambdaComplex>	kimundi: ...I still haven't figured out the point of header files
Mar 31 12:22:00 <Confused>	But WHY is it that integer values do not need lifetimes? --> fn int_function() -> i32
Mar 31 12:22:17 <Confused>	I know this speaks of some very general lack of system level understanding.
Mar 31 12:22:18 <oln>	LambdaComplex: header files are a relic of the fact that C developed in the 70s
Mar 31 12:22:24 <LambdaComplex>	I think that's because of Clone
Mar 31 12:22:50 <Confused>	Ahh, so every integer is in fact a clone?
Mar 31 12:22:53 <LambdaComplex>	http://rustbyexample.com/trait/clone.html
Mar 31 12:22:55 <Confused>	That would make sense.
Mar 31 12:23:24 <kimundi>	LambdaComplex: They replicate part of the source code of another source file ina  identical way, which allows two or more independently compiled source files to be linked together because they happen to generate the same symbol definition because of the code duplication :P
Mar 31 12:23:43 <LambdaComplex>	Confused: Well, if I'm wrong then I hope to be corrected!
Mar 31 12:23:46 <kimundi>	Confused: Okay, so
Mar 31 12:23:54 <LambdaComplex>	kimundi: lolwut
Mar 31 12:24:14 <kimundi>	LambdaComplex: Thats how the whole system works
Mar 31 12:25:20 <LambdaComplex>	kimundi: So how does Rust handle this?
Mar 31 12:25:24 <kimundi>	If you define a struct, you put it in a header so that each file compiled with that header constructs the same notion of what the memory layout of that struct is. If you define a function, you put a forward declaration to it in a header so that each compiled file constructs the same symbol name to call
Mar 31 12:25:47 <LambdaComplex>	Can't you do the same with Rust?
Mar 31 12:26:03 <LambdaComplex>	Pretty sure I have before O.o
Mar 31 12:27:28 <monti>	!crate user32
Mar 31 12:27:29 <rustbot>	Crate 'user32' does not exist.
Mar 31 12:27:31 <monti>	!crate user
Mar 31 12:27:31 <rustbot>	user (0.1.0) - Portably retrieve the user name (and possibly other information in future versions) of the user running the current thread. -> https://crates.io/crates/user
Mar 31 12:27:35 <kimundi>	LambdaComplex: Stuff gets process once in the library where it comes from, and then stored in the same library as metdata. Everything else that uses the library reads the pre-processed metadata which onlyx contains the necessary information to know how to interact with it. Which in the case of generics actually amounts to a specially encoded form the actual source code for each individual thing needed
Mar 31 12:27:35 <monti>	!crate user-sys
Mar 31 12:27:36 <rustbot>	Crate 'user-sys' does not exist.
Mar 31 12:27:39 <monti>	!crate user3-sys
Mar 31 12:27:39 <rustbot>	Crate 'user3-sys' does not exist.
Mar 31 12:27:41 <monti>	!crate user32-sys
Mar 31 12:27:41 <rustbot>	user32-sys (0.1.2) - FFI bindings to user32. -> https://crates.io/crates/user32-sys
Mar 31 12:27:46 <monti>	!crate ole-sys
Mar 31 12:27:46 <rustbot>	Crate 'ole-sys' does not exist.
Mar 31 12:27:48 <monti>	!crate ole32-sys
Mar 31 12:27:48 <rustbot>	ole32-sys (0.2.0) - Contains function definitions for the Windows API library ole32. See winapi for types and constants. -> https://crates.io/crates/ole32-sys
Mar 31 12:28:30 <LambdaComplex>	kimundi: So is putting stuff like that in its own .rs file and then using mod statements the correct way to do it?
Mar 31 12:28:33 <kimundi>	LambdaComplex: Point is though, stuff gets processed as much as possible, and only read where needed, while the header model involves parsing and compiling the same amount of code each and every time
Mar 31 12:29:01 <kimundi>	LambdaComplex: *.rs file and mod statements are irrelvant to this, Rusts unit of compilation is the whole crate
Mar 31 12:29:17 <LambdaComplex>	kimundi: Ah. Neat :D
Mar 31 12:29:25 <kimundi>	LambdaComplex: Basically, each C/C++ source file would correspond to al *.rs files in a Rust crate
Mar 31 12:29:34 *	cbrewste_ has quit (Connection closed)
Mar 31 12:29:35 <monti>	!crate log
Mar 31 12:29:35 <rustbot>	log (0.3.5) - A lightweight logging facade for Rust -> https://crates.io/crates/log
Mar 31 12:30:19 *	durka42 (durka42@moz-emur8s.wireless-pennnet.upenn.edu) has joined
Mar 31 12:30:44 <kimundi>	Which is actually kinda a performance issue because it means that if you change only a small part in a Rust crate, you have to compikle everything again. But there is currently work ongoing to get a truly incremental compilation mode that would work even better than C/C++'s individual-files approach
Mar 31 12:31:09 *	fl3 has quit (Connection closed)
Mar 31 12:31:13 <kimundi>	Confused: Oh I forgot about replying to you, sorry :P
Mar 31 12:31:21 <Confused>	kimundi: It's fine.
Mar 31 12:31:26 <Confused>	kimundi: I read about clones.
Mar 31 12:31:53 <kimundi>	Confused: Thing is, Clone does not have anything todo with this :)
Mar 31 12:31:54 <kimundi>	The way Rust is defined, you can take/return any value from a function
Mar 31 12:31:56 *	mada (mariano@moz-hrb.nhi.170.181.IP) has joined
Mar 31 12:32:31 <Confused>	Ahhaa?
Mar 31 12:32:34 <kimundi>	And references like &str just happen to be one of the possible types
Mar 31 12:32:46 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 12:32:55 <Confused>	Right.
Mar 31 12:33:24 *	WaltS48 (Thunderbird@moz-9blpmh.east.verizon.net) has joined
Mar 31 12:33:28 <steveklabnik>	durka42: oh whowh, i didn't know that page was there. will figure out why...
Mar 31 12:33:29 <kimundi>	Internally, the compiler might have to translate a function return value of a larger thing with pointers, but that is not visible in the language semantic, and is also how C/C++ compiler have to work
Mar 31 12:33:30 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:34:37 <kimundi>	Confused: So you can generally return either &Foo or Foo - which of them you want depends on how the program is structured.
Mar 31 12:34:54 <Confused>	kimundi: Yeah, I get that.
Mar 31 12:34:55 <LambdaComplex>	Yay, lifetimes! I think
Mar 31 12:35:55 <kimundi>	Confused: Note however that you actually can't have a bare str (or [T], or Path) since they are unsized types. Why that is is not so important at the beginning, but its important to keep in mind if stuff seems to be confusing :)
Mar 31 12:36:13 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:36:15 *	Noldorin (noldorin@moz-37pidj.skybroadband.com) has joined
Mar 31 12:36:16 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 12:36:49 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 12:36:49 <Confused>	I guess what tripped me up was how strings are handled in rust, or rather, the semantics of strings themselves.
Mar 31 12:37:03 <kimundi>	For unsized types, you basically need a pointer/reference indirection like &str, &mut str, Box<str> or a type that wraps that behind more abstraction like String and Vec<T>
Mar 31 12:37:13 <kimundi>	Yeah, its a bit confusing at first
Mar 31 12:38:10 <Confused>	But integer types are not unsized, is that it? Integers are like... concrete and well defined with a specific size in memory.
Mar 31 12:38:28 <kimundi>	correct, as are like 99,99% of all types in Rust
Mar 31 12:38:32 *	WaltS48 (Thunderbird@moz-9blpmh.east.verizon.net) has left
Mar 31 12:38:47 <Confused>	Yeah, that clears things up.
Mar 31 12:38:55 *	ParadoxSpiral_ (ParadoxSpir@moz-8e0k3l.dip0.t-ipconnect.de) has joined
Mar 31 12:39:02 *	cbrewste_ has quit (Connection closed)
Mar 31 12:39:26 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 12:39:26 *	frankmcsherry has quit (Connection closed)
Mar 31 12:39:27 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 12:39:28 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 12:39:39 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 31 12:40:57 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 12:41:00 *	mib_mlyc9o (Mibbit@moz-u7g.b77.95.59.IP) has joined
Mar 31 12:41:20 <Confused>	I also discovered that the compiler actually infers the type of "whatever-is-here" as a &str, i. e. the type itself is a reference to said string. (for example let x = "foo"; --- x is the type of &str)
Mar 31 12:41:29 *	mib_mlyc9o has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 12:41:39 <Confused>	Is that correct thinking?
Mar 31 12:41:46 <steveklabnik>	string literals have the type &'static str
Mar 31 12:41:52 <Confused>	Ahh yeah, sorry.
Mar 31 12:41:55 <Confused>	That was actually what I meant.
Mar 31 12:41:57 <steveklabnik>	so yeah, it infers x is one based on that
Mar 31 12:42:15 *	ParadoxSpiral has quit (Ping timeout: 121 seconds)
Mar 31 12:42:46 <Confused>	Yeah, it seems like there is a level of abstraction with string types that integer types and others don't have.
Mar 31 12:42:59 <Confused>	But I'm slowly getting it. ;)
Mar 31 12:43:08 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 31 12:44:12 <durka42>	it's to be expected -- as you said, integers are always a known size, but a string could be any length
Mar 31 12:44:16 <kimundi>	Confused: Correct. What basically happens if you have a "foo" is that the compiler emits a 3-byte array into the static memory section of the compiled program (where all read-only constant data lives), and then makes the &str be a reference to that section of memory. The reference has lifetime 'static because that section of memory is valid for the entire duration of your program
Mar 31 12:44:35 *	aevitas (aevitas@moz-vvm.gb9.179.5.IP) has joined
Mar 31 12:44:48 *	skade (skade@moz-pptnmg.pools.vodafone-ip.de) has joined
Mar 31 12:44:50 <Confused>	kimundi: A perfect explanation. Thanks. I really do understand the logic now. :)
Mar 31 12:45:00 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 12:46:33 <kimundi>	Confused: strings could work like integers, but that would be a bit cumbersome since they can have different lengths, so you would have a different string type for each string length. So eg "foo" would be str<3>, "hello" would be str<5> and "äöü" would be str<6> because unicode :P
Mar 31 12:47:26 <Confused>	kimundi: Yeah, that would be a poor design decision. @_@
Mar 31 12:48:20 <Confused>	Oh man, I'm so happy I finally understood this.
Mar 31 12:48:52 <kimundi>	You need to store the differences between those somewhere runtime-readable to treat them all as the same type. this can be done by storing the length as a integer value, and having the same memroy layout of all strings by only storing a pointer to the beginning - which is exactly what &str is,a nd what makes unsized types special (they need to carry around metadata like size).
Mar 31 12:49:17 <Confused>	Ahh, I see.
Mar 31 12:49:25 <Confused>	Makes sense.
Mar 31 12:50:42 <kimundi>	Arrays in Rust work the same way, and there the difference is visible: [1, 2, 3] is a [i32; 3], and [1, 2, 3, 4 ,5] is a [i32; 5], and you can cast both a &[i32; 3] and a &[i32; 5] to a &[i32]
Mar 31 12:51:39 <Confused>	Ahh cool.
Mar 31 12:51:53 <Confused>	That's kinda clever when you think about it.
Mar 31 12:52:33 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 31 12:54:44 <Confused>	I'm at awe for the Rust language developers (or any language designer, really).
Mar 31 12:55:09 <kimundi>	yeah, It took more than 6 blog posts and almost two years for the core dev majorly involved in that design until it had been figured out like this :D - http://smallcultfollowing.com/babysteps/blog/2014/01/05/dst-take-5/
Mar 31 12:55:47 <kimundi>	(DST == dynamically sized type)
Mar 31 12:56:01 <Confused>	Oh snap, you just stole my sleep. Thanks.
Mar 31 12:56:06 <kimundi>	haha
Mar 31 12:57:13 <Confused>	For some reason, I really like Rust, like almost in a dangerous fanboy way.
Mar 31 12:57:32 *	fatcatt316 (fatcatt316@moz-qlr4ge.res.rr.com) has joined
Mar 31 12:57:43 <kimundi>	I know that feeling, I struggle to keep my objectivity every day T_T
Mar 31 12:57:46 <Confused>	That's why I really want to learn and understand it through and through, which cannot be said for most languages.
Mar 31 12:57:50 *	cbrewste_ has quit (Connection closed)
Mar 31 12:58:27 <Confused>	The only other language I ever felt this way was Lisp.
Mar 31 12:59:24 <Confused>	However, I don't really find Lisp that useful in practice, but I love the semantics of it.
Mar 31 12:59:32 <durka42>	even in that Take 5 blog post there are a few nitty details that changed later
Mar 31 13:01:52 <steveklabnik>	we are gonna have a little docs meeting in #rust-docs in an hour, if anyone is interested in attending. we don't have a docs team yet, so we're basically just going to pretend ;) this first one will be figuring out how to coordinate together
Mar 31 13:02:28 <steveklabnik>	I mention it in here because docs is how i got started with rust :)
Mar 31 13:02:31 <steveklabnik>	writing examples for stuff
Mar 31 13:03:00 <Confused>	Is it okay if I just come and listen quietly in the corner?
Mar 31 13:03:04 <steveklabnik>	absolutely
Mar 31 13:03:10 <Confused>	Sweet.
Mar 31 13:03:55 <Xion>	Confused: The array types hierarchy exists in C too, btw, so it's not like Rust is breaking new ground here :)
Mar 31 13:04:02 *	SuperZazu has quit (Quit: Textual IRC Client: www.textualapp.com)
Mar 31 13:04:32 <Confused>	Xion: Of course! I know that. :)
Mar 31 13:04:47 <Confused>	Xion: Rust is simply my first time of being introduced to such concepts.
Mar 31 13:05:05 <Confused>	Xion: But absolutely, I understand that these ideas have been around for decades.
Mar 31 13:05:35 <Xion>	There is nothing wrong about compiling ideas that already existed either.
Mar 31 13:05:40 <durka42>	C is not very transparent about it though
Mar 31 13:05:43 <Xion>	Quite the opposite :)
Mar 31 13:05:54 <durka42>	is sizeof(x) going to be the length of the array or the size of an element? who knows? the type sure doesn't tell you :p
Mar 31 13:06:31 <kimundi>	Also, look at it funny and suddenly its a pointer to the first element without any length information :P
Mar 31 13:06:41 <Xion>	durka42: It may also be a size of the pointer!
Mar 31 13:06:56 <Confused>	looool, really?
Mar 31 13:07:06 <Xion>	Nah, durka42 is exaggerating.
Mar 31 13:07:12 <Xion>	The size information actually *is* in the type.
Mar 31 13:07:23 <Xion>	It's actually nowhere else, which is the problem most of the time :D
Mar 31 13:07:26 <durka42>	how to start an argument in a room of C programmers: "are arrays and pointers the same?"
Mar 31 13:07:27 <kimundi>	Unless it decays to a pointer
Mar 31 13:07:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 31 13:07:48 <Xion>	durka42: C has neither arrays nor pointers, AFAIK.
Mar 31 13:07:54 <Xion>	It only has objects and offsets :)
Mar 31 13:08:01 <kimundi>	They aren't, C is just really bad about remembering that as well :P
Mar 31 13:08:41 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 13:08:46 *	jfhumann has quit (Quit: Leaving)
Mar 31 13:08:58 <mbrubeck>	Oh man, I only have one day to write my April 1 RFC for `impl<T,U> Deref<Target=T> for U where T: Deref<Target=U>`
Mar 31 13:09:06 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 31 13:09:13 <mbrubeck>	no wait, not Deref
Mar 31 13:09:14 <kimundi>	Confused: http://stackoverflow.com/questions/1461432/what-is-array-decaying
Mar 31 13:09:14 <mbrubeck>	Index
Mar 31 13:09:20 <mbrubeck>	so that Rust can have `array[0] == 0[array]` just like C
Mar 31 13:09:26 <Xion>	;D
Mar 31 13:09:34 <Confused>	kimundi: LOL! Thanks.
Mar 31 13:09:52 <Confused>	kimundi: I love how you figured I have no clue what you're talking about.
Mar 31 13:10:30 <kimundi>	Confused: Haha, well I can imagine how these discussions sound like for someone not in the know :)
Mar 31 13:10:47 <Xion>	mbrubeck: Can you also propose `impl<T> Add<isize> for &[T]` so we can do `array + i`?
Mar 31 13:10:59 <durka42>	lol
Mar 31 13:11:06 <Confused>	kimundi: Yeah ^_^. However, I gotta say it's amazing stuff, engineering wise.
Mar 31 13:11:22 <bluss>	that's a nice observation that rust's "unsizing" is the updated version of C's "decay" of arrays
Mar 31 13:11:23 <kimundi>	Indeed
Mar 31 13:11:29 *	fatcatt316 has quit (A TLS packet with unexpected length was received.)
Mar 31 13:12:43 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 13:13:59 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 13:14:24 *	aevitas has quit (A TLS packet with unexpected length was received.)
Mar 31 13:16:46 <josh>	What is the new way to do this, where foo is Vec<u8>? foo.slice(0, len * 4)
Mar 31 13:17:22 <bluss>	josh: the new way is &foo[..len * 4]
Mar 31 13:17:23 <mbrubeck>	josh: &foo[0..len*4]
Mar 31 13:17:34 <bluss>	millisecond finish
Mar 31 13:17:44 <mbrubeck>	the advantage of saving a keystroke
Mar 31 13:17:52 <bluss>	totally
Mar 31 13:18:01 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 13:18:42 *	frankmcsherry has quit (Connection closed)
Mar 31 13:18:56 <bluss>	josh: by the way, due to how the indexing syntax works, if you call a &-using method on the result directly, you don't use that & in front
Mar 31 13:19:12 <bluss>	like foo[..len * 4].sort()
Mar 31 13:20:18 <josh>	I don't seem to be able to do the multiplication
Mar 31 13:20:36 <josh>	[0..4] compiles but [0..len * 4] does not
Mar 31 13:20:55 <bluss>	josh: maybe it's the type of len? must be usize
Mar 31 13:24:51 <josh>	that was the issue, thanks
Mar 31 13:26:05 <Xion>	Which AFAIR makes it foo[0..(len as usize) * 4] since `as` has annoying low priority.
Mar 31 13:26:21 *	WaltS48 (Thunderbird@moz-9blpmh.east.verizon.net) has joined
Mar 31 13:26:25 <bluss>	but .. has lower I think
Mar 31 13:26:40 <bluss>	playbot: 0..3 as usize * 4
Mar 31 13:26:41 -playbot/#rust-beginners-	0..12
Mar 31 13:26:56 <Xion>	Oh, you can multiply ranges?
Mar 31 13:27:07 <kimundi>	No :P
Mar 31 13:27:10 <bluss>	no, it's the same as 0..(3 * 4)
Mar 31 13:27:22 <Xion>	Ah, cool.
Mar 31 13:27:31 *	WaltS48 (Thunderbird@moz-9blpmh.east.verizon.net) has left
Mar 31 13:28:19 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 31 13:29:29 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 31 13:32:09 *	NSil (NSil@moz-qdurqa.red.bezeqint.net) has joined
Mar 31 13:32:33 *	jeffdb (JeffDB@moz-fp3.7hu.21.199.IP) has joined
Mar 31 13:38:50 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 31 13:39:50 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 13:44:33 *	schmo (mattschmoye@moz-tor.krt.104.38.IP) has joined
Mar 31 13:46:59 *	cbrewster (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 13:48:06 *	mib_c32nir (Mibbit@moz-his.pcn.121.77.IP) has joined
Mar 31 13:49:05 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 13:49:15 *	mib_c32nir has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 13:50:42 *	schmo has quit (Client exited)
Mar 31 13:52:08 *	kk has quit (Ping timeout: 121 seconds)
Mar 31 13:52:51 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 13:53:20 *	tycoon177 has quit (Connection closed)
Mar 31 13:56:29 *	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 13:58:34 *	eibwen (eibwen@moz-vkc2j6.dip0.t-ipconnect.de) has joined
Mar 31 14:00:37 *	strOp (Mibbit@moz-0oe.gim.196.69.IP) has joined
Mar 31 14:01:13 *	strOp has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 14:01:44 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 14:01:46 *	Vert (Mibbit@moz-0oe.gim.196.69.IP) has joined
Mar 31 14:03:50 *	brunodea_ (brunodea@moz-cthdmd.gvt.net.br) has joined
**** BEGIN LOGGING AT Thu Mar 31 14:03:50 2016

Mar 31 14:03:50 *	Now talking on #rust-beginners
Mar 31 14:03:51 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 31 14:03:51 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 31 14:03:54 <Vert>	Is anybody available at the moment to help me figure out a string comparison issue? I'm attempting to compare a String to every line in a text file, but despite the methods/tries I've attempted I can never get a match.
Mar 31 14:03:54 <Vert>	Is anybody available at the moment to help me figure out a string comparison issue? I'm attempting to compare a String to every line in a text file, but despite the methods/tries I've attempted I can never get a match.
Mar 31 14:03:56 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:03:56 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:04:07 <Vert>	My if statement always evals to false
Mar 31 14:04:07 <Vert>	My if statement always evals to false
Mar 31 14:04:20 <Vert>	Function here: http://pastebin.com/ZQhjht26
Mar 31 14:04:20 <Vert>	Function here: http://pastebin.com/ZQhjht26
Mar 31 14:04:42 <Vert>	if/else @ line 43
Mar 31 14:04:42 <Vert>	if/else @ line 43
Mar 31 14:06:32 <pingveno>	Line 40
Mar 31 14:06:32 <pingveno>	Line 40
Mar 31 14:06:40 <pingveno>	Are you sure that's what you want to do?
Mar 31 14:06:40 <pingveno>	Are you sure that's what you want to do?
Mar 31 14:06:50 <Vert>	I did that as a little hack to try to force a match
Mar 31 14:06:50 <Vert>	I did that as a little hack to try to force a match
Mar 31 14:06:56 <Vert>	Originally I was trimming both of them
Mar 31 14:06:56 <Vert>	Originally I was trimming both of them
Mar 31 14:07:08 <Vert>	But no matter what kind of trim I tried I couldn't get line2 to drop the \n
Mar 31 14:07:08 <Vert>	But no matter what kind of trim I tried I couldn't get line2 to drop the \n
Mar 31 14:07:20 <Vert>	So I just tried to force it on new_line to get a True eval
Mar 31 14:07:20 <Vert>	So I just tried to force it on new_line to get a True eval
Mar 31 14:07:23 Mar 31 14:07:23 <pingveno>	yeah, you're right
<pingveno>	yeah, you're right
Mar 31 14:07:54 <Vert>	I'm assuming the \n is just inherent in the iter? I couldn't figure that out, but figured I'd save that for enigma #2
Mar 31 14:07:54 <Vert>	I'm assuming the \n is just inherent in the iter? I couldn't figure that out, but figured I'd save that for enigma #2
Mar 31 14:07:58 <pingveno>	playbot: println!("'{:?}'", "foo");
Mar 31 14:07:58 <pingveno>	playbot: println!("'{:?}'", "foo");
Mar 31 14:07:59 -playbot/#rust-beginners-	'"foo"'
Mar 31 14:07:59 -playbot/#rust-beginners-	'"foo"'
Mar 31 14:07:59 -playbot/#rust-beginners-	()
Mar 31 14:07:59 -playbot/#rust-beginners-	()
Mar 31 14:08:35 <pingveno>	Try using :? when you're outputting the string. That might clarify what is happening.
Mar 31 14:08:35 <pingveno>	Try using :? when you're outputting the string. That might clarify what is happening.
Mar 31 14:09:03 <Vert>	Can do. So far I've been using gdb and breakpoints to look at the raw data and they appear to be the same which is why I'm confused as to why they are not equaling out
Mar 31 14:09:03 <Vert>	Can do. So far I've been using gdb and breakpoints to look at the raw data and they appear to be the same which is why I'm confused as to why they are not equaling out
Mar 31 14:10:32 <Vert>	Are you talking about putting that directly in the format macro?
Mar 31 14:10:32 <Vert>	Are you talking about putting that directly in the format macro?
Mar 31 14:10:40 <pingveno>	Yeah
Mar 31 14:10:40 <pingveno>	Yeah
Mar 31 14:10:43 <Vert>	I just added it to the println! and got the same output.
Mar 31 14:10:43 <Vert>	I just added it to the println! and got the same output.
Mar 31 14:10:44 <Vert>	ok
Mar 31 14:10:44 <Vert>	ok
Mar 31 14:11:05 <pingveno>	playbot: println!("'{:?}'", "foo\n\n");
Mar 31 14:11:05 <pingveno>	playbot: println!("'{:?}'", "foo\n\n");
Mar 31 14:11:06 -playbot/#rust-beginners-	'"foo\n\n"'
Mar 31 14:11:06 -playbot/#rust-beginners-	'"foo\n\n"'
Mar 31 14:11:06 -playbot/#rust-beginners-	()
Mar 31 14:11:06 -playbot/#rust-beginners-	()
Mar 31 14:12:06 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 14:12:06 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 14:12:07 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 14:12:07 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 14:14:41 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:14:41 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:14:48 <Vert>	I do see additional escape characters in the new_line variable now. 
Mar 31 14:14:48 <Vert>	I do see additional escape characters in the new_line variable now. 
Mar 31 14:16:34 <pingveno>	Oh, you're pushing '\n' in a loop
Mar 31 14:16:34 <pingveno>	Oh, you're pushing '\n' in a loop
Mar 31 14:17:00 <pingveno>	Every time through the loop, it gets a new newline, no?
Mar 31 14:17:00 <pingveno>	Every time through the loop, it gets a new newline, no?
Mar 31 14:17:32 <pingveno>	So unless the first line is a match, no matches.
Mar 31 14:17:32 <pingveno>	So unless the first line is a match, no matches.
Mar 31 14:18:31 <pingveno>	"somestring\n\n\n\n\n\n\n\n\n" == line2
Mar 31 14:18:31 <pingveno>	"somestring\n\n\n\n\n\n\n\n\n" == line2
Mar 31 14:19:45 <pingveno>	Also: The iterator returned from this function will yield instances of io::Result<String>. Each string returned will not have a newline byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.
Mar 31 14:19:45 <pingveno>	Also: The iterator returned from this function will yield instances of io::Result<String>. Each string returned will not have a newline byte (the 0xA byte) or CRLF (0xD, 0xA bytes) at the end.
Mar 31 14:19:51 <Vert>	I think I'm also seeing escape characters from split_whitespace()
Mar 31 14:19:51 <Vert>	I think I'm also seeing escape characters from split_whitespace()
Mar 31 14:20:57 <pingveno>	So you don't even need to tack on a newline at all.
Mar 31 14:20:57 <pingveno>	So you don't even need to tack on a newline at all.
Mar 31 14:21:01 <Vert>	such as (in the string) \"xx:xx:xx:xx:xx:xx\"  when it should just be the MAC itself.
Mar 31 14:21:01 <Vert>	such as (in the string) \"xx:xx:xx:xx:xx:xx\"  when it should just be the MAC itself.
Mar 31 14:21:18 <Vert>	The new line is solely because I was seeing string\n from the iterator on the second file
Mar 31 14:21:18 <Vert>	The new line is solely because I was seeing string\n from the iterator on the second file
Mar 31 14:21:28 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 14:21:28 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 14:21:31 <Vert>	and I was just trying to force the \n on new_line to force a match
Mar 31 14:21:31 <Vert>	and I was just trying to force the \n on new_line to force a match
Mar 31 14:21:40 <Vert>	it does not need to be there and eventually I'll figure out how to remove \n from both
Mar 31 14:21:40 <Vert>	it does not need to be there and eventually I'll figure out how to remove \n from both
Mar 31 14:21:54 <Vert>	For now though, for whatever reason line2 always has a \n despite all my trim attempts
Mar 31 14:21:54 <Vert>	For now though, for whatever reason line2 always has a \n despite all my trim attempts
Mar 31 14:23:11 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 14:23:11 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 14:23:26 <kimundi>	Vert: Where do you trim?
Mar 31 14:23:26 <kimundi>	Vert: Where do you trim?
Mar 31 14:23:44 <kimundi>	Vert: Keep in mind that trim returns the trimmed &str, and does not mutate the &str it was called on in-place
Mar 31 14:23:44 <kimundi>	Vert: Keep in mind that trim returns the trimmed &str, and does not mutate the &str it was called on in-place
Mar 31 14:23:58 <Vert>	I've butchered this code trying to get it to work, but most of my attempts have been immediately before the if statement (i've also tried in the if condition itself)
Mar 31 14:23:58 <Vert>	I've butchered this code trying to get it to work, but most of my attempts have been immediately before the if statement (i've also tried in the if condition itself)
Mar 31 14:25:05 <Vert>	At this point with the ":?" in place in the formatting here's what I'm getting in my print lines:
Mar 31 14:25:05 <Vert>	At this point with the ":?" in place in the formatting here's what I'm getting in my print lines:
Mar 31 14:25:21 <kimundi>	Vert: Can you post the exact code you have at this point as well?
Mar 31 14:25:21 <kimundi>	Vert: Can you post the exact code you have at this point as well?
Mar 31 14:25:44 <Vert>	new_line = "dhcp-host=\"xx:xx:xx\",,\"192.168.x.x\",86400" line2 = "dhcp-host=xx:xx:xx,,192.168.x.x,86400"
Mar 31 14:25:44 <Vert>	new_line = "dhcp-host=\"xx:xx:xx\",,\"192.168.x.x\",86400" line2 = "dhcp-host=xx:xx:xx,,192.168.x.x,86400"
Mar 31 14:26:07 <Vert>	It's the exact same thing as the pastebin with the change of
Mar 31 14:26:07 <Vert>	It's the exact same thing as the pastebin with the change of
Mar 31 14:26:14 <Vert>	format!("dhcp-host={x:?},,{y:?},86400", x = vec[1], y = vec[2]).to_string()
Mar 31 14:26:14 <Vert>	format!("dhcp-host={x:?},,{y:?},86400", x = vec[1], y = vec[2]).to_string()
Mar 31 14:26:20 <Vert>	format!("dhcp-host={x:?},{y:?},{z:?},86400",
Mar 31 14:26:20 <Vert>	format!("dhcp-host={x:?},{y:?},{z:?},86400",
Mar 31 14:26:42 <Vert>	lines 59 & 61
Mar 31 14:26:42 <Vert>	lines 59 & 61
Mar 31 14:26:47 <pingveno>	BTW, format! already produces a String, to_string is redundant.
Mar 31 14:26:47 <pingveno>	BTW, format! already produces a String, to_string is redundant.
Mar 31 14:27:07 <Vert>	Thanks. More of my attempts to force this lol
Mar 31 14:27:07 <Vert>	Thanks. More of my attempts to force this lol
Mar 31 14:27:23 <pingveno>	understandable
Mar 31 14:27:23 <pingveno>	understandable
Mar 31 14:27:28 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 14:27:28 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 14:28:01 <Vert>	At this point, I'm thinking the issue are the escape characters being added to new_line that are not in the line2 variable as seen in the print line above
Mar 31 14:28:01 <Vert>	At this point, I'm thinking the issue are the escape characters being added to new_line that are not in the line2 variable as seen in the print line above
Mar 31 14:28:28 *	ph88 (ph88@moz-611q0q.adsl.xs4all.nl) has joined
Mar 31 14:28:28 *	ph88 (ph88@moz-611q0q.adsl.xs4all.nl) has joined
Mar 31 14:28:35 <kimundi>	Vert: Okay, if you haven't changed anything else then the issue is what I said above: Nowhere do you actually permanently trim line2
Mar 31 14:28:35 <kimundi>	Vert: Okay, if you haven't changed anything else then the issue is what I said above: Nowhere do you actually permanently trim line2
Mar 31 14:28:50 <kimundi>	Vert: trim() does not mutate, it returns the trimmed string
Mar 31 14:28:50 <kimundi>	Vert: trim() does not mutate, it returns the trimmed string
Mar 31 14:29:05 <Vert>	So would it work if I trimmed both of them and just compared the slices?
Mar 31 14:29:05 <Vert>	So would it work if I trimmed both of them and just compared the slices?
Mar 31 14:29:16 <kimundi>	So you only see the trimmed string in println!("line2 = {}", line2.trim()); but everywhere else its the original
Mar 31 14:29:16 <kimundi>	So you only see the trimmed string in println!("line2 = {}", line2.trim()); but everywhere else its the original
Mar 31 14:29:39 <kimundi>	that should work
Mar 31 14:29:40 <kimundi>	that should work
Mar 31 14:30:03 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:30:03 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 14:30:27 <kimundi>	Vert: Not that the trailing newline is not always there in the input. It is only included to begin with so that you can tell apart the end of a line from the end of the file/stream/whatever
Mar 31 14:30:27 <kimundi>	Vert: Not that the trailing newline is not always there in the input. It is only included to begin with so that you can tell apart the end of a line from the end of the file/stream/whatever
Mar 31 14:30:30 <kimundi>	Note*
Mar 31 14:30:30 <kimundi>	Note*
Mar 31 14:30:56 <kimundi>	So expecting it to be there only works if you can gurantee that the input always ends with a trailing newline
Mar 31 14:30:56 <kimundi>	So expecting it to be there only works if you can gurantee that the input always ends with a trailing newline
Mar 31 14:31:59 Mar 31 14:31:59 <kimundi>	Vert: Ah, now I get what you meant above, your line numbers did not match the paste. I recommend not using :? if you want to construct the strings for comparision there
<kimundi>	Vert: Ah, now I get what you meant above, your line numbers did not match the paste. I recommend not using :? if you want to construct the strings for comparision there
Mar 31 14:32:16 Mar 31 14:32:16 <kimundi>	since that, as you have observed, adds escape sequences
<kimundi>	since that, as you have observed, adds escape sequences
Mar 31 14:32:41 <Vert>	oooh. That adds the escape characters. I thought it was showing me what was actually there.
Mar 31 14:32:41 <Vert>	oooh. That adds the escape characters. I thought it was showing me what was actually there.
Mar 31 14:33:17 <pingveno>	Oh, sorry. I wasn't super clear there. Adding :? shows debug output.
Mar 31 14:33:17 <pingveno>	Oh, sorry. I wasn't super clear there. Adding :? shows debug output.
Mar 31 14:33:27 <kimundi>	playbot: println!("{x} {x:?}", x="foo");
Mar 31 14:33:27 <kimundi>	playbot: println!("{x} {x:?}", x="foo");
Mar 31 14:33:28 -playbot/#rust-beginners-	<anon>:9:33: 9:38 error: argument redeclared with type `?` when it was previously ``
Mar 31 14:33:28 -playbot/#rust-beginners-	<anon>:9:33: 9:38 error: argument redeclared with type `?` when it was previously ``
Mar 31 14:33:28 -playbot/#rust-beginners-	<anon>:9         println!("{x} {x:?}", x="foo");
Mar 31 14:33:28 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1pO0U3u
Mar 31 14:33:28 -playbot/#rust-beginners-	<anon>:9         println!("{x} {x:?}", x="foo");
Mar 31 14:33:28 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1pO0U3u
Mar 31 14:33:38 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 14:33:38 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 14:33:40 <pingveno>	Useful for println or logging, no so much for your use.
Mar 31 14:33:40 <pingveno>	Useful for println or logging, no so much for your use.
Mar 31 14:33:42 <kimundi>	playbot: println!("{} {:?}", "foo", "foo");
Mar 31 14:33:42 <kimundi>	playbot: println!("{} {:?}", "foo", "foo");
Mar 31 14:33:43 -playbot/#rust-beginners-	foo "foo"
Mar 31 14:33:43 -playbot/#rust-beginners-	foo "foo"
Mar 31 14:33:43 -playbot/#rust-beginners-	()
Mar 31 14:33:43 -playbot/#rust-beginners-	()
Mar 31 14:33:49 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 14:33:49 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 14:33:52 <kimundi>	playbot: println!("{} {:?}", "\tfoo", "\tfoo");
Mar 31 14:33:52 <kimundi>	playbot: println!("{} {:?}", "\tfoo", "\tfoo");
Mar 31 14:33:53 -playbot/#rust-beginners-		foo "\tfoo"
Mar 31 14:33:53 -playbot/#rust-beginners-		foo "\tfoo"
Mar 31 14:33:53 -playbot/#rust-beginners-	()
Mar 31 14:33:53 -playbot/#rust-beginners-	()
Mar 31 14:34:45 *	Nephilim has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 14:34:45 *	Nephilim has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 14:35:32 *	cbrewster (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 14:35:32 *	cbrewster (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 14:35:36 *	glaebhoerl (glaebhoerl@moz-3ans1o.catv.broadband.hu) has joined
Mar 31 14:35:36 *	glaebhoerl (glaebhoerl@moz-3ans1o.catv.broadband.hu) has joined
Mar 31 14:36:08 *	ph88 has quit (Ping timeout: 121 seconds)
Mar 31 14:36:08 *	ph88 has quit (Ping timeout: 121 seconds)
Mar 31 14:37:20 *	tycoon177 (tycoon177@moz-2c53mt.desm.netins.net) has joined
Mar 31 14:37:20 *	tycoon177 (tycoon177@moz-2c53mt.desm.netins.net) has joined
Mar 31 14:37:42 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 14:37:42 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 14:38:25 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:38:25 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 14:40:31 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 31 14:40:31 *	malayaleecoder (uid139674@moz-k1ar3t.brockwell.irccloud.com) has joined
Mar 31 14:41:16 *	martianwars|afk is now known as martianwars
Mar 31 14:41:16 *	martianwars|afk is now known as martianwars
Mar 31 14:42:27 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 14:42:27 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 14:42:55 *	durka42 has quit (Client exited)
Mar 31 14:42:55 *	durka42 has quit (Client exited)
Mar 31 14:42:57 <kefin>	I tried using clippy but "rustc_const_math" crate isn't found.
Mar 31 14:42:57 <kefin>	I tried using clippy but "rustc_const_math" crate isn't found.
Mar 31 14:45:30 <kefin>	Only version 59 has this, not 58 :/
Mar 31 14:45:30 <kefin>	Only version 59 has this, not 58 :/
Mar 31 14:46:30 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 14:46:30 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 14:51:31 *	cbrewster has quit (Quit: )
Mar 31 14:51:31 *	cbrewster has quit (Quit: )
Mar 31 14:56:11 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 31 14:56:11 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 31 15:00:15 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 15:00:15 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 15:01:33 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:01:33 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:02:58 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 15:02:58 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 15:03:39 <Vert>	Thanks everyone for the help with the string. It looks like I have them comparing now, but I have more logic errors to work out.
Mar 31 15:03:39 <Vert>	Thanks everyone for the help with the string. It looks like I have them comparing now, but I have more logic errors to work out.
Mar 31 15:05:57 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 15:05:57 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 15:09:57 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 15:09:57 *	starblue (juergen@moz-nn8t48.pools.vodafone-ip.de) has joined
Mar 31 15:10:04 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 15:10:04 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 15:11:14 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 15:11:14 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 15:14:41 *	woboats has quit (Client exited)
Mar 31 15:14:41 *	woboats has quit (Client exited)
Mar 31 15:15:09 *	Fishrock123 has quit (Connection closed)
Mar 31 15:15:09 *	Fishrock123 has quit (Connection closed)
Mar 31 15:16:35 *	Vert has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 15:16:35 *	Vert has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 15:22:47 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 31 15:22:47 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 31 15:24:08 <Xion>	So how do you implement Error::description really? It returns a &str, which means you should store the desc as an Error field and format it when you construct the Error? ;(
Mar 31 15:24:08 <Xion>	So how do you implement Error::description really? It returns a &str, which means you should store the desc as an Error field and format it when you construct the Error? ;(
Mar 31 15:26:14 <bluss>	Xion: you can use a string literal, that's the usual approach
Mar 31 15:26:14 <bluss>	Xion: you can use a string literal, that's the usual approach
Mar 31 15:26:20 <bluss>	see also the guidelines for the message type
Mar 31 15:26:20 <bluss>	see also the guidelines for the message type
Mar 31 15:26:47 <bluss>	http://doc.rust-lang.org/nightly/std/error/trait.Error.html#tymethod.description
Mar 31 15:26:47 <bluss>	http://doc.rust-lang.org/nightly/std/error/trait.Error.html#tymethod.description
Mar 31 15:26:56 <Xion>	Right, but string literal cannot contain dynamic parts based of off additional data passed to the Error.
Mar 31 15:26:56 <Xion>	Right, but string literal cannot contain dynamic parts based of off additional data passed to the Error.
Mar 31 15:27:04 <bluss>	the method is expressly designed to not be dynamic
Mar 31 15:27:04 <bluss>	the method is expressly designed to not be dynamic
Mar 31 15:27:10 <bluss>	Display impl handles that
Mar 31 15:27:10 <bluss>	Display impl handles that
Mar 31 15:27:26 <Xion>	Ah, gotcha.
Mar 31 15:27:26 <Xion>	Ah, gotcha.
Mar 31 15:27:39 <Xion>	I suppose description shouldn't really be used for end-user error printing then.
Mar 31 15:27:39 <Xion>	I suppose description shouldn't really be used for end-user error printing then.
Mar 31 15:27:45 <Xion>	Except maybe as part of Display::fmt impl
Mar 31 15:27:45 <Xion>	Except maybe as part of Display::fmt impl
Mar 31 15:28:40 *	tycoon177 has quit (Connection closed)
Mar 31 15:28:40 *	tycoon177 has quit (Connection closed)
Mar 31 15:29:47 <bluss>	here's an a typical example http://doc.rust-lang.org/nightly/src/std/up/src/libstd/ffi/c_str.rs.html#346-357
Mar 31 15:29:47 <bluss>	here's an a typical example http://doc.rust-lang.org/nightly/src/std/up/src/libstd/ffi/c_str.rs.html#346-357
Mar 31 15:30:11 Mar 31 15:30:11 <bluss>	Xion: right, I'm not sure .description() is that useful, but it helps to understand how it's intended to be used
<bluss>	Xion: right, I'm not sure .description() is that useful, but it helps to understand how it's intended to be used
Mar 31 15:30:26 <bluss>	then it's less confusing.. and just stick the regular stuff in Display
Mar 31 15:30:26 <bluss>	then it's less confusing.. and just stick the regular stuff in Display
Mar 31 15:30:33 <bluss>	what's nice with formatting is that it's composable
Mar 31 15:30:33 <bluss>	what's nice with formatting is that it's composable
Mar 31 15:30:39 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:30:39 *	woboats (woboats@moz-8rajde.ca.comcast.net) has joined
Mar 31 15:30:57 <bluss>	you can recursively include the Display impls of other types, without having to concat strings or stuff in between
Mar 31 15:30:57 <bluss>	you can recursively include the Display impls of other types, without having to concat strings or stuff in between
Mar 31 15:35:36 <LambdaComplex>	panicbit: well, i got a reply on _one_ of the issues
Mar 31 15:35:36 <LambdaComplex>	panicbit: well, i got a reply on _one_ of the issues
Mar 31 15:35:46 <panicbit>	Yeah I saw
Mar 31 15:35:46 <panicbit>	Yeah I saw
Mar 31 15:35:57 <Xion>	bluss: Cool, that NulError is a great example.
Mar 31 15:35:57 <Xion>	bluss: Cool, that NulError is a great example.
Mar 31 15:35:58 <panicbit>	The distinction in the C code sounds reasonable
Mar 31 15:35:58 <panicbit>	The distinction in the C code sounds reasonable
Mar 31 15:36:14 <LambdaComplex>	I'll admit it's a tad confusing still....
Mar 31 15:36:14 <LambdaComplex>	I'll admit it's a tad confusing still....
Mar 31 15:36:17 <LambdaComplex>	But yeah, it is reasonable
Mar 31 15:36:17 <LambdaComplex>	But yeah, it is reasonable
Mar 31 15:36:27 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 15:36:27 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 15:37:12 <panicbit>	LambdaComplex: I suppose noone needs to use an "empty reply" (void reply), so there's no need to check if they are actually non-null
Mar 31 15:37:12 <panicbit>	LambdaComplex: I suppose noone needs to use an "empty reply" (void reply), so there's no need to check if they are actually non-null
Mar 31 15:37:26 <panicbit>	Or whatever
Mar 31 15:37:26 <panicbit>	Or whatever
Mar 31 15:37:37 <panicbit>	<insert something about performance here>
Mar 31 15:37:37 <panicbit>	<insert something about performance here>
Mar 31 15:37:38 *	martianwars is now known as martianwars|afk
Mar 31 15:37:38 *	martianwars is now known as martianwars|afk
Mar 31 15:39:02 <LambdaComplex>	Guess I'll close the issue then :D
Mar 31 15:39:02 <LambdaComplex>	Guess I'll close the issue then :D
Mar 31 15:40:44 <LambdaComplex>	Unless he beats me to it
Mar 31 15:40:44 <LambdaComplex>	Unless he beats me to it
Mar 31 15:42:41 <panicbit>	Hehe
Mar 31 15:42:41 <panicbit>	Hehe
Mar 31 15:42:55 *	boon (David@moz-00m.h73.195.66.IP) has joined
Mar 31 15:42:55 *	boon (David@moz-00m.h73.195.66.IP) has joined
Mar 31 15:43:20 <LambdaComplex>	panicbit: Now hopefully he'll reply to the other issue :P
Mar 31 15:43:20 <LambdaComplex>	panicbit: Now hopefully he'll reply to the other issue :P
Mar 31 15:43:30 <panicbit>	I'll add some info to the other issue
Mar 31 15:43:30 <panicbit>	I'll add some info to the other issue
Mar 31 15:43:54 <LambdaComplex>	Did you do some more research?
Mar 31 15:43:54 <LambdaComplex>	Did you do some more research?
Mar 31 15:44:18 Mar 31 15:44:18 <panicbit>	No, but I figured that it might be useful to show some code snippets
<panicbit>	No, but I figured that it might be useful to show some code snippets
Mar 31 15:44:27 <panicbit>	To clarify what we mean
Mar 31 15:44:27 <panicbit>	To clarify what we mean
Mar 31 15:45:16 *	woboats has quit (Client exited)
Mar 31 15:45:16 *	woboats has quit (Client exited)
Mar 31 15:47:16 <LambdaComplex>	panicbit: Would linking to this help? https://github.com/sector-f/wmutils-rust/blob/master/src/util.rs#L20-L28
Mar 31 15:47:16 <LambdaComplex>	panicbit: Would linking to this help? https://github.com/sector-f/wmutils-rust/blob/master/src/util.rs#L20-L28
Mar 31 15:47:20 <LambdaComplex>	(afaik my code is correct)
Mar 31 15:47:20 <LambdaComplex>	(afaik my code is correct)
Mar 31 15:48:24 <panicbit>	Hm, not much I guess
Mar 31 15:48:24 <panicbit>	Hm, not much I guess
Mar 31 15:48:44 Mar 31 15:48:44 <panicbit>	Although, it could help pointing out that you'll always get an Ok value
<panicbit>	Although, it could help pointing out that you'll always get an Ok value
Mar 31 15:50:07 <LambdaComplex>	And if my code actually is wrong he'll probably tell me :P
Mar 31 15:50:07 <LambdaComplex>	And if my code actually is wrong he'll probably tell me :P
Mar 31 15:51:01 <panicbit>	"XCB creators themselves described this as confusing" welp...
Mar 31 15:51:01 <panicbit>	"XCB creators themselves described this as confusing" welp...
Mar 31 15:52:07 <LambdaComplex>	My thoughts exactly >.>
Mar 31 15:52:07 <LambdaComplex>	My thoughts exactly >.>
Mar 31 15:57:04 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 15:57:04 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has joined
Mar 31 16:04:39 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 16:04:39 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 16:06:15 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 16:06:15 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 16:08:09 *	Confused has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 16:08:09 *	Confused has quit (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
Mar 31 16:15:45 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:15:45 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:16:12 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 16:16:12 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 16:18:57 <JP||>	can I match using nested fields?
Mar 31 16:18:57 <JP||>	can I match using nested fields?
Mar 31 16:19:29 <panicbit>	JP||: Not sure what you mean, can you give an example?
Mar 31 16:19:29 <panicbit>	JP||: Not sure what you mean, can you give an example?
Mar 31 16:19:29 <JP||>	like match t { Some(Some(var)) => {do stuff with var} }
Mar 31 16:19:29 <JP||>	like match t { Some(Some(var)) => {do stuff with var} }
Mar 31 16:19:34 <panicbit>	That was quick ;D
Mar 31 16:19:34 <panicbit>	That was quick ;D
Mar 31 16:19:35 Mar 31 16:19:35 *	anowell (uid81535@moz-64klnd.tooting.irccloud.com) has joined
*	anowell (uid81535@moz-64klnd.tooting.irccloud.com) has joined
Mar 31 16:19:50 <panicbit>	JP||: Yeah, you can totally do that
Mar 31 16:19:50 <panicbit>	JP||: Yeah, you can totally do that
Mar 31 16:20:17 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 16:20:17 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 16:20:51 <panicbit>	JP||: For nested Options there are ways to collapse them without using match though
Mar 31 16:20:51 <panicbit>	JP||: For nested Options there are ways to collapse them without using match though
Mar 31 16:21:38 <panicbit>	playbot: let foo = Some(Some(32)); foo.and_then(|s| s)
Mar 31 16:21:38 <panicbit>	playbot: let foo = Some(Some(32)); foo.and_then(|s| s)
Mar 31 16:21:39 Mar 31 16:21:39 -playbot/#rust-beginners-	Some(32)
-playbot/#rust-beginners-	Some(32)
Mar 31 16:21:52 <JP||>	cool
Mar 31 16:21:52 <JP||>	cool
Mar 31 16:21:57 <panicbit>	(there are other ways like filter_map or flat_map
Mar 31 16:21:57 <panicbit>	(there are other ways like filter_map or flat_map
Mar 31 16:21:59 Mar 31 16:21:59 <panicbit>	)
<panicbit>	)
Mar 31 16:22:06 Mar 31 16:22:06 <JP||>	my problem here was that hashmap.get also returns an option
<JP||>	my problem here was that hashmap.get also returns an option
Mar 31 16:22:09 <JP||>	three nested options
Mar 31 16:22:09 <JP||>	three nested options
Mar 31 16:22:18 <JP||>	I only accounted for one
Mar 31 16:22:18 <JP||>	I only accounted for one
Mar 31 16:22:22 Mar 31 16:22:22 <JP||>	two I mean
<JP||>	two I mean
Mar 31 16:22:53 <panicbit>	playbot: let foo = Some(Some(Some(32))); foo.and_then(|s| s).and_then(|s| s)
Mar 31 16:22:53 <panicbit>	playbot: let foo = Some(Some(Some(32))); foo.and_then(|s| s).and_then(|s| s)
Mar 31 16:22:53 -playbot/#rust-beginners-	Some(32)
Mar 31 16:22:53 -playbot/#rust-beginners-	Some(32)
Mar 31 16:22:54 Mar 31 16:22:54 <panicbit>	:P
<panicbit>	:P
Mar 31 16:24:21 <JP||>	writing a recursive descent parser here for this mini language and every now and then I just keep banging my head against the wall :P
Mar 31 16:24:21 <JP||>	writing a recursive descent parser here for this mini language and every now and then I just keep banging my head against the wall :P
Mar 31 16:28:09 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has left
Mar 31 16:28:09 *	mcouk (mcouk@moz-mejic6.dynamic.cablesurf.de) has left
Mar 31 16:29:22 *	noidea has quit (Connection closed)
Mar 31 16:29:22 *	noidea has quit (Connection closed)
Mar 31 16:32:53 <LambdaComplex>	panicbit: So I won't get that update until he releases a new version, right?
Mar 31 16:32:53 <LambdaComplex>	panicbit: So I won't get that update until he releases a new version, right?
Mar 31 16:33:01 <panicbit>	LambdaComplex: Exactl
Mar 31 16:33:01 <panicbit>	LambdaComplex: Exactl
Mar 31 16:33:02 <LambdaComplex>	panicbit: Unless I tell it to look at github instead of crates.io
Mar 31 16:33:02 <LambdaComplex>	panicbit: Unless I tell it to look at github instead of crates.io
Mar 31 16:33:03 <panicbit>	y
Mar 31 16:33:03 <panicbit>	y
Mar 31 16:33:30 <panicbit>	LambdaComplex: Well, you need to either 1) `cargo update` when he pushed the update
Mar 31 16:33:30 <panicbit>	LambdaComplex: Well, you need to either 1) `cargo update` when he pushed the update
Mar 31 16:33:31 <monti>	!crate log
Mar 31 16:33:31 <monti>	!crate log
Mar 31 16:33:32 <rustbot>	log (0.3.5) - A lightweight logging facade for Rust -> https://crates.io/crates/log
Mar 31 16:33:32 <rustbot>	log (0.3.5) - A lightweight logging facade for Rust -> https://crates.io/crates/log
Mar 31 16:33:41 Mar 31 16:33:41 <panicbit>	2) update the version in your Cargo.toml
<panicbit>	2) update the version in your Cargo.toml
Mar 31 16:33:47 <panicbit>	3) point to github
Mar 31 16:33:47 <panicbit>	3) point to github
Mar 31 16:33:57 *	mib_rz6pgj (Mibbit@moz-rrp4b5.lynet.no) has joined
Mar 31 16:33:57 *	mib_rz6pgj (Mibbit@moz-rrp4b5.lynet.no) has joined
Mar 31 16:34:37 <panicbit>	LambdaComplex: Option 1) only works, when semver says that updating to the newer version is save
Mar 31 16:34:37 <panicbit>	LambdaComplex: Option 1) only works, when semver says that updating to the newer version is save
Mar 31 16:35:19 Mar 31 16:35:19 <panicbit>	(and only if you haven't pinned the version in a way)
<panicbit>	(and only if you haven't pinned the version in a way)
Mar 31 16:36:15 <panicbit>	LambdaComplex: I'd go with option 2)
Mar 31 16:36:15 <panicbit>	LambdaComplex: I'd go with option 2)
Mar 31 16:36:51 <LambdaComplex>	panicbit: ...He didn't push an update though
Mar 31 16:36:51 <LambdaComplex>	panicbit: ...He didn't push an update though
Mar 31 16:36:53 <LambdaComplex>	panicbit: https://github.com/rtbo/rust-xcb/releases
Mar 31 16:36:53 <LambdaComplex>	panicbit: https://github.com/rtbo/rust-xcb/releases
Mar 31 16:37:45 <panicbit>	LambdaComplex: 1) the tags on github don't necessarily reflect the versions on crates.io
Mar 31 16:37:45 <panicbit>	LambdaComplex: 1) the tags on github don't necessarily reflect the versions on crates.io
Mar 31 16:37:50 <panicbit>	2) give him some time :)
Mar 31 16:37:50 <panicbit>	2) give him some time :)
Mar 31 16:37:59 <tilpner>	LambdaComplex - The fix for set_input_focus seems to be on crates.io already.
Mar 31 16:37:59 <tilpner>	LambdaComplex - The fix for set_input_focus seems to be on crates.io already.
Mar 31 16:38:17 <tilpner>	(Did you mean another fix?)
Mar 31 16:38:17 <tilpner>	(Did you mean another fix?)
Mar 31 16:38:23 *	martianwars|afk is now known as martianwars
Mar 31 16:38:23 *	martianwars|afk is now known as martianwars
Mar 31 16:39:32 <tilpner>	Oh, #14 has been fixed 20min ago. Just poke him in half an hour?
Mar 31 16:39:32 <tilpner>	Oh, #14 has been fixed 20min ago. Just poke him in half an hour?
Mar 31 16:40:29 <panicbit>	Or use the github version until you've implemented most of the commands
Mar 31 16:40:29 <panicbit>	Or use the github version until you've implemented most of the commands
Mar 31 16:41:19 <tilpner>	Or a local override, if you don't want to modify Cargo.toml.
Mar 31 16:41:19 <tilpner>	Or a local override, if you don't want to modify Cargo.toml.
Mar 31 16:41:20 <panicbit>	I feel like this might not be the last oddity that we uncover :)
Mar 31 16:41:20 <panicbit>	I feel like this might not be the last oddity that we uncover :)
Mar 31 16:43:52 *	Arash-M (arashm@moz-gqk.1vu.126.5.IP) has joined
Mar 31 16:43:52 *	Arash-M (arashm@moz-gqk.1vu.126.5.IP) has joined
Mar 31 16:43:58 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 16:43:58 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 16:45:35 *	nicholasf (nicholasf@moz-a9dqgc.internode.on.net) has joined
Mar 31 16:45:35 *	nicholasf (nicholasf@moz-a9dqgc.internode.on.net) has joined
Mar 31 16:46:06 *	sifton (sifton@moz-p8hanb.cable.rogers.com) has joined
Mar 31 16:46:06 *	sifton (sifton@moz-p8hanb.cable.rogers.com) has joined
Mar 31 16:48:01 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 16:48:01 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 16:48:22 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 16:48:22 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 16:50:35 *	Peach (Peach@moz-q01.nag.102.75.IP) has joined
Mar 31 16:50:35 *	Peach (Peach@moz-q01.nag.102.75.IP) has joined
Mar 31 16:50:53 <LambdaComplex>	panicbit: Just because I agree with that doesn't mean I wanna see it in writing :(
Mar 31 16:50:53 <LambdaComplex>	panicbit: Just because I agree with that doesn't mean I wanna see it in writing :(
Mar 31 16:51:12 <panicbit>	;P
Mar 31 16:51:12 <panicbit>	;P
Mar 31 16:51:33 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 16:51:33 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 16:51:40 *	badon_ (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 31 16:51:40 *	badon_ (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 31 16:52:40 *	junqed (junqed@moz-26g.vhd.70.178.IP) has joined
Mar 31 16:52:40 *	junqed (junqed@moz-26g.vhd.70.178.IP) has joined
Mar 31 16:53:06 *	brson_ (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 16:53:06 *	brson_ (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 16:53:19 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 16:53:19 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 16:54:41 *	brson has quit (Connection closed)
Mar 31 16:54:41 *	brson has quit (Connection closed)
Mar 31 16:54:46 *	badon has quit (Ping timeout: 121 seconds)
Mar 31 16:54:46 *	badon has quit (Ping timeout: 121 seconds)
Mar 31 16:55:56 *	badon_ is now known as badon
Mar 31 16:55:56 *	badon_ is now known as badon
Mar 31 16:56:03 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:56:03 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 16:57:09 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 31 16:57:09 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 31 16:57:50 *	azerupi (azerupi@moz-6upi4g.isp.belgacom.be) has joined
Mar 31 16:57:50 *	azerupi (azerupi@moz-6upi4g.isp.belgacom.be) has joined
Mar 31 17:00:28 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 17:00:28 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 17:01:53 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 31 17:01:53 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 31 17:07:25 *	boon has quit (Ping timeout: 121 seconds)
Mar 31 17:07:25 *	boon has quit (Ping timeout: 121 seconds)
Mar 31 17:08:03 *	JuggleTux (tux@moz-67m1v1.cust.swisscom.ch) has joined
Mar 31 17:08:03 *	JuggleTux (tux@moz-67m1v1.cust.swisscom.ch) has joined
Mar 31 17:09:19 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 17:09:19 *	dextertzu has quit (Ping timeout: 121 seconds)
Mar 31 17:16:29 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:16:29 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:16:30 *	sifton has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 17:16:30 *	sifton has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 17:19:41 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 17:19:41 *	dextertzu (dexter@moz-mvcfdf.vs.shawcable.net) has joined
Mar 31 17:27:55 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 17:27:55 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 17:28:26 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:28:26 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 17:29:33 *	cbrewste_ (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 17:29:33 *	cbrewste_ (cbrewster@moz-rm9.87o.84.137.IP) has joined
Mar 31 17:29:54 *	mib_rz6pgj has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 17:29:54 *	mib_rz6pgj has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 17:30:57 *	hybrisCole (Mibbit@moz-k9b.ej6.241.190.IP) has joined
Mar 31 17:30:57 *	hybrisCole (Mibbit@moz-k9b.ej6.241.190.IP) has joined
Mar 31 17:31:20 <hybrisCole>	Hello, I installed nightly Rust 
Mar 31 17:31:20 <hybrisCole>	Hello, I installed nightly Rust 
Mar 31 17:31:37 <hybrisCole>	but stdin won't wait for user input
Mar 31 17:31:37 <hybrisCole>	but stdin won't wait for user input
Mar 31 17:31:48 <hybrisCole>	I'm trying to run the guessing game demo
Mar 31 17:31:48 <hybrisCole>	I'm trying to run the guessing game demo
Mar 31 17:31:55 <hybrisCole>	but I'm not able to type a value
Mar 31 17:31:55 <hybrisCole>	but I'm not able to type a value
Mar 31 17:31:58 *	insaneinside (user@moz-afulfs.tukw.qwest.net) has joined
Mar 31 17:31:58 *	insaneinside (user@moz-afulfs.tukw.qwest.net) has joined
Mar 31 17:32:06 <hybrisCole>	using El Capitan
Mar 31 17:32:06 <hybrisCole>	using El Capitan
Mar 31 17:32:21 <tilpner>	hybrisCole - Do you have a code snippet?
Mar 31 17:32:21 <tilpner>	hybrisCole - Do you have a code snippet?
Mar 31 17:32:24 <mbrubeck>	What happens when you run the program, hybrisCole ?
Mar 31 17:32:24 <mbrubeck>	What happens when you run the program, hybrisCole ?
Mar 31 17:32:25 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:32:25 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:32:36 *	cbrewster (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:32:36 *	cbrewster (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:32:37 <hybrisCole>	sure, just a sec
Mar 31 17:32:37 <hybrisCole>	sure, just a sec
Mar 31 17:32:39 <mbrubeck>	Is your code identical to the final block on http://doc.rust-lang.org/book/guessing-game.html ?
Mar 31 17:32:39 <mbrubeck>	Is your code identical to the final block on http://doc.rust-lang.org/book/guessing-game.html ?
Mar 31 17:32:46 Mar 31 17:32:46 <hybrisCole>	yeah
<hybrisCole>	yeah
Mar 31 17:32:47 <hybrisCole>	that one
Mar 31 17:32:47 <hybrisCole>	that one
Mar 31 17:33:17 <hybrisCole>	 io::stdin().read_line(&mut guess).expect("Failed to read line");
Mar 31 17:33:17 <hybrisCole>	 io::stdin().read_line(&mut guess).expect("Failed to read line");
Mar 31 17:33:21 <hybrisCole>	 io :: stdin().read_line(&mut guess).expect("Failed to read line");
Mar 31 17:33:21 <hybrisCole>	 io :: stdin().read_line(&mut guess).expect("Failed to read line");
Mar 31 17:33:23 *	cbrewste_ has quit (Connection closed)
Mar 31 17:33:23 *	cbrewste_ has quit (Connection closed)
Mar 31 17:33:31 Mar 31 17:33:31 <hybrisCole>	that piece of code won't wait for me to type
<hybrisCole>	that piece of code won't wait for me to type
Mar 31 17:33:48 <steveklabnik>	are you running this code through 'cargo run'?
Mar 31 17:33:48 <steveklabnik>	are you running this code through 'cargo run'?
Mar 31 17:34:16 <mbrubeck>	hybrisCole: Does it panic with 'Failed to read line'?
Mar 31 17:34:16 <mbrubeck>	hybrisCole: Does it panic with 'Failed to read line'?
Mar 31 17:34:17 <steveklabnik>	if you are, there's a bug :(
Mar 31 17:34:17 <steveklabnik>	if you are, there's a bug :(
Mar 31 17:34:44 <steveklabnik>	https://github.com/rust-lang/cargo/issues/2530
Mar 31 17:34:44 <steveklabnik>	https://github.com/rust-lang/cargo/issues/2530
Mar 31 17:35:52 <panicbit>	steveklabnik: Hm, that's for nightly though
Mar 31 17:35:52 <panicbit>	steveklabnik: Hm, that's for nightly though
Mar 31 17:36:00 <panicbit>	(assuming hybrisCole uses stable)
Mar 31 17:36:00 <panicbit>	(assuming hybrisCole uses stable)
Mar 31 17:36:07 <hybrisCole>	nope
Mar 31 17:36:07 <hybrisCole>	nope
Mar 31 17:36:11 <hybrisCole>	I'm using nightly
Mar 31 17:36:11 <hybrisCole>	I'm using nightly
Mar 31 17:36:29 <panicbit>	Oh, well then
Mar 31 17:36:29 <panicbit>	Oh, well then
Mar 31 17:36:36 <panicbit>	That might probably be it
Mar 31 17:36:36 <panicbit>	That might probably be it
Mar 31 17:36:42 <hybrisCole>	https://gist.github.com/hybrisCole/227dc22be06e59dbb5022edd32004059
Mar 31 17:36:42 <hybrisCole>	https://gist.github.com/hybrisCole/227dc22be06e59dbb5022edd32004059
Mar 31 17:36:45 <hybrisCole>	that's what I'm gettng
Mar 31 17:36:45 <hybrisCole>	that's what I'm gettng
Mar 31 17:36:48 <hybrisCole>	that's what I'm getting
Mar 31 17:36:48 <hybrisCole>	that's what I'm getting
Mar 31 17:37:14 <hybrisCole>	so I should go back to stable I guess
Mar 31 17:37:14 <hybrisCole>	so I should go back to stable I guess
Mar 31 17:37:18 <panicbit>	hybrisCole: Not necessarily
Mar 31 17:37:18 <panicbit>	hybrisCole: Not necessarily
Mar 31 17:37:28 <panicbit>	hybrisCole: You can just directly execute the binary
Mar 31 17:37:28 <panicbit>	hybrisCole: You can just directly execute the binary
Mar 31 17:37:49 Mar 31 17:37:49 <panicbit>	hybrisCole: it's `target/debug/guessing_game`
<panicbit>	hybrisCole: it's `target/debug/guessing_game`
Mar 31 17:38:03 <panicbit>	in your project's folder
Mar 31 17:38:03 <panicbit>	in your project's folder
Mar 31 17:38:35 <steveklabnik>	i usually type ./target/debug/guessing_game if i'm doing that for extra accuracy, hehe
Mar 31 17:38:35 <steveklabnik>	i usually type ./target/debug/guessing_game if i'm doing that for extra accuracy, hehe
Mar 31 17:38:45 <panicbit>	^
Mar 31 17:38:45 <panicbit>	^
Mar 31 17:38:59 <hybrisCole>	ok
Mar 31 17:38:59 <hybrisCole>	ok
Mar 31 17:39:16 <Xion>	Bad cargo, bad!
Mar 31 17:39:16 <Xion>	Bad cargo, bad!
Mar 31 17:39:23 <hybrisCole>	ah, it's working :)
Mar 31 17:39:23 <hybrisCole>	ah, it's working :)
Mar 31 17:39:36 <insaneinside>	`Vec<T>` implements `Default` even when T does not, right?
Mar 31 17:39:36 <insaneinside>	`Vec<T>` implements `Default` even when T does not, right?
Mar 31 17:40:32 <pingveno>	Yes, because it's just an empty Vec
Mar 31 17:40:32 <pingveno>	Yes, because it's just an empty Vec
Mar 31 17:41:03 <panicbit>	I wish you could link to impls in the doc
Mar 31 17:41:03 <panicbit>	I wish you could link to impls in the doc
Mar 31 17:41:35 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 31 17:41:35 *	durka42 (durka42@moz-d15k7q.pa.comcast.net) has joined
Mar 31 17:42:26 <insaneinside>	pingveno: okay, so what's going on in...
Mar 31 17:42:26 <insaneinside>	pingveno: okay, so what's going on in...
Mar 31 17:42:31 <insaneinside>	playbot: use std::ops::Range; use std::default::Default; #[derive(Default)] struct Foo<X> { x: Vec<X> } type Bar = Foo<Range<u8>>; let b: Bar = Default::default();
Mar 31 17:42:31 <insaneinside>	playbot: use std::ops::Range; use std::default::Default; #[derive(Default)] struct Foo<X> { x: Vec<X> } type Bar = Foo<Range<u8>>; let b: Bar = Default::default();
Mar 31 17:42:31 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1M40LUe
Mar 31 17:42:31 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1M40LUe
Mar 31 17:42:44 <insaneinside>	"error: the trait `core::default::Default` is not implemented for the type `core::ops::Range<u8>`"
Mar 31 17:42:44 <insaneinside>	"error: the trait `core::default::Default` is not implemented for the type `core::ops::Range<u8>`"
Mar 31 17:42:56 <mbrubeck>	insaneinside: https://github.com/rust-lang/rust/issues/26925
Mar 31 17:42:56 <mbrubeck>	insaneinside: https://github.com/rust-lang/rust/issues/26925
Mar 31 17:43:26 <mbrubeck>	insaneinside: It's an annoying but hard-to-fix bug in #[derive]
Mar 31 17:43:26 <mbrubeck>	insaneinside: It's an annoying but hard-to-fix bug in #[derive]
Mar 31 17:44:06 <panicbit>	So the solution is to impl Default yourself I guess
Mar 31 17:44:06 <panicbit>	So the solution is to impl Default yourself I guess
Mar 31 17:44:55 <insaneinside>	:|
Mar 31 17:44:55 <insaneinside>	:|
Mar 31 17:45:20 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 31 17:45:20 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 31 17:45:59 *	aevitas_ (aevitas@moz-rkj.1ej.185.146.IP) has joined
Mar 31 17:45:59 *	aevitas_ (aevitas@moz-rkj.1ej.185.146.IP) has joined
Mar 31 17:46:28 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 31 17:46:28 *	tycoon177 (tycoon177@moz-t4i.5np.119.192.IP) has joined
Mar 31 17:46:52 *	nicholasf has quit (Connection closed)
Mar 31 17:46:52 *	nicholasf has quit (Connection closed)
Mar 31 17:48:10 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:48:10 *	cbrewste_ (cbrewster@moz-5aretm.static.bresnan.net) has joined
Mar 31 17:48:24 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 17:48:24 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 17:49:18 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 17:49:18 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 17:49:37 *	aevitas (aevitas@moz-814.vsn.162.178.IP) has joined
Mar 31 17:49:37 *	aevitas (aevitas@moz-814.vsn.162.178.IP) has joined
Mar 31 17:50:34 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:50:34 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 17:50:45 *	hybrisCole has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 17:50:45 *	hybrisCole has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 17:53:06 *	aevitas_ has quit (Ping timeout: 121 seconds)
Mar 31 17:53:06 *	aevitas_ has quit (Ping timeout: 121 seconds)
Mar 31 17:54:28 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 17:54:28 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 17:57:51 *	azerupi has quit (Ping timeout: 121 seconds)
**** ENDING LOGGING AT Thu Mar 31 17:58:12 2016

**** BEGIN LOGGING AT Thu Mar 31 17:58:12 2016

Mar 31 17:58:17 Python interface unloaded
**** ENDING LOGGING AT Thu Mar 31 17:58:17 2016

Mar 31 17:58:17 *	brunodea_ has quit (Quit: Leaving)
Mar 31 17:58:22 *	brunodea_ (brunodea@moz-cthdmd.gvt.net.br) has joined
**** BEGIN LOGGING AT Thu Mar 31 17:58:22 2016

Mar 31 17:58:22 *	Now talking on #rust-beginners
Mar 31 17:58:22 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Mar 31 17:58:22 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Mar 31 18:00:13 *	starblue has quit (Ping timeout: 121 seconds)
Mar 31 18:01:02 <LambdaComplex>	Hm, should Cargo.lock be in my .gitignore file? Or does it not really matter?
Mar 31 18:01:02 <LambdaComplex>	Hm, should Cargo.lock be in my .gitignore file? Or does it not really matter?
Mar 31 18:02:38 <panicbit>	LambdaComplex: It should be for your project
Mar 31 18:02:38 <panicbit>	LambdaComplex: It should be for your project
Mar 31 18:02:49 <panicbit>	LambdaComplex: Since it produces a binary
Mar 31 18:02:49 <panicbit>	LambdaComplex: Since it produces a binary
Mar 31 18:03:13 Mar 31 18:03:13 <panicbit>	LambdaComplex: Er, sorry, it should not be in the .gitignore
<panicbit>	LambdaComplex: Er, sorry, it should not be in the .gitignore
Mar 31 18:03:19 <LambdaComplex>	Make up my mind, panicbit :P
Mar 31 18:03:19 <LambdaComplex>	Make up my mind, panicbit :P
Mar 31 18:03:23 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 18:03:49 <panicbit>	LambdaComplex: You want to be able to reproduce the binary with exactly the same dependencies, so you need the Cargo.lock in your repo
Mar 31 18:03:49 <panicbit>	LambdaComplex: You want to be able to reproduce the binary with exactly the same dependencies, so you need the Cargo.lock in your repo
Mar 31 18:03:58 <LambdaComplex>	panicbit: Works for me :D
Mar 31 18:03:58 <LambdaComplex>	panicbit: Works for me :D
Mar 31 18:04:31 <panicbit>	LambdaComplex: For libraries you can put it in the .gitignore, because the binary that depends on your project controls your dependencies
Mar 31 18:04:31 <panicbit>	LambdaComplex: For libraries you can put it in the .gitignore, because the binary that depends on your project controls your dependencies
Mar 31 18:04:48 *	Arash-M (arashm@moz-7oq.bnf.126.5.IP) has joined
Mar 31 18:05:02 <panicbit>	It may still be useful for documentation I guess
Mar 31 18:05:02 <panicbit>	It may still be useful for documentation I guess
Mar 31 18:05:08 *	himi has quit (Ping timeout: 121 seconds)
Mar 31 18:06:14 *	frankmcsherry (frankmcsher@moz-cko.a2h.194.217.IP) has joined
Mar 31 18:06:23 *	jeffdb has quit (Quit: WeeChat 1.4)
Mar 31 18:07:22 <steveklabnik>	LambdaComplex: http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries
Mar 31 18:07:22 <steveklabnik>	LambdaComplex: http://doc.crates.io/faq.html#why-do-binaries-have-cargolock-in-version-control-but-not-libraries
Mar 31 18:07:26 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 18:09:33 <panicbit>	Ah, so you actually should explicitly not check in the cargo lock for libraries
Mar 31 18:09:33 <panicbit>	Ah, so you actually should explicitly not check in the cargo lock for libraries
Mar 31 18:10:11 <steveklabnik>	you can, but cargo will ignore them when doing resolution. like, they only work locally
Mar 31 18:10:11 <steveklabnik>	you can, but cargo will ignore them when doing resolution. like, they only work locally
Mar 31 18:10:18 <panicbit>	LambdaComplex: How would that work for crates that define a binary and a library target?
Mar 31 18:10:18 <panicbit>	LambdaComplex: How would that work for crates that define a binary and a library target?
Mar 31 18:10:21 <panicbit>	Ah ok
Mar 31 18:10:21 <panicbit>	Ah ok
Mar 31 18:10:37 <steveklabnik>	'cargo new' will give you a gitignore without one, cargo new --bin will not
Mar 31 18:10:37 <steveklabnik>	'cargo new' will give you a gitignore without one, cargo new --bin will not
Mar 31 18:10:39 <panicbit>	LambdaComplex: Sorry, I meant to direct that at steveklabnik :)
Mar 31 18:10:39 <panicbit>	LambdaComplex: Sorry, I meant to direct that at steveklabnik :)
Mar 31 18:10:43 <steveklabnik>	and yeah, if you have both, then just check it in
Mar 31 18:10:43 <steveklabnik>	and yeah, if you have both, then just check it in
Mar 31 18:10:56 <steveklabnik>	you don't break anything, it will still _work_
Mar 31 18:10:56 <steveklabnik>	you don't break anything, it will still _work_
Mar 31 18:12:03 <panicbit>	very well
Mar 31 18:12:03 <panicbit>	very well
Mar 31 18:14:00 *	krebbit (Mibbit@moz-rsa.rgg.28.192.IP) has joined
Mar 31 18:14:03 *	aevitas has quit (A TLS packet with unexpected length was received.)
Mar 31 18:14:36 *	makoLine (mako@moz-mqc4hl.flip.co.nz) has joined
Mar 31 18:15:27 *	Aedylthryd (Thingus@moz-obq.d8m.98.75.IP) has joined
Mar 31 18:15:27 *	sobol_ has quit (Quit: leaving)
Mar 31 18:17:16 *	cafeclimber (cafeclimber@moz-e8lape.tamulink.tamu.edu) has joined
Mar 31 18:20:43 <LambdaComplex>	panicbit: So now that get_reply() can actually return an Err, how should I handle it?
Mar 31 18:20:43 <LambdaComplex>	panicbit: So now that get_reply() can actually return an Err, how should I handle it?
Mar 31 18:21:17 <panicbit>	Again, that depends entirely on how you want to react on error cases...
Mar 31 18:21:17 <panicbit>	Again, that depends entirely on how you want to react on error cases...
Mar 31 18:21:48 *	cbrewster (cbrewster@moz-8fnqcq.static.bresnan.net) has joined
Mar 31 18:22:13 <panicbit>	for quick and dirty error handling where the details of the error don't matter much and your app should exit use `.expect("something horrible happened")`
Mar 31 18:22:13 <panicbit>	for quick and dirty error handling where the details of the error don't matter much and your app should exit use `.expect("something horrible happened")`
Mar 31 18:22:25 *	jfhumann (jfhumann@moz-ggd9v7.dynamic.kabel-deutschland.de) has joined
Mar 31 18:22:53 <LambdaComplex>	I don't like panics :P
Mar 31 18:22:53 <LambdaComplex>	I don't like panics :P
Mar 31 18:23:17 <panicbit>	If you can produce a default Ok-value in the error case then use .unwrap_or or .unwrap_or_else
Mar 31 18:23:17 <panicbit>	If you can produce a default Ok-value in the error case then use .unwrap_or or .unwrap_or_else
Mar 31 18:23:27 <panicbit>	It may be useful to .map first
Mar 31 18:23:27 <panicbit>	It may be useful to .map first
Mar 31 18:23:44 <panicbit>	Or go with the match approach
Mar 31 18:23:44 <panicbit>	Or go with the match approach
Mar 31 18:24:03 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 18:24:03 <panicbit>	Or if you silently want to ignore errors use if-let
Mar 31 18:24:03 <panicbit>	Or if you silently want to ignore errors use if-let
Mar 31 18:24:22 <LambdaComplex>	Hm, how do I assign something to the Ok value using match but call std::process::exit() if it's an Err?
Mar 31 18:24:22 <LambdaComplex>	Hm, how do I assign something to the Ok value using match but call std::process::exit() if it's an Err?
Mar 31 18:24:37 <LambdaComplex>	There's an is_ok() function, isn't there?
Mar 31 18:24:37 <LambdaComplex>	There's an is_ok() function, isn't there?
Mar 31 18:24:44 <panicbit>	Sure, but why...
Mar 31 18:24:44 <panicbit>	Sure, but why...
Mar 31 18:24:58 <panicbit>	Why do you want to assign something?
Mar 31 18:24:58 <panicbit>	Why do you want to assign something?
Mar 31 18:25:09 <panicbit>	If you want to mutate the value inside an Ok you can use .map
Mar 31 18:25:09 <panicbit>	If you want to mutate the value inside an Ok you can use .map
Mar 31 18:25:33 <panicbit>	e.g. `result.map(|v| v.len()).unwrap_or(0)`
Mar 31 18:25:33 <panicbit>	e.g. `result.map(|v| v.len()).unwrap_or(0)`
Mar 31 18:25:51 <LambdaComplex>	Well, I need to assign something to the result, don't I?
Mar 31 18:25:51 <LambdaComplex>	Well, I need to assign something to the result, don't I?
Mar 31 18:25:56 <panicbit>	imagine that `result` has the type Result<Vec<T>, Error>
Mar 31 18:25:56 <panicbit>	imagine that `result` has the type Result<Vec<T>, Error>
Mar 31 18:26:34 <panicbit>	LambdaComplex: No, if it is an Ok value, why would you want to assign something to it?
Mar 31 18:26:34 <panicbit>	LambdaComplex: No, if it is an Ok value, why would you want to assign something to it?
Mar 31 18:27:40 <panicbit>	match result {  Ok(val) => /*do stuff */,   Err(e) => /* print e, exit */  }
Mar 31 18:27:40 <panicbit>	match result {  Ok(val) => /*do stuff */,   Err(e) => /* print e, exit */  }
Mar 31 18:27:44 <LambdaComplex>	panicbit: Okay, take your example. Don't I wanna assign the Vec<T> to a variable?
Mar 31 18:27:44 <LambdaComplex>	panicbit: Okay, take your example. Don't I wanna assign the Vec<T> to a variable?
Mar 31 18:27:54 <panicbit>	LambdaComplex: Sure
Mar 31 18:27:54 <panicbit>	LambdaComplex: Sure
Mar 31 18:28:00 <LambdaComplex>	Or should I just put the entire "Do this if Ok" section in a match block?
Mar 31 18:28:00 <LambdaComplex>	Or should I just put the entire "Do this if Ok" section in a match block?
Mar 31 18:28:08 <panicbit>	Yeah
Mar 31 18:28:08 <panicbit>	Yeah
Mar 31 18:28:11 <panicbit>	You could
Mar 31 18:28:11 <panicbit>	You could
Mar 31 18:28:15 *	Guest16 (textual@moz-tap.gpg.55.66.IP) has joined
Mar 31 18:28:25 <LambdaComplex>	What are the other options?
Mar 31 18:28:25 <LambdaComplex>	What are the other options?
Mar 31 18:28:25 *	himi (fow035@moz-r3ta53.internode.on.net) has joined
Mar 31 18:29:09 <panicbit>	LambdaComplex: let value = result.unwrap_or(print_generic_error_and_exit);
Mar 31 18:29:09 <panicbit>	LambdaComplex: let value = result.unwrap_or(print_generic_error_and_exit);
Mar 31 18:29:30 <panicbit>	where the print_generic_error_and_exit is a helper emthod which prints the error and then exits :)
Mar 31 18:29:30 <panicbit>	where the print_generic_error_and_exit is a helper emthod which prints the error and then exits :)
Mar 31 18:30:40 <LambdaComplex>	panicbit: Ah, gotcha
Mar 31 18:30:40 <LambdaComplex>	panicbit: Ah, gotcha
Mar 31 18:30:53 <LambdaComplex>	So I can just do .unwrap_or(proces::exit(0)) if I want it to silently quit?
Mar 31 18:30:53 <LambdaComplex>	So I can just do .unwrap_or(proces::exit(0)) if I want it to silently quit?
Mar 31 18:30:54 <panicbit>	Let me give you the template for that function
Mar 31 18:30:54 <panicbit>	Let me give you the template for that function
Mar 31 18:31:01 <LambdaComplex>	Assuming I don't misspell process
Mar 31 18:31:01 <LambdaComplex>	Assuming I don't misspell process
Mar 31 18:31:04 *	SkyToucher (Mibbit@moz-nn5.t2r.238.24.IP) has joined
Mar 31 18:31:06 <panicbit>	nope ;)
Mar 31 18:31:06 <panicbit>	nope ;)
Mar 31 18:31:15 *	SkyToucher has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 18:31:20 <panicbit>	You provide a function to unwrap_or
Mar 31 18:31:20 <panicbit>	You provide a function to unwrap_or
Mar 31 18:31:24 <bluss>	LambdaComplex: it's a funny line
Mar 31 18:31:24 <bluss>	LambdaComplex: it's a funny line
Mar 31 18:31:25 <LambdaComplex>	Uh...
Mar 31 18:31:25 <LambdaComplex>	Uh...
Mar 31 18:31:28 <bluss>	LambdaComplex: I think you want .unwrap_or_else(|| ) to not eagerly exit :)
Mar 31 18:31:28 <bluss>	LambdaComplex: I think you want .unwrap_or_else(|| ) to not eagerly exit :)
Mar 31 18:31:29 <LambdaComplex>	panicbit: Yes?
Mar 31 18:31:29 <LambdaComplex>	panicbit: Yes?
Mar 31 18:31:31 <panicbit>	but you are providing a value of a function
Mar 31 18:31:31 <panicbit>	but you are providing a value of a function
Mar 31 18:31:42 <panicbit>	`.unwrap_or(|| proces::exit(0))`
Mar 31 18:31:42 <panicbit>	`.unwrap_or(|| proces::exit(0))`
Mar 31 18:31:45 <panicbit>	^ would work
Mar 31 18:31:45 <panicbit>	^ would work
Mar 31 18:31:55 <LambdaComplex>	I just tried it my way and it worked 
Mar 31 18:31:55 <LambdaComplex>	I just tried it my way and it worked 
Mar 31 18:31:57 <panicbit>	oh yeah
Mar 31 18:31:57 <panicbit>	oh yeah
Mar 31 18:32:04 <panicbit>	unwrap_or_else
Mar 31 18:32:04 <panicbit>	unwrap_or_else
Mar 31 18:32:09 <panicbit>	damn
Mar 31 18:32:09 <panicbit>	damn
Mar 31 18:32:20 *	desophos_ (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 18:32:31 <panicbit>	LambdaComplex: Amusingly your code was valid :D
Mar 31 18:32:31 <panicbit>	LambdaComplex: Amusingly your code was valid :D
Mar 31 18:32:39 <panicbit>	And mine was wrong^^
Mar 31 18:32:39 <panicbit>	And mine was wrong^^
Mar 31 18:32:51 <panicbit>	Your code would exit every time though
Mar 31 18:32:51 <panicbit>	Your code would exit every time though
Mar 31 18:32:57 *	mrhota (Mibbit@moz-p5j2qq.res.rr.com) has joined
Mar 31 18:33:03 *	desophos_ has quit (A TLS packet with unexpected length was received.)
Mar 31 18:33:12 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 18:33:21 <bluss>	playbot: Some(1).unwrap_or(std::process::exit(1))
Mar 31 18:33:21 <bluss>	playbot: Some(1).unwrap_or(std::process::exit(1))
Mar 31 18:33:22 -playbot/#rust-beginners-	<anon>:9:17: 9:49 warning: unreachable call, #[warn(unreachable_code)] on by default
Mar 31 18:33:22 -playbot/#rust-beginners-	<anon>:9:17: 9:49 warning: unreachable call, #[warn(unreachable_code)] on by default
Mar 31 18:33:23 -playbot/#rust-beginners-	<anon>:9         Some(1).unwrap_or(std::process::exit(1))
Mar 31 18:33:23 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1VccL7A
Mar 31 18:33:23 -playbot/#rust-beginners-	<anon>:9         Some(1).unwrap_or(std::process::exit(1))
Mar 31 18:33:23 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1VccL7A
Mar 31 18:33:35 *	azerupi (azerupi@moz-6upi4g.isp.belgacom.be) has joined
Mar 31 18:33:37 <LambdaComplex>	So it does
Mar 31 18:33:37 <LambdaComplex>	So it does
Mar 31 18:33:51 <bluss>	rustc even warns about it
Mar 31 18:33:51 <bluss>	rustc even warns about it
Mar 31 18:33:53 <bluss>	good rustc
Mar 31 18:33:53 <bluss>	good rustc
Mar 31 18:33:55 <panicbit>	nice
Mar 31 18:33:55 <panicbit>	nice
Mar 31 18:33:57 <panicbit>	:D
Mar 31 18:33:57 <panicbit>	:D
Mar 31 18:34:28 *	Arash-M has quit (Ping timeout: 121 seconds)
Mar 31 18:35:22 *	desophos has quit (Ping timeout: 121 seconds)
Mar 31 18:36:10 <LambdaComplex>	So how do I either unwrap it or exit?
Mar 31 18:36:10 <LambdaComplex>	So how do I either unwrap it or exit?
Mar 31 18:36:14 <panicbit>	'sec
Mar 31 18:36:14 <panicbit>	'sec
Mar 31 18:36:47 <kefin>	Can I `use` a function from within a child of mod.rs?
Mar 31 18:36:47 <kefin>	Can I `use` a function from within a child of mod.rs?
Mar 31 18:36:52 <panicbit>	LambdaComplex: http://is.gd/lZfumD
Mar 31 18:36:52 <panicbit>	LambdaComplex: http://is.gd/lZfumD
Mar 31 18:37:14 <panicbit>	Apparently diverging functions don't implement Fn(Once) :/
Mar 31 18:37:14 <panicbit>	Apparently diverging functions don't implement Fn(Once) :/
Mar 31 18:37:22 <mbrubeck>	kefin: Yes.  You can do `use super::function_from_parent_module;`
Mar 31 18:37:22 <mbrubeck>	kefin: Yes.  You can do `use super::function_from_parent_module;`
Mar 31 18:37:43 <mbrubeck>	or `use full::path::to::parent::function_from_parent_module;`
Mar 31 18:37:43 <mbrubeck>	or `use full::path::to::parent::function_from_parent_module;`
Mar 31 18:38:01 <kefin>	Thanks!
Mar 31 18:38:01 <kefin>	Thanks!
Mar 31 18:38:02 <panicbit>	LambdaComplex: `fail` would probably a shorter but still meaningful name
Mar 31 18:38:02 <panicbit>	LambdaComplex: `fail` would probably a shorter but still meaningful name
Mar 31 18:38:11 <kefin>	self/super are always relative to the current file, right?
Mar 31 18:38:11 <kefin>	self/super are always relative to the current file, right?
Mar 31 18:38:13 <durka42>	unwrap_or_else(|_| exit(1)) works
Mar 31 18:38:13 <durka42>	unwrap_or_else(|_| exit(1)) works
Mar 31 18:38:22 <panicbit>	Didn't rust had a fail! macro at some point?
Mar 31 18:38:22 <panicbit>	Didn't rust had a fail! macro at some point?
Mar 31 18:38:27 <panicbit>	pre 1.0 of course
Mar 31 18:38:27 <panicbit>	pre 1.0 of course
Mar 31 18:38:35 <durka42>	yeah panic! used to be called fail!
Mar 31 18:38:35 <durka42>	yeah panic! used to be called fail!
Mar 31 18:38:41 <kefin>	Also what if two files do `mod x;` and x does `use super::something`?
Mar 31 18:38:41 <kefin>	Also what if two files do `mod x;` and x does `use super::something`?
Mar 31 18:39:02 <LambdaComplex>	panicbit: Alright, is there a way to do it without implementing my own custom fail function? :P
Mar 31 18:39:02 <LambdaComplex>	panicbit: Alright, is there a way to do it without implementing my own custom fail function? :P
Mar 31 18:39:27 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 18:39:32 <panicbit>	LambdaComplex: Well that is probably the best way to reduce boilerplate (assuming you need that function more than once)
Mar 31 18:39:32 <panicbit>	LambdaComplex: Well that is probably the best way to reduce boilerplate (assuming you need that function more than once)
Mar 31 18:39:43 <durka42>	kefin: you mean, two different modules with a submodule called "x"?
Mar 31 18:39:43 <durka42>	kefin: you mean, two different modules with a submodule called "x"?
Mar 31 18:39:54 Mar 31 18:39:54 <mbrubeck>	kefin: Those two files would be defining two different modules, `path::to::parent1::x` and `path::to::parent2::x`
<mbrubeck>	kefin: Those two files would be defining two different modules, `path::to::parent1::x` and `path::to::parent2::x`
Mar 31 18:39:57 <kefin>	With x being the same file, durka42
Mar 31 18:39:57 <kefin>	With x being the same file, durka42
Mar 31 18:40:10 <mbrubeck>	kefin: Yes, self/super are paths relative to the current module.
Mar 31 18:40:10 <mbrubeck>	kefin: Yes, self/super are paths relative to the current module.
Mar 31 18:40:23 <kefin>	Ah I see,...
Mar 31 18:40:23 <kefin>	Ah I see,...
Mar 31 18:40:33 <durka42>	hm good question
Mar 31 18:40:33 <durka42>	hm good question
Mar 31 18:40:33 <panicbit>	LambdaComplex: If you explain a bit about the exact case that you have I may be able to give a better answer
Mar 31 18:40:33 <panicbit>	LambdaComplex: If you explain a bit about the exact case that you have I may be able to give a better answer
Mar 31 18:41:11 <kefin>	So a.rs: `mod x;` and b.rs: `mod x;`, the super in `x.rs` depends on which execution path was chosen?
Mar 31 18:41:11 <kefin>	So a.rs: `mod x;` and b.rs: `mod x;`, the super in `x.rs` depends on which execution path was chosen?
Mar 31 18:41:22 <LambdaComplex>	panicbit: Well, I need to get a reply using the get_reply() function on a cookie...which will now actually return an Err if the window id isn't valid, it seems
Mar 31 18:41:22 <LambdaComplex>	panicbit: Well, I need to get a reply using the get_reply() function on a cookie...which will now actually return an Err if the window id isn't valid, it seems
Mar 31 18:41:26 <mbrubeck>	kefin: You can't just write `mod x;` in a.rs
Mar 31 18:41:26 <mbrubeck>	kefin: You can't just write `mod x;` in a.rs
Mar 31 18:41:39 *	himi has quit (Ping timeout: 121 seconds)
Mar 31 18:41:39 <mbrubeck>	kefin: You'd need to rename "a.rs" to "a/mod.rs"
Mar 31 18:41:39 <mbrubeck>	kefin: You'd need to rename "a.rs" to "a/mod.rs"
Mar 31 18:41:39 *	makoLine has quit (Connection closed)
Mar 31 18:41:40 *	dethos has quit (Ping timeout: 121 seconds)
Mar 31 18:41:47 <durka42>	oh yeah
Mar 31 18:41:47 <durka42>	oh yeah
Mar 31 18:41:52 <mbrubeck>	and then `mod x;` will expand to `mod x { /* contents of a/x.rs */ }`
Mar 31 18:41:52 <mbrubeck>	and then `mod x;` will expand to `mod x { /* contents of a/x.rs */ }`
Mar 31 18:41:53 *	NeverDie has quit (Quit: http://radiux.io/)
Mar 31 18:41:53 <durka42>	only lib.rs and main.rs and mod.rs can declare new modules
Mar 31 18:41:53 <durka42>	only lib.rs and main.rs and mod.rs can declare new modules
Mar 31 18:41:55 <panicbit>	LambdaComplex: And how do you want to continue if the window id is invalid?
Mar 31 18:41:55 <panicbit>	LambdaComplex: And how do you want to continue if the window id is invalid?
Mar 31 18:43:31 <panicbit>	LambdaComplex: You can also write this http://is.gd/27YnSh
Mar 31 18:43:31 <panicbit>	LambdaComplex: You can also write this http://is.gd/27YnSh
Mar 31 18:43:31 *	nkr has quit (Ping timeout: 121 seconds)
Mar 31 18:44:11 *	NeverDie (NeverDie@moz-6m1cpu.fios.verizon.net) has joined
Mar 31 18:44:12 <LambdaComplex>	panicbit: I guess just exit() if it's invalid
Mar 31 18:44:12 <LambdaComplex>	panicbit: I guess just exit() if it's invalid
Mar 31 18:44:40 <panicbit>	LambdaComplex: http://is.gd/zRg1Js
Mar 31 18:44:40 <panicbit>	LambdaComplex: http://is.gd/zRg1Js
Mar 31 18:45:10 *	nkr (Elite16292@moz-lfd3q3.lambda.elitebnc.org) has joined
Mar 31 18:45:28 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 18:45:29 <LambdaComplex>	panicbit: That seems to be it
Mar 31 18:45:29 <LambdaComplex>	panicbit: That seems to be it
Mar 31 18:45:33 *	durka42 does strange things with #[path] attributes
Mar 31 18:45:33 *	durka42 does strange things with #[path] attributes
Mar 31 18:45:39 <LambdaComplex>	So what's the synxtax for unwrap_or_else?
Mar 31 18:45:39 <LambdaComplex>	So what's the synxtax for unwrap_or_else?
Mar 31 18:45:43 <LambdaComplex>	Like, what's with the ||?
Mar 31 18:45:43 <LambdaComplex>	Like, what's with the ||?
Mar 31 18:45:44 <durka42>	seems you can include the same file twice as different modules
Mar 31 18:45:44 <durka42>	seems you can include the same file twice as different modules
Mar 31 18:45:53 <durka42>	LambdaComplex: you pass a closure
Mar 31 18:45:53 <durka42>	LambdaComplex: you pass a closure
Mar 31 18:46:08 <LambdaComplex>	Alright!
Mar 31 18:46:08 <LambdaComplex>	Alright!
Mar 31 18:46:11 <LambdaComplex>	What's a closure?
Mar 31 18:46:11 <LambdaComplex>	What's a closure?
Mar 31 18:46:54 <durka42>	https://doc.rust-lang.org/book/closures.html
Mar 31 18:46:54 <durka42>	https://doc.rust-lang.org/book/closures.html
Mar 31 18:47:45 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 18:47:45 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 18:47:47 *	malayaleecoder has quit (Quit: Connection closed for inactivity)
Mar 31 18:48:07 *	aevitas (aevitas@moz-dhn.pbl.165.46.IP) has joined
Mar 31 18:48:21 <panicbit>	LambdaComplex: An unnamed function
Mar 31 18:48:21 <panicbit>	LambdaComplex: An unnamed function
Mar 31 18:48:29 *	Arash-M (arashm@moz-fu5.gb3.102.82.IP) has joined
Mar 31 18:48:30 <panicbit>	LambdaComplex: Which also can have some state
Mar 31 18:48:30 <panicbit>	LambdaComplex: Which also can have some state
Mar 31 18:49:03 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 31 18:49:31 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 18:49:49 *	Altazimuth has quit (Ping timeout: 121 seconds)
Mar 31 18:49:52 <insaneinside>	Hrm. So suppose I have some `struct X { u: Whatever }` and I want to have some `fn rewrite<F: Fn(&mut Rewriter)>(&mut self, f: &F) { let r = Rewriter::new(&self.u); f(&mut r); self.u = r.finish(); }`
Mar 31 18:49:52 <insaneinside>	Hrm. So suppose I have some `struct X { u: Whatever }` and I want to have some `fn rewrite<F: Fn(&mut Rewriter)>(&mut self, f: &F) { let r = Rewriter::new(&self.u); f(&mut r); self.u = r.finish(); }`
Mar 31 18:50:06 Mar 31 18:50:06 <insaneinside>	Lifetimes are an issue here; is there a better way to do this?
<insaneinside>	Lifetimes are an issue here; is there a better way to do this?
Mar 31 18:50:26 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 31 18:51:25 <mbrubeck>	where do `X` and `Whatever` come into this?
Mar 31 18:51:25 <mbrubeck>	where do `X` and `Whatever` come into this?
Mar 31 18:51:32 *	anastiel has quit (Quit: Leaving)
Mar 31 18:51:40 Mar 31 18:51:40 <mbrubeck>	oh, is that inside `impl X`?
<mbrubeck>	oh, is that inside `impl X`?
Mar 31 18:51:45 *	anastiel (anastiel@moz-ek5sen.telesp.net.br) has joined
Mar 31 18:51:47 <insaneinside>	mbrubeck: sorry, yes.
Mar 31 18:51:47 <insaneinside>	mbrubeck: sorry, yes.
Mar 31 18:51:48 *	Aedylthryd has quit (Quit: )
Mar 31 18:52:38 *	anastiel has quit (Quit: Leaving)
Mar 31 18:53:30 <LambdaComplex>	panicbit: What if, instead of exiting, I just wanna return from the function?
Mar 31 18:53:30 <LambdaComplex>	panicbit: What if, instead of exiting, I just wanna return from the function?
Mar 31 18:53:40 <LambdaComplex>	(because i just remembered that's actually what i want to do)
Mar 31 18:53:40 <LambdaComplex>	(because i just remembered that's actually what i want to do)
Mar 31 18:53:45 <panicbit>	LambdaComplex: Then you're producing an Ok value
Mar 31 18:53:45 <panicbit>	LambdaComplex: Then you're producing an Ok value
Mar 31 18:54:08 <LambdaComplex>	panicbit: I mean return if there's an Err
Mar 31 18:54:08 <LambdaComplex>	panicbit: I mean return if there's an Err
Mar 31 18:54:11 <panicbit>	LambdaComplex: The return value from that closure will be returned as a result
Mar 31 18:54:11 <panicbit>	LambdaComplex: The return value from that closure will be returned as a result
Mar 31 18:54:15 <panicbit>	LambdaComplex: Yeah
Mar 31 18:54:15 <panicbit>	LambdaComplex: Yeah
Mar 31 18:54:38 <mbrubeck>	insaneinside: Does `Rewriter` have a lifetime parameter?
Mar 31 18:54:38 <mbrubeck>	insaneinside: Does `Rewriter` have a lifetime parameter?
Mar 31 18:54:58 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 18:55:06 <panicbit>	playbot: let result: Result<i32, _> = Err("fail"); result.unwrap_or_else(|_| 42)
Mar 31 18:55:06 <panicbit>	playbot: let result: Result<i32, _> = Err("fail"); result.unwrap_or_else(|_| 42)
Mar 31 18:55:07 -playbot/#rust-beginners-	42
Mar 31 18:55:07 -playbot/#rust-beginners-	42
Mar 31 18:55:16 <LambdaComplex>	panicbit: I'm lost again
Mar 31 18:55:16 <LambdaComplex>	panicbit: I'm lost again
Mar 31 18:55:22 <insaneinside>	mbrubeck: yep!  ...heh, how'd you guess?  I guess I did a little too much paraphrasing, huh?
Mar 31 18:55:22 <insaneinside>	mbrubeck: yep!  ...heh, how'd you guess?  I guess I did a little too much paraphrasing, huh?
Mar 31 18:56:00 Mar 31 18:56:00 <panicbit>	LambdaComplex: the function you pass to unwrap_or_else is used to produce an Ok value from an Err that occured
<panicbit>	LambdaComplex: the function you pass to unwrap_or_else is used to produce an Ok value from an Err that occured
Mar 31 18:56:14 *	tycoon177 has quit (Connection closed)
Mar 31 18:56:21 <mbrubeck>	insaneinside: Is this the same problem you're seeing? http://is.gd/O3p87d
Mar 31 18:56:21 <mbrubeck>	insaneinside: Is this the same problem you're seeing? http://is.gd/O3p87d
Mar 31 18:56:32 <panicbit>	LambdaComplex: But we don't have to return something when we put exit(1) at the end because exit is a divergend function
Mar 31 18:56:32 <panicbit>	LambdaComplex: But we don't have to return something when we put exit(1) at the end because exit is a divergend function
Mar 31 18:56:46 <panicbit>	LambdaComplex: "divergend" means: it never returns
Mar 31 18:56:46 <panicbit>	LambdaComplex: "divergend" means: it never returns
Mar 31 18:58:08 *	makoLine (mako@moz-d0acpm.flip.co.nz) has joined
Mar 31 18:58:15 <panicbit>	So it's valid not to return anything
Mar 31 18:58:15 <panicbit>	So it's valid not to return anything
Mar 31 18:58:16 <mbrubeck>	insaneinside: If so, http://is.gd/vC9ezU
Mar 31 18:58:16 <mbrubeck>	insaneinside: If so, http://is.gd/vC9ezU
Mar 31 18:58:24 <panicbit>	Because you diverge
Mar 31 18:58:24 <panicbit>	Because you diverge
Mar 31 18:58:25 *	jfhumann has quit (Ping timeout: 121 seconds)
Mar 31 18:58:30 <insaneinside>	mbrubeck: nope, it's the "cannot infer an appropriate lifetime due to conflicting requirements" one, pointing at the borrow of ... huh, okay new error
Mar 31 18:58:30 <insaneinside>	mbrubeck: nope, it's the "cannot infer an appropriate lifetime due to conflicting requirements" one, pointing at the borrow of ... huh, okay new error
Mar 31 18:58:56 <insaneinside>	mbrubeck: so I added a missing `mut` after the `let` statement.
Mar 31 18:58:56 <insaneinside>	mbrubeck: so I added a missing `mut` after the `let` statement.
Mar 31 18:59:03 *	monti (happy@moz-aidh09.broadband.corbina.ru) has left
Mar 31 18:59:09 <mbrubeck>	insaneinside: What are the signatures of Rewriter::new and Rewriter::finish?
Mar 31 18:59:09 <mbrubeck>	insaneinside: What are the signatures of Rewriter::new and Rewriter::finish?
Mar 31 18:59:24 <mbrubeck>	(also, does Whatever have a lifetime parameter?)
Mar 31 18:59:24 <mbrubeck>	(also, does Whatever have a lifetime parameter?)
Mar 31 18:59:33 <insaneinside>	no lifetime on Whatever
Mar 31 18:59:33 <insaneinside>	no lifetime on Whatever
Mar 31 19:00:14 <panicbit>	LambdaComplex: You can see that exit has this special return type `!` which means that exit is divergend: http://doc.rust-lang.org/nightly/std/process/fn.exit.html 
Mar 31 19:00:14 <panicbit>	LambdaComplex: You can see that exit has this special return type `!` which means that exit is divergend: http://doc.rust-lang.org/nightly/std/process/fn.exit.html 
Mar 31 19:00:24 <LambdaComplex>	panicbit: So how do I accomplish what I'm trying to do?
Mar 31 19:00:24 <LambdaComplex>	panicbit: So how do I accomplish what I'm trying to do?
Mar 31 19:00:56 <panicbit>	LambdaComplex: Well I don't know what you are trying to do... I posted lots of code where I thought that it does what you want to do :/
Mar 31 19:00:56 <panicbit>	LambdaComplex: Well I don't know what you are trying to do... I posted lots of code where I thought that it does what you want to do :/
Mar 31 19:01:04 <insaneinside>	mbrubeck: pub struct Rewriter<'a,G> where G: Graph + Default + 'a { input: &'a G, ... } impl<'a,G> Rewriter { pub fn new(g: &'a G) -> Self { ... }  pub fn finish(self) -> G { ... } }
Mar 31 19:01:04 <insaneinside>	mbrubeck: pub struct Rewriter<'a,G> where G: Graph + Default + 'a { input: &'a G, ... } impl<'a,G> Rewriter { pub fn new(g: &'a G) -> Self { ... }  pub fn finish(self) -> G { ... } }
Mar 31 19:01:41 <insaneinside>	mbrubeck: now I'm just confused as to why adding that missing `mut` would fix a "cannot infer appropriate lifetime..." error
Mar 31 19:01:41 <insaneinside>	mbrubeck: now I'm just confused as to why adding that missing `mut` would fix a "cannot infer appropriate lifetime..." error
Mar 31 19:01:48 <mbrubeck>	heh
Mar 31 19:01:48 <mbrubeck>	heh
Mar 31 19:02:47 <panicbit>	LambdaComplex: didn't you want to exit when an error occurs?
Mar 31 19:02:47 <panicbit>	LambdaComplex: didn't you want to exit when an error occurs?
Mar 31 19:02:51 <insaneinside>	Shouldn't it have given me an error about calling `f(&mut r)` given that `r` wasn't declared with `mut`?
Mar 31 19:02:51 <insaneinside>	Shouldn't it have given me an error about calling `f(&mut r)` given that `r` wasn't declared with `mut`?
Mar 31 19:02:57 *	aevitas_ (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 19:03:27 *	aevitas_ has quit (A TLS packet with unexpected length was received.)
Mar 31 19:03:30 <mbrubeck>	insaneinside: Yes, that's what it got initially when I expanded your one-liner version http://is.gd/rBE3NT
Mar 31 19:03:30 <mbrubeck>	insaneinside: Yes, that's what it got initially when I expanded your one-liner version http://is.gd/rBE3NT
Mar 31 19:04:06 <LambdaComplex>	panicbit: I changed my mind >.>
Mar 31 19:04:06 <LambdaComplex>	panicbit: I changed my mind >.>
Mar 31 19:04:15 <panicbit>	^^
Mar 31 19:04:15 <panicbit>	^^
Mar 31 19:04:35 <LambdaComplex>	read: remembered that this program should multiple window ids as arguments
Mar 31 19:04:35 <LambdaComplex>	read: remembered that this program should multiple window ids as arguments
Mar 31 19:05:48 <panicbit>	LambdaComplex: In that case you should probably have a function that tests the window id for validity
Mar 31 19:05:48 <panicbit>	LambdaComplex: In that case you should probably have a function that tests the window id for validity
Mar 31 19:05:50 *	bjz_ has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:06:09 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 19:06:22 *	klue has quit (Ping timeout: 121 seconds)
Mar 31 19:06:39 <LambdaComplex>	panicbit: Well in that case, this is easy!
Mar 31 19:06:39 <LambdaComplex>	panicbit: Well in that case, this is easy!
Mar 31 19:06:45 <LambdaComplex>	Since...I already have that function :p
Mar 31 19:06:45 <LambdaComplex>	Since...I already have that function :p
Mar 31 19:06:47 *	badon_ (badon@moz-e5d.2ql.244.104.IP) has joined
Mar 31 19:06:53 <insaneinside>	mbrubeck: d'oh!  It was because I added an explicit lifetime parameter to `rewrite`, and actually assigned it to `&mut self` at the same time I added the missing `mut` in `let r = ...`
Mar 31 19:06:53 <insaneinside>	mbrubeck: d'oh!  It was because I added an explicit lifetime parameter to `rewrite`, and actually assigned it to `&mut self` at the same time I added the missing `mut` in `let r = ...`
Mar 31 19:07:11 <insaneinside>	Leaving off the explicit lifetime param works just fine.
Mar 31 19:07:11 <insaneinside>	Leaving off the explicit lifetime param works just fine.
Mar 31 19:07:41 *	Malnormalulo (Malnormalul@moz-83aus5.cable.rcn.com) has joined
Mar 31 19:07:50 <insaneinside>	Lesson: just post the actual damn code, insaneinside.
Mar 31 19:07:50 <insaneinside>	Lesson: just post the actual damn code, insaneinside.
Mar 31 19:07:55 *	frankmcsherry has quit (Quit: Leaving...)
Mar 31 19:08:04 <LambdaComplex>	panicbit: So I can just keep using unwrap() since I'm only passing it valid window ids, right?
Mar 31 19:08:04 <LambdaComplex>	panicbit: So I can just keep using unwrap() since I'm only passing it valid window ids, right?
Mar 31 19:08:27 *	badon has quit (Ping timeout: 121 seconds)
Mar 31 19:08:35 Mar 31 19:08:35 <mbrubeck>	"test cases should be as simple as possible, but no simpler" :)
<mbrubeck>	"test cases should be as simple as possible, but no simpler" :)
Mar 31 19:08:49 <panicbit>	LambdaComplex: How can you guarantee that they haven't become invalid in the meantime?
Mar 31 19:08:49 <panicbit>	LambdaComplex: How can you guarantee that they haven't become invalid in the meantime?
Mar 31 19:10:04 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 19:10:39 *	krebbit has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 19:10:41 <LambdaComplex>	panicbit: Hm....point taken
Mar 31 19:10:41 <LambdaComplex>	panicbit: Hm....point taken
Mar 31 19:11:01 <panicbit>	LambdaComplex: The window of failure may be small... but not small enough ;)
Mar 31 19:11:01 <panicbit>	LambdaComplex: The window of failure may be small... but not small enough ;)
Mar 31 19:11:04 *	badon_ is now known as badon
Mar 31 19:11:13 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 19:11:19 <panicbit>	LambdaComplex: Always use .expect anyway
Mar 31 19:11:19 <panicbit>	LambdaComplex: Always use .expect anyway
Mar 31 19:11:40 <panicbit>	.unwrap() is "not ideal"
Mar 31 19:11:40 <panicbit>	.unwrap() is "not ideal"
Mar 31 19:12:21 *	cbrewste_ (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 19:12:48 *	ChanServ gives channel operator status to niconii
Mar 31 19:12:48 *	niconii (nicole@moz-ge9dfs.jhek.me72.48f8.2001.IP) has joined
Mar 31 19:12:48 *	ChanServ gives channel operator status to niconii
Mar 31 19:13:02 <LambdaComplex>	let geometry_cookie_reply_result = geometry_cookie.get_reply().expect("Failed to get window information. Maybe the window was destroyed?");
Mar 31 19:13:02 <LambdaComplex>	let geometry_cookie_reply_result = geometry_cookie.get_reply().expect("Failed to get window information. Maybe the window was destroyed?");
Mar 31 19:13:05 <LambdaComplex>	How's that? :P
Mar 31 19:13:05 <LambdaComplex>	How's that? :P
Mar 31 19:13:15 <panicbit>	nice
Mar 31 19:13:15 <panicbit>	nice
Mar 31 19:13:45 <panicbit>	LambdaComplex: Way better than `thread '<main>' panicked at 'called `Option::unwrap()` on a `None` value', ../src/libcore/option.rs:330`
Mar 31 19:13:45 <panicbit>	LambdaComplex: Way better than `thread '<main>' panicked at 'called `Option::unwrap()` on a `None` value', ../src/libcore/option.rs:330`
Mar 31 19:14:45 <panicbit>	(though, you won't get that exact message. we had that already yesterday I think. The error type of the xcb crate has a bad Debug implementation)
Mar 31 19:14:45 <panicbit>	(though, you won't get that exact message. we had that already yesterday I think. The error type of the xcb crate has a bad Debug implementation)
Mar 31 19:15:01 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 19:16:31 <LambdaComplex>	Eh, I still don't like the idea of causing a panic if the window id goes invalid
Mar 31 19:16:31 <LambdaComplex>	Eh, I still don't like the idea of causing a panic if the window id goes invalid
Mar 31 19:16:35 <panicbit>	Anyway, without the custom error message you wouldn't necessarily know where it originates from since the line numbers of the panic correspond to the Option and Result implementations
Mar 31 19:16:35 <panicbit>	Anyway, without the custom error message you wouldn't necessarily know where it originates from since the line numbers of the panic correspond to the Option and Result implementations
Mar 31 19:16:39 <LambdaComplex>	Maybe I'll just put everything in a match statement
Mar 31 19:16:39 <LambdaComplex>	Maybe I'll just put everything in a match statement
Mar 31 19:17:06 <panicbit>	LambdaComplex: If there is nothing your app can do to recover then it's fine...
Mar 31 19:17:06 <panicbit>	LambdaComplex: If there is nothing your app can do to recover then it's fine...
Mar 31 19:17:38 <panicbit>	LambdaComplex: If you want a cleaner error messag, then .unwrap_or_else(print_error_and_exit) should be good
Mar 31 19:17:38 <panicbit>	LambdaComplex: If you want a cleaner error messag, then .unwrap_or_else(print_error_and_exit) should be good
Mar 31 19:17:43 <LambdaComplex>	panicbit: Uh, yeah, it can recover. "Go on to the next specified window id"
Mar 31 19:17:43 <LambdaComplex>	panicbit: Uh, yeah, it can recover. "Go on to the next specified window id"
Mar 31 19:17:55 <panicbit>	Ah I see
Mar 31 19:17:55 <panicbit>	Ah I see
Mar 31 19:18:11 <panicbit>	LambdaComplex: In that case you may want to just use `if let`
Mar 31 19:18:11 <panicbit>	LambdaComplex: In that case you may want to just use `if let`
Mar 31 19:18:39 <panicbit>	LambdaComplex: You should probably throw an error once the window id's are exhausted
Mar 31 19:18:39 <panicbit>	LambdaComplex: You should probably throw an error once the window id's are exhausted
Mar 31 19:19:14 <panicbit>	LambdaComplex: What's the purpose of the tool anyway?
Mar 31 19:19:14 <panicbit>	LambdaComplex: What's the purpose of the tool anyway?
Mar 31 19:19:28 *	llandersll has quit (Connection closed)
Mar 31 19:19:36 *	DaSpirit (DaSpirit@moz-cspleg.fios.verizon.net) has joined
Mar 31 19:19:45 <LambdaComplex>	panicbit: Resizing windows
Mar 31 19:19:45 <LambdaComplex>	panicbit: Resizing windows
Mar 31 19:20:06 <LambdaComplex>	Still cloning wmutils :P
Mar 31 19:20:06 <LambdaComplex>	Still cloning wmutils :P
Mar 31 19:20:24 <panicbit>	LambdaComplex: Hm, maybe you want to print a warning though
Mar 31 19:20:24 <panicbit>	LambdaComplex: Hm, maybe you want to print a warning though
Mar 31 19:20:39 <panicbit>	LambdaComplex: So `match` it is :)
Mar 31 19:20:39 <panicbit>	LambdaComplex: So `match` it is :)
Mar 31 19:20:53 <LambdaComplex>	panicbit: Is it giant match block time?
Mar 31 19:20:53 <LambdaComplex>	panicbit: Is it giant match block time?
Mar 31 19:21:01 *	skade has quit (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
Mar 31 19:21:11 Mar 31 19:21:11 <panicbit>	Hm wait
<panicbit>	Hm wait
Mar 31 19:21:39 *	LambdaComplex waits
Mar 31 19:21:39 *	LambdaComplex waits
Mar 31 19:21:41 <panicbit>	LambdaComplex: If you don't want to nest it inside a matchblock you can do this:
Mar 31 19:21:41 <panicbit>	LambdaComplex: If you don't want to nest it inside a matchblock you can do this:
Mar 31 19:22:17 Mar 31 19:22:17 <curtism>	This whole thing could almost be turned into a sitcom
<curtism>	This whole thing could almost be turned into a sitcom
Mar 31 19:22:33 <panicbit>	LambdaComplex: if let Err(_) { println!("resizing failed for window id xyz") }
Mar 31 19:22:33 <panicbit>	LambdaComplex: if let Err(_) { println!("resizing failed for window id xyz") }
Mar 31 19:22:36 <panicbit>	and then:
Mar 31 19:22:36 <panicbit>	and then:
Mar 31 19:22:43 Mar 31 19:22:43 <curtism>	Every day when I get home there's more of this XCB discussion :)
<curtism>	Every day when I get home there's more of this XCB discussion :)
Mar 31 19:22:43 Mar 31 19:22:43 <panicbit>	damn
<panicbit>	damn
Mar 31 19:22:46 Mar 31 19:22:46 <panicbit>	messed up again
<panicbit>	messed up again
Mar 31 19:22:46 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 19:23:03 <panicbit>	curtism: XCB is hip now ;D
Mar 31 19:23:03 <panicbit>	curtism: XCB is hip now ;D
Mar 31 19:23:11 <LambdaComplex>	curtism: My bad!
Mar 31 19:23:11 <LambdaComplex>	curtism: My bad!
Mar 31 19:23:14 *	LambdaComplex regrets nothing
Mar 31 19:23:14 *	LambdaComplex regrets nothing
Mar 31 19:23:21 *	panicbit regrets everything
Mar 31 19:23:21 *	panicbit regrets everything
Mar 31 19:23:24 *	monti (happy@moz-aidh09.broadband.corbina.ru) has joined
Mar 31 19:23:32 *	LambdaComplex is a burden on panicbit ;-;
Mar 31 19:23:32 *	LambdaComplex is a burden on panicbit ;-;
Mar 31 19:23:32 *	Guest16 has quit (Ping timeout: 121 seconds)
Mar 31 19:23:32 <curtism>	I'm just observing that it's very regular
Mar 31 19:23:32 <curtism>	I'm just observing that it's very regular
Mar 31 19:23:49 <panicbit>	LambdaComplex: You are not, but I've kinda become a mentor now :D
Mar 31 19:23:49 <panicbit>	LambdaComplex: You are not, but I've kinda become a mentor now :D
Mar 31 19:23:56 <curtism>	The jokes of the sitcom would be when panicbit screws up syntax all the time :p
Mar 31 19:23:56 <curtism>	The jokes of the sitcom would be when panicbit screws up syntax all the time :p
Mar 31 19:23:59 Mar 31 19:23:59 <LambdaComplex>	curtism: Just wait 'til I get around to rewriting window managers in Rust :P
<LambdaComplex>	curtism: Just wait 'til I get around to rewriting window managers in Rust :P
Mar 31 19:24:04 <panicbit>	curtism: XCB is regularly broken, so there's that
Mar 31 19:24:04 <panicbit>	curtism: XCB is regularly broken, so there's that
Mar 31 19:24:07 <steveklabnik>	there's an xmonad clone
Mar 31 19:24:07 <steveklabnik>	there's an xmonad clone
Mar 31 19:24:09 Mar 31 19:24:09 <steveklabnik>	wtftw
<steveklabnik>	wtftw
Mar 31 19:24:14 Mar 31 19:24:14 <LambdaComplex>	I'm aware :D
<LambdaComplex>	I'm aware :D
Mar 31 19:24:15 <steveklabnik>	i haven't been able to get it to work though
Mar 31 19:24:15 <steveklabnik>	i haven't been able to get it to work though
Mar 31 19:24:19 Mar 31 19:24:19 <LambdaComplex>	Though it uses Xlib, not XCB
<LambdaComplex>	Though it uses Xlib, not XCB
Mar 31 19:24:20 Mar 31 19:24:20 <steveklabnik>	should try that again
<steveklabnik>	should try that again
Mar 31 19:24:27 <LambdaComplex>	I think I got it to work
Mar 31 19:24:27 <LambdaComplex>	I think I got it to work
Mar 31 19:24:28 *	adium (textual@moz-fso.cqh.210.134.IP) has joined
Mar 31 19:24:40 Mar 31 19:24:40 <LambdaComplex>	Well, all I did was run it in Xephyr and open two terminals
<LambdaComplex>	Well, all I did was run it in Xephyr and open two terminals
Mar 31 19:24:43 <LambdaComplex>	They _did_ tile though!
Mar 31 19:24:43 <LambdaComplex>	They _did_ tile though!
Mar 31 19:24:57 Mar 31 19:24:57 <panicbit>	LambdaComplex: http://is.gd/XYsnVi
<panicbit>	LambdaComplex: http://is.gd/XYsnVi
Mar 31 19:25:12 <panicbit>	screwed up again :)
Mar 31 19:25:12 <panicbit>	screwed up again :)
Mar 31 19:25:29 *	pittaman (chatzilla@moz-usejlb.access.telenet.be) has joined
Mar 31 19:25:31 <panicbit>	LambdaComplex: http://is.gd/QgbnLk
Mar 31 19:25:31 <panicbit>	LambdaComplex: http://is.gd/QgbnLk
Mar 31 19:25:46 <panicbit>	*sitcom intensifies*
Mar 31 19:25:46 <panicbit>	*sitcom intensifies*
Mar 31 19:26:17 <LambdaComplex>	panicbit: Hey, that's basically what I was planning on doing!
Mar 31 19:26:17 <LambdaComplex>	panicbit: Hey, that's basically what I was planning on doing!
Mar 31 19:26:26 <panicbit>	;)
Mar 31 19:26:26 <panicbit>	;)
Mar 31 19:26:48 <panicbit>	LambdaComplex: That is also roughly what the `if not let` thingy is fo
Mar 31 19:26:48 <panicbit>	LambdaComplex: That is also roughly what the `if not let` thingy is fo
Mar 31 19:26:50 <panicbit>	for*
Mar 31 19:26:50 <panicbit>	for*
Mar 31 19:26:53 *	LambdaComplex wonders how easy converting xlib to xcb is
Mar 31 19:26:53 *	LambdaComplex wonders how easy converting xlib to xcb is
Mar 31 19:26:55 <panicbit>	It's not implemented yet though
Mar 31 19:26:55 <panicbit>	It's not implemented yet though
Mar 31 19:26:56 *	bjz (bjz@moz-4albka.optusnet.com.au) has joined
Mar 31 19:27:25 <panicbit>	LambdaComplex: Doesn't xcb reexport xlib?
Mar 31 19:27:25 <panicbit>	LambdaComplex: Doesn't xcb reexport xlib?
Mar 31 19:27:31 <LambdaComplex>	panicbit: Why not use is_err()?
Mar 31 19:27:31 <LambdaComplex>	panicbit: Why not use is_err()?
Mar 31 19:27:40 <LambdaComplex>	panicbit: And what do you mean by reexport?
Mar 31 19:27:40 <LambdaComplex>	panicbit: And what do you mean by reexport?
Mar 31 19:27:43 <panicbit>	LambdaComplex: You could
Mar 31 19:27:43 <panicbit>	LambdaComplex: You could
Mar 31 19:28:04 <panicbit>	LambdaComplex: If you want to use the error in your warning, then if-let is easier
Mar 31 19:28:04 <panicbit>	LambdaComplex: If you want to use the error in your warning, then if-let is easier
Mar 31 19:28:13 <panicbit>	Itherwise it doesn't matter much
Mar 31 19:28:13 <panicbit>	Itherwise it doesn't matter much
Mar 31 19:28:28 <LambdaComplex>	I don't :P
Mar 31 19:28:28 <LambdaComplex>	I don't :P
Mar 31 19:28:31 Mar 31 19:28:31 <LambdaComplex>	I'm just gonna return
<LambdaComplex>	I'm just gonna return
Mar 31 19:28:34 <panicbit>	LambdaComplex: crates can provide other crates as part of their API
Mar 31 19:28:34 <panicbit>	LambdaComplex: crates can provide other crates as part of their API
Mar 31 19:28:34 <LambdaComplex>	That's what the original does
Mar 31 19:28:34 <LambdaComplex>	That's what the original does
Mar 31 19:29:53 <curtism>	An alternative: http://is.gd/MnOVlz
Mar 31 19:29:53 <curtism>	An alternative: http://is.gd/MnOVlz
Mar 31 19:31:28 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:31:39 *	bjz (bjz@moz-4albka.optusnet.com.au) has joined
Mar 31 19:32:16 <panicbit>	LambdaComplex: If you enable the xcb_xlib feature then xcb will make xlib available to you via xcb::x11::xlib
Mar 31 19:32:16 <panicbit>	LambdaComplex: If you enable the xcb_xlib feature then xcb will make xlib available to you via xcb::x11::xlib
Mar 31 19:32:47 Mar 31 19:32:47 <panicbit>	So basically you don't port but just copy and paste and adjust some imports :P
<panicbit>	So basically you don't port but just copy and paste and adjust some imports :P
Mar 31 19:34:18 <panicbit>	I don't have time to explain more though, still gotta prepare a reference sheet for tomorrow's exam :)
Mar 31 19:34:18 <panicbit>	I don't have time to explain more though, still gotta prepare a reference sheet for tomorrow's exam :)
Mar 31 19:34:55 <panicbit>	OTOH, I will fail anyway, so I might as well... ;P
Mar 31 19:34:55 <panicbit>	OTOH, I will fail anyway, so I might as well... ;P
Mar 31 19:35:07 <curtism>	stay in school kids
Mar 31 19:35:08 <curtism>	stay in school kids
Mar 31 19:35:15 <panicbit>	Don't do rust?
Mar 31 19:35:15 <panicbit>	Don't do rust?
Mar 31 19:37:59 <panicbit>	LambdaComplex: See the second code block on how to enable features for dependencies: http://doc.crates.io/manifest.html#the-features-section
Mar 31 19:37:59 <panicbit>	LambdaComplex: See the second code block on how to enable features for dependencies: http://doc.crates.io/manifest.html#the-features-section
Mar 31 19:38:23 <panicbit>	("To use the package awesome:")
Mar 31 19:38:23 <panicbit>	("To use the package awesome:")
Mar 31 19:38:46 <LambdaComplex>	curtism: hm, i considered that but didn't think it would actually work
Mar 31 19:38:46 <LambdaComplex>	curtism: hm, i considered that but didn't think it would actually work
Mar 31 19:39:01 <LambdaComplex>	because of "v" and "return" being different types
Mar 31 19:39:01 <LambdaComplex>	because of "v" and "return" being different types
Mar 31 19:39:33 *	cbrewste_ has quit (Connection closed)
Mar 31 19:39:37 <panicbit>	LambdaComplex: `return` always returns from functions
Mar 31 19:39:37 <panicbit>	LambdaComplex: `return` always returns from functions
Mar 31 19:39:55 <LambdaComplex>	TIL
Mar 31 19:39:55 <LambdaComplex>	TIL
Mar 31 19:40:03 <durka42>	"return" has a diverging type, since the code after it never runs, so it "matches" any type
Mar 31 19:40:03 <durka42>	"return" has a diverging type, since the code after it never runs, so it "matches" any type
Mar 31 19:40:15 *	pittaman_ (chatzilla@moz-1n8ouj.access.telenet.be) has joined
Mar 31 19:40:25 <LambdaComplex>	tfw rustc is smarter than i thought it was
Mar 31 19:40:25 <LambdaComplex>	tfw rustc is smarter than i thought it was
Mar 31 19:40:30 Mar 31 19:40:30 <steveklabnik>	:)
<steveklabnik>	:)
Mar 31 19:40:31 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 19:40:37 <durka42>	playbot: enum NotConstructible {}   let x: NotConstructible = return;
Mar 31 19:40:37 <durka42>	playbot: enum NotConstructible {}   let x: NotConstructible = return;
Mar 31 19:40:43 <steveklabnik>	there was a good 'this week in rust' quote about that....
Mar 31 19:40:43 <steveklabnik>	there was a good 'this week in rust' quote about that....
Mar 31 19:40:57 <panicbit>	er...
Mar 31 19:40:57 <panicbit>	er...
Mar 31 19:41:15 <panicbit>	playbot, why u no print ()?
Mar 31 19:41:15 <panicbit>	playbot, why u no print ()?
Mar 31 19:41:16 -playbot/#rust-beginners-	<anon>:9:13: 9:14 error: expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `u`
Mar 31 19:41:16 -playbot/#rust-beginners-	<anon>:9:13: 9:14 error: expected one of `!`, `.`, `::`, `;`, `{`, `}`, or an operator, found `u`
Mar 31 19:41:16 -playbot/#rust-beginners-	<anon>:9         why u no print ()?
Mar 31 19:41:16 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1VWjzXB
Mar 31 19:41:16 -playbot/#rust-beginners-	<anon>:9         why u no print ()?
Mar 31 19:41:16 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1VWjzXB
Mar 31 19:41:27 <durka42>	panicbit: like I said, the code after the return never runs!
Mar 31 19:41:27 <durka42>	panicbit: like I said, the code after the return never runs!
Mar 31 19:41:29 <steveklabnik>	ahh, issue 114
Mar 31 19:41:29 <steveklabnik>	ahh, issue 114
Mar 31 19:41:36 Mar 31 19:41:36 <steveklabnik>	Borrow/lifetime errors are usually Rust compiler bugs. Typically, I will spend 20 minutes detailing the precise conditions of the bug, using language that understates my immense knowledge, while demonstrating sympathetic understanding of the pressures placed on a Rust compiler developer, who is also probably studying for several exams at the moment. The developer reading my bug report may not understand this stuff as well as I do, so I will ca
<steveklabnik>	Borrow/lifetime errors are usually Rust compiler bugs. Typically, I will spend 20 minutes detailing the precise conditions of the bug, using language that understates my immense knowledge, while demonstrating sympathetic understanding of the pressures placed on a Rust compiler developer, who is also probably studying for several exams at the moment. The developer reading my bug report may not understand this stuff as well as I do, so I will ca
Mar 31 19:41:42 <durka42>	including the println
Mar 31 19:41:42 <durka42>	including the println
Mar 31 19:41:44 *	cbrewster (cbrewster@moz-m25.87o.84.137.IP) has joined
Mar 31 19:41:52 Mar 31 19:41:52 <steveklabnik>	-- peterjoel
<steveklabnik>	-- peterjoel
Mar 31 19:42:01 <durka42>	!gh 114
Mar 31 19:42:01 <durka42>	!gh 114
Mar 31 19:42:01 <rustbot>	[Issue 114] <closed> One method calling another crashes rustboot <https://github.com/rust-lang/rust/issues/114>
Mar 31 19:42:01 <rustbot>	[Issue 114] <closed> One method calling another crashes rustboot <https://github.com/rust-lang/rust/issues/114>
Mar 31 19:42:06 <panicbit>	durka42: I'm not aware of the exact playbot skeleton
Mar 31 19:42:06 <panicbit>	durka42: I'm not aware of the exact playbot skeleton
Mar 31 19:42:16 *	pittaman has quit (Ping timeout: 121 seconds)
Mar 31 19:42:19 <durka42>	panicbit: it's something like fn main() { println!("{:?}", { your code here } }
Mar 31 19:42:19 <durka42>	panicbit: it's something like fn main() { println!("{:?}", { your code here } }
Mar 31 19:42:20 *	pittaman_ is now known as pittaman
Mar 31 19:42:23 <panicbit>	I see
Mar 31 19:42:23 <panicbit>	I see
Mar 31 19:42:28 <panicbit>	In that case it makes sense
Mar 31 19:42:28 <panicbit>	In that case it makes sense
Mar 31 19:43:32 <steveklabnik>	durka42: hehe, issue 114 of this week in rust, not of the repo
Mar 31 19:43:32 <steveklabnik>	durka42: hehe, issue 114 of this week in rust, not of the repo
Mar 31 19:43:38 <durka42>	I figured that out :p
Mar 31 19:43:38 <durka42>	I figured that out :p
Mar 31 19:43:44 <durka42>	some antique syntax in that issue
Mar 31 19:43:44 <durka42>	some antique syntax in that issue
Mar 31 19:43:53 *	cbrewste_ (cbrewster@moz-1cj.fsb.158.65.IP) has joined
Mar 31 19:44:24 <durka42>	"obj", "ret", "auto"
Mar 31 19:44:24 <durka42>	"obj", "ret", "auto"
Mar 31 19:44:29 <steveklabnik>	:)
Mar 31 19:44:29 <steveklabnik>	:)
Mar 31 19:45:47 *	cbrewster has quit (Ping timeout: 121 seconds)
Mar 31 19:46:25 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 31 19:46:49 *	bjz has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 19:48:07 *	cbrewste_ has quit (Ping timeout: 121 seconds)
Mar 31 19:50:08 *	frogonia (Mibbit@moz-2s0.8gs.89.64.IP) has joined
Mar 31 19:51:12 *	frogonia has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 19:52:11 <panicbit>	I love that quote :)
Mar 31 19:52:11 <panicbit>	I love that quote :)
Mar 31 19:52:21 <panicbit>	Should be quote of the year^^
Mar 31 19:52:21 <panicbit>	Should be quote of the year^^
Mar 31 19:54:35 *	cbrewster (cbrewster@moz-293bki.client.bresnan.net) has joined
Mar 31 19:54:38 <monti>	is cargo can build all examples?
Mar 31 19:54:38 <monti>	is cargo can build all examples?
Mar 31 19:55:07 <panicbit>	IRC they are getting build when you do cargo doc, but I'm not 100% sure
Mar 31 19:55:07 <panicbit>	IRC they are getting build when you do cargo doc, but I'm not 100% sure
Mar 31 19:55:10 <panicbit>	IIRC*
Mar 31 19:55:10 <panicbit>	IIRC*
Mar 31 19:55:19 *	eibwen has quit (Ping timeout: 121 seconds)
Mar 31 19:55:24 <mbrubeck>	monti: `cargo test` builds the examples but does not run them.
Mar 31 19:55:24 <mbrubeck>	monti: `cargo test` builds the examples but does not run them.
Mar 31 19:55:43 <panicbit>	Ah right, it was test...
Mar 31 19:55:43 <panicbit>	Ah right, it was test...
Mar 31 19:55:49 *	llandersll (anders@moz-n00.ucm.28.4.IP) has joined
Mar 31 19:55:58 <mbrubeck>	http://doc.crates.io/manifest.html#tests
Mar 31 19:55:58 <mbrubeck>	http://doc.crates.io/manifest.html#tests
Mar 31 19:57:17 <monti>	mbrubeck: it works, thanks!
Mar 31 19:57:17 <monti>	mbrubeck: it works, thanks!
Mar 31 19:57:52 <panicbit>	durka42: Any ideas for a better name for the macro I showed you recently?
Mar 31 19:57:52 <panicbit>	durka42: Any ideas for a better name for the macro I showed you recently?
Mar 31 19:58:15 <panicbit>	I think it was `enum_types`
Mar 31 19:58:15 <panicbit>	I think it was `enum_types`
Mar 31 19:58:15 *	Aedylthryd (Thingus@moz-obq.d8m.98.75.IP) has joined
Mar 31 19:58:35 <panicbit>	But that doesn't quite well express what it does :)
Mar 31 19:58:35 <panicbit>	But that doesn't quite well express what it does :)
Mar 31 19:59:31 <panicbit>	Hm, `variants_as_types` maybe
Mar 31 19:59:31 <panicbit>	Hm, `variants_as_types` maybe
Mar 31 20:00:49 *	chain_chan has quit (A TLS packet with unexpected length was received.)
Mar 31 20:03:28 *	oln has quit (Connection closed)
Mar 31 20:04:04 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 20:04:49 <monti>	guys, what is easier way to share the mutable integer (counter) between 2 objects?  Cell? or AtomicUsize?
Mar 31 20:04:49 <monti>	guys, what is easier way to share the mutable integer (counter) between 2 objects?  Cell? or AtomicUsize?
Mar 31 20:05:16 <mbrubeck>	monti: Yes. Cell if you are single-threaded, AtomicUsize if multi-threaded.
Mar 31 20:05:16 <mbrubeck>	monti: Yes. Cell if you are single-threaded, AtomicUsize if multi-threaded.
Mar 31 20:05:41 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 31 20:07:12 <monti>	mbrubeck: but Cell works as cell.set(cell.get() + 1) while atomic .fetch_add
Mar 31 20:07:12 <monti>	mbrubeck: but Cell works as cell.set(cell.get() + 1) while atomic .fetch_add
Mar 31 20:07:23 *	woboats has quit (Client exited)
Mar 31 20:07:42 <mbrubeck>	monti: Right.
Mar 31 20:07:42 <mbrubeck>	monti: Right.
Mar 31 20:08:00 <monti>	so atomic easier to use for me. well
Mar 31 20:08:00 <monti>	so atomic easier to use for me. well
Mar 31 20:08:24 <Xion>	But if you don't need atomicity then Cell has smaller overhead.
Mar 31 20:08:24 <Xion>	But if you don't need atomicity then Cell has smaller overhead.
Mar 31 20:08:29 <mbrubeck>	AtomicUsize is fine, but it may be slower than Cell in some cases.
Mar 31 20:08:29 <mbrubeck>	AtomicUsize is fine, but it may be slower than Cell in some cases.
Mar 31 20:08:40 <mbrubeck>	You could add a .increment() method to Cell<usize>
Mar 31 20:08:40 <mbrubeck>	You could add a .increment() method to Cell<usize>
Mar 31 20:08:47 <Xion>	THe compiler will probably optimize this set/get sequence to a single INC instruction.
Mar 31 20:08:47 <Xion>	THe compiler will probably optimize this set/get sequence to a single INC instruction.
Mar 31 20:09:11 <panicbit>	Why doesn't/can't Cell implement deref?
Mar 31 20:09:11 <panicbit>	Why doesn't/can't Cell implement deref?
Mar 31 20:09:43 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 20:10:08 <mbrubeck>	http://is.gd/9n4VEZ
Mar 31 20:10:08 <mbrubeck>	http://is.gd/9n4VEZ
Mar 31 20:10:38 *	ParadoxSpiral_ has quit (Quit: cya)
Mar 31 20:12:54 <Xion>	http://is.gd/h4Dgcg if you wanna get fancy
Mar 31 20:12:54 <Xion>	http://is.gd/h4Dgcg if you wanna get fancy
Mar 31 20:13:04 <Xion>	(Too bad One doesn't work on stable)
Mar 31 20:13:04 <Xion>	(Too bad One doesn't work on stable)
Mar 31 20:13:37 *	junqed has quit (A TLS packet with unexpected length was received.)
Mar 31 20:13:44 *	aatch (james@moz-uhn.omt.54.210.IP) has joined
Mar 31 20:14:09 <panicbit>	Or this if you want to be more general: http://is.gd/MxgnIW
Mar 31 20:14:09 <panicbit>	Or this if you want to be more general: http://is.gd/MxgnIW
Mar 31 20:14:43 <Xion>	There should be a Map trait like that, yeah.
Mar 31 20:14:43 <Xion>	There should be a Map trait like that, yeah.
Mar 31 20:15:52 <panicbit>	I messed up though :)
Mar 31 20:15:52 <panicbit>	I messed up though :)
Mar 31 20:16:01 <panicbit>	it should be &self instead of &mut self
Mar 31 20:16:01 <panicbit>	it should be &self instead of &mut self
Mar 31 20:16:09 <Xion>	Also FnOnce.
Mar 31 20:16:09 <Xion>	Also FnOnce.
Mar 31 20:16:12 <Xion>	But s'ok :)
Mar 31 20:16:12 <Xion>	But s'ok :)
Mar 31 20:16:14 <panicbit>	;)
Mar 31 20:16:14 <panicbit>	;)
Mar 31 20:16:45 *	durka42 has quit (Client exited)
Mar 31 20:17:18 *	klue has quit (Ping timeout: 121 seconds)
Mar 31 20:17:59 *	badon has quit (Connection closed)
Mar 31 20:18:24 *	badon (badon@moz-n0u.2ql.244.104.IP) has joined
Mar 31 20:20:07 <panicbit>	Xion: I'm not using FnOnce often enough
Mar 31 20:20:07 <panicbit>	Xion: I'm not using FnOnce often enough
Mar 31 20:21:03 *	peschkaj has quit (Quit: Leaving)
Mar 31 20:22:36 Mar 31 20:22:36 <Xion>	http://is.gd/H6sAPA -- WTB higher kinded types ;/
<Xion>	http://is.gd/H6sAPA -- WTB higher kinded types ;/
Mar 31 20:23:22 <panicbit>	Yeah, HKTs are needed for a generalized map :/
Mar 31 20:23:22 <panicbit>	Yeah, HKTs are needed for a generalized map :/
Mar 31 20:24:00 <monti>	> error: the trait `core::ops::Index<i32>` is not implemented for the type `[&'static str]`
Mar 31 20:24:00 <monti>	> error: the trait `core::ops::Index<i32>` is not implemented for the type `[&'static str]`
Mar 31 20:24:01 <monti>	really?
Mar 31 20:24:01 <monti>	really?
Mar 31 20:24:33 <Xion>	Makes sense to me. Negative indices are always wrong for string literals.
Mar 31 20:24:33 <Xion>	Makes sense to me. Negative indices are always wrong for string literals.
Mar 31 20:24:44 *	woboats (woboats@moz-23e.gf4.16.4.IP) has joined
Mar 31 20:25:58 <panicbit>	max(0, signed_index) as usize
Mar 31 20:25:58 <panicbit>	max(0, signed_index) as usize
Mar 31 20:26:10 <panicbit>	if you want to use 0 in the negative case :P
Mar 31 20:26:10 <panicbit>	if you want to use 0 in the negative case :P
Mar 31 20:27:03 <monti>	Xion: thanks for mention about i32 :)
Mar 31 20:27:03 <monti>	Xion: thanks for mention about i32 :)
Mar 31 20:27:28 *	Aaronepower (Thunderbird@moz-sgf.dch.101.89.IP) has joined
Mar 31 20:27:35 <Xion>	http://is.gd/i4srCz is probably as generic as you can get on stable w/o that third party numeric traits' crate.
Mar 31 20:27:35 <Xion>	http://is.gd/i4srCz is probably as generic as you can get on stable w/o that third party numeric traits' crate.
Mar 31 20:27:46 Mar 31 20:27:46 <aatch>	Xion, monti isn't indexing a string though. It's a slice.
<aatch>	Xion, monti isn't indexing a string though. It's a slice.
Mar 31 20:28:23 <Xion>	aatch: Point; negative indices still don't make sense though :)
Mar 31 20:28:23 <Xion>	aatch: Point; negative indices still don't make sense though :)
Mar 31 20:28:59 <aatch>	Xion, true. Just pointing that out. Chances are that the `i32` is from integer fallback though, rather than a specific choice.
Mar 31 20:28:59 <aatch>	Xion, true. Just pointing that out. Chances are that the `i32` is from integer fallback though, rather than a specific choice.
Mar 31 20:30:29 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 20:31:33 <Xion>	Yeah. In practice, this common sense thing ends up as "the compiler wants me to make annoying casts again" :)
Mar 31 20:31:33 <Xion>	Yeah. In practice, this common sense thing ends up as "the compiler wants me to make annoying casts again" :)
Mar 31 20:36:12 *	tyoc213 has quit (Ping timeout: 121 seconds)
Mar 31 20:40:19 *	himi (fow035@moz-9pb.ksq.203.150.IP) has joined
Mar 31 20:40:53 <LambdaComplex>	panicbit: Shouldn't you be in bed?
Mar 31 20:40:53 <LambdaComplex>	panicbit: Shouldn't you be in bed?
Mar 31 20:41:13 <panicbit>	LambdaComplex: Shouldn't I have this reference sheet prepared earlier?
Mar 31 20:41:13 <panicbit>	LambdaComplex: Shouldn't I have this reference sheet prepared earlier?
Mar 31 20:41:24 <LambdaComplex>	panicbit: Yes!
Mar 31 20:41:24 <LambdaComplex>	panicbit: Yes!
Mar 31 20:41:26 <panicbit>	;)
Mar 31 20:41:26 <panicbit>	;)
Mar 31 20:41:27 *	cstearns (noc@moz-704k64.co.comcast.net) has joined
Mar 31 20:43:52 <panicbit>	LambdaComplex: Also, I don't get to bed early for uni :P
Mar 31 20:43:52 <panicbit>	LambdaComplex: Also, I don't get to bed early for uni :P
Mar 31 20:44:00 <panicbit>	go*
Mar 31 20:44:00 <panicbit>	go*
Mar 31 20:44:57 <panicbit>	Helping other people here is too addicting
Mar 31 20:44:57 <panicbit>	Helping other people here is too addicting
Mar 31 20:45:02 <steveklabnik>	:D
Mar 31 20:45:02 <steveklabnik>	:D
Mar 31 20:45:44 <panicbit>	Can I have my bachelor of assistance please?
Mar 31 20:45:44 <panicbit>	Can I have my bachelor of assistance please?
Mar 31 20:45:46 <panicbit>	^^
Mar 31 20:45:46 <panicbit>	^^
Mar 31 20:46:35 <insaneinside>	as a Physics major, I found that helping others was actually a bad idea because everything (*everything*!) was graded on a curve.
Mar 31 20:46:35 <insaneinside>	as a Physics major, I found that helping others was actually a bad idea because everything (*everything*!) was graded on a curve.
Mar 31 20:46:44 <insaneinside>	good thing I was a bad student anyway.
Mar 31 20:46:44 <insaneinside>	good thing I was a bad student anyway.
Mar 31 20:47:00 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 20:47:20 <panicbit>	Grading is weird sometimes
Mar 31 20:47:20 <panicbit>	Grading is weird sometimes
Mar 31 20:47:41 <panicbit>	I have no idea how I passed that webtechnologies exam :D
Mar 31 20:47:41 <panicbit>	I have no idea how I passed that webtechnologies exam :D
Mar 31 20:48:06 <panicbit>	Everyone must have sucked at it so badly
Mar 31 20:48:06 <panicbit>	Everyone must have sucked at it so badly
Mar 31 20:51:04 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 20:53:43 <panicbit>	Hehe, the best thing was probably the guest presentation about a PHP CMS
Mar 31 20:53:43 <panicbit>	Hehe, the best thing was probably the guest presentation about a PHP CMS
Mar 31 20:54:24 *	Sgeo (Sgeo@moz-cqm03c.dyn.optonline.net) has joined
Mar 31 20:54:34 <panicbit>	That guy tried to demo the simplicity of PHP by typing a very simple script (i think doing an addition or something)
Mar 31 20:54:34 <panicbit>	That guy tried to demo the simplicity of PHP by typing a very simple script (i think doing an addition or something)
Mar 31 20:54:40 <panicbit>	But somehow managed to get the types wrong...
Mar 31 20:54:40 <panicbit>	But somehow managed to get the types wrong...
Mar 31 20:54:44 <LambdaComplex>	I made a 110 on my Linux Single User final
Mar 31 20:54:44 <LambdaComplex>	I made a 110 on my Linux Single User final
Mar 31 20:54:46 <panicbit>	And got a completely wrong result
Mar 31 20:54:46 <panicbit>	And got a completely wrong result
Mar 31 20:54:49 <Xion>	PHP has types? News to me.
Mar 31 20:54:49 <Xion>	PHP has types? News to me.
Mar 31 20:54:52 <LambdaComplex>	The median grade was in the 60s, I think
Mar 31 20:54:52 <LambdaComplex>	The median grade was in the 60s, I think
Mar 31 20:54:57 <panicbit>	Xion: It has...
Mar 31 20:54:57 <panicbit>	Xion: It has...
Mar 31 20:54:59 <LambdaComplex>	Er, mean grade
Mar 31 20:54:59 <LambdaComplex>	Er, mean grade
Mar 31 20:55:15 <panicbit>	Xion: Somewhere between `php does not care for it` and `php doesn't let you`
Mar 31 20:55:15 <panicbit>	Xion: Somewhere between `php does not care for it` and `php doesn't let you`
Mar 31 20:56:00 <LambdaComplex>	So I have a file that's containing nothing but functions for other files. Doesn't have a main(). I keep getting dead code errors for those functions even though they _are_ used
Mar 31 20:56:00 <LambdaComplex>	So I have a file that's containing nothing but functions for other files. Doesn't have a main(). I keep getting dead code errors for those functions even though they _are_ used
Mar 31 20:56:07 <LambdaComplex>	So, what do I do about that?
Mar 31 20:56:07 <LambdaComplex>	So, what do I do about that?
Mar 31 20:56:09 <aatch>	Most languages have types. It's how strict a language is about it's types that matter.
Mar 31 20:56:09 <aatch>	Most languages have types. It's how strict a language is about it's types that matter.
Mar 31 20:56:22 <LambdaComplex>	aatch: I bet brainfuck doesn't!
Mar 31 20:56:22 <LambdaComplex>	aatch: I bet brainfuck doesn't!
Mar 31 20:56:31 <insaneinside>	LambdaComplex: are these fns `pub`?
Mar 31 20:56:31 <insaneinside>	LambdaComplex: are these fns `pub`?
Mar 31 20:56:35 <steveklabnik>	LambdaComplex: if they're used, then it shouldn't fire. if they're not used, then they need to be pub
Mar 31 20:56:35 <steveklabnik>	LambdaComplex: if they're used, then it shouldn't fire. if they're not used, then they need to be pub
Mar 31 20:56:48 <LambdaComplex>	Yeah, they are pub
Mar 31 20:56:48 <LambdaComplex>	Yeah, they are pub
Mar 31 20:56:59 <insaneinside>	LambdaComplex: is the module `pub`?
Mar 31 20:56:59 <insaneinside>	LambdaComplex: is the module `pub`?
Mar 31 20:57:00 <panicbit>	LambdaComplex: Even brainfuck has types
Mar 31 20:57:00 <panicbit>	LambdaComplex: Even brainfuck has types
Mar 31 20:57:14 <panicbit>	LambdaComplex: The memory cells are usually wrapping u8 or i8
Mar 31 20:57:14 <panicbit>	LambdaComplex: The memory cells are usually wrapping u8 or i8
Mar 31 20:57:17 <panicbit>	;)
Mar 31 20:57:17 <panicbit>	;)
Mar 31 20:57:19 <LambdaComplex>	insaneinside: That one I'm not sure about
Mar 31 20:57:19 <LambdaComplex>	insaneinside: That one I'm not sure about
Mar 31 20:57:39 <LambdaComplex>	How do I check/make it pub?
Mar 31 20:57:39 <LambdaComplex>	How do I check/make it pub?
Mar 31 20:57:40 <panicbit>	LambdaComplex: And the pointer size is implementation dependent
Mar 31 20:57:40 <panicbit>	LambdaComplex: And the pointer size is implementation dependent
Mar 31 20:58:01 *	nicholasf has quit (Quit: Leaving...)
Mar 31 20:58:02 <insaneinside>	LambdaComplex: whereever the module's declared `mod mymodule;`
Mar 31 20:58:02 <insaneinside>	LambdaComplex: whereever the module's declared `mod mymodule;`
Mar 31 20:58:03 <panicbit>	(Actually, type of the memory cells is also implementation dependent)
Mar 31 20:58:03 <panicbit>	(Actually, type of the memory cells is also implementation dependent)
Mar 31 20:58:07 <Xion>	LambdaComplex: Are you writing a test utility module per chance?
Mar 31 20:58:07 <Xion>	LambdaComplex: Are you writing a test utility module per chance?
Mar 31 20:58:09 <aatch>	LambdaComplex, are the functions actually be used somewhere?
Mar 31 20:58:09 <aatch>	LambdaComplex, are the functions actually be used somewhere?
Mar 31 20:58:11 <insaneinside>	LambdaComplex: make sure it's `pub mod mymodule;`
Mar 31 20:58:11 <insaneinside>	LambdaComplex: make sure it's `pub mod mymodule;`
Mar 31 20:58:12 <panicbit>	But the types are strict and static :)
Mar 31 20:58:12 <panicbit>	But the types are strict and static :)
Mar 31 20:59:16 *	nicholasf (nicholasf@moz-61h.a98.47.203.IP) has joined
Mar 31 20:59:23 <panicbit>	You could argue that brainfuck has type inference ;D
Mar 31 20:59:23 <panicbit>	You could argue that brainfuck has type inference ;D
Mar 31 20:59:28 <LambdaComplex>	insaneinside: Yep, that fixed it
Mar 31 20:59:28 <LambdaComplex>	insaneinside: Yep, that fixed it
Mar 31 20:59:51 *	Auranium (Auranium@moz-ii8.5jm.184.176.IP) has joined
Mar 31 21:00:07 *	bsder (bsder@moz-l101pt.res.rr.com) has joined
Mar 31 21:00:50 *	tyoc213 (tyoc@moz-eo6.2dr.170.187.IP) has joined
Mar 31 21:00:59 *	Auranium (Auranium@moz-ii8.5jm.184.176.IP) has left ("Leaving")
Mar 31 21:01:06 <LambdaComplex>	panicbit: Orrrr I could never do anything in brainfuck ever :D
Mar 31 21:01:06 <LambdaComplex>	panicbit: Orrrr I could never do anything in brainfuck ever :D
Mar 31 21:01:26 <panicbit>	LambdaComplex: At least nothing interesting without I/O mapping some of the cells
Mar 31 21:01:26 <panicbit>	LambdaComplex: At least nothing interesting without I/O mapping some of the cells
Mar 31 21:01:57 <panicbit>	LambdaComplex: Also, you don't do useful things in esoteric languages :P
Mar 31 21:01:57 <panicbit>	LambdaComplex: Also, you don't do useful things in esoteric languages :P
Mar 31 21:02:12 <LambdaComplex>	s/useful //
Mar 31 21:02:12 <LambdaComplex>	s/useful //
Mar 31 21:02:15 <LambdaComplex>	You're right, I don't!
Mar 31 21:02:15 <LambdaComplex>	You're right, I don't!
Mar 31 21:02:24 <panicbit>	Pf
Mar 31 21:02:24 <panicbit>	Pf
Mar 31 21:02:54 <panicbit>	LambdaComplex: Your last to messages are valid brainfuck!
Mar 31 21:02:54 <panicbit>	LambdaComplex: Your last to messages are valid brainfuck!
Mar 31 21:03:04 <panicbit>	LambdaComplex: Your last one even reads a char from stdin :)
Mar 31 21:03:04 <panicbit>	LambdaComplex: Your last one even reads a char from stdin :)
Mar 31 21:04:10 *	dethos (dethos@moz-4u3337.dsl.telepac.pt) has joined
Mar 31 21:05:27 Mar 31 21:05:27 <LambdaComplex>	Maybe I should go learn that Shakespeare language...
<LambdaComplex>	Maybe I should go learn that Shakespeare language...
Mar 31 21:05:30 <LambdaComplex>	Or Trumpscript
Mar 31 21:05:30 <LambdaComplex>	Or Trumpscript
Mar 31 21:05:45 <Xion>	Make programming great again.
Mar 31 21:05:45 <Xion>	Make programming great again.
Mar 31 21:05:47 *	cafeclimber (cafeclimber@moz-p8qs6u.dyn.suddenlink.net) has joined
Mar 31 21:06:08 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 21:06:20 *	desophos has quit (A TLS packet with unexpected length was received.)
Mar 31 21:06:22 <panicbit>	LambdaComplex: Try befunge, it's fun :)
Mar 31 21:06:22 <panicbit>	LambdaComplex: Try befunge, it's fun :)
Mar 31 21:07:30 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 21:09:12 <panicbit>	I also had a lot of fun with cjam
Mar 31 21:09:12 <panicbit>	I also had a lot of fun with cjam
Mar 31 21:10:32 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 21:11:33 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 21:12:29 <LambdaComplex>	is there a list of rust naming conventions anywhere?
Mar 31 21:12:29 <LambdaComplex>	is there a list of rust naming conventions anywhere?
Mar 31 21:12:33 <LambdaComplex>	like, all put together
Mar 31 21:12:33 <LambdaComplex>	like, all put together
Mar 31 21:13:23 <panicbit>	LambdaComplex: https://github.com/rust-lang/rust/tree/master/src/doc/style/style/naming
Mar 31 21:13:23 <panicbit>	LambdaComplex: https://github.com/rust-lang/rust/tree/master/src/doc/style/style/naming
Mar 31 21:13:35 <steveklabnik>	i would link to the RFCs
Mar 31 21:13:35 <steveklabnik>	i would link to the RFCs
Mar 31 21:13:38 <steveklabnik>	rather than src/doc/style
Mar 31 21:13:38 <steveklabnik>	rather than src/doc/style
Mar 31 21:13:45 <steveklabnik>	which has basically not been updated for a very long time
Mar 31 21:13:45 <steveklabnik>	which has basically not been updated for a very long time
Mar 31 21:13:53 <steveklabnik>	(we plan on eventually doing it, but it's not quite time yet)
Mar 31 21:13:53 <steveklabnik>	(we plan on eventually doing it, but it's not quite time yet)
Mar 31 21:14:12 Mar 31 21:14:12 <panicbit>	Proper version: http://doc.rust-lang.org/style/style/naming/README.html
<panicbit>	Proper version: http://doc.rust-lang.org/style/style/naming/README.html
Mar 31 21:14:27 <panicbit>	steveklabnik: What about the web version?
Mar 31 21:14:27 <panicbit>	steveklabnik: What about the web version?
Mar 31 21:14:43 <steveklabnik>	it's just the rendered version of the source you linked to
Mar 31 21:14:43 <steveklabnik>	it's just the rendered version of the source you linked to
Mar 31 21:14:43 <panicbit>	I guess the same goes for that :)
Mar 31 21:14:43 <panicbit>	I guess the same goes for that :)
Mar 31 21:14:53 Mar 31 21:14:53 <steveklabnik>	it was put in-tree so we don't lose it
<steveklabnik>	it was put in-tree so we don't lose it
Mar 31 21:15:00 <steveklabnik>	but it's not linked to since it's fairly out of date
Mar 31 21:15:00 <steveklabnik>	but it's not linked to since it's fairly out of date
Mar 31 21:15:00 <panicbit>	X.x
Mar 31 21:15:00 <panicbit>	X.x
Mar 31 21:15:06 <steveklabnik>	we wanted to update it before
Mar 31 21:15:06 <steveklabnik>	we wanted to update it before
Mar 31 21:15:08 <steveklabnik>	but it didn't happen
Mar 31 21:15:08 <steveklabnik>	but it didn't happen
Mar 31 21:15:51 <steveklabnik>	https://github.com/rust-lang/rfcs/blob/master/text/0430-finalizing-naming-conventions.md
Mar 31 21:15:51 <steveklabnik>	https://github.com/rust-lang/rfcs/blob/master/text/0430-finalizing-naming-conventions.md
Mar 31 21:15:54 <steveklabnik>	https://github.com/rust-lang/rfcs/blob/master/text/0344-conventions-galore.md
Mar 31 21:15:54 <steveklabnik>	https://github.com/rust-lang/rfcs/blob/master/text/0344-conventions-galore.md
Mar 31 21:15:57 <steveklabnik>	are the two biggies
Mar 31 21:15:57 <steveklabnik>	are the two biggies
Mar 31 21:15:58 *	varunvats (Mibbit@moz-ivh44t.il.comcast.net) has joined
Mar 31 21:17:34 *	Aedylthryd has quit (Ping timeout: 121 seconds)
Mar 31 21:18:33 Mar 31 21:18:33 <Xion>	SCREAMING_SNAKE_CASE :D
<Xion>	SCREAMING_SNAKE_CASE :D
Mar 31 21:19:29 <Xion>	It'd be cool if lifetime conventions shied away from 'a 'b etc., and suggested using letters that have semantic meaning.
Mar 31 21:19:29 <Xion>	It'd be cool if lifetime conventions shied away from 'a 'b etc., and suggested using letters that have semantic meaning.
Mar 31 21:19:37 <Xion>	regex create does it and really aids readability.
Mar 31 21:19:37 <Xion>	regex create does it and really aids readability.
Mar 31 21:19:50 Mar 31 21:19:50 <steveklabnik>	yeah, it's been controversial historically
<steveklabnik>	yeah, it's been controversial historically
Mar 31 21:19:51 <Xion>	(e.g. 'r for the regex itself, 't for matched text)
Mar 31 21:19:51 <Xion>	(e.g. 'r for the regex itself, 't for matched text)
Mar 31 21:20:03 Mar 31 21:20:03 <pingveno>	Xion: Unicode lifetimes!
<pingveno>	Xion: Unicode lifetimes!
Mar 31 21:20:09 Mar 31 21:20:09 <Xion>	-_-
<Xion>	-_-
Mar 31 21:20:18 <Xion>	'poop_emoji
Mar 31 21:20:18 <Xion>	'poop_emoji
Mar 31 21:20:20 <pingveno>	Everyone needs a little more pi in their lifetimes.
Mar 31 21:20:20 <pingveno>	Everyone needs a little more pi in their lifetimes.
Mar 31 21:20:30 <panicbit>	Xion: My thoughts exactly, I was going to post it...
Mar 31 21:20:30 <panicbit>	Xion: My thoughts exactly, I was going to post it...
Mar 31 21:20:53 Mar 31 21:20:53 <steveklabnik>	i wonder if you turned on unicodeidentifiers, if that would let you do that
<steveklabnik>	i wonder if you turned on unicodeidentifiers, if that would let you do that
Mar 31 21:20:56 Mar 31 21:20:56 <steveklabnik>	actually
<steveklabnik>	actually
Mar 31 21:21:01 <panicbit>	'🦀
Mar 31 21:21:01 <panicbit>	'🦀
Mar 31 21:21:10 <panicbit>	Hm, that emoji doesn't show in my term
Mar 31 21:21:10 <panicbit>	Hm, that emoji doesn't show in my term
Mar 31 21:21:37 <LambdaComplex>	Does on mine
Mar 31 21:21:37 <LambdaComplex>	Does on mine
Mar 31 21:21:47 <steveklabnik>	not mine either
Mar 31 21:21:47 <steveklabnik>	not mine either
Mar 31 21:21:48 <Xion>	LambdaComplex: Your terminal is poop-compatible.
Mar 31 21:21:48 <Xion>	LambdaComplex: Your terminal is poop-compatible.
Mar 31 21:21:51 Mar 31 21:21:51 <Xion>	Congratulations :D
<Xion>	Congratulations :D
Mar 31 21:22:03 Mar 31 21:22:03 <panicbit>	Hm, must be mosh or screen screwing it up
<panicbit>	Hm, must be mosh or screen screwing it up
Mar 31 21:22:11 <LambdaComplex>	Xion: But it's a crab O.o
Mar 31 21:22:11 <LambdaComplex>	Xion: But it's a crab O.o
Mar 31 21:22:13 <varunvats>	I am looking for best practices (or more precisely, the right way) on implementing equality (==) for structs. I couldn't find any in the book or the www. Anyone have thoughts/links to share?
Mar 31 21:22:13 <varunvats>	I am looking for best practices (or more precisely, the right way) on implementing equality (==) for structs. I couldn't find any in the book or the www. Anyone have thoughts/links to share?
Mar 31 21:22:54 <panicbit>	LambdaComplex: That still makes their terminal poop-compatible :P
Mar 31 21:22:54 <panicbit>	LambdaComplex: That still makes their terminal poop-compatible :P
Mar 31 21:23:17 <LambdaComplex>	True
Mar 31 21:23:17 <LambdaComplex>	True
Mar 31 21:24:41 <Xion>	varunvats: #[derive(PartialEq)] works for many (most?) cases.
Mar 31 21:24:41 <Xion>	varunvats: #[derive(PartialEq)] works for many (most?) cases.
Mar 31 21:26:16 *	Aceeri (uid29649@moz-opi9bt.tooting.irccloud.com) has joined
Mar 31 21:26:22 <panicbit>	(well, add Eq if possible)
Mar 31 21:26:22 <panicbit>	(well, add Eq if possible)
Mar 31 21:27:02 Mar 31 21:27:02 <LambdaComplex>	panicbit: So how do I get a Screen without a ScreenIterator?
<LambdaComplex>	panicbit: So how do I get a Screen without a ScreenIterator?
Mar 31 21:27:14 Mar 31 21:27:14 <Xion>	One would think that successful deriving of Eq shouldd also derive PartialEq.
<Xion>	One would think that successful deriving of Eq shouldd also derive PartialEq.
Mar 31 21:28:46 <bluss>	Xion: you might want to derive Eq but impl PartialEq manually
Mar 31 21:28:46 <bluss>	Xion: you might want to derive Eq but impl PartialEq manually
Mar 31 21:28:47 <curtism>	Xion: The Eq trait requires the PartialEq trait
Mar 31 21:28:47 <curtism>	Xion: The Eq trait requires the PartialEq trait
Mar 31 21:30:10 <panicbit>	LambdaComplex: Hm, maybe XScreenOfDisplay
Mar 31 21:30:10 <panicbit>	LambdaComplex: Hm, maybe XScreenOfDisplay
Mar 31 21:30:22 <panicbit>	LambdaComplex: But that's unsafe because it's an ffi method
Mar 31 21:30:22 <panicbit>	LambdaComplex: But that's unsafe because it's an ffi method
Mar 31 21:30:58 Mar 31 21:30:58 <LambdaComplex>	panicbit: Well, I need to get the Screen that a specific Window is on
<LambdaComplex>	panicbit: Well, I need to get the Screen that a specific Window is on
Mar 31 21:31:04 *	adium has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 21:31:38 *	adium (textual@moz-p9j.tu3.210.134.IP) has joined
Mar 31 21:32:29 <LambdaComplex>	...I think
Mar 31 21:32:29 <LambdaComplex>	...I think
Mar 31 21:33:02 *	adium has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 21:33:08 <panicbit>	LambdaComplex: I have no idea :/
Mar 31 21:33:08 <panicbit>	LambdaComplex: I have no idea :/
Mar 31 21:33:19 *	pittaman has quit (Quit: ChatZilla 0.9.92 [Firefox 46.0/20160324011246])
Mar 31 21:33:31 <LambdaComplex>	Ah, think I found it
Mar 31 21:33:31 <LambdaComplex>	Ah, think I found it
Mar 31 21:33:40 <LambdaComplex>	https://github.com/wmutils/core/blob/master/util.c#L23-L29
Mar 31 21:33:40 <LambdaComplex>	https://github.com/wmutils/core/blob/master/util.c#L23-L29
Mar 31 21:33:52 *	Fishrock123 has quit (Connection closed)
Mar 31 21:34:19 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 21:35:06 *	Fishrock123 has quit (Connection closed)
Mar 31 21:35:15 <LambdaComplex>	Maybe
Mar 31 21:35:15 <LambdaComplex>	Maybe
Mar 31 21:35:23 *	azerupi has quit (Ping timeout: 121 seconds)
Mar 31 21:35:52 Mar 31 21:35:52 <LambdaComplex>	That function doesn't return a value O.o
<LambdaComplex>	That function doesn't return a value O.o
Mar 31 21:36:21 Mar 31 21:36:21 <varunvats>	Xion: Thanks for the pointer to #[derive(PartialEq)]. Will take a look.
<varunvats>	Xion: Thanks for the pointer to #[derive(PartialEq)]. Will take a look.
Mar 31 21:36:25 Mar 31 21:36:25 <LambdaComplex>	Might be due to global vars though
<LambdaComplex>	Might be due to global vars though
Mar 31 21:37:52 <panicbit>	LambdaComplex: No
Mar 31 21:37:52 <panicbit>	LambdaComplex: No
Mar 31 21:38:05 <panicbit>	LambdaComplex: It uses the scr parameter as output 
Mar 31 21:38:05 <panicbit>	LambdaComplex: It uses the scr parameter as output 
Mar 31 21:38:09 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 21:38:20 Mar 31 21:38:20 <LambdaComplex>	panicbit: Meaning...?
<LambdaComplex>	panicbit: Meaning...?
Mar 31 21:38:39 Mar 31 21:38:39 <panicbit>	LambdaComplex: the result of the function will be stored in *scr ...
<panicbit>	LambdaComplex: the result of the function will be stored in *scr ...
Mar 31 21:39:07 Mar 31 21:39:07 <LambdaComplex>	Hm.
<LambdaComplex>	Hm.
Mar 31 21:39:16 Mar 31 21:39:16 <LambdaComplex>	So, basically, it returns a screen?
<LambdaComplex>	So, basically, it returns a screen?
Mar 31 21:39:27 <panicbit>	E.g. you create variable `screen_iter: *xcb_screen_t` and then pass in a reference to that variable
Mar 31 21:39:27 <panicbit>	E.g. you create variable `screen_iter: *xcb_screen_t` and then pass in a reference to that variable
Mar 31 21:39:33 Mar 31 21:39:33 <panicbit>	LambdaComplex: Yeah
<panicbit>	LambdaComplex: Yeah
Mar 31 21:39:43 <panicbit>	LambdaComplex: It's just a weird convention
Mar 31 21:39:43 <panicbit>	LambdaComplex: It's just a weird convention
Mar 31 21:40:03 <panicbit>	LambdaComplex: You could do something like that in Rust aswell
Mar 31 21:40:03 <panicbit>	LambdaComplex: You could do something like that in Rust aswell
Mar 31 21:40:28 <panicbit>	e.g. if you use a type like `&mut Option<Foo>`
Mar 31 21:40:28 <panicbit>	e.g. if you use a type like `&mut Option<Foo>`
Mar 31 21:40:57 <panicbit>	Then the function could "return" a value by writing a `Some(foo)` to that reference
Mar 31 21:40:57 <panicbit>	Then the function could "return" a value by writing a `Some(foo)` to that reference
Mar 31 21:41:37 <LambdaComplex>	orrrr i could just have the function return a Screen :p
Mar 31 21:41:37 <LambdaComplex>	orrrr i could just have the function return a Screen :p
Mar 31 21:41:43 <panicbit>	Yeah you should
Mar 31 21:41:43 <panicbit>	Yeah you should
Mar 31 21:41:48 *	klue (foo@moz-clh1pq.fios.verizon.net) has joined
Mar 31 21:41:52 <panicbit>	In Rust at least
Mar 31 21:41:52 <panicbit>	In Rust at least
Mar 31 21:42:09 <panicbit>	I have no clue why they did it that way for that function
Mar 31 21:42:09 <panicbit>	I have no clue why they did it that way for that function
Mar 31 21:42:22 <panicbit>	Ah right
Mar 31 21:42:22 <panicbit>	Ah right
Mar 31 21:42:53 <panicbit>	LambdaComplex: That's done so that the get_screen method doesn't need to allocate another memory location I think?
Mar 31 21:42:53 <panicbit>	LambdaComplex: That's done so that the get_screen method doesn't need to allocate another memory location I think?
Mar 31 21:43:30 *	Damaki (damaki@moz-biuqal.cable.rogers.com) has joined
Mar 31 21:45:08 <panicbit>	LambdaComplex: The Setup has a .roots() method to get a ScreenIterator
Mar 31 21:45:08 <panicbit>	LambdaComplex: The Setup has a .roots() method to get a ScreenIterator
Mar 31 21:45:48 Mar 31 21:45:48 <panicbit>	LambdaComplex: About windows on a certain screen
<panicbit>	LambdaComplex: About windows on a certain screen
Mar 31 21:45:49 *	elementalest has quit (Ping timeout: 121 seconds)
Mar 31 21:46:01 <LambdaComplex>	panicbit: So it does
Mar 31 21:46:01 <LambdaComplex>	panicbit: So it does
Mar 31 21:46:03 <panicbit>	LambdaComplex: Can't a window be partially on one screen and partially on the other
Mar 31 21:46:03 <panicbit>	LambdaComplex: Can't a window be partially on one screen and partially on the other
Mar 31 21:46:05 <panicbit>	?
Mar 31 21:46:05 <panicbit>	?
Mar 31 21:46:20 <panicbit>	I guess that would compicatte matters ;)
Mar 31 21:46:20 <panicbit>	I guess that would compicatte matters ;)
Mar 31 21:46:24 <panicbit>	complicate*
Mar 31 21:46:24 <panicbit>	complicate*
Mar 31 21:46:26 *	elementalest (elementales@moz-t1pv9r.internode.on.net) has joined
Mar 31 21:46:27 <LambdaComplex>	panicbit: That's a very good question...
Mar 31 21:46:27 <LambdaComplex>	panicbit: That's a very good question...
Mar 31 21:46:34 <LambdaComplex>	That I don't know the answer to O.o
Mar 31 21:46:34 <LambdaComplex>	That I don't know the answer to O.o
Mar 31 21:46:40 <LambdaComplex>	And sadly I don't have another screen to test it!
Mar 31 21:46:40 <LambdaComplex>	And sadly I don't have another screen to test it!
Mar 31 21:47:52 *	adium (textual@moz-p9j.tu3.210.134.IP) has joined
Mar 31 21:48:56 <LambdaComplex>	Hm, doesn't look like there's a function that returns the screen...
Mar 31 21:48:56 <LambdaComplex>	Hm, doesn't look like there's a function that returns the screen...
Mar 31 21:49:13 <LambdaComplex>	panicbit: So, either I'm wrong about that or it's time to break out the unsafe block
Mar 31 21:49:13 <LambdaComplex>	panicbit: So, either I'm wrong about that or it's time to break out the unsafe block
Mar 31 21:49:27 <aatch>	Well what's complicated is that different parts of X have different ideas of what "screen" means.
Mar 31 21:49:27 <aatch>	Well what's complicated is that different parts of X have different ideas of what "screen" means.
Mar 31 21:49:44 <LambdaComplex>	Actually that doesn't seem to require an unsafe block
Mar 31 21:49:44 <LambdaComplex>	Actually that doesn't seem to require an unsafe block
Mar 31 21:50:12 <panicbit>	LambdaComplex: You can create virtual screens I think
Mar 31 21:50:12 <panicbit>	LambdaComplex: You can create virtual screens I think
Mar 31 21:50:57 Mar 31 21:50:57 <LambdaComplex>	Wait, I was wrong. I think it will require unsafe
<LambdaComplex>	Wait, I was wrong. I think it will require unsafe
Mar 31 21:51:11 <panicbit>	D=
Mar 31 21:51:11 <panicbit>	D=
Mar 31 21:52:01 <panicbit>	LambdaComplex: To do what exactly?
Mar 31 21:52:01 <panicbit>	LambdaComplex: To do what exactly?
Mar 31 21:52:41 Mar 31 21:52:41 <panicbit>	LambdaComplex: If you actually require unsafe you should probably bug rtbo about it :)
<panicbit>	LambdaComplex: If you actually require unsafe you should probably bug rtbo about it :)
Mar 31 21:52:48 <LambdaComplex>	panicbit: Access the data field of an xcb_screen_iterator_t
Mar 31 21:52:48 <LambdaComplex>	panicbit: Access the data field of an xcb_screen_iterator_t
Mar 31 21:53:00 <LambdaComplex>	well, an xproto::ScreenIterator
Mar 31 21:53:00 <LambdaComplex>	well, an xproto::ScreenIterator
Mar 31 21:53:02 <LambdaComplex>	(same thing)
Mar 31 21:53:02 <LambdaComplex>	(same thing)
Mar 31 21:54:42 *	tyoc213 has quit (Quit: Leaving)
Mar 31 21:55:21 <panicbit>	LambdaComplex: But ScreenIterator implements Iterator
Mar 31 21:55:21 <panicbit>	LambdaComplex: But ScreenIterator implements Iterator
Mar 31 21:55:34 Mar 31 21:55:34 <panicbit>	That gives you the things from the data field :D
<panicbit>	That gives you the things from the data field :D
Mar 31 21:55:42 <LambdaComplex>	panicbit: I don't think I'm trying to iterate though
Mar 31 21:55:42 <LambdaComplex>	panicbit: I don't think I'm trying to iterate though
Mar 31 21:55:49 <panicbit>	…
Mar 31 21:55:49 <panicbit>	…
Mar 31 21:55:53 <LambdaComplex>	Am I? O.o
Mar 31 21:55:53 <LambdaComplex>	Am I? O.o
Mar 31 21:55:56 <panicbit>	Yes
Mar 31 21:55:56 <panicbit>	Yes
Mar 31 21:55:59 <panicbit>	It is an Iterator
Mar 31 21:55:59 <panicbit>	It is an Iterator
Mar 31 21:56:07 *	brson_ has quit (Quit: leaving)
Mar 31 21:56:07 <panicbit>	You want to exercise it iterating superpowers
Mar 31 21:56:07 <panicbit>	You want to exercise it iterating superpowers
Mar 31 21:56:09 <panicbit>	:D
Mar 31 21:56:09 <panicbit>	:D
Mar 31 21:56:11 <panicbit>	its*
Mar 31 21:56:11 <panicbit>	its*
Mar 31 21:56:11 <LambdaComplex>	So do I wanna use next()?
Mar 31 21:56:11 <LambdaComplex>	So do I wanna use next()?
Mar 31 21:56:14 Mar 31 21:56:14 <panicbit>	Yes
<panicbit>	Yes
Mar 31 21:56:16 *	brson (brson@moz-cfhap5.mtv2.mozilla.com) has joined
Mar 31 21:56:29 <panicbit>	If you want to keep unsafe out of your live you want that badly :)
Mar 31 21:56:29 <panicbit>	If you want to keep unsafe out of your live you want that badly :)
Mar 31 21:56:41 Mar 31 21:56:41 <panicbit>	Or .nth or whatever fits your usecase
<panicbit>	Or .nth or whatever fits your usecase
Mar 31 21:56:59 <panicbit>	You could collect into a Vec<Screen> if you want to
Mar 31 21:56:59 <panicbit>	You could collect into a Vec<Screen> if you want to
Mar 31 21:57:08 <LambdaComplex>	I have no idea which one I want though!
Mar 31 21:57:08 <LambdaComplex>	I have no idea which one I want though!
Mar 31 21:57:38 *	NSil has quit (Ping timeout: 121 seconds)
Mar 31 21:58:17 *	woboats has quit (Client exited)
Mar 31 21:59:42 *	Malnormalulo has quit (Ping timeout: 121 seconds)
Mar 31 21:59:54 *	Peach has quit (Client exited)
Mar 31 21:59:56 *	qg_ has quit (Connection closed)
Mar 31 22:00:20 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Mar 31 22:01:26 Mar 31 22:01:26 <panicbit>	LambdaComplex: Interesting http://stackoverflow.com/a/26028393
<panicbit>	LambdaComplex: Interesting http://stackoverflow.com/a/26028393
Mar 31 22:01:47 Mar 31 22:01:47 <panicbit>	So a window is always constrained to its parent, which is usually the root window
<panicbit>	So a window is always constrained to its parent, which is usually the root window
Mar 31 22:02:29 <Aceeri>	What amount do patterns go up to?
Mar 31 22:02:29 <Aceeri>	What amount do patterns go up to?
Mar 31 22:02:40 <panicbit>	So I guess if you connect to a certain display:screen you should only get the windows that are on that screen
Mar 31 22:02:40 <panicbit>	So I guess if you connect to a certain display:screen you should only get the windows that are on that screen
Mar 31 22:02:47 <Aceeri>	Like (x, y) is 2 and then (x, y, z) is 3
Mar 31 22:02:47 <Aceeri>	Like (x, y) is 2 and then (x, y, z) is 3
Mar 31 22:03:12 <panicbit>	Aceeri: You should be able to use arbitrarily sized tuples
Mar 31 22:03:12 <panicbit>	Aceeri: You should be able to use arbitrarily sized tuples
Mar 31 22:03:16 *	cafeclimber has quit (Quit: WeeChat 1.4)
Mar 31 22:03:27 <Aceeri>	I thought I heard somewhere that it was limited to 32
Mar 31 22:03:27 <Aceeri>	I thought I heard somewhere that it was limited to 32
Mar 31 22:03:30 <panicbit>	However, some traits aren't implemented for them after a certain size
Mar 31 22:03:30 <panicbit>	However, some traits aren't implemented for them after a certain size
Mar 31 22:03:55 <LambdaComplex>	panicbit: Does that mean this whole get_screen function is unnecessary? O.o
Mar 31 22:03:55 <LambdaComplex>	panicbit: Does that mean this whole get_screen function is unnecessary? O.o
Mar 31 22:04:22 <panicbit>	playbot: (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33)
Mar 31 22:04:22 <panicbit>	playbot: (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33)
Mar 31 22:04:23 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1qlzX7T
Mar 31 22:04:23 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1qlzX7T
Mar 31 22:04:23 *	qg_ has quit (Ping timeout: 121 seconds)
Mar 31 22:04:42 <panicbit>	Aceeri: Well, e.g. Debug isn't implemented >32 :)
Mar 31 22:04:42 <panicbit>	Aceeri: Well, e.g. Debug isn't implemented >32 :)
Mar 31 22:04:46 <panicbit>	playbot: (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
Mar 31 22:04:46 <panicbit>	playbot: (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32)
Mar 31 22:04:47 Mar 31 22:04:47 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1RANTSk
-playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1RANTSk
Mar 31 22:05:21 <Aceeri>	So you can still go over it though right?
Mar 31 22:05:21 <Aceeri>	So you can still go over it though right?
Mar 31 22:05:31 <panicbit>	Aceeri: In fact it only goes up to 12 (inclusive)
Mar 31 22:05:31 <panicbit>	Aceeri: In fact it only goes up to 12 (inclusive)
Mar 31 22:05:36 <panicbit>	Aceeri: Yeah
Mar 31 22:05:36 <panicbit>	Aceeri: Yeah
Mar 31 22:05:45 <Aceeri>	Alright, goodie, thanks <3
Mar 31 22:05:45 <Aceeri>	Alright, goodie, thanks <3
Mar 31 22:05:50 Mar 31 22:05:50 <panicbit>	You can still pattern match and everything
<panicbit>	You can still pattern match and everything
Mar 31 22:06:32 <curtism>	At that point it's a better idea to make a tuple struct and derive implementations for it
Mar 31 22:06:32 <curtism>	At that point it's a better idea to make a tuple struct and derive implementations for it
Mar 31 22:06:43 <panicbit>	Aceeri: I think the doc clarifies it a bit http://doc.rust-lang.org/nightly/std/primitive.tuple.html
Mar 31 22:06:43 <panicbit>	Aceeri: I think the doc clarifies it a bit http://doc.rust-lang.org/nightly/std/primitive.tuple.html
Mar 31 22:07:11 <panicbit>	(Impls go only up to a certain letter)
Mar 31 22:07:11 <panicbit>	(Impls go only up to a certain letter)
Mar 31 22:07:12 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 22:07:34 <panicbit>	Which is a pretty sad look, but it will hopefully change some day :)
Mar 31 22:07:34 <panicbit>	Which is a pretty sad look, but it will hopefully change some day :)
Mar 31 22:08:14 *	cstearns has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 22:08:24 *	panicbit agress with curtism
Mar 31 22:08:24 *	panicbit agress with curtism
Mar 31 22:08:28 <panicbit>	agrees*
Mar 31 22:08:28 <panicbit>	agrees*
Mar 31 22:08:42 *	anowell has quit (Quit: Connection closed for inactivity)
Mar 31 22:08:57 *	curtism agresses back
Mar 31 22:08:57 *	curtism agresses back
Mar 31 22:09:19 *	panicbit agresses harder
Mar 31 22:09:19 *	panicbit agresses harder
Mar 31 22:09:35 *	yeahnoob (kvirc@moz-vah.a5n.9.111.IP) has joined
Mar 31 22:11:13 <insaneinside>	oh baby! yes!  yes!  YES!
Mar 31 22:11:13 <insaneinside>	oh baby! yes!  yes!  YES!
Mar 31 22:11:18 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 22:14:10 <LambdaComplex>	lewd
Mar 31 22:14:10 <LambdaComplex>	lewd
Mar 31 22:14:16 <LambdaComplex>	panicbit: so do i need that function or not? O.o
Mar 31 22:14:16 <LambdaComplex>	panicbit: so do i need that function or not? O.o
Mar 31 22:14:28 <panicbit>	LambdaComplex: I don't know
Mar 31 22:14:28 <panicbit>	LambdaComplex: I don't know
Mar 31 22:14:43 <panicbit>	LambdaComplex: What do you want to do ultimately?
Mar 31 22:14:43 <panicbit>	LambdaComplex: What do you want to do ultimately?
Mar 31 22:14:53 Mar 31 22:14:53 <panicbit>	Still resize windows?
<panicbit>	Still resize windows?
Mar 31 22:17:20 Mar 31 22:17:20 <LambdaComplex>	Actually, I'm pretty sure I do need that function. Because I need the value of the screen's height and width
<LambdaComplex>	Actually, I'm pretty sure I do need that function. Because I need the value of the screen's height and width
Mar 31 22:17:23 <LambdaComplex>	panicbit: Yes
Mar 31 22:17:23 <LambdaComplex>	panicbit: Yes
Mar 31 22:17:31 Mar 31 22:17:31 <LambdaComplex>	panicbit: Rewriting https://github.com/wmutils/core/blob/master/wrs.c
<LambdaComplex>	panicbit: Rewriting https://github.com/wmutils/core/blob/master/wrs.c
Mar 31 22:18:05 <panicbit>	So still resizing, judging by the function maes
Mar 31 22:18:05 <panicbit>	So still resizing, judging by the function maes
Mar 31 22:18:08 Mar 31 22:18:08 <panicbit>	names*
<panicbit>	names*
Mar 31 22:18:25 <panicbit>	These tools are lacking some nice help text
Mar 31 22:18:25 <panicbit>	These tools are lacking some nice help text
Mar 31 22:18:40 *	cpup has quit (Ping timeout: 121 seconds)
Mar 31 22:18:48 *	varunvats has quit (Quit: http://www.mibbit.com ajax IRC Client)
Mar 31 22:18:50 Mar 31 22:18:50 <panicbit>	otoh, they have manpages
<panicbit>	otoh, they have manpages
Mar 31 22:19:05 *	kk (kk@moz-a994e7.3949.mvc8.b011.2001.IP) has joined
Mar 31 22:20:13 *	cpup (cpup@moz-m41.b21.218.32.IP) has joined
Mar 31 22:21:46 <LambdaComplex>	Yes, they do :P
Mar 31 22:21:46 <LambdaComplex>	Yes, they do :P
Mar 31 22:22:54 Mar 31 22:22:54 <panicbit>	LambdaComplex: 1. looks like you were right with that scr variable
<panicbit>	LambdaComplex: 1. looks like you were right with that scr variable
Mar 31 22:23:06 <panicbit>	LambdaComplex: In this specific case it is indeed global
Mar 31 22:23:06 <panicbit>	LambdaComplex: In this specific case it is indeed global
Mar 31 22:23:39 <panicbit>	LambdaComplex: 2. it looks like wrs would crash if there are no screens xD
Mar 31 22:23:39 <panicbit>	LambdaComplex: 2. it looks like wrs would crash if there are no screens xD
Mar 31 22:24:00 <panicbit>	LambdaComplex: scr should contain the first screen
Mar 31 22:24:00 <panicbit>	LambdaComplex: scr should contain the first screen
Mar 31 22:24:11 <panicbit>	LambdaComplex: So you should get the first screen from the iterator
Mar 31 22:24:11 <panicbit>	LambdaComplex: So you should get the first screen from the iterator
Mar 31 22:24:15 <panicbit>	using .next()
Mar 31 22:24:15 <panicbit>	using .next()
Mar 31 22:24:56 <panicbit>	("first" probably doesn't need to be screen 0 or whatever)
Mar 31 22:24:56 <panicbit>	("first" probably doesn't need to be screen 0 or whatever)
Mar 31 22:25:05 <panicbit>	But it should be the same screen that wrs uses
Mar 31 22:25:05 <panicbit>	But it should be the same screen that wrs uses
Mar 31 22:26:31 Mar 31 22:26:31 <panicbit>	LambdaComplex: You should als be able to just .unwrap() it
<panicbit>	LambdaComplex: You should als be able to just .unwrap() it
Mar 31 22:26:33 <LambdaComplex>	panicbit: Nah, it doesn't crash
Mar 31 22:26:33 <LambdaComplex>	panicbit: Nah, it doesn't crash
Mar 31 22:26:51 Mar 31 22:26:51 <panicbit>	LambdaComplex: Well, have you tried running it WITHOUT screens? :D
<panicbit>	LambdaComplex: Well, have you tried running it WITHOUT screens? :D
Mar 31 22:26:53 <LambdaComplex>	init_xcb() prints an error message
Mar 31 22:26:53 <LambdaComplex>	init_xcb() prints an error message
Mar 31 22:27:04 <panicbit>	unplug your screen and try running X :P
Mar 31 22:27:04 <panicbit>	unplug your screen and try running X :P
Mar 31 22:27:11 Mar 31 22:27:11 <LambdaComplex>	I'm assuming setting DISPLAY to nothing is equivalent
<LambdaComplex>	I'm assuming setting DISPLAY to nothing is equivalent
Mar 31 22:27:13 <panicbit>	Ah
Mar 31 22:27:13 <panicbit>	Ah
Mar 31 22:27:19 <panicbit>	Maybe
Mar 31 22:27:19 <panicbit>	Maybe
Mar 31 22:27:22 <panicbit>	I don't know
Mar 31 22:27:22 <panicbit>	I don't know
Mar 31 22:27:29 <panicbit>	Maybe you can have a display without screen
Mar 31 22:27:29 <panicbit>	Maybe you can have a display without screen
Mar 31 22:27:30 <panicbit>	s
Mar 31 22:27:30 <panicbit>	s
Mar 31 22:27:55 <LambdaComplex>	Maybe "People trying to use wmutils with no monitor attached" isn't in the target demographic for this utility :P
Mar 31 22:27:55 <LambdaComplex>	Maybe "People trying to use wmutils with no monitor attached" isn't in the target demographic for this utility :P
Mar 31 22:28:01 <panicbit>	;)
Mar 31 22:28:01 <panicbit>	;)
Mar 31 22:28:24 <panicbit>	LambdaComplex: I added the "xD" to signify that I may not have been completely serious
Mar 31 22:28:24 <panicbit>	LambdaComplex: I added the "xD" to signify that I may not have been completely serious
Mar 31 22:28:54 <panicbit>	Or in other words: woosh
Mar 31 22:28:54 <panicbit>	Or in other words: woosh
Mar 31 22:29:19 Mar 31 22:29:19 <panicbit>	LambdaComplex: Anyway, you should be fine now I guess :)
<panicbit>	LambdaComplex: Anyway, you should be fine now I guess :)
Mar 31 22:30:02 *	martianwars has quit (Quit: Connection closed for inactivity)
Mar 31 22:30:39 <LambdaComplex>	So.....I should use .next()?
Mar 31 22:30:39 <LambdaComplex>	So.....I should use .next()?
Mar 31 22:31:07 <panicbit>	LambdaComplex: Yes
Mar 31 22:31:07 <panicbit>	LambdaComplex: Yes
Mar 31 22:31:24 <panicbit>	`my_screen_iterator.next().unwrap()`
Mar 31 22:31:24 <panicbit>	`my_screen_iterator.next().unwrap()`
Mar 31 22:31:40 <panicbit>	or .expect("whoops"), just in case :)
Mar 31 22:31:40 <panicbit>	or .expect("whoops"), just in case :)
Mar 31 22:34:54 <LambdaComplex>	Now I'm getting a lifetime error! Sweet!
Mar 31 22:34:54 <LambdaComplex>	Now I'm getting a lifetime error! Sweet!
Mar 31 22:35:44 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 22:36:19 <panicbit>	I think we should be using PMs or another channel for this amount of discussion...
Mar 31 22:36:19 <panicbit>	I think we should be using PMs or another channel for this amount of discussion...
Mar 31 22:36:40 <panicbit>	OTOH you'd then miss out on the great suggestion from all the others :/
Mar 31 22:36:40 <panicbit>	OTOH you'd then miss out on the great suggestion from all the others :/
Mar 31 22:36:47 <panicbit>	suggestions*
Mar 31 22:36:47 <panicbit>	suggestions*
Mar 31 22:37:57 *	monti (happy@moz-aidh09.broadband.corbina.ru) has left
Mar 31 22:38:30 <panicbit>	LambdaComplex: You probably gotta bind the screen iterator to a variable
Mar 31 22:38:30 <panicbit>	LambdaComplex: You probably gotta bind the screen iterator to a variable
Mar 31 22:38:32 <LambdaComplex>	I mean, we _are_ talking about Rust
Mar 31 22:38:32 <LambdaComplex>	I mean, we _are_ talking about Rust
Mar 31 22:39:01 <panicbit>	We are not exactly offtopic, but we are also pretty consuming :)
Mar 31 22:39:01 <panicbit>	We are not exactly offtopic, but we are also pretty consuming :)
Mar 31 22:39:45 <LambdaComplex>	panicbit: Doesn't seem to be helping
Mar 31 22:39:45 <LambdaComplex>	panicbit: Doesn't seem to be helping
Mar 31 22:40:16 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 22:40:30 <panicbit>	The last thing that I want is that someone hesitates to ask something out of fear of interrupting our discussion
Mar 31 22:40:30 <panicbit>	The last thing that I want is that someone hesitates to ask something out of fear of interrupting our discussion
Mar 31 22:42:24 <LambdaComplex>	panicbit: http://sprunge.us/iaZL?rust
Mar 31 22:42:24 <LambdaComplex>	panicbit: http://sprunge.us/iaZL?rust
Mar 31 22:42:32 <LambdaComplex>	If you wanna pm me then feel free to
Mar 31 22:42:32 <LambdaComplex>	If you wanna pm me then feel free to
Mar 31 22:42:50 <panicbit>	LambdaComplex: Actually, it looks like the lifetime of the screen is bound to the Setup
Mar 31 22:42:50 <panicbit>	LambdaComplex: Actually, it looks like the lifetime of the screen is bound to the Setup
Mar 31 22:43:03 *	brson has quit (Ping timeout: 121 seconds)
Mar 31 22:43:07 <panicbit>	LambdaComplex: or rather
Mar 31 22:43:07 <panicbit>	LambdaComplex: or rather
Mar 31 22:43:11 <panicbit>	LambdaComplex: The conn
Mar 31 22:43:11 <panicbit>	LambdaComplex: The conn
Mar 31 22:43:26 <panicbit>	LambdaComplex: Because the setup is bound to that
Mar 31 22:43:26 <panicbit>	LambdaComplex: Because the setup is bound to that
Mar 31 22:43:57 <panicbit>	LambdaComplex: 'sec
Mar 31 22:43:57 <panicbit>	LambdaComplex: 'sec
Mar 31 22:44:07 *	insaneinside (user@moz-afulfs.tukw.qwest.net) has left ("bye")
Mar 31 22:45:37 <panicbit>	LambdaComplex: Try if this works http://is.gd/dgFZTm
Mar 31 22:45:37 <panicbit>	LambdaComplex: Try if this works http://is.gd/dgFZTm
Mar 31 22:46:04 <panicbit>	I would be confused if that does in fact work
Mar 31 22:46:04 <panicbit>	I would be confused if that does in fact work
Mar 31 22:46:34 <panicbit>	LambdaComplex: What is the exact error message anyway
Mar 31 22:46:34 <panicbit>	LambdaComplex: What is the exact error message anyway
Mar 31 22:46:44 <panicbit>	Maybe I'm looking on the wrong part...
Mar 31 22:46:44 <panicbit>	Maybe I'm looking on the wrong part...
Mar 31 22:46:53 <panicbit>	at*
Mar 31 22:46:53 <panicbit>	at*
Mar 31 22:51:22 *	Joefish_ (Joefish@moz-n9mjrb.dip0.t-ipconnect.de) has joined
Mar 31 22:52:58 <LambdaComplex>	panicbit: Nah, that didn't work. One sec
Mar 31 22:52:58 <LambdaComplex>	panicbit: Nah, that didn't work. One sec
Mar 31 22:53:39 *	m4rw3r has quit (Quit: My Mac has gone to sleep. ZZZzzz…)
Mar 31 22:54:27 <LambdaComplex>	panicbit: http://sprunge.us/DhWF
Mar 31 22:54:27 <LambdaComplex>	panicbit: http://sprunge.us/DhWF
Mar 31 22:54:41 *	Joefish has quit (Ping timeout: 121 seconds)
Mar 31 22:55:01 <LambdaComplex>	Wait, that's after I changed it
Mar 31 22:55:01 <LambdaComplex>	Wait, that's after I changed it
Mar 31 22:55:12 *	kk has quit (Quit: WeeChat 1.4)
Mar 31 22:55:24 <LambdaComplex>	panicbit: http://sprunge.us/GKJG
Mar 31 22:55:24 <LambdaComplex>	panicbit: http://sprunge.us/GKJG
Mar 31 22:56:38 *	cvubrugier has quit (Ping timeout: 121 seconds)
Mar 31 22:56:52 *	cvubrugier (cvubrugier@moz-7ruah9.voms.o72t.41d0.2001.IP) has joined
Mar 31 22:57:28 Mar 31 22:57:28 <panicbit>	LambdaComplex: Hm, the errors from the first one look like you didn't completely change it like I showed you
<panicbit>	LambdaComplex: Hm, the errors from the first one look like you didn't completely change it like I showed you
Mar 31 22:58:02 <panicbit>	did you use `Screen<'a>` ?
Mar 31 22:58:02 <panicbit>	did you use `Screen<'a>` ?
Mar 31 22:58:41 Mar 31 22:58:41 <panicbit>	I think I'll have to play around with that code myself
<panicbit>	I think I'll have to play around with that code myself
Mar 31 22:59:09 <panicbit>	But not now
Mar 31 22:59:09 <panicbit>	But not now
Mar 31 22:59:19 <panicbit>	I need to get up in like 6 hours
Mar 31 22:59:19 <panicbit>	I need to get up in like 6 hours
Mar 31 22:59:28 Mar 31 22:59:28 <panicbit>	So I'll get some sleep now
<panicbit>	So I'll get some sleep now
Mar 31 22:59:54 <panicbit>	LambdaComplex: See you tomorrow :)
Mar 31 22:59:54 <panicbit>	LambdaComplex: See you tomorrow :)
Mar 31 23:00:19 *	hackebeilchen has quit (Connection closed)
Mar 31 23:01:34 *	Peach (Peach@moz-q01.nag.102.75.IP) has joined
Mar 31 23:05:13 <LambdaComplex>	panicbit: It didn't work with your changes either
Mar 31 23:05:13 <LambdaComplex>	panicbit: It didn't work with your changes either
Mar 31 23:05:36 *	Peach has quit (Ping timeout: 121 seconds)
Mar 31 23:06:01 <LambdaComplex>	Goodnight!
Mar 31 23:06:01 <LambdaComplex>	Goodnight!
Mar 31 23:06:38 <panicbit>	LambdaComplex: Good night :)
Mar 31 23:06:38 <panicbit>	LambdaComplex: Good night :)
Mar 31 23:07:58 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
Mar 31 23:08:22 *	alexhansen (alexhansen@moz-qjt.57j.194.131.IP) has joined
Mar 31 23:08:22 <kefin>	How do I convert an i64 to a 36-radix string?
Mar 31 23:08:22 <kefin>	How do I convert an i64 to a 36-radix string?
Mar 31 23:09:46 <kefin>	fmt::Radix is unstable and deprecated :/
Mar 31 23:09:46 <kefin>	fmt::Radix is unstable and deprecated :/
Mar 31 23:12:03 *	aevitas has quit (Ping timeout: 121 seconds)
Mar 31 23:12:25 *	alexhansen has quit (Ping timeout: 121 seconds)
Mar 31 23:16:00 *	duncan (paul@moz-83kscv.mi.charter.com) has joined
Mar 31 23:18:05 *	desophos (desophos@moz-1al.fba.241.173.IP) has joined
Mar 31 23:18:54 <aatch>	kefin, hmm, I can't seem to find a replacement. I thought we had to_str_radix somewhere, but apparently not anymore.
Mar 31 23:18:54 <aatch>	kefin, hmm, I can't seem to find a replacement. I thought we had to_str_radix somewhere, but apparently not anymore.
Mar 31 23:18:59 *	DaSpirit has quit (Quit: Leaving)
Mar 31 23:22:10 *	desophos has quit (Ping timeout: 121 seconds)
Mar 31 23:23:34 <kefin>	Yeah I can't find anything similar
Mar 31 23:23:34 <kefin>	Yeah I can't find anything similar
Mar 31 23:33:08 *	JuggleTux has quit (Quit: leaving)
Mar 31 23:36:49 *	Fishrock123 (Fishrock123@moz-h1cakh.dsl.bell.ca) has joined
Mar 31 23:41:21 *	Fishrock123 has quit (Ping timeout: 121 seconds)
Mar 31 23:52:08 *	glaebhoerl has quit (Ping timeout: 121 seconds)
Mar 31 23:59:55 *	kimundi has quit (Ping timeout: 121 seconds)
Apr 01 00:00:07 *	Joefish_ has quit (Quit: Leaving)
Apr 01 00:01:13 *	llandersll has quit (Connection closed)
Apr 01 00:01:34 *	qg_ (qg_@moz-ac8ttv.ga.comcast.net) has joined
Apr 01 00:04:43 *	Damaki has quit (Ping timeout: 121 seconds)
Apr 01 00:05:02 *	zelda (Mibbit@moz-np5.9uv.141.174.IP) has joined
Apr 01 00:05:18 *	kimundi (kimundi@moz-gik5pp.dip0.t-ipconnect.de) has joined
Apr 01 00:05:57 *	qg_ has quit (Ping timeout: 121 seconds)
Apr 01 00:08:42 *	aevitas (aevitas@moz-7g25go.customer.tdc.net) has joined
**** ENDING LOGGING AT Fri Apr  1 00:12:11 2016

Apr 01 00:12:11 *	brunodea_ has quit (Quit: Leaving)
**** BEGIN LOGGING AT Fri Apr  1 08:53:43 2016

Apr 01 08:53:43 *	Now talking on #rust-beginners
Apr 01 08:53:44 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 01 08:53:44 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 01 09:27:48 <cn>	i'm on windows, making a tiny program to run once in a cmd window and keep the cmd window open after the program has executed
Apr 01 09:29:25 <cn>	my current solution is just trapping it in a loop like this loop { stdout.flush(); }
Apr 01 09:29:33 <cn>	i don't know if that's a "nice" way of doing it, however..
Apr 01 09:30:16 <cn>	oh, i can just make a loop block without anything inside
Apr 01 09:35:28 <WindowsBunnies>	cn: Just make it read a line from stdin
Apr 01 09:35:37 <WindowsBunnies>	cn: or sleep
Apr 01 09:35:48 <cn>	WindowsBunnies: can i make it sleep indefinitely?
Apr 01 09:36:53 <WindowsBunnies>	cn: std::thread::park() will park the thread indefinitely until another thread unparks it
Apr 01 09:37:03 <cn>	that sounds good enough!
Apr 01 09:37:28 <cn>	thanks, works like a charm
Apr 01 09:39:13 <WindowsBunnies>	Alternatively if you don't like libstd and want to be non portable by using windows specific functions you can do kernel32::SuspendThread(kernel32::GetCurrentThread())
Apr 01 09:40:01 <cn>	thankfully it's just a simple tool for my own use, so whichever way works :D
Apr 01 10:18:05 <nice>	is there any way to change a boolean to a string containing "true" or "false" ?
Apr 01 10:18:30 <kimundi>	playbot: true.to_string()
Apr 01 10:18:31 -playbot/#rust-beginners-	"true"
Apr 01 10:18:48 <kimundi>	yes :)
Apr 01 10:21:04 <nice>	oh, great
Apr 01 10:21:06 <nice>	ty
**** BEGIN LOGGING AT Fri Apr  1 10:52:38 2016

Apr 01 10:52:38 *	Now talking on #rust-beginners
Apr 01 10:52:38 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 01 10:52:38 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 01 11:19:12 <Karamel>	I don't understand the second example here: https://doc.rust-lang.org/book/patterns.html. Could someone elaborate?
Apr 01 11:19:12 <Karamel>	I don't understand the second example here: https://doc.rust-lang.org/book/patterns.html. Could someone elaborate?
Apr 01 11:19:26 <Karamel>	In what universe does x and c match?
Apr 01 11:19:26 <Karamel>	In what universe does x and c match?
Apr 01 11:19:34 <Karamel>	I'm obviously missing something here.
Apr 01 11:19:34 <Karamel>	I'm obviously missing something here.
Apr 01 11:21:59 <barometz>	Karamel: the match statement "x => " is not "if it is x, do this"
Apr 01 11:21:59 <barometz>	Karamel: the match statement "x => " is not "if it is x, do this"
Apr 01 11:22:10 Apr 01 11:22:10 <Karamel>	I figured.
<Karamel>	I figured.
Apr 01 11:22:14 <Karamel>	What is it then?
Apr 01 11:22:14 <Karamel>	What is it then?
Apr 01 11:22:22 <barometz>	it binds anything in c to the name x because it doesn't have any restrictions
Apr 01 11:22:22 <barometz>	it binds anything in c to the name x because it doesn't have any restrictions
Apr 01 11:22:24 <LambdaComplex>	Karamel: It's "take the value of c and assign it to x"
Apr 01 11:22:24 <LambdaComplex>	Karamel: It's "take the value of c and assign it to x"
Apr 01 11:22:44 <barometz>	or indeed assign it over, since this is not by ref
Apr 01 11:22:44 <barometz>	or indeed assign it over, since this is not by ref
Apr 01 11:22:49 <LambdaComplex>	From the next paragraph: "Notice that the value of x outside the scope of the match has no bearing on the value of x within it."
Apr 01 11:22:49 <LambdaComplex>	From the next paragraph: "Notice that the value of x outside the scope of the match has no bearing on the value of x within it."
Apr 01 11:23:05 <Karamel>	I see.
Apr 01 11:23:05 <Karamel>	I see.
Apr 01 11:23:12 <barometz>	it's a new binding that happens to have the same name as an old one
Apr 01 11:23:12 <barometz>	it's a new binding that happens to have the same name as an old one
Apr 01 11:23:30 <Karamel>	I got confused because I was thinking of match as "if it is x, do this".
Apr 01 11:23:30 <Karamel>	I got confused because I was thinking of match as "if it is x, do this".
Apr 01 11:23:37 <Karamel>	But I get it now, thanks.
Apr 01 11:23:37 <Karamel>	But I get it now, thanks.
Apr 01 11:24:09 <Karamel>	And yeah, I totally understand shadowing, just got confused by the actual semantics of match.
Apr 01 11:24:09 <Karamel>	And yeah, I totally understand shadowing, just got confused by the actual semantics of match.
Apr 01 11:44:33 <monti>	!crate opencl
Apr 01 11:44:33 <monti>	!crate opencl
Apr 01 11:44:33 <rustbot>	Crate 'opencl' does not exist.
Apr 01 11:44:33 <rustbot>	Crate 'opencl' does not exist.
Apr 01 11:44:39 <monti>	!crate open-cl
Apr 01 11:44:39 <monti>	!crate open-cl
Apr 01 11:44:39 Apr 01 11:44:39 <rustbot>	Crate 'open-cl' does not exist.
<rustbot>	Crate 'open-cl' does not exist.
Apr 01 12:03:56 <peschkaj>	Weird iterator/Path question. On Windows, calling canonicalize on a path puts a bogus UNC path of \\?\ at the beginning of the path. I can get at that through a Path's components(), but I'm wondering what's the best way to remove the Prefix if it exists...
Apr 01 12:03:56 <peschkaj>	Weird iterator/Path question. On Windows, calling canonicalize on a path puts a bogus UNC path of \\?\ at the beginning of the path. I can get at that through a Path's components(), but I'm wondering what's the best way to remove the Prefix if it exists...
Apr 01 12:04:09 <peschkaj>	http://is.gd/BHJOJ0 for an example
Apr 01 12:04:09 <peschkaj>	http://is.gd/BHJOJ0 for an example
Apr 01 12:04:32 <peschkaj>	or, rather, http://is.gd/eNFiNi for an example that actually runs
Apr 01 12:04:32 <peschkaj>	or, rather, http://is.gd/eNFiNi for an example that actually runs
Apr 01 12:04:40 Apr 01 12:04:40 <peschkaj>	(╯°□°）╯︵ ┻━┻ 
<peschkaj>	(╯°□°）╯︵ ┻━┻ 
Apr 01 12:09:03 <Win64Bun>	peschkaj: \\?\ isn't a bogus UNC path
Apr 01 12:09:03 <Win64Bun>	peschkaj: \\?\ isn't a bogus UNC path
Apr 01 12:09:59 <peschkaj>	okeedoke
Apr 01 12:09:59 <peschkaj>	okeedoke
Apr 01 12:10:01 <Win64Bun>	peschkaj: It is a verbatim path, aka an NT path
Apr 01 12:10:01 <Win64Bun>	peschkaj: It is a verbatim path, aka an NT path
Apr 01 12:10:10 <peschkaj>	OK.
Apr 01 12:10:10 <peschkaj>	OK.
Apr 01 12:11:04 <peschkaj>	What would be the best way to remove it from a `Path`?
Apr 01 12:11:04 <peschkaj>	What would be the best way to remove it from a `Path`?
Apr 01 12:11:34 <panicbit>	LambdaComplex: Moin
Apr 01 12:11:34 <panicbit>	LambdaComplex: Moin
Apr 01 12:11:45 <Win64Bun>	Is there a reason you need to remove it? It is still an entirely valid path, just not one that most people are used to
Apr 01 12:11:45 <Win64Bun>	Is there a reason you need to remove it? It is still an entirely valid path, just not one that most people are used to
Apr 01 12:11:58 <peschkaj>	display formatting
Apr 01 12:11:58 <peschkaj>	display formatting
Apr 01 12:12:19 <peschkaj>	It also causes Windows 10 to error and isn't recognized as valid in Explorer or when using Get-ChildItem
Apr 01 12:12:19 <peschkaj>	It also causes Windows 10 to error and isn't recognized as valid in Explorer or when using Get-ChildItem
Apr 01 12:13:04 <peschkaj>	deep inside multirust, all paths for overrides go through a canonicalize_path function that calls fs::canonicalize
Apr 01 12:13:04 <peschkaj>	deep inside multirust, all paths for overrides go through a canonicalize_path function that calls fs::canonicalize
Apr 01 12:13:22 <Win64Bun>	I just tested putting a verbatim path in explorer on windows 10 and it worked fine
Apr 01 12:13:22 <Win64Bun>	I just tested putting a verbatim path in explorer on windows 10 and it worked fine
Apr 01 12:13:35 <peschkaj>	OK
Apr 01 12:13:35 <peschkaj>	OK
Apr 01 12:13:44 <Win64Bun>	however powershell seems to hate it
Apr 01 12:13:44 <Win64Bun>	however powershell seems to hate it
Apr 01 12:13:48 <peschkaj>	it do indeed
Apr 01 12:13:48 <peschkaj>	it do indeed
Apr 01 12:13:59 Apr 01 12:13:59 <peschkaj>	\\?\ causes Explorer to tell me "Oh no you didn't"
<peschkaj>	\\?\ causes Explorer to tell me "Oh no you didn't"
Apr 01 12:14:12 Apr 01 12:14:12 <peschkaj>	ah, it resolves with a full path
<peschkaj>	ah, it resolves with a full path
Apr 01 12:14:14 <peschkaj>	anbyway
Apr 01 12:14:14 <peschkaj>	anbyway
Apr 01 12:14:20 Apr 01 12:14:20 <peschkaj>	-b
<peschkaj>	-b
Apr 01 12:14:32 <peschkaj>	I'll dig into the docs instead.
Apr 01 12:14:32 <peschkaj>	I'll dig into the docs instead.
Apr 01 12:14:35 Apr 01 12:14:35 <Win64Bun>	That's because \\?\ on its own is the root of the NT object manager which isn't a filesystem
<Win64Bun>	That's because \\?\ on its own is the root of the NT object manager which isn't a filesystem
Apr 01 12:18:03 <peschkaj>	got it
Apr 01 12:18:03 <peschkaj>	got it
Apr 01 12:35:45 <blinky>	I have a function that writes a message to a `Write`, part of a codec. What is the prefered way to get a reference to this write? fn enc<W: Write + ?Sized>(w: &mut W), fn enc(w: &mut W) etc?
Apr 01 12:35:45 <blinky>	I have a function that writes a message to a `Write`, part of a codec. What is the prefered way to get a reference to this write? fn enc<W: Write + ?Sized>(w: &mut W), fn enc(w: &mut W) etc?
Apr 01 12:38:40 <mbrubeck>	blinky: Yeah, that first signature looks good.
Apr 01 12:38:40 <mbrubeck>	blinky: Yeah, that first signature looks good.
Apr 01 12:39:07 <mbrubeck>	(or the second one if it's already inside an impl with a <W: Write> parameter)
Apr 01 12:39:07 <mbrubeck>	(or the second one if it's already inside an impl with a <W: Write> parameter)
Apr 01 12:39:56 <blinky>	The second is much more readable to me and should work in all cases but feel non-idiomatic.
Apr 01 12:39:56 <blinky>	The second is much more readable to me and should work in all cases but feel non-idiomatic.
Apr 01 12:40:11 <bluss>	wait, what's the difference?
Apr 01 12:40:11 <bluss>	wait, what's the difference?
Apr 01 12:40:38 <Cardoe>	Is there one true way to return an iterator?
Apr 01 12:40:38 <Cardoe>	Is there one true way to return an iterator?
Apr 01 12:40:41 <blinky>	Very little other than I believe the first has more opportunities for inlining and optimizing.
Apr 01 12:40:41 <blinky>	Very little other than I believe the first has more opportunities for inlining and optimizing.
Apr 01 12:40:45 <Cardoe>	I see a lot of references to RFCs
Apr 01 12:40:45 <Cardoe>	I see a lot of references to RFCs
Apr 01 12:40:54 <mbrubeck>	Cardoe: not yet :/
Apr 01 12:40:54 <mbrubeck>	Cardoe: not yet :/
Apr 01 12:40:56 <bluss>	blinky: with the second I guess you mean  fn enc(w: &mut Write)
Apr 01 12:40:56 <bluss>	blinky: with the second I guess you mean  fn enc(w: &mut Write)
Apr 01 12:41:03 <Cardoe>	basically I'm performing a filter_map() and wanting to return that without doing the collect()
Apr 01 12:41:03 <Cardoe>	basically I'm performing a filter_map() and wanting to return that without doing the collect()
Apr 01 12:41:20 <blinky>	bluss: yes, sorry.
Apr 01 12:41:20 <blinky>	bluss: yes, sorry.
Apr 01 12:41:25 <mbrubeck>	Cardoe: There's Box<Iterator<Item=Foo>> which always works but can have a performance penalty (dynamic dispatch)
Apr 01 12:41:25 <mbrubeck>	Cardoe: There's Box<Iterator<Item=Foo>> which always works but can have a performance penalty (dynamic dispatch)
Apr 01 12:41:28 <Cardoe>	mbrubeck: https://github.com/rust-lang/rfcs/pull/1522 is what I seem to have found will be the answer?
Apr 01 12:41:28 <Cardoe>	mbrubeck: https://github.com/rust-lang/rfcs/pull/1522 is what I seem to have found will be the answer?
Apr 01 12:41:35 <bluss>	blinky: ok, the first one is a superset. The second one is ok if inlining is not critical
Apr 01 12:41:35 <bluss>	blinky: ok, the first one is a superset. The second one is ok if inlining is not critical
Apr 01 12:41:58 <blinky>	bluss: would a #[inline] make them more or less the same?
Apr 01 12:41:58 <blinky>	bluss: would a #[inline] make them more or less the same?
Apr 01 12:42:04 <bluss>	blinky: no
Apr 01 12:42:04 <bluss>	blinky: no
Apr 01 12:42:15 <mbrubeck>	Cardoe: Yes
Apr 01 12:42:15 <mbrubeck>	Cardoe: Yes
Apr 01 12:42:28 <Cardoe>	mbrubeck: thanks
Apr 01 12:42:28 <Cardoe>	mbrubeck: thanks
Apr 01 12:43:02 <blinky>	bluss: would you recommend one over the other in the case of a library function?
Apr 01 12:43:02 <blinky>	bluss: would you recommend one over the other in the case of a library function?
Apr 01 12:43:32 <LambdaComplex>	panicbit: Hey :D
Apr 01 12:43:32 <LambdaComplex>	panicbit: Hey :D
Apr 01 12:44:13 <bluss>	blinky: oh it's a tradeoff I guess. I think &mut Write is better for it's less generics (less to recompile)
Apr 01 12:44:13 <bluss>	blinky: oh it's a tradeoff I guess. I think &mut Write is better for it's less generics (less to recompile)
Apr 01 12:44:48 <bluss>	but in a situation where you need the compiler to recompile it for each specific W, then you use a type paramter
Apr 01 12:44:48 <bluss>	but in a situation where you need the compiler to recompile it for each specific W, then you use a type paramter
Apr 01 12:44:56 <klue>	In this example, why can't we do b.Foo::f();
Apr 01 12:44:56 <klue>	In this example, why can't we do b.Foo::f();
Apr 01 12:44:56 <klue>	https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20trait%20Foo%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20trait%20Bar%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20struct%20Baz%3B%0A%20%20%20%20%0A%20%20%20%20impl%20Foo%20for%20Baz%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%20%
Apr 01 12:44:56 <klue>	https://play.rust-lang.org/?code=fn%20main()%20%7B%0A%20%20%20%20trait%20Foo%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20trait%20Bar%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%3B%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20struct%20Baz%3B%0A%20%20%20%20%0A%20%20%20%20impl%20Foo%20for%20Baz%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%20%
Apr 01 12:45:02 <klue>	7B%20println!(%22Baz%E2%80%99s%20impl%20of%20Foo%22)%3B%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20impl%20Bar%20for%20Baz%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%20%7B%20println!(%22Baz%E2%80%99s%20impl%20of%20Bar%22)%3B%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20let%20b%20%3D%20Baz%3B%0A%7D
Apr 01 12:45:02 <klue>	7B%20println!(%22Baz%E2%80%99s%20impl%20of%20Foo%22)%3B%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20impl%20Bar%20for%20Baz%20%7B%0A%20%20%20%20%20%20%20%20fn%20f(%26self)%20%7B%20println!(%22Baz%E2%80%99s%20impl%20of%20Bar%22)%3B%20%7D%0A%20%20%20%20%7D%0A%20%20%20%20%0A%20%20%20%20let%20b%20%3D%20Baz%3B%0A%7D
Apr 01 12:45:06 <LambdaComplex>	rip
Apr 01 12:45:06 <LambdaComplex>	rip
Apr 01 12:45:20 <LambdaComplex>	klue: y'know there's a button to shorten the link
Apr 01 12:45:20 <LambdaComplex>	klue: y'know there's a button to shorten the link
Apr 01 12:46:00 <klue>	LambdaComplex: I didn't know actually hehe. http://is.gd/qkQDAa
Apr 01 12:46:00 <klue>	LambdaComplex: I didn't know actually hehe. http://is.gd/qkQDAa
Apr 01 12:46:02 <blinky>	bluss: for my own use, I expect to be operating on a Box<Write> so perhaps that suggests &mut Write is fine.
Apr 01 12:46:02 <blinky>	bluss: for my own use, I expect to be operating on a Box<Write> so perhaps that suggests &mut Write is fine.
Apr 01 12:46:14 <LambdaComplex>	panicbit: So I did fix one of the problems with that function, but not the lifetime problem :(
Apr 01 12:46:14 <LambdaComplex>	panicbit: So I did fix one of the problems with that function, but not the lifetime problem :(
Apr 01 12:46:27 <bluss>	blinky: yep
Apr 01 12:46:27 <bluss>	blinky: yep
Apr 01 12:46:34 <blinky>	bluss: thanks for you time.
Apr 01 12:46:34 <blinky>	bluss: thanks for you time.
Apr 01 12:46:58 <panicbit>	LambdaComplex: I'll take a look at it as soon as I'm home :)
Apr 01 12:46:58 <panicbit>	LambdaComplex: I'll take a look at it as soon as I'm home :)
Apr 01 12:46:59 <bluss>	blinky: since the first alternative accepts the second's argument as just one case, you can make it more generic later
Apr 01 12:46:59 <bluss>	blinky: since the first alternative accepts the second's argument as just one case, you can make it more generic later
Apr 01 12:48:43 Apr 01 12:48:43 <mbrubeck>	klue: The syntax is `Foo::f(&b)`
<mbrubeck>	klue: The syntax is `Foo::f(&b)`
Apr 01 12:50:14 <klue>	mbrubeck: Is there any reason why not for consistency?
Apr 01 12:50:14 <klue>	mbrubeck: Is there any reason why not for consistency?
Apr 01 12:52:40 <mbrubeck>	klue: You can think of `expr.method()` as sugar for `method(expr)`.  You can always call any method or function as `path::to::method(args)` whether its first argument is `self` or not.  So this is the version that's consistent across all functions, while `.method()` syntax is more of a special case.
Apr 01 12:52:40 <mbrubeck>	klue: You can think of `expr.method()` as sugar for `method(expr)`.  You can always call any method or function as `path::to::method(args)` whether its first argument is `self` or not.  So this is the version that's consistent across all functions, while `.method()` syntax is more of a special case.
Apr 01 12:53:04 <musicmatze>	Am I right when I say that with serde_json, I can only derive Serialize and Deserialize when I use a nightly compiler and enable some compiler features? 
Apr 01 12:53:04 <musicmatze>	Am I right when I say that with serde_json, I can only derive Serialize and Deserialize when I use a nightly compiler and enable some compiler features? 
Apr 01 12:53:08 <klue>	mbrubeck: Ah gotcha. That makes sense
Apr 01 12:53:08 <klue>	mbrubeck: Ah gotcha. That makes sense
Apr 01 12:53:11 <mbrubeck>	klue: As to why `expr.Trait::method()` isn't implemented, I'm not sure if it's just because it's redundant, or if it would also complicate parsing.
Apr 01 12:53:11 <mbrubeck>	klue: As to why `expr.Trait::method()` isn't implemented, I'm not sure if it's just because it's redundant, or if it would also complicate parsing.
Apr 01 12:53:20 <musicmatze>	And will get these functionalities stable in near future or not?
Apr 01 12:53:20 <musicmatze>	And will get these functionalities stable in near future or not?
Apr 01 12:54:01 Apr 01 12:54:01 <mbrubeck>	musicmatze: You can also do it using code generation with syntex on stable Rust: https://github.com/serde-rs/serde#using-serde-with-stable-rust-syntex-and-serde_codegen
<mbrubeck>	musicmatze: You can also do it using code generation with syntex on stable Rust: https://github.com/serde-rs/serde#using-serde-with-stable-rust-syntex-and-serde_codegen
Apr 01 12:54:07 <LambdaComplex>	panicbit: Well, the one thing I did was use let statements for each different function. Since .next() takes a &mut self, I had to make the screen iterator mutable
Apr 01 12:54:07 <LambdaComplex>	panicbit: Well, the one thing I did was use let statements for each different function. Since .next() takes a &mut self, I had to make the screen iterator mutable
Apr 01 12:54:14 <LambdaComplex>	panicbit: So that did fix one problem!
Apr 01 12:54:14 <LambdaComplex>	panicbit: So that did fix one problem!
Apr 01 12:54:39 Apr 01 12:54:39 <mbrubeck>	musicmatze: There are plans for stable procedural macros, which I *think* will cover cases like serde, and with luck they will be implemented and stabilized this year.
<mbrubeck>	musicmatze: There are plans for stable procedural macros, which I *think* will cover cases like serde, and with luck they will be implemented and stabilized this year.
Apr 01 12:57:09 <eh2406>	so I am new to profiling binarys.
Apr 01 12:57:09 <eh2406>	so I am new to profiling binarys.
Apr 01 12:57:16 <eh2406>	and I am working on windows.
Apr 01 12:57:16 <eh2406>	and I am working on windows.
Apr 01 12:57:30 <eh2406>	I have an example ">cargo run --example bildings --release" that runs for ~20min
Apr 01 12:57:30 <eh2406>	I have an example ">cargo run --example bildings --release" that runs for ~20min
Apr 01 12:57:58 <eh2406>	so I added "[profile.release] debug = true" to my cargo.toml and analyze with Very Sleepy CS
Apr 01 12:57:58 <eh2406>	so I added "[profile.release] debug = true" to my cargo.toml and analyze with Very Sleepy CS
Apr 01 12:58:09 <eh2406>	But the name field is "[hex code]" and the source field is "unknown". what am I doing wrong?
Apr 01 12:58:09 <eh2406>	But the name field is "[hex code]" and the source field is "unknown". what am I doing wrong?
Apr 01 13:07:05 <musicmatze>	mbrubeck: thanks for your answers! :-)
Apr 01 13:07:05 <musicmatze>	mbrubeck: thanks for your answers! :-)
Apr 01 13:23:56 Apr 01 13:23:56 <eh2406>	Whare would be better for me to ask?
<eh2406>	Whare would be better for me to ask?
Apr 01 13:24:15 <panicbit>	LambdaComplex: Did you push the up-to-date code to your repo already? If not, please do so
Apr 01 13:24:15 <panicbit>	LambdaComplex: Did you push the up-to-date code to your repo already? If not, please do so
Apr 01 13:24:30 <mbrubeck>	eh2406: You could try #rust or #winapi
Apr 01 13:24:30 <mbrubeck>	eh2406: You could try #rust or #winapi
Apr 01 13:25:04 <mbrubeck>	eh2406: Also https://users.rust-lang.org/ in case the people with windows profiling experience just aren't on IRC right now.
Apr 01 13:25:04 <mbrubeck>	eh2406: Also https://users.rust-lang.org/ in case the people with windows profiling experience just aren't on IRC right now.
Apr 01 13:25:24 <eh2406>	thanks!
Apr 01 13:25:24 <eh2406>	thanks!
Apr 01 13:28:29 <LambdaComplex>	panicbit: Done
Apr 01 13:28:29 <LambdaComplex>	panicbit: Done
Apr 01 13:55:32 <panicbit>	LambdaComplex: Alright, so the problem is, that the iterator needs to borrow from the setup
Apr 01 13:55:32 <panicbit>	LambdaComplex: Alright, so the problem is, that the iterator needs to borrow from the setup
Apr 01 13:56:15 <panicbit>	LambdaComplex: And the Screens (actually screen pointers) borrow from the iterator
Apr 01 13:56:15 <panicbit>	LambdaComplex: And the Screens (actually screen pointers) borrow from the iterator
Apr 01 13:56:32 <panicbit>	XCB owns that piece of memory
Apr 01 13:56:32 <panicbit>	XCB owns that piece of memory
Apr 01 13:56:40 <panicbit>	So you don't get to keep it ;)
Apr 01 13:56:40 <panicbit>	So you don't get to keep it ;)
Apr 01 13:57:00 <panicbit>	LambdaComplex: The thing is: This could be solved if Screen would be Copy/Clone
Apr 01 13:57:00 <panicbit>	LambdaComplex: The thing is: This could be solved if Screen would be Copy/Clone
Apr 01 13:57:12 <panicbit>	LambdaComplex: Because then you could just make the personal copy that you need
Apr 01 13:57:12 <panicbit>	LambdaComplex: Because then you could just make the personal copy that you need
Apr 01 13:57:20 <panicbit>	Screen itself doesn't contain any pointers
Apr 01 13:57:20 <panicbit>	Screen itself doesn't contain any pointers
Apr 01 13:57:28 <panicbit>	So it could implement Copy/Clone
Apr 01 13:57:28 <panicbit>	So it could implement Copy/Clone
Apr 01 13:57:50 Apr 01 13:57:50 <panicbit>	LambdaComplex: File a ticket ;)
<panicbit>	LambdaComplex: File a ticket ;)
Apr 01 13:58:07 <LambdaComplex>	panicbit: Since you know what you're talking about, why don't you do it? :P
Apr 01 13:58:07 <LambdaComplex>	panicbit: Since you know what you're talking about, why don't you do it? :P
Apr 01 13:58:15 <panicbit>	LambdaComplex: Sure
Apr 01 13:58:15 <panicbit>	LambdaComplex: Sure
Apr 01 13:58:45 <LambdaComplex>	panicbit: Besides, he may be getting sick of me. I think I've managed a ticket per day since I've started this >.>
Apr 01 13:58:45 <LambdaComplex>	panicbit: Besides, he may be getting sick of me. I think I've managed a ticket per day since I've started this >.>
Apr 01 13:58:52 Apr 01 13:58:52 <panicbit>	;D
<panicbit>	;D
Apr 01 13:59:07 <panicbit>	LambdaComplex: It doesn't matter who files them, doesn't it?
Apr 01 13:59:07 <panicbit>	LambdaComplex: It doesn't matter who files them, doesn't it?
Apr 01 13:59:09 <panicbit>	;D
Apr 01 13:59:09 <panicbit>	;D
Apr 01 13:59:40 <LambdaComplex>	panicbit: True, true. But you know more about this one so I'm making you do it
Apr 01 13:59:40 <LambdaComplex>	panicbit: True, true. But you know more about this one so I'm making you do it
Apr 01 13:59:55 <panicbit>	I may have another workaround solution
Apr 01 13:59:55 <panicbit>	I may have another workaround solution
Apr 01 14:00:02 <panicbit>	But eh, it's not pretty
Apr 01 14:00:02 <panicbit>	But eh, it's not pretty
Apr 01 14:01:05 <LambdaComplex>	Eh, lemme see
Apr 01 14:01:05 <LambdaComplex>	Eh, lemme see
Apr 01 14:01:06 <blashyrk>	hello guys! is there such a concept as collecting the "rest of the iterator"?
Apr 01 14:01:06 <blashyrk>	hello guys! is there such a concept as collecting the "rest of the iterator"?
Apr 01 14:01:43 <steveklabnik>	i can think of a few things that would fit that bill. what are you trying to do?
Apr 01 14:01:43 <steveklabnik>	i can think of a few things that would fit that bill. what are you trying to do?
Apr 01 14:01:49 <blashyrk>	I'm making a simple tokenizer and if I go char by char using some_string.chars() and if I encounter a comment ';' char I want to collect the rest of the iterator into a string
Apr 01 14:01:49 <blashyrk>	I'm making a simple tokenizer and if I go char by char using some_string.chars() and if I encounter a comment ';' char I want to collect the rest of the iterator into a string
Apr 01 14:02:24 <steveklabnik>	one way to do it would be to work with the iterator a bit more manually than for
Apr 01 14:02:24 <steveklabnik>	one way to do it would be to work with the iterator a bit more manually than for
Apr 01 14:02:24 <panicbit>	LambdaComplex: Hm, but another problem is that StructPtr doesn't let you get the value easily
Apr 01 14:02:24 <panicbit>	LambdaComplex: Hm, but another problem is that StructPtr doesn't let you get the value easily
Apr 01 14:02:43 <steveklabnik>	use a while loop, call next() yourself, and then when you see the ;, call collect on it instead of next
Apr 01 14:02:43 <steveklabnik>	use a while loop, call next() yourself, and then when you see the ;, call collect on it instead of next
Apr 01 14:04:18 <LambdaComplex>	panicbit: Is this another instance of my code being fine and the binding just being slightly broken?
Apr 01 14:04:18 <LambdaComplex>	panicbit: Is this another instance of my code being fine and the binding just being slightly broken?
Apr 01 14:04:18 <blashyrk>	thanks, steve!
Apr 01 14:04:18 <blashyrk>	thanks, steve!
Apr 01 14:04:36 <panicbit>	LambdaComplex: My guess would be yes
Apr 01 14:04:36 <panicbit>	LambdaComplex: My guess would be yes
Apr 01 14:04:46 <panicbit>	Wait a second though
Apr 01 14:04:46 <panicbit>	Wait a second though
Apr 01 14:04:59 Apr 01 14:04:59 *	LambdaComplex waits
*	LambdaComplex waits
Apr 01 14:05:22 <panicbit>	LambdaComplex: NVM, the Screen has accessor methods
Apr 01 14:05:22 <panicbit>	LambdaComplex: NVM, the Screen has accessor methods
Apr 01 14:05:24 <panicbit>	So that one is fine
Apr 01 14:05:24 <panicbit>	So that one is fine
Apr 01 14:05:39 <LambdaComplex>	panicbit: I give it a week before we both fork the repo and start submitting PRs ourselves
Apr 01 14:05:39 <LambdaComplex>	panicbit: I give it a week before we both fork the repo and start submitting PRs ourselves
Apr 01 14:05:46 <panicbit>	:P
Apr 01 14:05:46 <panicbit>	:P
Apr 01 14:06:01 <steveklabnik>	blashyrk: np. you might want to eventually look into a parsing framework like nom or ... i forget the other one. but writing it yourself can be fun too :)
Apr 01 14:06:01 <steveklabnik>	blashyrk: np. you might want to eventually look into a parsing framework like nom or ... i forget the other one. but writing it yourself can be fun too :)
Apr 01 14:06:25 Apr 01 14:06:25 <blashyrk>	though that seems a bit, verbose, perhaps? So I have to call .next() each time, check if it's Some or None manually each time and then proceed "parsing" it, right?
<blashyrk>	though that seems a bit, verbose, perhaps? So I have to call .next() each time, check if it's Some or None manually each time and then proceed "parsing" it, right?
Apr 01 14:06:36 <steveklabnik>	if let can help a bit, i'd think
Apr 01 14:06:36 <steveklabnik>	if let can help a bit, i'd think
Apr 01 14:06:37 <panicbit>	LambdaComplex: Submitting a PR is what I try to default to
Apr 01 14:06:37 <panicbit>	LambdaComplex: Submitting a PR is what I try to default to
Apr 01 14:07:40 <blashyrk>	ah didn't know Rust had an "if let", great! that should help out with the "bulky" code a lot :)
Apr 01 14:07:40 <blashyrk>	ah didn't know Rust had an "if let", great! that should help out with the "bulky" code a lot :)
Apr 01 14:08:05 <blashyrk>	also thanks for recommending nom, but since I'm trying to learn the language I'll stick to writing my clunky parser/tokenizer myself ^_^
Apr 01 14:08:05 <blashyrk>	also thanks for recommending nom, but since I'm trying to learn the language I'll stick to writing my clunky parser/tokenizer myself ^_^
Apr 01 14:08:49 <steveklabnik>	:)
Apr 01 14:08:49 <steveklabnik>	:)
Apr 01 14:09:14 <panicbit>	LambdaComplex: Hm, no I guess the API is fine
Apr 01 14:09:14 <panicbit>	LambdaComplex: Hm, no I guess the API is fine
Apr 01 14:09:18 <panicbit>	LambdaComplex: It is awkward
Apr 01 14:09:18 <panicbit>	LambdaComplex: It is awkward
Apr 01 14:09:24 <panicbit>	But I guess there's no way around it
Apr 01 14:09:24 <panicbit>	But I guess there's no way around it
Apr 01 14:09:36 <panicbit>	I'll try it with a workaround
Apr 01 14:09:36 <panicbit>	I'll try it with a workaround
Apr 01 14:09:37 <LambdaComplex>	panicbit: So it doesn't need Copy/Clone?
Apr 01 14:09:37 <LambdaComplex>	panicbit: So it doesn't need Copy/Clone?
Apr 01 14:09:47 <panicbit>	It can't have that
Apr 01 14:09:47 <panicbit>	It can't have that
Apr 01 14:09:53 <panicbit>	At least not how the code is structured
Apr 01 14:09:53 <panicbit>	At least not how the code is structured
Apr 01 14:10:02 Apr 01 14:10:02 <panicbit>	Well, maybe it could
<panicbit>	Well, maybe it could
Apr 01 14:10:10 <panicbit>	It would need to be Clone for Screen
Apr 01 14:10:10 <panicbit>	It would need to be Clone for Screen
Apr 01 14:10:44 Apr 01 14:10:44 <panicbit>	But that would not work out :/
<panicbit>	But that would not work out :/
Apr 01 14:11:12 <panicbit>	Because Screen is defined as `this is owned by XCB, you can not own this`
Apr 01 14:11:12 <panicbit>	Because Screen is defined as `this is owned by XCB, you can not own this`
Apr 01 14:11:46 <panicbit>	In theory you could create clone() method to produce a 'static Screen that is owned by Rust
Apr 01 14:11:46 <panicbit>	In theory you could create clone() method to produce a 'static Screen that is owned by Rust
Apr 01 14:11:51 <panicbit>	But it would never be freed
Apr 01 14:11:51 <panicbit>	But it would never be freed
Apr 01 14:12:08 <panicbit>	So you'd need to also have a manual free method..
Apr 01 14:12:08 <panicbit>	So you'd need to also have a manual free method..
Apr 01 14:12:22 <panicbit>	Which could make you accidentally free the Screens owned by XCB...
Apr 01 14:12:22 <panicbit>	Which could make you accidentally free the Screens owned by XCB...
Apr 01 14:12:40 <panicbit>	Life is complicated :)
Apr 01 14:12:40 <panicbit>	Life is complicated :)
Apr 01 14:12:50 <panicbit>	Anyway, I'll try my workaround
Apr 01 14:12:50 <panicbit>	Anyway, I'll try my workaround
Apr 01 14:21:42 <panicbit>	LambdaComplex: Aw damn, I didn't add the struct that I need into my crate yet :/
Apr 01 14:21:42 <panicbit>	LambdaComplex: Aw damn, I didn't add the struct that I need into my crate yet :/
Apr 01 14:22:21 <LambdaComplex>	panicbit: Which struct?
Apr 01 14:22:21 <LambdaComplex>	panicbit: Which struct?
Apr 01 14:22:42 <panicbit>	LambdaComplex: an "OwningMutableRef"
Apr 01 14:22:42 <panicbit>	LambdaComplex: an "OwningMutableRef"
Apr 01 14:23:10 Apr 01 14:23:10 <panicbit>	And it's probably not sound :/
<panicbit>	And it's probably not sound :/
Apr 01 14:23:19 <panicbit>	But it would do the job here
Apr 01 14:23:19 <panicbit>	But it would do the job here
Apr 01 14:25:08 *	LambdaComplex is horribly confused as usual :D
Apr 01 14:25:08 *	LambdaComplex is horribly confused as usual :D
Apr 01 14:26:28 <panicbit>	LambdaComplex: The idea is to pass the setup, the iterator and the screen together as one return value
Apr 01 14:26:28 <panicbit>	LambdaComplex: The idea is to pass the setup, the iterator and the screen together as one return value
Apr 01 14:26:46 Apr 01 14:26:46 <panicbit>	LambdaComplex: But rust's current lifetime system makes that very hard to express
<panicbit>	LambdaComplex: But rust's current lifetime system makes that very hard to express
Apr 01 14:27:20 <panicbit>	Especially when the borrows are not refs
Apr 01 14:27:20 <panicbit>	Especially when the borrows are not refs
Apr 01 14:27:24 <panicbit>	Like Screen
Apr 01 14:27:24 <panicbit>	Like Screen
Apr 01 14:28:03 <LambdaComplex>	this is what i get for not just learning c like everyone else
Apr 01 14:28:03 <LambdaComplex>	this is what i get for not just learning c like everyone else
Apr 01 14:29:27 <steveklabnik>	same problems, different issues ;)
Apr 01 14:29:27 <steveklabnik>	same problems, different issues ;)
Apr 01 14:29:40 <steveklabnik>	"why doesn't this compile?" -> "why does this randomly crash"
Apr 01 14:29:40 <steveklabnik>	"why doesn't this compile?" -> "why does this randomly crash"
Apr 01 14:32:14 <panicbit>	LambdaComplex: I know C a bit, but I can't deal with that ecosystem
Apr 01 14:32:14 <panicbit>	LambdaComplex: I know C a bit, but I can't deal with that ecosystem
Apr 01 14:32:24 <panicbit>	And that language :/
Apr 01 14:32:24 <panicbit>	And that language :/
Apr 01 14:32:49 <peschkaj>	On the bright side C has the best type system ever. Everything eventually coerces to a segfault.
Apr 01 14:32:49 <peschkaj>	On the bright side C has the best type system ever. Everything eventually coerces to a segfault.
Apr 01 14:34:00 <peschkaj>	I'm in the same boat as you, LambdaComplex - I only learned enough C to run away.
Apr 01 14:34:00 <peschkaj>	I'm in the same boat as you, LambdaComplex - I only learned enough C to run away.
Apr 01 14:34:10 <panicbit>	LambdaComplex: Alright, "level 1" works, I can return the screen iterator from the function (well, it compiles at least ;D)
Apr 01 14:34:10 <panicbit>	LambdaComplex: Alright, "level 1" works, I can return the screen iterator from the function (well, it compiles at least ;D)
Apr 01 14:34:40 <panicbit>	Let's see if I can go deeper
Apr 01 14:34:40 <panicbit>	Let's see if I can go deeper
Apr 01 14:35:19 <panicbit>	Oh dear... that is bad
Apr 01 14:35:19 <panicbit>	Oh dear... that is bad
Apr 01 14:35:22 Apr 01 14:35:22 <panicbit>	very bad
<panicbit>	very bad
Apr 01 14:38:19 <panicbit>	Oh no, it's actually fine
Apr 01 14:38:19 <panicbit>	Oh no, it's actually fine
Apr 01 14:38:24 <panicbit>	*phew*
Apr 01 14:38:24 <panicbit>	*phew*
Apr 01 14:39:15 <panicbit>	LambdaComplex: So apparently the chain of values that gets created from the setup all depend on the setup
Apr 01 14:39:15 <panicbit>	LambdaComplex: So apparently the chain of values that gets created from the setup all depend on the setup
Apr 01 14:39:26 <panicbit>	Kinda weird
Apr 01 14:39:26 <panicbit>	Kinda weird
Apr 01 14:39:54 <panicbit>	I wonder if there might be an issue with the abstraction...
Apr 01 14:39:54 <panicbit>	I wonder if there might be an issue with the abstraction...
Apr 01 14:40:07 <panicbit>	But anyway, that shouldn't be our concern unless we're crashing :P
Apr 01 14:40:07 <panicbit>	But anyway, that shouldn't be our concern unless we're crashing :P
Apr 01 14:40:26 <nice>	has ordering an importance when using structures ? can we sort the items in a way during declaration, and another during calls ?
Apr 01 14:40:26 <nice>	has ordering an importance when using structures ? can we sort the items in a way during declaration, and another during calls ?
Apr 01 14:41:21 <LambdaComplex>	panicbit: What do you mean exactly?
Apr 01 14:41:21 <LambdaComplex>	panicbit: What do you mean exactly?
Apr 01 14:41:39 <panicbit>	LambdaComplex: I wonder when exactly the Screens will be destroyed by XCB
Apr 01 14:41:39 <panicbit>	LambdaComplex: I wonder when exactly the Screens will be destroyed by XCB
Apr 01 14:41:56 <steveklabnik>	nice: the order shouldn't matter
Apr 01 14:41:56 <steveklabnik>	nice: the order shouldn't matter
Apr 01 14:41:58 <panicbit>	LambdaComplex: As it is now, that will happen as soon as the setup get's destroyed
Apr 01 14:41:58 <panicbit>	LambdaComplex: As it is now, that will happen as soon as the setup get's destroyed
Apr 01 14:42:16 <panicbit>	LambdaComplex: Hm, I may be overthinking things
Apr 01 14:42:16 <panicbit>	LambdaComplex: Hm, I may be overthinking things
Apr 01 14:42:22 <nice>	steveklabnik, ty! trying to figure out a "missing field" error
Apr 01 14:42:22 <nice>	steveklabnik, ty! trying to figure out a "missing field" error
Apr 01 14:42:24 <panicbit>	LambdaComplex: Anyway, I got it working
Apr 01 14:42:24 <panicbit>	LambdaComplex: Anyway, I got it working
Apr 01 14:42:31 <panicbit>	LambdaComplex: I have no code to test the method though
Apr 01 14:42:31 <panicbit>	LambdaComplex: I have no code to test the method though
Apr 01 14:42:42 <panicbit>	LambdaComplex: I'll PR the code in aminute
Apr 01 14:42:42 <panicbit>	LambdaComplex: I'll PR the code in aminute
Apr 01 14:43:21 <LambdaComplex>	panicbit: Could you use mine?
Apr 01 14:43:21 <LambdaComplex>	panicbit: Could you use mine?
Apr 01 14:43:41 <panicbit>	LambdaComplex: I didn't see where you used get_screen
Apr 01 14:43:41 <panicbit>	LambdaComplex: I didn't see where you used get_screen
Apr 01 14:43:57 <steveklabnik>	nice: hm, well, did you declare all of the fields?
Apr 01 14:43:57 <steveklabnik>	nice: hm, well, did you declare all of the fields?
Apr 01 14:44:25 <LambdaComplex>	panicbit: Well I haven't yet since I couldn't even get get_screen to compile :P
Apr 01 14:44:25 <LambdaComplex>	panicbit: Well I haven't yet since I couldn't even get get_screen to compile :P
Apr 01 14:44:48 <nice>	steveklabnik, yes, but then they are serialized - I wonder if it could be where ordering matters
Apr 01 14:44:48 <nice>	steveklabnik, yes, but then they are serialized - I wonder if it could be where ordering matters
Apr 01 14:46:21 <blashyrk>	hello, again! why does this line never fail? no matter if the file path provided exists or not   let file = try!{File::open(file_path).map_err(AsmError::Io)};
Apr 01 14:46:21 <blashyrk>	hello, again! why does this line never fail? no matter if the file path provided exists or not   let file = try!{File::open(file_path).map_err(AsmError::Io)};
Apr 01 14:47:02 <steveklabnik>	blashyrk: it should fail if the path doesn't exist :/
Apr 01 14:47:02 <steveklabnik>	blashyrk: it should fail if the path doesn't exist :/
Apr 01 14:47:24 <steveklabnik>	nice: struct ordering is considered undefined, so it shouldnt. your serialization library should handle it
Apr 01 14:47:24 <steveklabnik>	nice: struct ordering is considered undefined, so it shouldnt. your serialization library should handle it
Apr 01 14:47:37 <nice>	okay
Apr 01 14:47:37 <nice>	okay
Apr 01 14:47:43 <blashyrk>	hm... let me make a quick pastebin of all the relevant code
Apr 01 14:47:43 <blashyrk>	hm... let me make a quick pastebin of all the relevant code
Apr 01 14:49:10 <blashyrk>	http://pastebin.com/rbdeGHW9
Apr 01 14:49:10 <blashyrk>	http://pastebin.com/rbdeGHW9
Apr 01 14:49:17 <panicbit>	LambdaComplex: PR'ed. I'll put the struct into my monster crate now, so you can remove it from your code later if you want
Apr 01 14:49:17 <panicbit>	LambdaComplex: PR'ed. I'll put the struct into my monster crate now, so you can remove it from your code later if you want
Apr 01 14:51:56 <steveklabnik>	blashyrk: yeah, that's odd. the docs for file::Open state that it should fail if the file doesn't exist.
Apr 01 14:51:56 <steveklabnik>	blashyrk: yeah, that's odd. the docs for file::Open state that it should fail if the file doesn't exist.
Apr 01 14:52:10 <steveklabnik>	playbot: use std::fs::File; File::open("doesn't exist.txt")
Apr 01 14:52:10 <steveklabnik>	playbot: use std::fs::File; File::open("doesn't exist.txt")
Apr 01 14:52:11 Apr 01 14:52:11 -playbot/#rust-beginners-	Err(Error { repr: Os { code: 2, message: "No such file or directory" } })
-playbot/#rust-beginners-	Err(Error { repr: Os { code: 2, message: "No such file or directory" } })
Apr 01 14:52:15 <steveklabnik>	^ :/
Apr 01 14:52:15 <steveklabnik>	^ :/
Apr 01 14:53:03 *	panicbit wants to be able to say `for <'a> Fn(T) -> (R + 'a)`
Apr 01 14:53:03 *	panicbit wants to be able to say `for <'a> Fn(T) -> (R + 'a)`
Apr 01 14:53:07 Apr 01 14:53:07 <blashyrk>	huh, weird
<blashyrk>	huh, weird
Apr 01 14:53:13 <blashyrk>	I'm using stable 1.7 (rustc 1.7.0 (a5d1e7a59 2016-02-29)
Apr 01 14:53:13 <blashyrk>	I'm using stable 1.7 (rustc 1.7.0 (a5d1e7a59 2016-02-29)
Apr 01 14:53:51 <REASY>	Hello, guys. I'm very new in rust. I'm implementing B+ tree. Here is the scratch of code: http://is.gd/ZVYaoz
Apr 01 14:53:51 <REASY>	Hello, guys. I'm very new in rust. I'm implementing B+ tree. Here is the scratch of code: http://is.gd/ZVYaoz
Apr 01 14:54:15 <REASY>	I'm getting the error ":44:19: 44:33 error: the parameter type `V` may not live long enough"
Apr 01 14:54:15 <REASY>	I'm getting the error ":44:19: 44:33 error: the parameter type `V` may not live long enough"
Apr 01 14:54:30 Apr 01 14:54:30 <REASY>	I'm confused
<REASY>	I'm confused
Apr 01 14:54:51 <REASY>	Why should I use explicit lifetime?
Apr 01 14:54:51 <REASY>	Why should I use explicit lifetime?
Apr 01 14:55:11 <blashyrk>	oh never mind, I'm just being stupid, args[0] is the path of the executable itself
Apr 01 14:55:11 <blashyrk>	oh never mind, I'm just being stupid, args[0] is the path of the executable itself
Apr 01 14:55:18 Apr 01 14:55:18 <steveklabnik>	blashyrk: oh, right, hahah!
<steveklabnik>	blashyrk: oh, right, hahah!
Apr 01 14:55:22 <steveklabnik>	i missed it too
Apr 01 14:55:22 <steveklabnik>	i missed it too
Apr 01 14:56:08 <steveklabnik>	REASY: it's becasuse you're using trait objects
Apr 01 14:56:08 <steveklabnik>	REASY: it's becasuse you're using trait objects
Apr 01 14:56:22 <steveklabnik>	so by default, rust will assume that the trait object doesn't contain any refernces shorter than 'static
Apr 01 14:56:22 <steveklabnik>	so by default, rust will assume that the trait object doesn't contain any refernces shorter than 'static
Apr 01 14:56:43 <steveklabnik>	so one way to fix it
Apr 01 14:56:43 <steveklabnik>	so one way to fix it
Apr 01 14:56:51 Apr 01 14:56:51 <steveklabnik>	http://is.gd/ma6dKJ
<steveklabnik>	http://is.gd/ma6dKJ
Apr 01 14:56:51 <REASY>	Use 'static ?
Apr 01 14:56:51 <REASY>	Use 'static ?
Apr 01 14:56:53 <steveklabnik>	see line 36
Apr 01 14:56:53 <steveklabnik>	see line 36
Apr 01 14:57:29 <REASY>	Yes, thanks. I can see 'static
Apr 01 14:57:29 <REASY>	Yes, thanks. I can see 'static
Apr 01 14:57:35 <REASY>	But, is it correct way ?
Apr 01 14:57:35 <REASY>	But, is it correct way ?
Apr 01 14:57:40 <REASY>	But, is it correct way ?
Apr 01 14:57:40 <REASY>	But, is it correct way ?
Apr 01 14:58:15 <steveklabnik>	it depends. based on your current code, sure. but if you intend to have types that contain references, rather than own values, then you'd need to change things
Apr 01 14:58:15 <steveklabnik>	it depends. based on your current code, sure. but if you intend to have types that contain references, rather than own values, then you'd need to change things
Apr 01 14:59:09 <mbrubeck>	If you don't want to restrict it to 'static, use http://is.gd/UKzWMw
Apr 01 14:59:09 <mbrubeck>	If you don't want to restrict it to 'static, use http://is.gd/UKzWMw
Apr 01 14:59:11 <mbrubeck>	REASY: ^
Apr 01 14:59:11 <mbrubeck>	REASY: ^
Apr 01 14:59:53 <REASY>	mbrubeck, thanks you too :)
Apr 01 14:59:53 <REASY>	mbrubeck, thanks you too :)
Apr 01 15:00:02 <steveklabnik>	yup :)
Apr 01 15:00:02 <steveklabnik>	yup :)
Apr 01 15:00:41 <REASY>	Guys, the next question is I'm have to use temporary field to not get compilation error
Apr 01 15:00:41 <REASY>	Guys, the next question is I'm have to use temporary field to not get compilation error
Apr 01 15:00:58 <REASY>	if I comment line 38, I'll get compilation error
Apr 01 15:00:58 <REASY>	if I comment line 38, I'll get compilation error
Apr 01 15:00:59 Apr 01 15:00:59 <REASY>	http://is.gd/FVjnl7
<REASY>	http://is.gd/FVjnl7
Apr 01 15:02:00 <REASY>	Is there any other way to deal with it? :)
Apr 01 15:02:00 <REASY>	Is there any other way to deal with it? :)
Apr 01 15:03:38 <mbrubeck>	REASY: You can use http://doc.rust-lang.org/std/marker/struct.PhantomData.html
Apr 01 15:03:38 <mbrubeck>	REASY: You can use http://doc.rust-lang.org/std/marker/struct.PhantomData.html
Apr 01 15:04:17 <mbrubeck>	REASY: Though you might want to add <K,V> parameters to the AbstractNode trait
Apr 01 15:04:17 <mbrubeck>	REASY: Though you might want to add <K,V> parameters to the AbstractNode trait
Apr 01 15:04:42 <REASY>	But I can't box trait with generic, no ?
Apr 01 15:04:42 <REASY>	But I can't box trait with generic, no ?
Apr 01 15:06:16 <REASY>	I'm about Object Safety
Apr 01 15:06:27 <LambdaComplex>	panicbit: So is there some way to actually change the XCB binding to make this work better?
Apr 01 15:24:47 *	Disconnected (Network is unreachable)
**** ENDING LOGGING AT Fri Apr  1 15:24:47 2016

Apr 01 15:24:54 *	Disconnected (Network is unreachable)
**** ENDING LOGGING AT Fri Apr  1 15:24:54 2016

**** BEGIN LOGGING AT Fri Apr  1 15:24:59 2016

Apr 01 15:24:59 *	Now talking on #rust-beginners
Apr 01 15:24:59 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 01 15:24:59 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
**** BEGIN LOGGING AT Fri Apr  1 15:25:06 2016

Apr 01 15:25:06 *	Now talking on #rust-beginners
Apr 01 15:25:06 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 01 15:25:06 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 01 15:25:08 <Xion>	format! produces a String, that's hardly something you can use at compile time.
Apr 01 15:25:08 <Xion>	format! produces a String, that's hardly something you can use at compile time.
Apr 01 15:25:19 <panicbit>	Xion: I see, that's what you meant
Apr 01 15:25:19 <panicbit>	Xion: I see, that's what you meant
Apr 01 15:25:25 <panicbit>	Xion: I think concat! does it
Apr 01 15:25:25 <panicbit>	Xion: I think concat! does it
Apr 01 15:25:27 <Xion>	What *else* could I mean? :P
Apr 01 15:25:27 <Xion>	What *else* could I mean? :P
Apr 01 15:25:43 <panicbit>	Xion: Well, format! being executed at compile-time :D
Apr 01 15:25:43 <panicbit>	Xion: Well, format! being executed at compile-time :D
Apr 01 15:26:04 <Xion>	...yes! That's what I meant.
Apr 01 15:26:04 <Xion>	...yes! That's what I meant.
Apr 01 15:26:07 Apr 01 15:26:07 <panicbit>	I should have asked what you mean exactly
<panicbit>	I should have asked what you mean exactly
Apr 01 15:26:11 Apr 01 15:26:11 <Xion>	Okay, we're aren't really going anywhere :)
<Xion>	Okay, we're aren't really going anywhere :)
Apr 01 15:26:33 <panicbit>	Xion: Huh?
Apr 01 15:26:33 <panicbit>	Xion: Huh?
Apr 01 15:26:42 <panicbit>	Xion: Does concat! do what you want now or not?
Apr 01 15:26:42 <panicbit>	Xion: Does concat! do what you want now or not?
Apr 01 15:26:47 <Xion>	Although concat! might do the trick.
Apr 01 15:26:47 <Xion>	Although concat! might do the trick.
Apr 01 15:26:54 <LambdaComplex>	panicbit: Hm, it looks like in my docs, util is getting listed multiple times
Apr 01 15:26:54 <LambdaComplex>	panicbit: Hm, it looks like in my docs, util is getting listed multiple times
Apr 01 15:27:04 <panicbit>	It does concat strings (but isn't limited to strings)
Apr 01 15:27:04 <panicbit>	It does concat strings (but isn't limited to strings)
Apr 01 15:27:05 Apr 01 15:27:05 <LambdaComplex>	panicbit: That have something to do with using pub mod?
<LambdaComplex>	panicbit: That have something to do with using pub mod?
Apr 01 15:27:30 Apr 01 15:27:30 <panicbit>	LambdaComplex: Yeah
<panicbit>	LambdaComplex: Yeah
Apr 01 15:27:41 <panicbit>	LambdaComplex: If you `pub mod` something you re-export it
Apr 01 15:27:41 <panicbit>	LambdaComplex: If you `pub mod` something you re-export it
Apr 01 15:27:49 <panicbit>	LambdaComplex: i.e. you make it visible from your module
Apr 01 15:27:49 <panicbit>	LambdaComplex: i.e. you make it visible from your module
Apr 01 15:28:21 Apr 01 15:28:21 <panicbit>	It's like an alias for modules
<panicbit>	It's like an alias for modules
Apr 01 15:28:21 <LambdaComplex>	panicbit: And if I don't I get a dead code warning
Apr 01 15:28:21 <LambdaComplex>	panicbit: And if I don't I get a dead code warning
Apr 01 15:28:25 <LambdaComplex>	Unless I'm doing something wrong
Apr 01 15:28:25 <LambdaComplex>	Unless I'm doing something wrong
Apr 01 15:32:31 <panicbit>	Xion: What are you building? :)
Apr 01 15:32:31 <panicbit>	Xion: What are you building? :)
Apr 01 15:41:59 Apr 01 15:41:59 <Xion>	panicbit: I need to work around some stupidity in clap, the argument parsing library I use.
<Xion>	panicbit: I need to work around some stupidity in clap, the argument parsing library I use.
Apr 01 15:42:11 <panicbit>	Hm ok
Apr 01 15:42:11 <panicbit>	Hm ok
Apr 01 15:42:37 <Xion>	It borks the usage string in certain cases which I happen to hit, so I have to provide my own :)
Apr 01 15:42:37 <Xion>	It borks the usage string in certain cases which I happen to hit, so I have to provide my own :)
Apr 01 15:42:46 <Xion>	And would prefer not to repeat too much.
Apr 01 15:42:46 <Xion>	And would prefer not to repeat too much.
Apr 01 15:43:58 <Xion>	It's all because clap really doesn't want to allocate anything by itself, because y'know, parsing command line args once per program execution is oh-so-time-critical.
Apr 01 15:43:58 <Xion>	It's all because clap really doesn't want to allocate anything by itself, because y'know, parsing command line args once per program execution is oh-so-time-critical.
Apr 01 15:44:27 Apr 01 15:44:27 <Xion>	Yet this thing is seemingly the most featureful of all other similar libraries...
<Xion>	Yet this thing is seemingly the most featureful of all other similar libraries...
Apr 01 15:44:33 <Xion>	I miss argparse from Python ;/
Apr 01 15:44:33 <Xion>	I miss argparse from Python ;/
Apr 01 15:45:15 Apr 01 15:45:15 <panicbit>	Xion: Hm, what does clap have that e.g. docopt doesn't?
<panicbit>	Xion: Hm, what does clap have that e.g. docopt doesn't?
Apr 01 15:45:44 <panicbit>	(or rather: what do you need that the other libs do not have)
Apr 01 15:45:44 <panicbit>	(or rather: what do you need that the other libs do not have)
Apr 01 15:45:47 <Xion>	Last time I checked, mutually exclusive subgroups for one.
Apr 01 15:45:47 <Xion>	Last time I checked, mutually exclusive subgroups for one.
Apr 01 15:46:04 Apr 01 15:46:04 <panicbit>	hm
<panicbit>	hm
Apr 01 15:46:05 <Xion>	I.e. [--foo <FOO> | --bar | --baz]
Apr 01 15:46:05 <Xion>	I.e. [--foo <FOO> | --bar | --baz]
Apr 01 15:46:31 Apr 01 15:46:31 <Xion>	If that changed, great! I wouldn't mind ditching clap for good :)
<Xion>	If that changed, great! I wouldn't mind ditching clap for good :)
Apr 01 15:46:37 Apr 01 15:46:37 <panicbit>	hehe
<panicbit>	hehe
Apr 01 15:48:23 <Xion>	There are a few libs which require you to provide a buffer variable when you define an arg.
Apr 01 15:48:23 <Xion>	There are a few libs which require you to provide a buffer variable when you define an arg.
                                                                                                                                                                                                                                        **** BEGIN LOGGING AT Fri Apr  1 15:51:51 2016

Apr 01 15:51:51 *	Now talking on #rust-beginners
Apr 01 15:51:52 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 01 15:51:52 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 01 15:51:58 <panicbit>	And the second parameter is a function/closure that returns a borrow to that string
Apr 01 15:52:23 <panicbit>	In our get_screen case:
Apr 01 15:52:36 <panicbit>	The owned value is the setup
Apr 01 15:52:48 <panicbit>	And the borrowed value from the setup is the Screen
Apr 01 15:53:06 <panicbit>	The borrowing from the screen is done inside the closure/function
Apr 01 15:53:50 <panicbit>	(There's a reason why it is constructed this specific way, but it is not important for understanding how to use it)
Apr 01 15:54:27 <panicbit>	s/the borrowing from/the borrowing of/
Apr 01 15:54:45 <LambdaComplex>	So....what exactly is get_screen() returning now?
Apr 01 15:55:05 <panicbit>	An OwningRefMut<Setup, Screen>
Apr 01 15:55:13 <panicbit>	As you can see in the signature ;)
Apr 01 15:55:27 <panicbit>	You are able to call the methods of Screen on it though
Apr 01 15:55:33 <panicbit>	Becuase the type Derefs to Screen
Apr 01 15:56:14 <panicbit>	e.g. you could call `get_screen().width_in_pixels()`
Apr 01 15:56:48 <panicbit>	(you should probably bind the result of get_screen() to a variable if you're going to use it multiple times)
Apr 01 15:57:55 <panicbit>	This kinda explains why the C code uses globals for the screen and setup
Apr 01 15:58:06 <panicbit>	Because it doesn't have to worry about that stuff in that case
Apr 01 15:58:52 <panicbit>	The good thing: The XCB API mostly doesn't require `&mut self` but only `&self`
Apr 01 15:58:57 <panicbit>	So you could do that too
Apr 01 16:01:52 <panicbit>	using lazy_static!
Apr 01 16:02:11 *	LambdaComplex is only kinda confused right now
Apr 01 16:02:44 <panicbit>	LambdaComplex: It's magic ;)
Apr 01 16:02:50 <panicbit>	LambdaComplex: Black magic in fact
Apr 01 16:02:59 <panicbit>	LambdaComplex: (because of the unsafe)
Apr 01 16:04:18 <LambdaComplex>	Oh.
Apr 01 16:04:34 <panicbit>	LambdaComplex: I'm just sad that I can't exactly express the lifetime behaviour that I want
Apr 01 16:05:34 <panicbit>	LambdaComplex: Rust will *probably* protect you to do the wrong most of the time, but there might be some edge caes where things go horribly wrong
Apr 01 16:06:00 <panicbit>	But this case should be fine
Apr 01 16:06:03 <panicbit>	I checked
Apr 01 16:11:48 <panicbit>	LambdaComplex: An alternative would be to pass in a setup to get_screen!
Apr 01 16:13:16 <panicbit>	LambdaComplex: http://is.gd/cJvJd9
Apr 01 16:13:35 <panicbit>	LambdaComplex: That would obviously require you to create a setup beforehand
Apr 01 16:17:26 <LambdaComplex>	panicbit: Which do you think would be better?
Apr 01 16:17:41 <panicbit>	Passing in Setup
Apr 01 16:18:59 <panicbit>	Becuase you can avoid the potential unsaftey :)
Apr 01 16:19:04 <panicbit>	unsafety*
Apr 01 16:23:35 <LambdaComplex>	panicbit: And just generating the Setup in the function that I'm calling get_screen() from?
Apr 01 16:23:58 <panicbit>	LambdaComplex: Yup
Apr 01 16:24:05 <panicbit>	LambdaComplex: Or further up if required
Apr 01 16:24:19 <panicbit>	You can pass down Setup as often as required
Apr 01 16:24:36 <panicbit>	But it should be enough to do what you said
Apr 01 16:28:52 <panicbit>	It may be a bit hard to understand why that works
Apr 01 16:29:07 <panicbit>	when you call .get_setup()
Apr 01 16:29:16 <panicbit>	You'll get a Setup<'a>
Apr 01 16:29:30 <panicbit>	er sorry
Apr 01 16:29:34 <panicbit>	wrong already :)
Apr 01 16:29:57 <panicbit>	when you call .roots() on the setup, you'll get a ScreenIterator<'a>
Apr 01 16:30:05 <panicbit>	Where 'a is the lifetime of the Setup
Apr 01 16:30:16 <panicbit>	Why is 'a the lifetime of the setup?
Apr 01 16:30:18 <LambdaComplex>	So why is specifying <'a> necessary?
Apr 01 16:30:40 <panicbit>	LambdaComplex: ScreenIterator contains a reference to something that has the lifetime 'a
Apr 01 16:30:48 <panicbit>	That's why
Apr 01 16:31:58 <panicbit>	It's important so that Rust knows that it may not destroy the referenced value (the Setup) before destroying the ScreenIterator
Apr 01 16:32:18 <charmander>	ummm....
Apr 01 16:32:20 <charmander>	hi?
Apr 01 16:32:24 <panicbit>	charmander: Hi :)
Apr 01 16:33:14 <panicbit>	LambdaComplex: Taking lifetimes as parameters in structs is also why it is possible that Screen does not depend on the ScreenIterator to stay alive
Apr 01 16:33:17 <panicbit>	Welp...
Apr 01 16:35:10 <panicbit>	I get really confused when people join, say something and then leave immediately X.x
Apr 01 16:37:29 <panicbit>	LambdaComplex: It's somehow beautiful that this works out
Apr 01 16:37:37 <panicbit>	LambdaComplex: In a language-fetish way
Apr 01 16:37:50 <panicbit>	:P
Apr 01 16:39:14 <LambdaComplex>	panicbit: Hey, what you do in the privacy of your own home is none of my business :P
Apr 01 16:39:15 <panicbit>	LambdaComplex: It will take some time but sooner or later all these things will fall into place
Apr 01 16:39:58 <LambdaComplex>	panicbit: I sure hope so!
Apr 01 16:40:04 <panicbit>	LambdaComplex: Heh, we even had someone over in #rust-offtopic doing evil symbol manipulations :D
Apr 01 16:40:25 <panicbit>	LambdaComplex: I think he managed to manually manipulate binary symbols in a way that the bianry runs on msdos
Apr 01 16:40:29 <panicbit>	binary*
Apr 01 16:40:32 <panicbit>	Which is sick
Apr 01 16:40:59 <LambdaComplex>	lolwut
Apr 01 16:41:15 <panicbit>	I feel like just slightly modifying rust and llvm would be way easier xD
Apr 01 16:41:30 <panicbit>	But I guess some people have certain quirky skills :P
Apr 01 16:42:08 <panicbit>	(which is interesting IMO)
Apr 01 16:55:08 <panicbit>	LambdaComplex: Turns out my 100% test coverage isn't 100%... great success...
Apr 01 16:55:51 <LambdaComplex>	panicbit: Which means...?
Apr 01 16:56:06 <panicbit>	LambdaComplex: That my code is not sprinkled enough with tests :/
Apr 01 16:56:26 <panicbit>	LambdaComplex: coverall should be able to show me all the code paths that are untested but it doesn't
Apr 01 16:56:46 <panicbit>	(it probably isn't even the fault of coverall but rather the awkward combination with how Rust works)
Apr 01 16:57:28 <panicbit>	Because of traits :/
Apr 01 16:57:59 <panicbit>	Though, I guess other languages using generics should have the same issue
Apr 01 17:06:25 <LambdaComplex>	Just to make sure, Rust _does_ follow PEMDAS, right?
Apr 01 17:06:50 <panicbit>	wut?
Apr 01 17:07:00 <panicbit>	Yeah
Apr 01 17:07:13 <panicbit>	LambdaComplex: You can read that up in the rust reference
Apr 01 17:07:28 <panicbit>	LambdaComplex: https://doc.rust-lang.org/reference.html#operator-precedence
Apr 01 17:08:05 <panicbit>	There's no E though
Apr 01 17:08:08 <durka42>	playbot: 1 + 2 * 3 + 4
Apr 01 17:08:09 -playbot/#rust-beginners-	11
Apr 01 17:08:10 <panicbit>	At least not as an operator
Apr 01 17:09:27 <bluss>	do you interpret PEMDAS do have M with higher precendence than D, or equal?
Apr 01 17:10:24 <LambdaComplex>	bluss: equal
Apr 01 17:10:41 <panicbit>	In that case it works out
Apr 01 17:10:57 <panicbit>	"* / %"
Apr 01 17:11:02 <panicbit>	have the same precedence in Rust
Apr 01 17:20:19 <LambdaComplex>	panicbit: Alright, almost done with wrs! Assuming it works on the first try. But...what does &[(u16, u32)] mean?
Apr 01 17:21:27 <durka42>	a slice of tuples each containing a u16 and a u32
Apr 01 17:24:39 <LambdaComplex>	alright...
Apr 01 17:24:46 <LambdaComplex>	looks like the original c code uses an array
Apr 01 17:25:41 <panicbit>	LambdaComplex: A slice is a kind of array
Apr 01 17:26:06 <panicbit>	Oh, I guess you mean instead of the tuple
Apr 01 17:26:31 <panicbit>	because C doesn't have tuples it may either use structs or arrays
Apr 01 17:27:20 <panicbit>	though, arrays probably don't make sense for heterogenous types
Apr 01 17:27:47 <panicbit>	LambdaComplex: Where is that type being used?
Apr 01 17:29:39 <LambdaComplex>	panicbit: xproto::configure_window()
Apr 01 17:29:45 <LambdaComplex>	specifically value_list
Apr 01 17:29:58 <LambdaComplex>	which corresponds to a value_mask
Apr 01 17:30:09 <LambdaComplex>	(from xcb_configure_request_event_t i think)
Apr 01 17:31:39 <azerupi>	Can integration test build upon each other? Or do I have to setup the environment for each of them individually?
Apr 01 17:33:25 <panicbit>	azerupi: I think you could use a common method that sets up your tests
Apr 01 17:35:02 <azerupi>	Yeah, I thought of that but..
Apr 01 17:35:22 <azerupi>	I have an init function that I want to test that creates a couple of files
Apr 01 17:36:06 <azerupi>	Then I want to test a function that parses the config generated by that init function
Apr 01 17:36:12 <azerupi>	etc. etc.
Apr 01 17:36:41 <azerupi>	I can put everything in the same test, but thats kind of ugly :P
Apr 01 17:37:08 *	ChanServ gives channel operator status to niconii
Apr 01 17:38:04 <mbrubeck>	azerupi: See https://github.com/reem/stainless
Apr 01 17:38:39 <mbrubeck>	(I think that runs the setup once per test, but you only need to write it once.)
Apr 01 17:39:46 <mbrubeck>	azerupi: If you want to do a series of things in order, put them in one test.  Rust tests can be parallelized, filtered, etc., so they shouldn't depend on each other.
Apr 01 17:40:38 <azerupi>	mbrubeck: yeah that makes sense, thanks :)
Apr 01 17:47:54 <LambdaComplex>	panicbit: So how exactly does value_list work?
Apr 01 17:48:06 <panicbit>	LambdaComplex: No fucking clue
Apr 01 17:48:08 <panicbit>	:D
Apr 01 17:48:27 <panicbit>	Fast thing goes in, fast thing comes out
Apr 01 17:49:43 <panicbit>	LambdaComplex: Unless you mean "how do you use it"
Apr 01 17:49:54 <panicbit>	LambdaComplex: I'm not sure how they convert it to the low-level stuff
Apr 01 17:50:32 <LambdaComplex>	panicbit: I think I do mean "how do you use it"
Apr 01 17:50:42 <panicbit>	LambdaComplex: Alright, it's pretty simple
Apr 01 17:51:13 <panicbit>	LambdaComplex: configure_window(conn, window, &[(12,34), (56,78)]);
Apr 01 17:51:29 <panicbit>	this would pass two value pairs to configure_window
Apr 01 17:51:48 <panicbit>	I'm not sure what those values represent though
Apr 01 17:52:09 <panicbit>	Hm I guess attributes or something
Apr 01 17:52:21 <panicbit>	Anyway, you can add as many as you like
Apr 01 17:52:53 <panicbit>	(you can also get that slice from a Vec if you need to dynamically create the value_list)
Apr 01 17:52:55 <durka42>	&[(left, top), (right, bottom)] or &[(left, top), (width, height)] perhaps?
Apr 01 17:52:59 <durka42>	just guessing from the function name
Apr 01 17:53:10 <panicbit>	durka42: I doubt it:
Apr 01 17:53:12 <panicbit>	durka42: "value_list: New values, corresponding to the attributes in value_mask. The order has to correspond to the order of possible value_mask bits. See the example."
Apr 01 17:53:20 <panicbit>	durka42: The funny thing is: There's no example :P
Apr 01 17:53:26 <panicbit>	At least it's not showing in the docs
Apr 01 17:53:33 <durka42>	I see
Apr 01 17:53:47 <panicbit>	Maybe they are referring to an actual example/*
Apr 01 17:53:53 <durka42>	See the example. There is no example. But you must see. Then you shall be enlightened.
Apr 01 17:54:02 <durka42>	*/
Apr 01 17:54:17 <panicbit>	There is no spoon
Apr 01 17:54:39 <panicbit>	Once you unsee the spoon you cannot see it
Apr 01 17:54:43 <panicbit>	;P
Apr 01 17:56:22 <LambdaComplex>	And now I'm running into type problems. Fun stuff
Apr 01 18:01:44 <panicbit>	LambdaComplex: Error messages. Post them :)
Apr 01 18:02:26 <panicbit>	Often error mesages are so obvious but you need a human to paraphrase them
Apr 01 18:03:49 <panicbit>	After all this time I still have trouble remembering whom the compiler refers to when it says "found x, expected y"
Apr 01 18:04:23 <panicbit>	Probably it should say "I found x, you expected y" or "you used x, I expected y" or something
Apr 01 18:04:32 <panicbit>	But maybe that's just me being weird
Apr 01 18:04:52 <panicbit>	probably, certainly, almost definitely
Apr 01 18:05:30 <durka42>	playbot: let found: i32 = "expected";
Apr 01 18:05:30 -playbot/#rust-beginners-	<anon>:9:26: 9:36 error: mismatched types:
Apr 01 18:05:31 -playbot/#rust-beginners-	 expected `i32`,
Apr 01 18:05:31 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1ToVx6Q
Apr 01 18:05:57 <durka42>	oh did they finally fix that bug
Apr 01 18:06:03 <panicbit>	durka42: huh?
Apr 01 18:06:11 <panicbit>	Which bug?
Apr 01 18:06:25 <durka42>	there was a bug where it was doing the line breaks in that error by searching for the literal strings "found" and "expected"
Apr 01 18:06:35 <panicbit>	X.x
Apr 01 18:07:01 <panicbit>	Glad that it's fixed
Apr 01 18:07:15 <panicbit>	I wish triage would visit the span bug that I reported some day :/
Apr 01 18:08:01 <panicbit>	Oh, they (steve) did actually
Apr 01 18:08:19 <panicbit>	Apparently you don't get notified on label changes
Apr 01 18:09:00 <panicbit>	durka42: This can be pretty annoying if you want to debug your macros https://github.com/rust-lang/rust/issues/32072
Apr 01 18:09:22 <durka42>	annoying
Apr 01 18:09:47 <panicbit>	This recently happended to me in less trivial macro code (the enum types one)
Apr 01 18:10:12 <panicbit>	That error basically coerces to "an error occured" :P
Apr 01 18:10:36 <panicbit>	Basically this: https://d.ibtimes.co.uk/en/full/1451630/windows-10-installation-errors.png
Apr 01 18:11:00 <panicbit>	(I actually ran into that message by the way ;) )
Apr 01 18:14:58 <LambdaComplex>	panicbit: Well, I got the window configuration call to resize the window...to the wrong size >.>
Apr 01 18:15:20 <panicbit>	>.>
Apr 01 18:15:34 <panicbit>	LambdaComplex: Well, or to rephrase that: "Something happened"
Apr 01 18:15:55 <LambdaComplex>	panicbit: Thanks, Microsoft
Apr 01 18:16:39 <panicbit>	Even if it's not the best error message, I'll praise it for it's hilarity
Apr 01 18:16:52 <panicbit>	Windows keeps me happy :)
Apr 01 18:17:00 <panicbit>	(at least if I'm not using it ;))
Apr 01 18:18:08 <panicbit>	LambdaComplex: Would you mind if I would start to implement one of the wmutils now?
Apr 01 18:18:16 <vlastachu>	Hello. I have little stupid question. I have vector of type T. Suppose Int. And have constant. I want ot check if first item = 4. I have method first which return Option<&T>. Option is nice so I check == Some(4). But what should I do with reference?
Apr 01 18:18:24 <panicbit>	LambdaComplex: I want to join the semi-fun :P
Apr 01 18:19:08 <LambdaComplex>	panicbit: Sure, just pick one that isn't checked off (and that isn't wrs)
Apr 01 18:19:18 <panicbit>	vlastachu: There is no such thing like a stupid question in here :) 
Apr 01 18:19:32 <panicbit>	vlastachu: You can do `foo == Some(&4)`
Apr 01 18:19:47 <panicbit>	vlastachu: Or `foo.cloned() == Some(4)`
Apr 01 18:20:11 <panicbit>	foo.cloned() will create an Option<T> from an Option<&T> if T is clonable
Apr 01 18:20:16 <vlastachu>	okay. but it is breaks my understanding of reference. 
Apr 01 18:20:45 <panicbit>	vlastachu: In rust, equality is defined by comparing the actual values, not references
Apr 01 18:21:00 <vlastachu>	Because I thought that similiar 4 may have different reference
Apr 01 18:21:08 <panicbit>	vlastachu: That's true
Apr 01 18:21:31 <panicbit>	vlastachu: The thing is: the equals implementation for references will call the equals implementation of their T
Apr 01 18:21:42 <panicbit>	vlastachu: So it will actually compare the values
Apr 01 18:21:56 <panicbit>	vlastachu: Comparing only the references can be quick, but is also often very wrong
Apr 01 18:22:11 <panicbit>	vlastachu: Because references can change
Apr 01 18:22:23 <panicbit>	(when moving the value and taking the reference again)
Apr 01 18:22:41 <vlastachu>	so. what should I do if I want check reference? It is rare case, but interesting
Apr 01 18:22:48 <panicbit>	vlastachu: Or as you correctly noticed, the reference to a literal 4 is differen from a random dynamic reference to 4
Apr 01 18:23:22 <panicbit>	vlastachu: Just do `foo == Some(&4)` that's absolutely fine
Apr 01 18:23:33 <panicbit>	It will give you the correct result
Apr 01 18:24:03 <panicbit>	i.e. it will compare if the value inside Some is actually 4
Apr 01 18:24:23 <panicbit>	It doesn't matter wether the references are different or not
Apr 01 18:24:39 <vlastachu>	Okay. Very thank you panicbit
Apr 01 18:25:02 <panicbit>	vlastachu: Depending on what you are trying to achieve, there might be a lot more things that you could to
Apr 01 18:25:12 <panicbit>	Especially constructs involving "pattern matching"
Apr 01 18:25:46 <panicbit>	welp...
Apr 01 18:25:51 <panicbit>	:(
Apr 01 18:26:36 *	panicbit notices there's a lot missing in his second last message
Apr 01 18:26:56 <panicbit>	That MUST be the reason why they left, yes indeed
Apr 01 18:26:58 <panicbit>	;P
Apr 01 18:27:09 <panicbit>	LambdaComplex: Thanks
Apr 01 18:27:37 <panicbit>	LambdaComplex: I figure it's like sharing the pain or something :P
Apr 01 18:31:55 <panicbit>	LambdaComplex: great stuff, I wonder in which scenariou chwb works
Apr 01 18:32:15 <panicbit>	LambdaComplex: Since WMs draw their own borers, it has no effect
Apr 01 18:32:19 <panicbit>	borders*
Apr 01 18:32:27 <panicbit>	At least not in i3wm
Apr 01 18:33:15 <LambdaComplex>	well, wmutils _is_ made to be usable without a wm
Apr 01 18:33:23 <panicbit>	Right
Apr 01 18:33:31 <panicbit>	I wonder what the border looks like...
Apr 01 18:34:37 <panicbit>	LambdaComplex: Which reminds me: you should probably design the tools in such a way that you are able to use them as modules
Apr 01 18:35:08 <panicbit>	LambdaComplex: i.e. that you don't have to exec the binaries but can just call the methods directly
Apr 01 18:35:33 <panicbit>	That would make it easier to bundle everything into a WM later
Apr 01 18:44:48 <panicbit>	LambdaComplex: I'll think I'll try to implement lsw
Apr 01 18:49:59 <LambdaComplex>	panicbit: Eh, I'm probably gonna end up rewriting them for EWMH compliance anyways
Apr 01 18:50:08 <panicbit>	I see
Apr 01 18:51:45 <LambdaComplex>	So much to learn
Apr 01 18:52:14 <LambdaComplex>	So...how am I supposed to give the function a negative value when it's expecting a u32?
Apr 01 18:55:57 <commie>	LambdaComplex: i32 should resolve that for you, provided you are writing the functions. if not, suggest checking that functions expected input again.
Apr 01 18:58:56 <LambdaComplex>	http://rtbo.github.io/rust-xcb/xcb/xproto/fn.configure_window.html
Apr 01 18:59:08 <LambdaComplex>	&[(u16, u32)])
Apr 01 19:00:55 <panicbit>	If the function is expecting an unsigned value (u8, u16, etc) then you can't pass a negative value
Apr 01 19:01:09 <panicbit>	unless the method is reinterpreting the value as signed
Apr 01 19:02:02 <LambdaComplex>	Yeah, that's my point
Apr 01 19:02:10 <LambdaComplex>	As far as I can tell, it _should_ allow negative values
Apr 01 19:02:23 <LambdaComplex>	Unless I'm misinterpreting how it works
Apr 01 19:02:24 <panicbit>	LambdaComplex: What does the C API say to that?
Apr 01 19:02:25 <LambdaComplex>	Hmmmm
Apr 01 19:02:28 <LambdaComplex>	Gimme a minute
Apr 01 19:02:32 <panicbit>	LambdaComplex: ALso, what are the values for?
Apr 01 19:02:38 <panicbit>	Yup
Apr 01 19:03:17 <LambdaComplex>	Ah, nevermind
Apr 01 19:03:26 <LambdaComplex>	I was misunderstanding how the C function works
Apr 01 19:05:32 <panicbit>	LambdaComplex: Would you mind if I'd use docopt?
Apr 01 19:09:52 <panicbit>	LambdaComplex: Also, you are keeping stuff on stable rust, right?
Apr 01 19:10:48 <LambdaComplex>	panicbit: Eh, I've been trying to avoid that sort of thing...but go for it :P
Apr 01 19:10:50 <LambdaComplex>	And yes
Apr 01 19:11:05 <panicbit>	I think it makes sense at some point
Apr 01 19:11:16 <LambdaComplex>	Also wrs is confusing me. It just keeps changing the width to 64 and the height to....more than it was
Apr 01 19:11:27 <panicbit>	:/
Apr 01 19:12:03 <panicbit>	LambdaComplex: Have you compared with the .c reference implementation?
Apr 01 19:12:49 <LambdaComplex>	panicbit: Yeah, and as far as I can tell, I'm doing everything right
Apr 01 19:13:04 <panicbit>	:/
Apr 01 19:13:21 <panicbit>	I hope that isn't an issue with the XCB crate again...
Apr 01 19:13:27 <panicbit>	Like seriously...
Apr 01 19:13:42 <panicbit>	But I can understand how this stuff is not exactly tested
Apr 01 19:14:10 <panicbit>	LambdaComplex: You are essentially writing test cases for the XCB crate right now =P
Apr 01 19:15:08 <panicbit>	LambdaComplex: Which is probably somewhat painfully to you but heads up: Somewhone else will probably be very thankful that you improved the xcb crate
Apr 01 19:15:19 <panicbit>	For example rtbo
Apr 01 19:15:50 <panicbit>	I'm positively surprised that you've powered through so far
Apr 01 19:16:43 <panicbit>	Not everyone has that much patience, especially when not extremely familiar with the language that is being used...
Apr 01 19:16:58 <LambdaComplex>	panicbit: I just pushed my latest version of wrs if you wanna check that out
Apr 01 19:17:07 *	panicbit pulls
Apr 01 19:19:25 <panicbit>	LambdaComplex: You know, one thing you get sick of when doing it every week for programming practice in uni is parsing args...
Apr 01 19:19:54 <panicbit>	LambdaComplex: That's why I loathe manually parsing them using `.len()` and co
Apr 01 19:20:24 <panicbit>	It just such a stupid repetitive task
Apr 01 19:20:29 <panicbit>	It's*
Apr 01 19:20:42 <pingveno>	docopts FTW!
Apr 01 19:20:53 <panicbit>	pingveno: I know right?
Apr 01 19:21:16 <panicbit>	LambdaComplex: I mean look: half of the wrs main is arg parsing...
Apr 01 19:21:29 <panicbit>	docopts is white magic
Apr 01 19:21:40 <pingveno>	Life is too short for doing your own argument parsing.
Apr 01 19:21:48 <panicbit>	Or as the guy in the promo video says: POSIX!!!
Apr 01 19:22:12 <panicbit>	(I love how the guy spouts it into the mic, it's like the voice of god =D)
Apr 01 19:22:16 <panicbit>	dog*
Apr 01 19:22:32 <pingveno>	Morgan Freeman*
Apr 01 19:22:49 <Xion>	Someone go make a good deed and port Python's argparse :(
Apr 01 19:22:51 <LambdaComplex>	panicbit: Fair enough
Apr 01 19:23:38 <panicbit>	Xion: https://github.com/tailhook/rust-argparse
Apr 01 19:23:56 <panicbit>	Xion: I'm not pretending to know what python's argparse is like or wether this is anything like it
Apr 01 19:24:10 <panicbit>	Xion: I just pattern matched the names in the google search results :P
Apr 01 19:24:50 <panicbit>	Xion: Can you give a rough overview of how argparse works?
Apr 01 19:25:38 <panicbit>	LambdaComplex: I have nothing much to complain about your wrs code
Apr 01 19:25:58 <pingveno>	panicbit: It's a pretty routine argument parser, but very comprehensive.
Apr 01 19:26:01 <panicbit>	LambdaComplex: I don't agree with the choice of newlines but I'm very picky and often disagree with myself there
Apr 01 19:26:25 <pingveno>	initialize, add a few arguments, parse.
Apr 01 19:26:48 <panicbit>	pingveno: So, is it more directed at simple argument patterns?
Apr 01 19:27:03 <panicbit>	pingveno: Or is it relatively simple to do complex patternsß
Apr 01 19:27:05 <panicbit>	?
Apr 01 19:27:07 <panicbit>	Like subcommands and such
Apr 01 19:27:36 <LambdaComplex>	panicbit: How does docopt compare to clap?
Apr 01 19:27:42 <panicbit>	LambdaComplex: No idea
Apr 01 19:27:54 <panicbit>	LambdaComplex: Though, clap is a bit more "manual"
Apr 01 19:28:02 <panicbit>	docopt is more magic
Apr 01 19:28:14 <panicbit>	clap is probably a bit more precise because of that
Apr 01 19:28:15 <LambdaComplex>	panicbit: Also if you're talking about the newlines in the middle of configure_window() then that was just because the lines would be ridiculously long otherwise
Apr 01 19:28:19 <LambdaComplex>	Normally I wouldn't do that :P
Apr 01 19:28:36 <panicbit>	LambdaComplex: I'm talking about missing newlines ;)
Apr 01 19:28:49 <panicbit>	LambdaComplex: But don't worry, I'm just extremely picky
Apr 01 19:29:30 <panicbit>	I felt quite honored when someone I worked with in uni told me that my code looks pretty
Apr 01 19:29:59 <panicbit>	i think that's very subjective
Apr 01 19:30:23 <pingveno>	panicbit: argparse allows some very complex patterns, including subcommands.
Apr 01 19:30:27 <panicbit>	But it's flattering nonetheless
Apr 01 19:30:39 <pingveno>	But at the same time, the basic API is reasonably easy to use.
Apr 01 19:31:29 <panicbit>	Xion: I'd love to hear your opinions about rust-argparse
Apr 01 19:32:21 <panicbit>	Xion: if it is not quite what you want I wouldn't mind working with you to build a better argparse :)
Apr 01 19:33:09 <panicbit>	Also, not sure if everyone is aware of it, but there's a `cargo search` command to search crates
Apr 01 19:33:20 <panicbit>	I noticed that I'm extremely underusing it
Apr 01 19:33:53 <panicbit>	TYL (today you learned ;D)
Apr 01 19:33:59 <TechnoCrunch>	Can I debug a let to find out it's type?
Apr 01 19:34:15 <panicbit>	TechnoCrunch: `let foo: () = bar;`
Apr 01 19:34:21 <panicbit>	to find out the type of bar
Apr 01 19:34:30 <panicbit>	bar may be anything
Apr 01 19:34:44 <panicbit>	TechnoCrunch: You basically cause a type error, to force Rust to tell you what it expected
Apr 01 19:34:53 <panicbit>	TechnoCrunch: IF it compiled, then the type of bar is ()
Apr 01 19:35:20 <TechnoCrunch>	thanks panicbit, cause I was using SDL2 
Apr 01 19:35:48 <panicbit>	TechnoCrunch: Ah, I'm currently poking around in it as well :)
Apr 01 19:35:53 <panicbit>	TechnoCrunch: With some sadness :/
Apr 01 19:36:18 <panicbit>	Turns out converting surfaces from indexed pixelformats to non-indexed formats isn't supported :/
Apr 01 19:36:28 <panicbit>	Which makes  indexed formats pretty useless IMO
Apr 01 19:36:48 <panicbit>	(I wanted to use an indexed pixel format for my gameboy emulator ;))
Apr 01 19:37:12 <panicbit>	[So now I need to manually need to map my custom indexed format to RGB values)
Apr 01 19:37:14 <panicbit>	]
Apr 01 19:37:41 <panicbit>	TechnoCrunch: What are you building using SDL2? :)
Apr 01 19:37:42 <TechnoCrunch>	I was following this SDL2 tutorial with how to use text editing, and it required a public window...
Apr 01 19:37:51 <panicbit>	Hm
Apr 01 19:38:44 <panicbit>	TechnoCrunch: IIRC you can create a window using some method in the `video` module
Apr 01 19:39:26 <panicbit>	TechnoCrunch: You need to use the WindowBuilder http://angrylawyer.github.io/rust-sdl2/sdl2/video/struct.WindowBuilder.html
Apr 01 19:39:30 <panicbit>	To create a window
Apr 01 19:40:26 <panicbit>	(you start by calling .new() with some parameters, then you call add the properties that you want by calling the corresponding methods, and at the end you .build() the Window)
Apr 01 19:40:39 <panicbit>	(That's called the builder pattern, for probably obvious reasons)
Apr 01 19:40:53 <panicbit>	I don't even know if that's the issue you are stuck with, but I hope so :)
Apr 01 19:41:48 <TechnoCrunch>	panicbit, you making a gameboy emulator? Nice
Apr 01 19:42:11 <panicbit>	TechnoCrunch: There are already 2 rust gameboy emulators so I'm not taking a crown here :)
Apr 01 19:42:32 <panicbit>	TechnoCrunch: But I made a ridiculously fancy macro to parse opcodes <3
Apr 01 19:43:17 <panicbit>	TechnoCrunch: https://github.com/panicbit/rust-gb/blob/ops/src/instructions.rs#L117-L379
Apr 01 19:43:38 <panicbit>	It's like a `match` on crack
Apr 01 19:44:01 <panicbit>	Which is already a `switch` on crack ;D
Apr 01 19:45:06 <panicbit>	TechnoCrunch: Anyway, I'd like to know more about your issue
Apr 01 19:45:13 <panicbit>	And ideally resolve it :)
Apr 01 19:45:47 <TechnoCrunch>	It just that I needed a public window, so other functions could do stuff to it :S
Apr 01 19:46:07 <panicbit>	TechnoCrunch: Well, `public` is a bit weird
Apr 01 19:46:21 <panicbit>	TechnoCrunch: a value can't be `public`
Apr 01 19:46:42 <panicbit>	TechnoCrunch: Can you show me the guide that you're following?
Apr 01 19:47:07 <panicbit>	LambdaComplex: I haven't managed to write a single line of lsw yet ^.^
Apr 01 19:47:19 <panicbit>	LambdaComplex: You're doing a great job
Apr 01 19:48:26 <panicbit>	LambdaComplex: Do you know about `cargo-watch` and `cargo-add` ?
Apr 01 19:48:41 <panicbit>	LambdaComplex: They are helper utils that you can install
Apr 01 19:49:03 <panicbit>	LambdaComplex: `cargo watch` will rebuild your code as soon as you save it
Apr 01 19:49:16 <panicbit>	So you can instantly see errors
Apr 01 19:49:58 <panicbit>	And `cargo-add` allows you to comfortably add/remove dependencies to/from your project
Apr 01 19:50:53 <panicbit>	Unless you're using a capable IDE I'd say they are essential tools (including multirust!)
Apr 01 19:51:03 <TechnoCrunch>	panicbit, the C++ guide okay
Apr 01 19:51:45 <panicbit>	TechnoCrunch: Hm, the C++ guide would probably not correlate 1:1 to the rust abstraction
Apr 01 19:52:00 <TechnoCrunch>	Yeah, thats why I'm taking my time
Apr 01 19:52:01 <TechnoCrunch>	http://lazyfoo.net/tutorials/SDL/32_text_input_and_clipboard_handling/index.php
Apr 01 19:52:49 <panicbit>	TechnoCrunch: Yikes, that one.. IIRC that's even for SDL1 only
Apr 01 19:53:02 <TechnoCrunch>	"Getting text input from the keyboard is a common task in games. Here we'll be getting text using SDL 2's new text input and clip board handling."
Apr 01 19:53:16 <panicbit>	TechnoCrunch: I'd recommend you to browse the rust SDL2 documentation to make sense of things
Apr 01 19:53:43 <panicbit>	TechnoCrunch: Honestly, the C++ will help you nothing :/
Apr 01 19:53:58 <panicbit>	C+ Guide*
Apr 01 19:54:01 <panicbit>	...
Apr 01 19:55:34 <panicbit>	(Oh crap. I was going to post you [https://github.com/Kroisse/sdl2-tutorial-rust] but their latest commit states "Merge branch 'rustc-0.11-pre'"...)
Apr 01 19:55:48 <panicbit>	(Which means it is pre 1.0 code...)
Apr 01 19:55:58 <panicbit>	Please don't look at it :)
Apr 01 19:56:01 <panicbit>	Seriously
Apr 01 19:57:03 <panicbit>	TechnoCrunch: I know there's ArcadeRS which is a tutorial about how to use Piston, but I don't know any suitable tutorial about SDL2 :/
Apr 01 19:57:07 <Xion>	panicbit: I saw rust-argparse. The interface is very similar to Python's argparse but I didn't like how you need to provide variables to hold the results when you construct the parser.
Apr 01 19:57:12 <Xion>	But I may reconsider.
Apr 01 19:57:20 <Xion>	It's just one additional struct to define.
Apr 01 19:57:23 <panicbit>	TechnoCrunch: The only thing I can recommend is browse the SDl2 docs... :(
Apr 01 19:57:36 <Xion>	(And it's close to how Haskell handles args. That means it's good, obviously! ;D)
Apr 01 19:57:45 <panicbit>	Xion: heh ;)
Apr 01 19:58:05 <TechnoCrunch>	panicbit, which I am right now :D
Apr 01 19:58:09 <TechnoCrunch>	OHOHOHOH
Apr 01 19:58:11 <TechnoCrunch>	jkjk
Apr 01 19:58:16 <panicbit>	Xion: Well, (somewhat obviously) it won't be as comfortable as the python version because of types and stuff
Apr 01 19:58:51 <panicbit>	TechnoCrunch: Don't hesitate to ping me if you have any questions though :)
Apr 01 19:59:17 <TechnoCrunch>	panicbit, Will do!
Apr 01 19:59:56 <panicbit>	Seriously though, the SDL2 docs may be slightly hard to understand, but it's nothing compared to XCB, right LambdaComplex? ;D
Apr 01 20:00:02 <Xion>	panicbit: If you read Python, this is probably the most I have managed to squeeze out of argparse: https://github.com/Xion/gisht/blob/master/gisht/args/parser.py . Note the mutually exclusive group for "gist command", and the custom actions :D
Apr 01 20:00:21 <panicbit>	Xion: I understand the python syntax, that's all :P
Apr 01 20:00:34 <Xion>	(It also formats the resulting help very nicely)
Apr 01 20:00:45 <Xion>	Like, the groups form headers and stuff.
Apr 01 20:00:48 <panicbit>	Xion: I have no general feel for the APIs though
Apr 01 20:00:58 <panicbit>	Or common patterns
Apr 01 20:01:16 <panicbit>	I might as well be reading C ;D
Apr 01 20:01:40 <Xion>	panicbit: See my old blog post: http://xion.org.pl/2012/12/13/python-argparse-tips-and-tricks/ :)
Apr 01 20:01:50 *	panicbit reads it
Apr 01 20:02:36 <Xion>	(It doesn't cover subcommands (called subparsers there) but I haven't really used those yet ;) )
Apr 01 20:02:43 <panicbit>	Xion: WTF, why doesn't chrome show me where the links point to when hovering over them O_o
Apr 01 20:03:03 <Xion>	It does for me.
Apr 01 20:03:05 <panicbit>	I'm clearly not using the much superiour servo
Apr 01 20:03:14 <Xion>	I haven't tampered with this stuff at all.
Apr 01 20:03:19 <panicbit>	:|
Apr 01 20:03:24 <LambdaComplex>	panicbit: So did you see any problems with wrs?
Apr 01 20:03:29 <panicbit>	LambdaComplex: No
Apr 01 20:03:35 <panicbit>	LambdaComplex: Nothing obvious that is
Apr 01 20:03:43 <LambdaComplex>	Well, damn
Apr 01 20:03:50 <panicbit>	LambdaComplex: Hm? Why?
Apr 01 20:04:00 <LambdaComplex>	panicbit: That means I don't know what to do to fix it!
Apr 01 20:04:12 <panicbit>	LambdaComplex: Oh, it's still broken? :(
Apr 01 20:04:23 <panicbit>	I'll take acloser look then!
Apr 01 20:04:35 <LambdaComplex>	panicbit: Did you try using it?
Apr 01 20:04:47 <panicbit>	Nope
Apr 01 20:04:53 <panicbit>	I just browsed the code
Apr 01 20:05:11 <Xion>	panicbit: The "Read more" section is basically the three features a good argparsing library should have :) Groups are useful all the time, and flexible help string formatting is essential. clap barely does the former and fails completely with the latter ;/
Apr 01 20:05:21 <panicbit>	LambdaComplex: The annoying thing is that it's difficult to provide test cases for this kind of stuff :/
Apr 01 20:05:31 <Xion>	I'll try rust-argparse, can't be much worse ;)
Apr 01 20:05:43 <zhoeon>	Could someone help me with a generic's lifetime? This is my first time using generics in a struct and methods. I am getting the parameter type `T` may not live long enough: http://is.gd/h7RdZ9
Apr 01 20:05:50 <panicbit>	Xion: Hehe
Apr 01 20:06:50 <LambdaComplex>	panicbit: What do you mean by test cases exactly?
Apr 01 20:07:13 <panicbit>	LambdaComplex: Rust allows you to add tests to your source files
Apr 01 20:07:30 <panicbit>	LambdaComplex: tests are used to verify that your code works as expected
Apr 01 20:08:03 <Xion>	panicbit: So this is how the automatically generated docs look like from the parser I've pasted the code for: http://pastebin.com/cDyMd6Br
Apr 01 20:08:09 <panicbit>	e.g. if you have a function add(a: i32, b: i32), you could test that behaves correctly for a selected set of cases
Apr 01 20:08:20 <Xion>	Note the sections, descriptions of sections, and great usage string.
Apr 01 20:08:31 <panicbit>	LambdaComplex: but in the case of XCb it's difficult to test if the window was resized properly
Apr 01 20:08:45 <panicbit>	LambdaComplex: Unless you can reliably query the window size!
Apr 01 20:09:09 <panicbit>	LambdaComplex: Also, the running WM may interfere with the test ;'(
Apr 01 20:09:25 <panicbit>	LambdaComplex: Like i3wm may force your window to be tiled
Apr 01 20:10:23 <panicbit>	zhoeon: First off, let me thank you for providing a full example on the playground, that's extremely helpful
Apr 01 20:10:41 <Xion>	panicbit: (Try to ignore the Comic Sans though ;))
Apr 01 20:11:02 <panicbit>	zhoeon: You may want to say `T: 'a`
Apr 01 20:11:17 <panicbit>	zhoeon: See line 20 http://is.gd/CNK8UP
Apr 01 20:11:28 <panicbit>	`struct Object<'a, T: 'a>`
Apr 01 20:11:34 <panicbit>	(or add it to the where clause
Apr 01 20:11:35 <LambdaComplex>	panicbit: wattr wh $(pfw)
Apr 01 20:11:36 <panicbit>	)
Apr 01 20:11:40 <LambdaComplex>	There's your window size :P
Apr 01 20:11:42 <panicbit>	(I derpeed that one, sorry)
Apr 01 20:11:48 <panicbit>	LambdaComplex: WUT
Apr 01 20:12:04 <panicbit>	Nice? :D
Apr 01 20:12:19 <LambdaComplex>	panicbit: Well, ./target/debug/wattr wh $(./target/debug/pfw) maybe in your case :P
Apr 01 20:12:52 <panicbit>	LambdaComplex: Again, in this situation it would be helpful of your modules would provide an actual method to query these kind of things
Apr 01 20:13:01 <LambdaComplex>	panicbit: What do you mean?
Apr 01 20:13:13 <panicbit>	LambdaComplex: Executing them is quite abit of overhead
Apr 01 20:13:23 <LambdaComplex>	panicbit: ...How so?
Apr 01 20:13:24 <panicbit>	And more complicated then just calling them in library way
Apr 01 20:14:40 <zhoeon>	panicbit: Thanks, it seams to make the compilation errors go away
Apr 01 20:15:47 <panicbit>	LambdaComplex: E.g. if you want to get the size of a window, you're going to have to parse strings in a complicated way if you just call the binary
Apr 01 20:16:16 <panicbit>	LambdaComplex: But if you directly call a function that will return a (u32, i32) or similar, it will be MUCH sainer
Apr 01 20:16:19 <panicbit>	saner*
Apr 01 20:16:31 <panicbit>	much more sane*? :D
Apr 01 20:17:01 <panicbit>	Xion: Whut, where's comic sans, I didn't notice? oO
Apr 01 20:17:19 <TechnoCrunch>	sdl2 lifetimes
Apr 01 20:17:20 <TechnoCrunch>	mmm
Apr 01 20:18:05 <panicbit>	TechnoCrunch: Abstracting C stuff isn't always easy...
Apr 01 20:18:27 <panicbit>	TechnoCrunch: So you'll sometimes have to deal with awkward lifetime stuff, just ask LambdaComplex ;D
Apr 01 20:19:59 <Xion>	panicbit: On the pastebin site
Apr 01 20:20:53 <LambdaComplex>	panicbit: Ah, gotcha
Apr 01 20:21:22 <panicbit>	Xion: Lol, suddenly links show again at the bottom :P
Apr 01 20:21:40 <panicbit>	Every browser sucks™
Apr 01 20:23:36 <TechnoCrunch>	even Firefox?
Apr 01 20:23:36 <Xion>	panicbit: HTML's hard yo
Apr 01 20:24:06 <panicbit>	Xion: HTML sucks yo
Apr 01 20:24:12 <Xion>	TechnoCrunch: Firefox blows up on me with rendering artifacts every other day if I so much as fullscreen a YT video or Twitch.
Apr 01 20:24:24 <panicbit>	Xion: HTML is getting better with webcomponents, but it's still... yucky
Apr 01 20:24:37 <panicbit>	Xion: (I'm including JS and CSS in there)
Apr 01 20:24:56 <TechnoCrunch>	Best browser is IE
Apr 01 20:24:59 <Xion>	panicbit: Nobody understands CSS.
Apr 01 20:25:04 <Xion>	And nobody ever will :D
Apr 01 20:26:24 <LambdaComplex>	panicbit: Well, the point of this project is just to recreate those standalone utilities
Apr 01 20:26:37 <panicbit>	Xion: We had a CSS rule priority question in our webtech exam :/
Apr 01 20:26:39 <LambdaComplex>	panicbit: But making a clone for use in programs could be pretty useful
Apr 01 20:26:44 <panicbit>	Xion: >Clusterfuck<
Apr 01 20:26:52 <panicbit>	Nobody had a fucking clue
Apr 01 20:27:19 <panicbit>	Most didn't even know that css defined in html tags had higher priority
Apr 01 20:28:00 <panicbit>	Also, half of the exam was about jboss stuff
Apr 01 20:28:08 <panicbit>	Which I somewhat refused to learn :P
Apr 01 20:28:16 <panicbit>	Still passed gracefully ;D
Apr 01 20:28:40 <panicbit>	most of the questions where extremely vage
Apr 01 20:28:42 <panicbit>	vague*
Apr 01 20:28:51 <panicbit>	Like "What do you need to use WebSockets"
Apr 01 20:30:38 <panicbit>	Like what am I supposed to answer there? "You need an OS that is capable to ran a software that is capable to support the WebSocket protocl, also the user needs a softare taht is capable of supporting Websockets. Your OS will probably at least need some sort of loopback support to connect the client side and server side...
Apr 01 20:30:40 <panicbit>	"
Apr 01 20:31:22 <panicbit>	Since the course drooled all about java I was probably supposed to answer "you need a J2EE implementation"
Apr 01 20:31:36 <panicbit>	Anyway, enough ranting :)
Apr 01 20:32:21 <LambdaComplex>	panicbit: So you're basically talking a crate of helper functions that rely on XCB to get information about windows, right?
Apr 01 20:32:50 <Xion>	panicbit: Priority? You mean specificity?
Apr 01 20:33:00 <LambdaComplex>	Xion: No, he means priority
Apr 01 20:33:06 <LambdaComplex>	They're CASCADING style sheets
Apr 01 20:33:14 <Xion>	Ah, the override order basically.
Apr 01 20:33:15 <panicbit>	LambdaComplex: Yeah
Apr 01 20:33:24 <LambdaComplex>	So tags overrides <style> overrides external sheets
Apr 01 20:33:27 <panicbit>	LambdaComplex: Am I a HE though? ;D
Apr 01 20:33:55 <Xion>	LambdaComplex: ...overrides browser defaults :)
Apr 01 20:34:01 <Xion>	But yeah, that's easy.
Apr 01 20:34:19 <Xion>	That part of CSS actually makes sense.
Apr 01 20:34:29 <LambdaComplex>	panicbit: Depends on if this is an English class and I'm getting points taken off for not using "he or she"
Apr 01 20:34:56 <panicbit>	LambdaComplex: People are somwhat sensible in the Rust community about the explicit use of "he" and "she"
Apr 01 20:35:08 <panicbit>	LambdaComplex: I don't exactly mind
Apr 01 20:35:30 <panicbit>	LambdaComplex: I just want you to know that `they` might be the preferable word to be on the safe side :)
Apr 01 20:35:47 <LambdaComplex>	panicbit: But that's technically grammatically incorrect
Apr 01 20:36:02 <panicbit>	LambdaComplex: No, "singular they" is an actual thing
Apr 01 20:36:14 <LambdaComplex>	Which most English teachers will tell you is incorrect
Apr 01 20:36:21 <panicbit>	Do they? :O
Apr 01 20:36:26 <LambdaComplex>	Anyways, I'm here to talk about coding, not ask everyone they're preferred pronouns
Apr 01 20:36:32 <LambdaComplex>	Well, every English teacher I've ever had O.o
Apr 01 20:36:34 <panicbit>	I won't judged..
Apr 01 20:36:36 <LambdaComplex>	...their
Apr 01 20:36:38 <panicbit>	judge...
Apr 01 20:36:38 <LambdaComplex>	English is hard >.>
Apr 01 20:37:06 <panicbit>	LambdaComplex: Yeah, let's talk about code :)
Apr 01 20:37:23 <LambdaComplex>	I'm trying!
Apr 01 20:37:42 <LambdaComplex>	Actually I'm probably gonna say "fuck cloning wmutils" for now and go write that other thing you mentioned :P
Apr 01 20:38:19 <panicbit>	LambdaComplex: Er... What did I mention? 
Apr 01 20:39:28 <Xion>	Singular they is definitely a thing.
Apr 01 20:39:32 <Xion>	But yes, code :)
Apr 01 20:39:41 <panicbit>	Xion: But but... English teachers!
Apr 01 20:39:47 <panicbit>	I
Apr 01 20:40:05 <panicbit>	I sadly didn't know about singular they when I had english class :/
Apr 01 20:40:54 <panicbit>	And this thing weirds me out: Unis over here are not allowed to require english knowledge
Apr 01 20:41:07 <panicbit>	Which is kinda weird since english is tough quite a bit 
Apr 01 20:41:12 <panicbit>	taught*
Apr 01 20:41:15 <LambdaComplex>	I'm not saying it isn't a thing. And I'm definitely not saying it isn't useful. What I am saying is every English teacher I've ever met has said it's gramatically incorrect
Apr 01 20:41:32 <Xion>	panicbit: My English teachers mostly sucked balls.
Apr 01 20:41:40 <tchosky>	Hi everyone
Apr 01 20:41:45 <pingveno>	If an English teacher says singular they isn't a thing, they have a bone to pick with Shakespeare.
Apr 01 20:41:50 <Xion>	panicbit: But then again, I'm probably using the term to mean a different thing than you are :)
Apr 01 20:41:53 <panicbit>	LambdaComplex: That depends though... language isn't a static thing... It changes according to usage
Apr 01 20:42:07 <panicbit>	Unless you're french ;D
Apr 01 20:42:09 <panicbit>	hehe
Apr 01 20:42:10 <tchosky>	is it just me or the dining philosophers example disappeared from the book?
Apr 01 20:42:21 <Xion>	panicbit: Many (most?) languages have governing bodies.
Apr 01 20:42:26 <pingveno>	tchosky: You are correct
Apr 01 20:42:30 <LambdaComplex>	Why?
Apr 01 20:42:33 <Cardoe>	I'm getting the following "cannot move out of captured outer variable in an `FnMut` closure" but not understanding how to fix it. I made the code available here: http://is.gd/who5tR if someone has a moment.
Apr 01 20:42:35 <LambdaComplex>	Did it disappear? O.o
Apr 01 20:42:42 <tchosky>	Yep, it cannot be found anymore
Apr 01 20:42:52 <tchosky>	was there a problem with it running non-concurrently or something?
Apr 01 20:43:10 <panicbit>	Xion: True, but as far as I know the french authorities are pretty strict about adding foreign words to their language
Apr 01 20:43:32 <panicbit>	Xion: Supposedly there even was a case where a restaurant had to change their menu...
Apr 01 20:44:04 <panicbit>	Because it used foreign names
Apr 01 20:44:08 <Xion>	Nice.
Apr 01 20:44:29 <panicbit>	but again, I don't know if that's true, so I won't judge :)
Apr 01 20:44:36 <Xion>	panicbit: Our (Polish) language council is pretty lax. I heard they recently said they have no problems with "viral" or "selfie".
Apr 01 20:45:05 <panicbit>	But the general vibe that I hear about french and foreign stuff is pretty negative :(
Apr 01 20:45:09 <LambdaComplex>	Spanish has an organization like that too
Apr 01 20:45:14 <LambdaComplex>	Can't remember the name of it though
Apr 01 20:45:21 <panicbit>	Xion: Nice to hear
Apr 01 20:45:47 <panicbit>	Xion: The polish society does seem to have a problem with gay people though :/
Apr 01 20:45:48 <LambdaComplex>	panicbit: So what should I call this new project?
Apr 01 20:45:57 <panicbit>	At least AFAIK
Apr 01 20:46:09 <panicbit>	LambdaComplex: Which new project?
Apr 01 20:46:19 <LambdaComplex>	panicbit: The window functions thing
Apr 01 20:46:27 <panicbit>	LambdaComplex: wmutils++ ;D
Apr 01 20:46:38 <LambdaComplex>	panicbit: Alright, try again :P
Apr 01 20:46:40 <panicbit>	LambdaComplex: Maybe wmlib
Apr 01 20:46:52 <panicbit>	LambdaComplex: Mybe rust-wmlib
Apr 01 20:46:57 <LambdaComplex>	Isn't using "lib" in crate names frowned upon?
Apr 01 20:47:12 <Xion>	panicbit: I don't know how it has anything to do with the language though :P
Apr 01 20:47:14 <panicbit>	LambdaComplex: Not if it is a wrapper around another library I think
Apr 01 20:47:41 <panicbit>	LambdaComplex: I want to somehow express that it is NOT a WM though...
Apr 01 20:48:04 <panicbit>	Xion: It doesn't, you're right :)
Apr 01 20:48:09 <LambdaComplex>	panicbit: Then perhaps putting "wm" in the name is a bad idea 
Apr 01 20:49:05 <panicbit>	Xion: This discussion would probably be better suited for #rust-offtopic anyway
Apr 01 20:49:29 <panicbit>	LambdaComplex: Then I have no idea what to call it
Apr 01 20:50:01 <aatch>	LambdaComplex, glazier?
Apr 01 20:50:09 <LambdaComplex>	aatch: lolwut?
Apr 01 20:50:36 <aatch>	LambdaComplex, A glazier is somebody that installs and repairs windows.
Apr 01 20:50:36 <panicbit>	mounteverest ;Ü
Apr 01 20:51:24 <aatch>	LambdaComplex, I don't know anything about your library except that it's "window functions"
Apr 01 20:51:58 <LambdaComplex>	aatch: Well considering I only have a rough idea of what it's for....
Apr 01 20:52:02 <LambdaComplex>	I don't know much more than you :D
Apr 01 20:52:18 <LambdaComplex>	But if there's one thing I learned from the Dilbert TV show, it's that the first step in starting a project is to figure out the name
Apr 01 20:52:42 <aatch>	LambdaComplex, I think you need to know what the library will do first.
Apr 01 20:53:16 <LambdaComplex>	aatch: it was panicbit's idea i swear
Apr 01 20:53:18 <LambdaComplex>	i don't know nothing
Apr 01 20:54:45 <panicbit>	:O
Apr 01 20:54:55 *	panicbit is clueless as well
Apr 01 20:57:04 <LambdaComplex>	panicbit: well give some more examples then :p
Apr 01 20:57:43 *	panicbit is still cluelesd
Apr 01 20:57:49 <panicbit>	clueless*
Apr 01 20:58:33 <LambdaComplex>	well
Apr 01 20:58:45 <LambdaComplex>	returning window size as (x, y) would be useful 
Apr 01 20:58:51 <LambdaComplex>	same with screen size
Apr 01 21:00:15 <Xion>	panicbit: So many rust channels to be in!
Apr 01 21:00:23 <panicbit>	Xion: Yeah :/
Apr 01 21:00:44 <panicbit>	Xion: Though, I feel like you get less replies in #rust
Apr 01 21:01:05 <panicbit>	#rust-offtopic seems to be more active^^
Apr 01 21:01:41 <panicbit>	But that's probably just my impression
Apr 01 21:02:32 <Xion>	Everybody thinks they are beginners.
Apr 01 21:02:42 <aatch>	panicbit, it varies. Sometimes #rust is really active, sometimes #rust-beginners is.
Apr 01 21:03:38 <aatch>	Xion, well I certainly don't think I'm a beginner, but we need non-beginners in here in order to help the beginners.
Apr 01 21:04:21 <panicbit>	aatch: Oddly, I prefer #rust-offtpoic to ask my questions >.>
Apr 01 21:04:29 <Xion>	aatch: It's either the impostor syndrome, or the Duning-Kruger effect ;D
Apr 01 21:05:24 <aatch>	Xion, I'd like to think it's neither in my case. I have been using Rust for ~3 years now after all.
Apr 01 21:05:53 <panicbit>	Xion: Well, I don't hink I'm a beginner :P. But I would never dare to call myself anything better than intermediate.
Apr 01 21:07:25 *	Xion hasn't even put the obligatory 10KLOC in, so he's definitely a beginner.
Apr 01 21:07:31 <panicbit>	Pf
Apr 01 21:07:42 <panicbit>	Formalities
Apr 01 21:08:12 <panicbit>	Quality still beats quantity
Apr 01 21:08:47 <panicbit>	10Kloc is barely impressive if you can show me a ~100 loc ridiculous macro
Apr 01 21:09:20 <panicbit>	Just my personal to ¢loc
Apr 01 21:09:22 <panicbit>	two*
Apr 01 21:10:55 <panicbit>	Is there a tool that is able to SLOCCOUNT rust?
Apr 01 21:11:05 <Xion>	panicbit: Does https://github.com/Xion/rush/blob/master/src/eval/util/mod.rs qualify? :D
Apr 01 21:11:37 <panicbit>	Xion: What does it do? OD
Apr 01 21:11:40 <panicbit>	=D*
Apr 01 21:12:15 <Xion>	I use it to shorten API function definitions in my scripting language.
Apr 01 21:12:52 <durka42>	panicbit: I think I saw one on /r/rust
Apr 01 21:13:04 <Xion>	It basically asserts that Value objects belong to certain "type" (enum variant) and allows to provide an expression which will be the result of a function, automatically wrapping it in the correct Value variant.
Apr 01 21:13:29 <Xion>	panicbit: Usages are all over the place, e.g. https://github.com/Xion/rush/blob/master/src/eval/api/strings.rs
Apr 01 21:13:46 <durka42>	https://github.com/Aaronepower/tokei
Apr 01 21:14:34 <Aaronepower>	panicbit: It is built in Rust, and counts Rust! :D
Apr 01 21:14:42 <panicbit>	Xion: Sorry, I'm probably to poisend to grasp the macro right now ;D
Apr 01 21:14:50 <Xion>	panicbit: Or even better: https://github.com/Xion/rush/blob/master/src/eval/operators/binary.rs#L166
Apr 01 21:14:57 <Xion>	Heheh
Apr 01 21:15:16 <panicbit>	Aaronepower: Heh, thanks for chiming in :)
Apr 01 21:16:10 <panicbit>	Xion: Does it somewhat intersect with the usecase of my macro?
Apr 01 21:16:15 <Aaronepower>	panicbit: Also if you have any languages it doesn't count feel free to make a PR, or issue. I just need to know the file extensions, and the languages comment syntax.
Apr 01 21:16:36 <Xion>	panicbit: Which one?
Apr 01 21:16:48 <panicbit>	Xion: I've build a macro that defines a type for each eum varian and allows conversion between variant and corresponding type
Apr 01 21:17:00 <panicbit>	Aaronepower: Ok
Apr 01 21:17:20 <Xion>	panicbit: You mean https://github.com/Xion/rush/blob/master/src/eval/model/value.rs#L207 ? :)
Apr 01 21:17:26 <panicbit>	Xion: Demo: http://is.gd/ffFFQ4
Apr 01 21:17:59 <panicbit>	Damn, wrong link X.x
Apr 01 21:18:02 <Xion>	I don't see any macto here.
Apr 01 21:18:08 <panicbit>	Xion: Sorry :(
Apr 01 21:18:16 <Xion>	Happens to the best of us.
Apr 01 21:18:31 <panicbit>	Xion: https://play.rust-lang.org/?gist=fe8ea2b4a7ea57a9f344b6b32bea3afc&version=stable
Apr 01 21:18:45 <panicbit>	It's so long that I need to make it a gist link :)
Apr 01 21:19:04 <panicbit>	Xion: The demo is way down at the bottom
Apr 01 21:19:23 <Xion>	Oh, that is cool.
Apr 01 21:19:28 <panicbit>	Xion: It converts a specific error type to an error enum and back
Apr 01 21:19:34 <panicbit>	Xion: It's insanely cool IMO :)
Apr 01 21:20:10 <panicbit>	Xion: I'll need to add support for attr items and generic parameters though
Apr 01 21:21:05 <Xion>	You could use the conv create traits btw, it has TryFrom and TryInto
Apr 01 21:21:13 <Xion>	crate*
Apr 01 21:21:14 <panicbit>	Expect it to be part of the monster crate™®© soon ;)
Apr 01 21:21:30 <Xion>	I'd prefer you released more smaller crates ;p
Apr 01 21:21:33 <panicbit>	Xion: But they are using Result instead o Option
Apr 01 21:21:34 <Xion>	left-pad approach ftw
Apr 01 21:21:35 <Xion>	;)
Apr 01 21:21:43 <panicbit>	Xion: Which IMO doesn't quite fit this usecase
Apr 01 21:21:45 <Xion>	True.
Apr 01 21:21:59 <Xion>	Well, PR conv with your traits then :)
Apr 01 21:22:06 <panicbit>	Xion: I thought about adding the Maybe* traits to conv
Apr 01 21:22:35 <panicbit>	But I feel they are not as useful overall
Apr 01 21:24:02 <Xion>	Hmm. Was that you who implemented runtime format! ?
Apr 01 21:24:06 <Xion>	Or maybe it was durka42 
Apr 01 21:24:16 <Xion>	I'm still waiting for a fully functional version ;)
Apr 01 21:24:23 <durka42>	not me
Apr 01 21:24:40 <panicbit>	Xion: I did implement a limited kind of format!
Apr 01 21:25:00 <panicbit>	Xion: heh, it won't be as powwerful as format! without macro support
Apr 01 21:25:16 <panicbit>	Xion: https://panicbit.github.io/monster/monster/incubation/fmt/fn.format.html
Apr 01 21:25:26 <Xion>	Yeah, I poached that code wholesale :)
Apr 01 21:30:45 <panicbit>	Xion: Heh, nice :)
Apr 01 21:31:20 <panicbit>	Xion: Bonus points if you mentioned me ;D
Apr 01 21:33:24 <Xion>	panicbit: https://github.com/Xion/rush/blob/master/src/eval/util/fmt.rs#L2 :)
Apr 01 21:33:32 <durka42>	if I make an immovable object using the Cell<Option<&Self>> trick, will I be able to write &mut self methods?
Apr 01 21:34:05 <panicbit>	durka42: I don't think so
Apr 01 21:34:26 <Xion>	What happens when an unstoppable mem::transmute hits an immovable Cell<Option<&Self>>?
Apr 01 21:34:51 <panicbit>	durka42: thouh, disregard my words, I've no idea what trick you're talking about :P
Apr 01 21:35:02 <panicbit>	Xion: Thanks <3
Apr 01 21:37:45 <durka42>	panicbit: https://play.rust-lang.org/?gist=c2b12b25ae1b0f4e4d5d&version=stable
Apr 01 21:37:45 <mbrubeck>	durka42: No, while something is borrowed immutably you can't move it *or* borrow it mutably.
Apr 01 21:37:58 <durka42>	hmm ok, no big deal
Apr 01 21:38:04 <durka42>	working on porting HomeopathicStack to rust https://github.com/julianstorer/JUCE/blob/118e872bf246afa9b4124907f6d1864b4eedb43b/modules/juce_core/containers/juce_HomeopathicStack.h
Apr 01 21:38:10 <panicbit>	Xion: Hehe https://github.com/Xion/rush/blob/master/src/eval/util/fmt.rs#L90
Apr 01 21:39:30 <durka42>	maybe a better way is to make the struct unsized so it must be constructed inside a box?
Apr 01 21:39:32 <panicbit>	durka42: ponies
Apr 01 21:39:43 <durka42>	hey I didn't write the example
Apr 01 21:39:46 <panicbit>	durka42: I C WHUT U DID THERE
Apr 01 21:40:32 <panicbit>	Hm ok :/
Apr 01 21:40:48 <mbrubeck>	durka42: You can use interior mutability instead of &mut methods, depending on what you're doing.
Apr 01 21:40:55 <durka42>	yeah, I will
Apr 01 21:41:23 <durka42>	you have to declare it mutable anyway in order to call the immobilize method, so there's no loss of expressiveness :p
Apr 01 21:42:33 <panicbit>	interesting
Apr 01 21:47:36 <panicbit>	Xion: What else have you added bsesides error types?
Apr 01 21:47:48 <panicbit>	(Sorry, but I'm lacking the mental capacity right now ;D)
Apr 01 21:48:09 <panicbit>	Xion: Also, do you have any recommendations what to add?
Apr 01 21:49:43 <panicbit>	Xion: If there's demand for something don't hesitate to let me know via an issue :)
Apr 01 21:51:29 <LambdaComplex>	panicbit: Have you read this? http://www.mini-dweeb.org/~arnau/docs/dueti/project/report.pdf
Apr 01 21:51:39 <panicbit>	LambdaComplex: nope
Apr 01 21:52:59 <LambdaComplex>	panicbit: I'm on page 22 and so far it seems pretty cool
Apr 01 21:55:19 <panicbit>	LambdaComplex: It seems to give a good general overview of X11
Apr 01 21:56:15 <panicbit>	Xion: Did you catch the typo that I pointed to?
Apr 01 22:14:25 <TechnoCrunch>	back
Apr 01 22:15:49 <panicbit>	TechnoCrunch: wb
Apr 01 22:16:12 <TechnoCrunch>	Rust lifetimes ehh
Apr 01 22:16:24 <TechnoCrunch>	Never knew about them :S
Apr 01 22:18:09 <panicbit>	TechnoCrunch: You will get to learn about them a lot at some point :)
Apr 01 22:18:21 <panicbit>	Unless you bail
Apr 01 22:19:20 <TechnoCrunch>	yeah and will have to :) due to sdl2::render::Renderer wanting a lifetime
Apr 01 22:23:45 <panicbit>	TechnoCrunch: :/
Apr 01 22:24:43 <panicbit>	TechnoCrunch: The RendererBuilder::build will give you a Renderer with 'static lifetime http://angrylawyer.github.io/rust-sdl2/sdl2/render/struct.RendererBuilder.html#method.build
Apr 01 22:25:01 <panicbit>	Which is superb
Apr 01 22:31:18 <TechnoCrunch>	thanks panicbit :)
Apr 01 22:31:29 <panicbit>	TechnoCrunch: no prob :]
Apr 01 22:44:03 <LambdaComplex>	is there a crate that will make panicbit go to bed at a reasonable hour?
Apr 01 22:44:35 <panicbit>	LambdaComplex: Forget it, not when I'm filled with energy drink :P
Apr 01 22:45:06 <ontop>	Hello rusty people. I'm trying to figure out if Rust supports this use case: http://play.golang.org/p/xo3_9rRHj3 in order to avoid mindlessly writing proxy functions to the underlying Trait impl's.
Apr 01 22:45:55 <ontop>	Note how C embeds B, and therefore gets all it's methods stuck to it. And that way I don't have to implement anything for C yet it satisfies the interface!
Apr 01 22:46:58 <panicbit>	ontop: That looks ridiculous :)
Apr 01 22:47:03 <panicbit>	ontop: (no offense)
Apr 01 22:47:17 <panicbit>	ontop: In rust you'd have to implement the Deref trait
Apr 01 22:47:23 <panicbit>	ontop: To deref B to C
Apr 01 22:47:40 <panicbit>	ontop: Which would allow you to call all methods of C on B
Apr 01 22:47:42 <ontop>	Is it that the example is ridiculous, or the functionality?
Apr 01 22:48:06 <panicbit>	ontop: Forget what I said about the stuff being ridiculous :)
Apr 01 22:48:14 <ontop>	lol. Ok.
Apr 01 22:48:18 <ontop>	I think it's totally sane!
Apr 01 22:48:24 <panicbit>	ontop: It just confused me a bit :) My Go is a bit rusty ;)
Apr 01 22:48:42 <panicbit>	ontop: I'm jsut too used to Rust by now
Apr 01 22:48:52 <ontop>	That's fine.
Apr 01 22:48:52 <ontop>	So
Apr 01 22:49:12 <ontop>	I could just implement however many Deref coercions I want
Apr 01 22:49:18 <ontop>	And essentially have my "free proxying"
Apr 01 22:49:33 <ontop>	Because
Apr 01 22:49:34 <panicbit>	As an alternative, you may be implement the "interface" (trait in rust) for B in such a way, that it redirects to C
Apr 01 22:49:41 <panicbit>	But that would be the proxying that you try to avoid
Apr 01 22:49:46 <ontop>	^
Apr 01 22:49:48 <aatch>	ontop, you can only implement Deref once for a given type.
Apr 01 22:49:52 <panicbit>	^
Apr 01 22:49:58 <panicbit>	That's the downside...
Apr 01 22:49:59 <ontop>	Wat
Apr 01 22:50:00 <ontop>	WHAT
Apr 01 22:50:02 <ontop>	So, wait
Apr 01 22:50:06 <ontop>	Let me make sure I understand
Apr 01 22:50:23 <ontop>	If I have a struct that has a write and a read trait, and it's implemented by an underlying buffer or something
Apr 01 22:50:30 <ontop>	I can't simply deref coerce it into either?
Apr 01 22:50:33 <panicbit>	ontop: Think of it this way: Deref defines what type you get when you do `*foo`
Apr 01 22:50:34 <ontop>	I can only pick one or the other?
Apr 01 22:51:30 <ontop>	Deref coercions seem like a gross hack. No offense.
Apr 01 22:51:43 <ontop>	Overloading the dereference operator is like a sin or something.
Apr 01 22:51:45 <panicbit>	ontop: In Rust nobody would probably care to call a .c() method
Apr 01 22:51:53 <ontop>	Sorry?
Apr 01 22:51:53 <panicbit>	To get the underlying C
Apr 01 22:52:05 <panicbit>	er, nobody would probably mind*
Apr 01 22:52:22 <ontop>	Right, but then my type isn't satisfying the trait
Apr 01 22:52:23 <ontop>	That I want it to
Apr 01 22:53:45 <ontop>	So
Apr 01 22:53:48 <panicbit>	ontop: Would the interface/trait only be implemented by C and by types that contain Cs?
Apr 01 22:54:07 <panicbit>	in other words: is C required to implement that interface?
Apr 01 22:54:10 <ontop>	No.
Apr 01 22:54:14 <panicbit>	Hm :/
Apr 01 22:54:16 <ontop>	Interface/Traits are thus
Apr 01 22:54:19 <ontop>	They can be implemented by anything
Apr 01 22:54:22 <ontop>	That's why they're good :p
Apr 01 22:54:23 <ontop>	lol
Apr 01 22:54:43 <panicbit>	ontop: I feel like manual proxying is the best way to do it here :)
Apr 01 22:54:52 <ontop>	*in rust
Apr 01 22:54:55 <ontop>	You have to add that part ;)
Apr 01 22:54:55 <panicbit>	Yeah
Apr 01 22:55:05 <ontop>	I agree
Apr 01 22:55:07 <panicbit>	Well, it's implied, since you are in Rust territory here ;)
Apr 01 22:55:09 <ontop>	Deref coercions are not right here.
Apr 01 22:55:20 <ontop>	Right, but I had to make the point because I'm a little bit soul-crushed about this one lol.
Apr 01 22:55:27 <panicbit>	Hehe^^
Apr 01 22:55:45 <panicbit>	ontop: Let me try to translate your example as good as I can
Apr 01 22:55:59 <ontop>	No need
Apr 01 22:56:01 <ontop>	I can translate it.
Apr 01 22:56:07 <panicbit>	I want to do it though :D
Apr 01 22:56:09 <ontop>	Fair.
Apr 01 22:56:15 <ontop>	I'll see if it matches what I would write
Apr 01 22:56:17 <ontop>	And learn.
Apr 01 22:56:26 <panicbit>	Fine :)
Apr 01 22:56:39 <panicbit>	ontop: Do you want me to hold back my implementation until you are done?
Apr 01 22:56:44 <ontop>	No no
Apr 01 22:56:47 <panicbit>	Ok
Apr 01 22:56:48 <ontop>	I'm saying you go ahead
Apr 01 22:56:53 <ontop>	I'm just going to compare it to what I WOULD write
Apr 01 22:56:56 <ontop>	Not what I'm going to write
Apr 01 22:57:00 <ontop>	I don't actually need this :p lol
Apr 01 22:57:07 <panicbit>	^^
Apr 01 22:57:45 <ontop>	panicbit: Asian smiley or "pointing to what was said above with enthusiasm"?
Apr 01 22:57:49 <panicbit>	ontop: how much are you familiar with Rust yet?
Apr 01 22:57:57 <Xion>	panicbit: I probably want named placeholders, since I have an "object" type which is a hashmap that the user could provide when doing string formatting.
Apr 01 22:58:00 <panicbit>	ontop: "asian" smiley
Apr 01 22:58:31 <ontop>	panicbit: Cool. Only my Korean friends use that. Well and I do when I'm Korean-texting.
Apr 01 22:58:46 <ontop>	I'm not that familiar. I managed to serialize a HashMap into msgpack yesterday
Apr 01 22:58:52 <ontop>	And that was basically my crowning achievement.
Apr 01 22:59:08 <panicbit>	ontop: Then there's probably still a lot to learn :)
Apr 01 22:59:11 <ontop>	^
Apr 01 22:59:22 <ontop>	I think I've got a good handle so far tho
Apr 01 22:59:25 <ontop>	Read the whole book
Apr 01 22:59:28 <panicbit>	But I hope it will be enjoyable with the help of the Rust community
Apr 01 22:59:38 <panicbit>	nice
Apr 01 22:59:39 <ontop>	So far this channel has been excellent to me. So props for that.
Apr 01 22:59:45 <panicbit>	Thanks!
Apr 01 23:00:23 <Xion>	I don't think Rust has much in the way of inheritance story right now.
Apr 01 23:00:40 <ontop>	Neither does Go. But composition it has down pat.
Apr 01 23:01:12 <Xion>	These are basically the same thing here. Take a type and extend it.
Apr 01 23:01:54 <ontop>	Sure. But there are some important differences - mostly around variable access and things.
Apr 01 23:01:59 <Xion>	I had roughly this problem when handling AST, which I used trait objects for.
Apr 01 23:02:18 <ontop>	AST?
Apr 01 23:02:21 <ontop>	Are you writing a parser?
Apr 01 23:02:36 <Xion>	http://github.com/Xion/rush
Apr 01 23:02:43 <Xion>	A small scripting language of sorts.
Apr 01 23:02:50 <ontop>	Oh very neat.
Apr 01 23:02:57 <ontop>	Xion: Any inspiration from fish?
Apr 01 23:03:12 <Xion>	Nah.
Apr 01 23:03:14 <panicbit>	ontop: This is my translation of your code https://play.rust-lang.org/?gist=16d1644952f0535a024bfef60802b1b1&version=stable
Apr 01 23:03:18 <Xion>	The original blurb was "sed/awk for Humans" :)
Apr 01 23:03:40 <aatch>	Xion, why use trait objects and not enums? Enums tend to be pretty much perfect for ASTs
Apr 01 23:03:58 <ontop>	panicbit: Something just blew my mind. Can rust trait methods omit &self?
Apr 01 23:04:05 <panicbit>	ontop: They can
Apr 01 23:04:10 <ontop>	That's cool.
Apr 01 23:04:13 <panicbit>	ontop: But then you can't call them on values
Apr 01 23:04:20 <ontop>	Of course not
Apr 01 23:04:23 <ontop>	But you could say something like
Apr 01 23:04:24 <panicbit>	ontop: You need to call them like Foo::method()
Apr 01 23:04:25 <ontop>	trait Constructoring {
Apr 01 23:04:30 <ontop>	And then force people to have constructors
Apr 01 23:04:32 <ontop>	For some awkward code
Apr 01 23:04:32 <panicbit>	ontop: We have Default::default() ;)
Apr 01 23:04:33 <Xion>	aatch: I may actually merge it back into an enum, though having an Eval trait grants me quite a bit of flexibility.
Apr 01 23:04:37 <ontop>	Ah right.
Apr 01 23:04:46 <panicbit>	playbot: let foo: i32 = Default::default(); foo
Apr 01 23:04:47 -playbot/#rust-beginners-	0
Apr 01 23:05:06 <panicbit>	playbot: let foo = String::default(); foo
Apr 01 23:05:07 -playbot/#rust-beginners-	""
Apr 01 23:05:11 <Xion>	Yeah, these are "static" methods.
Apr 01 23:05:35 <ontop>	panicbit: In Go - some of the interfaces are literally life and death. Like io.Writer/Reader are incredibly well thought out interfaces that permeate the entire ecosystem.
Apr 01 23:05:42 <ontop>	What's the most pivotal trait in Rust in your eyes?
Apr 01 23:05:57 <panicbit>	ontop: Probably Debug, Show, Read and Write
Apr 01 23:06:04 <Xion>	panicbit: Display* :)
Apr 01 23:06:08 <panicbit>	Also, Copy, Clone, Eq, PartialEq...
Apr 01 23:06:12 <ontop>	Soo...
Apr 01 23:06:13 <Xion>	panicbit: But I see your Haskell alright.
Apr 01 23:06:13 <ontop>	All of them?
Apr 01 23:06:14 <ontop>	lmao.
Apr 01 23:06:15 <panicbit>	Xion: Whoops
Apr 01 23:06:22 <panicbit>	ontop: There are a lot of useful traits ;)
Apr 01 23:06:23 <ontop>	Xion: I love Haskell ^_^
Apr 01 23:06:45 <Xion>	There is a trait basically for every basic operation, including operators.
Apr 01 23:06:54 <Xion>	(That's how you redefine operators: you implement traits)
Apr 01 23:06:56 <panicbit>	ontop: Sync and Send are probably also very important
Apr 01 23:06:58 <ontop>	Right I've seen that.
Apr 01 23:07:03 <ontop>	panicbit: Was about to read about those
Apr 01 23:07:04 <ontop>	Question
Apr 01 23:07:05 <Xion>	I especially like how Eq and PartialEq are separate.
Apr 01 23:07:06 <panicbit>	ontop: They don't have any actual implementation
Apr 01 23:07:10 <panicbit>	ontop: They are just markers
Apr 01 23:07:35 <ontop>	Semantically I understand the difference between Debug and Display, but how do you execute them in a normal way? Do they get displayed in stack traces for debug? Or is it a differetn call?
Apr 01 23:07:38 <panicbit>	Which make the whole sharing across threads safe ;)
Apr 01 23:07:39 <ontop>	Different print macro?
Apr 01 23:08:03 <Xion>	Different placeholder. {} is for Display, {:?} for Debug.
Apr 01 23:08:04 <panicbit>	ontop: It's just different trait methods being called
Apr 01 23:08:16 <panicbit>	ontop: e.g. Debug::fmt vs Display::fmt
Apr 01 23:08:24 <ontop>	Xion got it.
Apr 01 23:08:25 <Xion>	playbot: format!("{:?}", "foo")
Apr 01 23:08:27 -playbot/#rust-beginners-	"\"foo\""
Apr 01 23:08:30 <Xion>	playbot: format!("{}", "foo")
Apr 01 23:08:31 -playbot/#rust-beginners-	"foo"
Apr 01 23:08:44 <Xion>	(Debug is basically __repr__ from Python)
Apr 01 23:09:00 <ontop>	That helps not at all. I don't know any Python :D
Apr 01 23:09:02 <Xion>	(And Display is __str__)
Apr 01 23:09:06 <Xion>	;D
Apr 01 23:09:15 <panicbit>	The first one calls <String as Debug>::fmt and the second one calls <String as Display>::fmt
Apr 01 23:09:24 <panicbit>	(although, it's probably str instead of String, eh?)
Apr 01 23:09:44 <panicbit>	Also, I'm not sure I got that syntax right :P
Apr 01 23:09:55 <ontop>	It should be String no?
Apr 01 23:10:02 <aatch>	panicbit, it's correct.
Apr 01 23:10:16 <panicbit>	ontop: Most interesting things are actually implemente on str
Apr 01 23:10:19 <Xion>	If panicbit is talking about my examples, then "foo" is a &str of course.
Apr 01 23:10:21 <panicbit>	implemented*
Apr 01 23:10:27 <ontop>	Right. But in real life
Apr 01 23:10:31 <ontop>	Isn't it going to be String?
Apr 01 23:10:38 <ontop>	Because it's likely a dynamic value
Apr 01 23:10:39 <aatch>	ontop, not necessarily.
Apr 01 23:10:40 <Xion>	ontop: Strings are complicated because no GC.
Apr 01 23:10:41 <panicbit>	Not necessarily
Apr 01 23:10:44 <ontop>	Ok.
Apr 01 23:10:46 <panicbit>	:D
Apr 01 23:10:48 <aatch>	ontop, &str is pretty common.
Apr 01 23:10:51 <ontop>	I need to revisit strings then :|
Apr 01 23:11:09 <Xion>	ontop: Do you know C++?
Apr 01 23:11:12 <panicbit>	ontop: I got a little bit confused by them when I started as well
Apr 01 23:11:13 <ontop>	Yes.
Apr 01 23:11:21 <Xion>	ontop: Then String is std::string and &str is char*
Apr 01 23:11:27 <ontop>	Oh.
Apr 01 23:11:31 <ontop>	That's quite helpful thx you.
Apr 01 23:11:39 <Xion>	I mean, roughly.
Apr 01 23:11:43 <panicbit>	^
Apr 01 23:11:44 <Xion>	&str knows its size for example.
Apr 01 23:11:49 <ontop>	Yeah I noticed that
Apr 01 23:11:51 <ontop>	It blew my mind
Apr 01 23:11:52 <panicbit>	(it's a fat pointer)
Apr 01 23:11:55 <ontop>	I was like: HOW U KNOW SIZE?
Apr 01 23:12:00 <Xion>	:D
Apr 01 23:12:02 <panicbit>	;D
Apr 01 23:12:06 <ontop>	Was expecting a syntax error on my .len()
Apr 01 23:12:07 <curtism>	The most important trait is Sized
Apr 01 23:12:09 <curtism>	Clearly
Apr 01 23:12:13 <Xion>	^ This.
Apr 01 23:12:17 <ontop>	Oh?
Apr 01 23:12:17 <panicbit>	:O
Apr 01 23:12:21 <aatch>	Haha
Apr 01 23:12:25 <ontop>	curtism: I'm infinity curious
Apr 01 23:12:33 <ontop>	If it truly is, why?
Apr 01 23:12:44 <panicbit>	Not sure if serious or joke
Apr 01 23:12:45 <aatch>	ontop, Sized is an implicit bound for type parameters.
Apr 01 23:12:47 <curtism>	Because nothing would work without it
Apr 01 23:13:00 <curtism>	Where "nothing" is "most things"
Apr 01 23:13:09 <curtism>	uh
Apr 01 23:13:16 <curtism>	Most things would not work without it
Apr 01 23:13:24 <panicbit>	True, most things you deal with are usually Sized
Apr 01 23:13:39 <ontop>	We don't need stacks
Apr 01 23:13:43 <ontop>	Maybe.
Apr 01 23:13:56 <ontop>	Give me a Sized pointer, and I'll write any program!
Apr 01 23:13:58 <ontop>	Might be slow.
Apr 01 23:14:00 <ontop>	But I'll do it!
Apr 01 23:14:32 <Xion>	ontop: In Rust you can just clone() the shit out of everything at first. It will be "slow" but it will work :D
Apr 01 23:14:43 <ontop>	lol.
Apr 01 23:14:53 <panicbit>	Until you hit something that is not Clone :P
Apr 01 23:15:22 <Xion>	I think this is a good opportunity to shamelessly plug my blogpost: http://xion.io/post/code/rust-borrowchk-tricks.html :)
Apr 01 23:16:01 <TechnoCrunch>	Does rust have type casts?
Apr 01 23:16:12 <panicbit>	yes
Apr 01 23:16:46 <panicbit>	playbot: let foo: i32 = -1; foo as u32
Apr 01 23:16:47 -playbot/#rust-beginners-	4294967295
Apr 01 23:17:02 <panicbit>	TechnoCrunch: Tehre you go :P
Apr 01 23:17:27 <panicbit>	TechnoCrunch: You can cast between compatible primitive types using `xyz as TYPE`
Apr 01 23:17:51 <panicbit>	usually that's only integers and maybe floats
Apr 01 23:17:58 <curtism>	And for crazy shit....
Apr 01 23:18:07 <panicbit>	transmute all the things!!!
Apr 01 23:18:15 <panicbit>	(please don't :'( )
Apr 01 23:18:48 <curtism>	playbot: unsafe { std::mem::transmute::<i32, [u8; 4]>(-38647) }
Apr 01 23:18:49 -playbot/#rust-beginners-	[9, 105, 255, 255]
Apr 01 23:18:59 <ontop>	Coool!
Apr 01 23:19:02 <TechnoCrunch>	panicbit, thanks, because SDL_DestoryWindow requires a *mut sdl2_sys::video::SDL_Window
Apr 01 23:19:20 <panicbit>	TechnoCrunch: oO
Apr 01 23:19:42 <panicbit>	TechnoCrunch: I highly doubt that you need to use that low-level function
Apr 01 23:21:39 <panicbit>	playbot: struct Poop(usize, usize, usize); struct Gold(String); let gold: Gold = unsafe{::std::mem::transmute(Poop(1,1,1))};
Apr 01 23:21:40 -playbot/#rust-beginners-	playpen: application terminated abnormally with signal 11 (Segmentation fault)
Apr 01 23:21:47 <panicbit>	Great success!
Apr 01 23:22:13 <panicbit>	That's why you shouldn't transmute poop to gold, I hope everyone has learned a lesson :P
Apr 01 23:23:25 <TechnoCrunch>	okay?
Apr 01 23:23:40 <panicbit>	TechnoCrunch: To destroy the window you just need to getdrop it
Apr 01 23:23:52 <panicbit>	TechnoCrunch: Get it out of scope somehow
Apr 01 23:24:26 <curtism>	playbot: const poop: &'static str = "gold"; struct Poop(usize, usize, usize); struct Gold(String); let gold: Gold = unsafe { std::mem::transmute(Poop(poop as *const _ as usize, 4, 4)) }; gold
Apr 01 23:24:27 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1RuUjFW
Apr 01 23:24:50 <curtism>	playbot: const poop: &'static str = "gold"; struct Poop(usize, usize, usize); #[derive(Debug)] struct Gold(String); let gold: Gold = unsafe { std::mem::transmute(Poop(poop as *const _ as usize, 4, 4)) }; gold
Apr 01 23:24:51 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1RRMf0Z
Apr 01 23:25:16 <curtism>	huh, can I really not do that?
Apr 01 23:25:36 <panicbit>	curtism: Hehe, nope because it's a fat ptr I guess
Apr 01 23:25:42 <Xion>	trait `Midas` not implemented for object `curtism`
Apr 01 23:26:02 <curtism>	panicbit: I'm casting to a raw pointer, then to usize
Apr 01 23:26:07 <panicbit>	Xion: Not sure implementing Midas is a good thing though...
Apr 01 23:26:10 <nkr>	&mut [u8] -> is that an array?
Apr 01 23:26:51 <mbrubeck>	nkr: It's a pointer to a "slice" which might be a whole array, or some contiguous subset of an array.
Apr 01 23:27:07 <aatch>	curtism, you can cast from a fat raw pointer to a thin raw pointer.
Apr 01 23:27:11 <nkr>	ah okay thanks mbrubeck :D
Apr 01 23:27:45 <aatch>	curtism, so you need to go via something like *const u8
Apr 01 23:27:54 <curtism>	Oh
Apr 01 23:28:05 <curtism>	playbot: const poop: &'static str = "gold"; struct Poop(usize, usize, usize); #[derive(Debug)] struct Gold(String); let gold: Gold = unsafe { std::mem::transmute(Poop(poop as *const _ as *const u8 as usize, 4, 4)) }; gold
Apr 01 23:28:06 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1RuUxwS
Apr 01 23:28:20 <curtism>	OH SORRY RUSTC
Apr 01 23:28:29 <curtism>	playbot: const POOP: &'static str = "gold"; struct Poop(usize, usize, usize); #[derive(Debug)] struct Gold(String); let gold: Gold = unsafe { std::mem::transmute(Poop(POOP as *const _ as *const u8 as usize, 4, 4)) }; gold
Apr 01 23:28:30 -playbot/#rust-beginners-	Gold("gold")
Apr 01 23:28:43 <panicbit>	curtism: Achievement unlocked: Midas
Apr 01 23:29:22 <aatch>	I am surprised that didn't crash at the end.
Apr 01 23:29:36 <panicbit>	Wagic
Apr 01 23:29:38 <curtism>	Why?
Apr 01 23:29:50 <curtism>	Oh, trying to drop?
Apr 01 23:31:28 <panicbit>	ontop: This is an example of trait methods without a self receiver: http://is.gd/TTNhLT
Apr 01 23:31:35 <curtism>	playbot: const POOP: &'static str = "gold"; struct Poop(usize, usize, usize); #[derive(Debug)] struct Gold(String); let gold: Gold = unsafe { std::mem::transmute(Poop(POOP as *const _ as *const u8 as usize, 8, 8)) }; gold
Apr 01 23:31:36 -playbot/#rust-beginners-	Gold("goldGold")
Apr 01 23:32:20 <ontop>	Oic
Apr 01 23:32:21 <ontop>	:D
Apr 01 23:32:36 <panicbit>	ontop: It also touches on trait bounds and unit types :P
Apr 01 23:33:05 <panicbit>	ontop: You can't create a value of the type Afternoon or Midnight btw :)
Apr 01 23:33:15 <ontop>	Holy crap this font on the rust playground is garbage
Apr 01 23:33:17 <ontop>	What the hell is this.
Apr 01 23:33:45 <curtism>	Source Code Por
Apr 01 23:33:50 <curtism>	Pro
Apr 01 23:34:00 <curtism>	What do you find wrong with it?
Apr 01 23:34:28 <ontop>	I'm not sure if I have that font
Apr 01 23:34:32 <ontop>	So I'm probably not even seeing it
Apr 01 23:34:42 <curtism>	I assume it's webfont
Apr 01 23:34:45 <panicbit>	Yeah it may be that you're using a fallback font
Apr 01 23:34:48 <panicbit>	Oh right
Apr 01 23:34:55 <ontop>	Ah
Apr 01 23:34:56 <ontop>	Derp
Apr 01 23:34:58 <aatch>	It is a webfont
Apr 01 23:34:59 <ontop>	Of course it would be
Apr 01 23:35:06 <panicbit>	It is indeed
Apr 01 23:35:09 <ontop>	I'm not sure - it's just kind of grating. Like the i
Apr 01 23:35:14 <ontop>	The little serif bit it has on it
Apr 01 23:35:15 <panicbit>	(https://fonts.googleapis.com/css?family=Source+Code+Pro:400,700)
Apr 01 23:35:20 <ontop>	That's like staring into the eyes of madness.
Apr 01 23:35:42 <aatch>	ontop, that's pretty common in monospace fonts.
Apr 01 23:35:46 *	curtism takes a screenshot of their terminal for ontop 
Apr 01 23:35:59 <panicbit>	ontop: Honestly, I personally don't care tha much, as long as it's not comic sans and it has syntax highlighting :D
Apr 01 23:36:04 <ontop>	lol.
Apr 01 23:36:04 <panicbit>	that*
Apr 01 23:36:39 <panicbit>	I'd appreciate DejaVu Sans Mono, Hack or Monofur though :)
Apr 01 23:36:57 <curtism>	ontop: What do you think of my font? https://u.cmcenroe.me/e2dd77c.png
Apr 01 23:37:08 <panicbit>	comic saaaans
Apr 01 23:37:14 <ontop>	It's not sans
Apr 01 23:37:15 <panicbit>	-ish
Apr 01 23:37:16 <ontop>	It's mono space
Apr 01 23:37:17 <ontop>	lol.
Apr 01 23:37:21 <panicbit>	comic serif? ;D
Apr 01 23:37:29 <ontop>	I can't read that. Like literally everything blurs together.
Apr 01 23:37:30 <ontop>	lmao.
Apr 01 23:37:31 <panicbit>	comic serif mono
Apr 01 23:37:33 <panicbit>	:P
Apr 01 23:37:51 <aatch>	I use this in my editor: https://www.fontsquirrel.com/fonts/Envy-Code-R
Apr 01 23:37:55 <Xion>	lol dat font
Apr 01 23:37:59 <ontop>	I used to use Envy Code R
Apr 01 23:38:01 <ontop>	A long ass time ago
Apr 01 23:38:08 <ontop>	THen I started using Consolas/Inconsolata/Droid Sans Mono
Apr 01 23:38:11 <ontop>	Never left there.
Apr 01 23:39:39 <panicbit>	http://i.imgur.com/pzsoGaY.png
Apr 01 23:39:58 <curtism>	heh I like it
Apr 01 23:40:02 <panicbit>	Monofur ;)
Apr 01 23:40:15 <curtism>	I have a thing for quirky fonts
Apr 01 23:40:22 <curtism>	Actually I think I've tried Monofur
Apr 01 23:40:45 <panicbit>	curtism: The weird thing is that I got so used to it that I can barely differentiate between monofur and dejavu anymore...
Apr 01 23:41:30 <curtism>	Before my current font (Pointfree), I used ProFont for a long time
Apr 01 23:41:34 <curtism>	That font is sick, yo
Apr 01 23:41:36 <aatch>	panicbit, the upper case letters look ok, not a fan of the lowercase ones though.
Apr 01 23:42:51 <curtism>	Pointfree looks great in caps
Apr 01 23:43:08 <panicbit>	I'd like to try a font with ligatures for certain programming symbols, but none of my prefered editors support ligatures :D
Apr 01 23:43:09 <ontop>	curtism: Was that Screenshot pointfree?
Apr 01 23:43:20 <curtism>	Yeah
Apr 01 23:43:28 <LambdaComplex>	panicbit: that is, without a doubt, the second-worst font i've ever seen used in a terminal
Apr 01 23:43:38 <curtism>	Hm, I don't like the sizing/proportion of Monofur
Apr 01 23:43:45 <panicbit>	LambdaComplex: It's not a terminal screeny :)
Apr 01 23:43:52 <panicbit>	LambdaComplex: Though, I also use it in the terminal ;D
Apr 01 23:43:56 <LambdaComplex>	okay, text editor
Apr 01 23:44:07 <LambdaComplex>	actually it _might_ be third-worst
Apr 01 23:44:14 <LambdaComplex>	can't decide if it's worse than terminus or not
Apr 01 23:44:29 <curtism>	This used to be my thing (ProFont) https://u.cmcenroe.me/e1dee3a.png
Apr 01 23:44:35 <LambdaComplex>	also >not using one true bracket style
Apr 01 23:44:44 <LambdaComplex>	ooh, gruvbox?
Apr 01 23:44:45 <panicbit>	curtism: Hm, looks interesting
Apr 01 23:44:52 <panicbit>	curtism: But it looks a bit dense to me
Apr 01 23:45:03 <panicbit>	curtism: But that may be the editor/terminal
Apr 01 23:45:12 <curtism>	It's quite a thick font
Apr 01 23:45:22 *	LambdaComplex should try gruvbox sometime
Apr 01 23:45:44 <LambdaComplex>	also deja vu sans mono for life
Apr 01 23:45:56 <panicbit>	^
Apr 01 23:46:09 <curtism>	On Linux I agree with you
Apr 01 23:46:11 <panicbit>	It's my default font, together with monofur
Apr 01 23:46:23 <curtism>	It's the only set of fonts that consistently render nicely at any size
Apr 01 23:46:24 <panicbit>	LambdaComplex: You should check out Hack though, it's based on DejaVu
Apr 01 23:46:34 <panicbit>	LambdaComplex: http://sourcefoundry.org/hack/
Apr 01 23:47:31 <curtism>	But one of my criteria for a programming font is that it doesn't include bold or italic versions
Apr 01 23:48:04 <panicbit>	In the end it's all personal choice
Apr 01 23:48:13 <panicbit>	There's no "the best" font
Apr 01 23:48:21 <panicbit>	There's "the worst" font though :P
Apr 01 23:48:55 <LambdaComplex>	panicbit: it's literally exactly the same with the exception of like 4 glyphs
Apr 01 23:48:56 <Xion>	Since we're showing off: http://i.imgur.com/VrMbX0u.png (DejaVu Sans Mono)
Apr 01 23:49:21 <panicbit>	LambdaComplex: Doesn't look like that to me
Apr 01 23:49:26 <panicbit>	LambdaComplex: But it's ok
Apr 01 23:49:46 <curtism>	Xion: psh
Apr 01 23:50:53 <Xion>	curtism: No, I use zsh :)
Apr 01 23:51:03 <curtism>	har
Apr 01 23:51:33 <LambdaComplex>	panicbit: red square = hack http://i.imgur.com/8SqL6mT.gif
Apr 01 23:52:26 <panicbit>	LambdaComplex: YOU WIN
Apr 01 23:52:26 <curtism>	You're a hack!
Apr 01 23:52:49 <LambdaComplex>	>implying i don't know my fonts
Apr 01 23:52:51 <LambdaComplex>	pfft
Apr 01 23:52:58 <LambdaComplex>	also https://u.teknik.io/esVSw.png
Apr 01 23:53:00 <panicbit>	LambdaComplex: 0 has also a different glyph though
Apr 01 23:53:01 <LambdaComplex>	since we're showing off
Apr 01 23:53:40 <panicbit>	LambdaComplex: herbstluftwm?
Apr 01 23:53:40 <Xion>	what is this ugly python lol
Apr 01 23:53:56 <LambdaComplex>	panicbit: nope, good guess though
Apr 01 23:54:03 <panicbit>	LambdaComplex: Well, it's a lazy guess
Apr 01 23:54:07 <LambdaComplex>	bspwm
Apr 01 23:54:23 <LambdaComplex>	(which iirc was originally "hlwm with less features")
Apr 01 23:56:01 <LambdaComplex>	panicbit: so everything I've seen using XCB in C has the connection as a global thing. should i avoid that in rust?
Apr 01 23:56:16 <panicbit>	LambdaComplex: If you can yes
Apr 01 23:56:48 <panicbit>	LambdaComplex: But since the Connection doesn't require &mut self in it's methods it should be fine to use it in a global variable
Apr 01 23:56:55 <panicbit>	LambdaComplex: e.g. using lazy_static!
Apr 01 23:58:32 <LambdaComplex>	panicbit: so what exactly does lazy_static! do?
Apr 02 00:00:04 <curtism>	magic
Apr 02 00:00:47 <LambdaComplex>	what kind of magic?
Apr 02 00:01:02 <aatch>	LambdaComplex, the simple answer is that it creates a lazily-intialized global variable.
Apr 02 00:02:21 <panicbit>	LambdaComplex: Usually you can only initialize a global variable using static initializers
Apr 02 00:02:47 <panicbit>	LambdaComplex: But using some trickery lazy_static! allows you to use arbitrary functions to initilize them
Apr 02 00:05:48 <panicbit>	LambdaComplex: The initialization will start as soon as you try to access the static
Apr 02 00:08:04 <LambdaComplex>	panicbit: So how exactly do I use it to get the connection?
Apr 02 00:08:13 <LambdaComplex>	(since connect() returns a Result now)
Apr 02 00:08:49 <panicbit>	LambdaComplex: You probably should handle that inside of the lazy_static initialization
Apr 02 00:09:08 <panicbit>	LambdaComplex: Otherwise you'd be required to always go through the Result when you try to access the static
Apr 02 00:09:08 *	LambdaComplex will try that
Apr 02 00:09:45 <panicbit>	Since a connection error is fatal this should work out well enough
Apr 02 00:09:57 <panicbit>	You can handle it the same way as you did before
Apr 02 00:10:17 <LambdaComplex>	panicbit: That's how I'm trying it and it's not working :(
Apr 02 00:10:26 <panicbit>	LambdaComplex: Code and errors!
Apr 02 00:10:31 <panicbit>	LambdaComplex: ;P
Apr 02 00:10:51 <panicbit>	There's not much I can't do without them :)
Apr 02 00:11:00 <panicbit>	can*
Apr 02 00:11:02 <panicbit>	xD
Apr 02 00:11:19 <LambdaComplex>	Hold on, lemme push to github
Apr 02 00:11:25 <panicbit>	sure
Apr 02 00:13:56 <LambdaComplex>	panicbit: https://github.com/sector-f/swm-rust/blob/master/src/swm.rs
Apr 02 00:14:34 <panicbit>	LambdaComplex: And the error?
Apr 02 00:14:45 <panicbit>	Eh, let me pull it
Apr 02 00:15:40 <panicbit>	Eh, that sucks...
Apr 02 00:16:28 <panicbit>	LambdaComplex: Try wrapping it in an Arc
Apr 02 00:17:41 <panicbit>	LambdaComplex: Nope, that won't work
Apr 02 00:17:54 <panicbit>	Since the type isn't even Send
Apr 02 00:18:07 <panicbit>	You could hack around that
Apr 02 00:18:15 <panicbit>	But it's not worth the trouble
Apr 02 00:18:27 <panicbit>	It's easier not to use statics...
Apr 02 00:20:40 <panicbit>	Not to mention that hacking around it is unsafe
Apr 02 00:21:04 <panicbit>	Since you could potentially use it from different threads, which is very likely not supported
Apr 02 00:23:34 <LambdaComplex>	panicbit: ...Should I just stop trying to make it global?
Apr 02 00:23:41 <panicbit>	LambdaComplex: Yes..
Apr 02 00:23:52 <LambdaComplex>	panicbit: That I can handle :D
Apr 02 00:23:56 <panicbit>	:D
Apr 02 00:30:58 <LambdaComplex>	Damn Rust and its memory safety
Apr 02 00:31:04 <LambdaComplex>	What if I _want_ memory errors!?
Apr 02 00:31:13 <curtism>	unsafe { }
**** ENDING LOGGING AT Sat Apr  2 00:35:29 2016

**** BEGIN LOGGING AT Sat Apr  2 00:35:37 2016

Apr 02 00:35:37 *	Now talking on #rust-beginners
Apr 02 00:35:37 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 02 00:35:37 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
**** ENDING LOGGING AT Sat Apr  2 00:36:04 2016

**** BEGIN LOGGING AT Tue Apr  5 21:43:35 2016

Apr 05 21:43:35 *	Now talking on #rust-beginners
Apr 05 21:43:35 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 05 21:43:35 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 05 22:25:01 <chasinglogic>	Does anyone here have any experience with Diesel?
Apr 05 22:33:35 <caconym>	are there any books better than the rust-lang.org one and "rust by example" for rust beginners with a fair amount of experience with other languages? so far "rust by example" seems like the best option
Apr 05 22:34:04 <caconym>	i suppose by "books" i mean "websites"
Apr 05 22:44:02 <curtism>	caconym: How do you mean "better"? What are you looking for?
Apr 05 22:50:28 <caconym>	curtism: guides that help me to quickly gain insight into rust's features and get to a point where i can use it comfortably?
Apr 05 22:51:35 <aatch>	caconym, beyond the book and rust-by-example, not much right now.
Apr 05 22:51:41 <caconym>	i don't mean to imply that the aforementioned books are bad, i'm just wondering if i missed any
Apr 05 22:51:48 <caconym>	aatch: thanks
Apr 05 22:54:13 <caconym>	i started with "the book" and felt like a lot of interesting things were glossed over e.g. ok, this is the syntax for explicit lifetime annotations, but when would I want to use them?
Apr 05 22:55:42 <ivan>	https://doc.rust-lang.org/nomicon/ covers a lot of interesting stuff
Apr 05 22:58:23 <caconym>	ivan: i'll check that out, thanks
Apr 05 23:02:05 <aatch>	caconym, what languages do you have experience with, btw?
Apr 05 23:02:48 <aatch>	caconym, since it'll probably be worthwhile to focus on certain aspects of the language over others depending on what you're used to.
Apr 05 23:03:06 <llandersll>	I'm writing a wrapper for a C api. This API passes around 32-bit unsigned integers as ID values, and uses a value of -1 as "invalid ID" which is used several places. Obviously Rust doesn't like a u32 with value -1, am I right in thinking that's equivalent to u32::MAX?
Apr 05 23:03:54 <aatch>	llandersll, it is, but I prefer using !0
Apr 05 23:04:17 <aatch>	llandersll, I think it makes it more clear that it's a special value that way too.
Apr 05 23:04:41 <llandersll>	yeah I like that, thanks!
Apr 05 23:06:15 <aatch>	llandersll, assuming you have a wrapper ID type, having an `is_invalid` method and maybe a `INVALID_ID` constant around isn't a bad idea either.
Apr 05 23:07:40 <llandersll>	Yeah there's a #define on the C side for that too so that would make sense
Apr 05 23:09:09 <aatch>	llandersll, it's a self-documenting code thing.
Apr 05 23:09:53 <caconym>	aatch: haskell, C, ruby primarily
Apr 05 23:10:23 <caconym>	i have to run actually but i will grep for your name in the logs later if you happen to have any useful info based on that :) thx for the resource suggestion
Apr 05 23:10:49 <aatch>	caconym, how much C? Because if it's not much, then I think "Ownership" is probably the best thing to look at.
Apr 05 23:52:37 <caconym>	aatch: a fair amount, i'm not a crazy C hacker but i have a good-enough feel for pointers and memory management and such
Apr 05 23:53:23 <caconym>	the ownership/lifetime stuff is what intrigues me about rust the most, i've been trying to to grok it in the context of memory management in C actually
Apr 05 23:54:20 <caconym>	i think i'm getting a feel for it now but in the beginning especially with some of the automatic dereferencing that goes on i was a bit confused
Apr 05 23:54:54 <aatch>	caconym, well ownership can be mostly easily thought of as "who frees this memory?".
Apr 05 23:55:46 <aatch>	caconym, which isn't an alien concept in C where you have APIs that "take ownership" of a supplied pointer.
Apr 05 23:56:39 <caconym>	yup, the biggest head scratchers have come when i wanted to pass off a pointer/reference but the lifetime system forbade me from doing it
Apr 05 23:57:28 <aatch>	caconym, so borrowing/lifetimes are all about ensuring that your pointer is valid.
Apr 05 23:57:52 <aatch>	caconym, well, lifetimes are, borrowing is so you don't have to always copy data.
Apr 05 23:59:32 <aatch>	caconym, I find it easiest to build it up from the basic ideas. You start with memory management: an allocated pointer must be freed exactly once. Which you can solve using ownership.
Apr 06 00:00:30 <aatch>	caconym, then you want to have pointers that *don't* own the data they point to, since otherwise you need to copy data. A LOT. That's where borrowed pointers come in.
Apr 06 00:01:19 <aatch>	caconym, then finally you want to make sure that the borrowed pointers can't be used after the original pointer has been freed. That's lifetimes.
Apr 06 00:01:34 <caconym>	well "borrowed" references seem analagous to pointers in C, right? with the static guarantee based on lifetimes that you can't have a pointer to memory that's been freed
Apr 06 00:02:14 <aatch>	caconym, well they're just pointers at runtime.
Apr 06 00:02:29 <caconym>	i think the thing i haven't grokked yet is how to do the C pattern where you allocate some memory on the heap and return a reference to it
Apr 06 00:02:36 <aatch>	caconym, Box
Apr 06 00:02:38 <caconym>	or what the equivalent of that would be
Apr 06 00:02:40 <caconym>	yeah, ok
Apr 06 00:02:51 <caconym>	i glanced at that documentation :)
Apr 06 00:02:57 <caconym>	sounds like i should take another look
Apr 06 00:04:49 <caconym>	i had a feeling it was some lifetimes magic ala crazy typesystem extensions in Haskell, i'm kinda glad that's not the case
Apr 06 00:05:04 <caconym>	trying to take a break from that sort of tomfoolery
Apr 06 00:05:22 <aatch>	caconym, it might help if you don't try to think in terms of C pointers directly.
Apr 06 00:06:03 <aatch>	caconym, because while C has one(-ish) pointer type, Rust has 3 (main) pointer types.
Apr 06 00:06:32 <aatch>	caconym, Actually, it's more like 5.
Apr 06 00:07:20 <caconym>	is &mut one of them?
Apr 06 00:07:38 <aatch>	caconym, it's fairly common for people to confuse themselves because they don't realise that *this* specific use of foo_t* is equivalent to Box<Foo>, not &Foo.
Apr 06 00:07:51 <aatch>	caconym, it is.
Apr 06 00:07:59 <caconym>	ah, is that the Deref trait magic?
Apr 06 00:08:11 <aatch>	caconym, not sure what you mean.
Apr 06 00:08:30 <caconym>	'*this* specific use of foo_t* is equivalent to Box<Foo>, not &Foo.'
Apr 06 00:08:47 <aatch>	caconym, I'm talking about converting C code/patterns into Rust.
Apr 06 00:08:54 <caconym>	like, dereferencing behavior of a type being defined by its implementation of that trait
Apr 06 00:08:57 <caconym>	oh, ok
Apr 06 00:09:20 <aatch>	caconym, like returning a heap-allocated pointer.
**** BEGIN LOGGING AT Wed Apr  6 06:27:25 2016

Apr 06 06:27:25 *	Now talking on #rust-beginners
Apr 06 06:27:25 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 06 06:27:25 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 06 07:41:39 <LambdaComplex>	panicbit: Is that 0.006 with or without optimization?
Apr 06 09:04:30 <leaper>	Hi, what's up with rustup failing to download "nightly" when I run "rustup update nightly" (or specifying any triple)? I get an error: error: manifest missing package for component rust-std-aarch64-unknown-linux-gnu
Apr 06 09:05:07 <leaper>	Stable downloads OK.
Apr 06 09:05:34 <leaper>	You'd think a broken nightly would be fixed overnight. :-)
Apr 06 09:09:13 <kefin_>	is there an into/from-like trait for strings to copy types (like i32, f64)?
Apr 06 09:17:40 <kefin_>	I'm getting 'the impl doesn't reference any types defined in this crate', is there anything other than struct MyType(OriginalType); to solve this?
Apr 06 09:21:42 <jaysonsantos>	Hey guys, I have a vector wrapped by an Arc and I try to get it inside a thread with clone and it works ok, but when I initialize the thread inside a block like for it won't allow me get the data because of the moved binding, is there anyway to make it work? http://is.gd/Q6DbWQ
Apr 06 09:22:27 <kefin_>	jaysonsantos: I think you need an Arc to a Mutex to a Vector: Arc<Mutex<Vec<...>>>
Apr 06 09:22:57 <jaysonsantos>	kefin_: But that would block the other threads to read the data until the first to acquire the lock finishes, no?
Apr 06 09:23:47 <kefin_>	jaysonsantos: That depends, if both read it's fine, but there can only be one writer
Apr 06 09:27:27 <kefin_>	Trying to find some resources, I'm sure I've seen it before in Rust...
Apr 06 09:27:28 <jaysonsantos>	kefin_: Mutex is going to lock only for writes?
Apr 06 09:30:25 <kefin_>	jaysonsantos: No not afaik,...
Apr 06 09:30:51 <kefin_>	jaysonsantos: I think I found it: https://doc.rust-lang.org/std/sync/struct.RwLock.html
Apr 06 09:32:02 <jaysonsantos>	I managed to make it work moving let data = data.clone(); outside the thread, but I don't know if it is right
Apr 06 09:32:34 <kefin_>	Are you cloning the Vec itself?
Apr 06 09:32:49 <kefin_>	Also check out RwLock, it's exactly what you asked for :)
Apr 06 09:35:40 <jaysonsantos>	this is my last change http://is.gd/hMmbih
Apr 06 09:36:00 <jaysonsantos>	but is it really parallel? Or the clone outside is making some sort of lock?
Apr 06 09:36:29 <kefin_>	jaysonsantos: cloning an arc just copies a few bytes in memory
Apr 06 09:37:22 <kefin_>	jaysonsantos: I also suspect that data is immutable, thus allowing concurrent reads
Apr 06 09:37:26 <kimundi>	jaysonsantos: cloning the Arc outside the thread is the correct way to do this
Apr 06 09:37:46 <jaysonsantos>	thanks guys
Apr 06 09:37:59 <kimundi>	since you want to transfer ownership of the cloned handle into the thread, not of the original one
Apr 06 09:39:02 <jaysonsantos>	my first try was doing the clone inside but the compiler was complaining that data was already moved
Apr 06 09:41:33 <leaper>	How can I update nightly in Rustup? The usual command gives an error since yesterday.
Apr 06 09:43:35 <llandersll>	Can anyone explain this to me: http://is.gd/apLEBd if I remove the lifetime on the TriangleMeshHandle return specifier on line 19 then the borrow checker tells me off. I kinda get that I *should* add the lifetime here, but I don't really understand why
Apr 06 09:47:23 <panicbit>	LambdaComplex: That is 0.006 with --release
Apr 06 10:21:32 <sprog>	I'm confused about when I need to use `extern crate blah;` in sub modules. It seems that if they are already declared in a parent module I don't need to redeclare the dependency, but sometimes I do.
Apr 06 10:21:51 <bluss>	right, that's not needed
Apr 06 10:22:14 <sprog>	But sometimes it seems to be.
Apr 06 10:22:18 <bluss>	usually best to keep all the extern crate lines in the top level of your crate
Apr 06 10:22:34 <bluss>	sprog: depends on where you want 'blah` to be in the namespace
Apr 06 10:22:48 <bluss>	an absolute path starts with :: if you use it in an expression
Apr 06 10:23:03 <bluss>	or you can just put `use blah` at the top of the local module
Apr 06 10:23:15 <bluss>	to make the absolute path ::blah be available as just blah
Apr 06 10:24:22 <sprog>	OK, so the rule is: `extern crate foo;` brings the module `foo` into the current path.
Apr 06 10:24:40 <bluss>	yes
Apr 06 10:24:52 <sprog>	so if I do that in a sub module, a parent module could access it by `submod::foo`.
Apr 06 10:24:53 <bluss>	and `use` uses absolute paths (from the crate root)
Apr 06 10:24:58 <bluss>	expressions use relative paths
Apr 06 10:25:55 <sprog>	What is the preferred style: bundle all `extern crate` calls into the root module and use `use`, or redeclare `extern` calls.
Apr 06 10:25:58 <bluss>	here's an example http://is.gd/RBghhn
Apr 06 10:26:08 <bluss>	put all extern crate in the root
Apr 06 10:26:16 <bluss>	in particular, don't use more than one extern crate IMO
Apr 06 10:26:41 <sprog>	OK, thanks for the help bluss!
Apr 06 10:49:48 <blashyrk>	since there is no inheritance in rust, how can I make a container that contains different kind of stuff? I could cram all sorts of different functionality into a single struct but that would be quite ugly I suppose
Apr 06 10:51:11 <kefin_>	blashyrk, I think there's dynamic dispatch by using references to an Impl
Apr 06 10:51:26 <kefin_>	So either Box<impl_name> or &impl_name inside a collection should work
Apr 06 11:04:02 <tchosky>	I have a question
Apr 06 11:04:56 <bluss>	another strategy for handling multiple different types is to use an enum
Apr 06 11:09:35 <tchosky>	can you read me>?
Apr 06 11:11:34 <bluss>	tchosky: sure, ask away
Apr 06 11:21:07 <blashyrk>	bluss: so a container of enums would work? and I could assign structs to different enum types as params? 
Apr 06 11:21:15 <blashyrk>	that sounds like an awesome solution if it's possible
Apr 06 11:21:49 <bluss>	enums are the closed-set-of-possibilities solution
Apr 06 11:22:01 <bluss>	and a trait object for the open set of possibilities solution
Apr 06 11:22:32 <blashyrk>	this is very closed-set-of-possibilities -like
Apr 06 11:22:43 <blashyrk>	but it never occured to me that I can use something like 
Apr 06 11:22:53 <blashyrk>	some_vec: Vec<EnumType>
Apr 06 11:23:11 <blashyrk>	and have EnumType::SomeOption(s: SomeStruct)
Apr 06 11:23:33 <bluss>	that's why I mentioned it, both approaches exist
Apr 06 11:23:45 <bluss>	both use some degree of boilerplate
Apr 06 11:23:54 <bluss>	code
Apr 06 11:23:59 <blashyrk>	I keep thinking of enums as C-like loosely coupled "stupid" enums, so thanks for reminding me that Rust enums are awesome :D
Apr 06 11:24:13 <bluss>	yeah
Apr 06 11:24:23 <bluss>	we should have that on a banner when you enter
Apr 06 11:24:40 <bluss>	1) Rust enums are awesome and 2) Learn `match' use `match'
Apr 06 11:24:47 <blashyrk>	haha aboslutely
Apr 06 11:53:04 <LambdaComplex>	panicbit: What is it without --release? D:
Apr 06 11:58:27 <LambdaComplex>	Hey, cargo decided it will work on my laptop again. Neat.
Apr 06 12:01:11 <panicbit>	LambdaComplex: Roughly th same IIRC^^, I'll check it again
Apr 06 12:01:35 <LambdaComplex>	panicbit: Alright :D
Apr 06 12:01:36 <panicbit>	LambdaComplex: I suppose some of the overhead comes from translating some XCB stuff
Apr 06 12:01:45 <LambdaComplex>	panicbit: Yeah, that certainly makes sense
Apr 06 12:02:35 <LambdaComplex>	panicbit: I don't suppose you feel like testing my latest swm-rust release to help me troubleshoot?
Apr 06 12:03:17 <panicbit>	LambdaComplex: Hm, I was going to translate it to get more stuff into lax
Apr 06 12:03:47 <LambdaComplex>	panicbit: Translate what?
Apr 06 12:04:00 <panicbit>	LambdaComplex: The swm-rust to the lax abstarction
Apr 06 12:04:14 <panicbit>	abstraction*
Apr 06 12:04:19 <LambdaComplex>	panicbit: Ah, gotcha
Apr 06 12:04:30 <LambdaComplex>	panicbit: Why don't we get the XCB version working 100% first though?
Apr 06 12:04:36 <panicbit>	Good idea
Apr 06 12:04:48 <LambdaComplex>	Like I said last night, I have all the code "done"
Apr 06 12:04:52 <LambdaComplex>	It just doesn't work right >.>
Apr 06 12:05:50 <panicbit>	LambdaComplex: I don't see much of a difference between debug and release builds in clap lsw
Apr 06 12:06:04 <panicbit>	(speedwise
Apr 06 12:06:05 <panicbit>	)
Apr 06 12:06:32 <LambdaComplex>	Works for me!
Apr 06 12:06:38 <LambdaComplex>	Shall I go accept that PR?
Apr 06 12:06:48 <panicbit>	Well, yeah :D
Apr 06 12:07:04 <panicbit>	It's definitely an improvement over docopt
Apr 06 12:07:10 <panicbit>	It even looks cleaner
Apr 06 12:08:09 <LambdaComplex>	Yeah, especially since you don't have to put the entire output of --help right in the main file
Apr 06 12:11:30 <LambdaComplex>	panicbit: So are you gonna check swm out?
Apr 06 12:12:36 <panicbit>	Yeah I will
Apr 06 12:12:54 <panicbit>	Right after lunch
Apr 06 12:16:15 <blashyrk>	why do I get "cannot move out of borrowed content" here? http://is.gd/uIZwgo
Apr 06 12:17:31 <blashyrk>	and why does this work, instead? http://is.gd/NaUSgx
Apr 06 12:18:34 <panicbit>	blashyrk: In the first example you are moving _something out of the e
Apr 06 12:18:57 <panicbit>	blashyrk: In the second example you only take a reference to _something, so everything is fine
Apr 06 12:21:26 <panicbit>	When you bind to something in a pattern, you move the whole thing
Apr 06 12:21:33 <blashyrk>	so capturing something in a closure moves its ownership to the closure by default? or does the pattern matching part do that here?
Apr 06 12:21:36 <panicbit>	Unless the value you bind to is copy
Apr 06 12:21:44 <panicbit>	Or you only take a reference to it using `ref`
Apr 06 12:21:44 <blashyrk>	ooooh
Apr 06 12:22:26 <panicbit>	So you moved e/_something into the match arm
Apr 06 12:24:27 <panicbit>	blashyrk: Heh, I just realized that my fancy macro would allow you to write this instead: `.filter(|e| e.maybe_into::<A>().is_some() })`
Apr 06 12:24:29 <blashyrk>	didn't realize matching would do that
Apr 06 12:24:30 <panicbit>	<3
Apr 06 12:25:13 <panicbit>	(er, there's a rogue '}' there)
Apr 06 12:25:25 <blashyrk>	is that a part of some crate?
Apr 06 12:25:31 <panicbit>	blashyrk: Not yet
Apr 06 12:25:32 <blashyrk>	never seen maybe_into before :D
Apr 06 12:26:14 <panicbit>	blashyrk: I currently have an open PR that adds MaybeInto/MaybeFrom to the conv crate
Apr 06 12:26:24 <panicbit>	blashyrk: Also, maybe_into is only halve of the story
Apr 06 12:26:56 <panicbit>	blashyrk: `A` would be it's own type here that matches the structure of TestEnum::A
Apr 06 12:27:09 <panicbit>	(This would be generated by the macro)
Apr 06 12:27:50 <blashyrk>	and that would work with enum variants that have data associate with them as well?
Apr 06 12:28:23 <panicbit>	Yeah!
Apr 06 12:28:44 <blashyrk>	I'm not at all familiar to Rust on the level that would make me comprehend how :)
Apr 06 12:28:51 <panicbit>	macro magic :)
Apr 06 12:29:15 <panicbit>	I'm just parsing your enum definition and generate some neat additional code ;)
Apr 06 12:30:02 <archer884>	Say I have an extern crate that has a macro, which I declare as `#[macro_use] extern crate thign;` How do I then get to use that macro in another module?
Apr 06 12:30:34 <panicbit>	archer884: You should be able to just use it
Apr 06 12:31:07 <panicbit>	It should be available to your whole crate
Apr 06 12:33:02 <panicbit>	blashyrk: Ah, it wouldn't actually work...
Apr 06 12:33:50 <panicbit>	blashyrk: Because the MaybeInto/MaybeFrom stuff requires moving the enum, but you can't do that in .filter
Apr 06 12:33:51 <blashyrk>	why not
Apr 06 12:34:29 <blashyrk>	I was just about to ask whether there was a way to compactify the code I pasted there
Apr 06 12:34:38 <blashyrk>	using a match inside a filter closure seems overly... verbose
Apr 06 12:34:43 <panicbit>	Yeah it is
Apr 06 12:35:04 <panicbit>	blashyrk: You could also if-let
Apr 06 12:35:06 <blashyrk>	also, I'm not sure "compactify" was a word before I used it just then, but I like it xD
Apr 06 12:35:11 <panicbit>	But it would look similarly verbose
Apr 06 12:35:36 <panicbit>	I have an idea though
Apr 06 12:36:27 <archer884>	Darn. Ok, looking deeper, it seems to be that I don't have unstable features turned on. How do you do that? oO
Apr 06 12:36:29 <panicbit>	blashyrk: http://is.gd/gtn6lq
Apr 06 12:36:46 <mbrubeck>	archer884: unstable features are only available in Rust nightly builds
Apr 06 12:37:01 <archer884>	Yeah, this is the latest nightly... and it's not that kind of feature.
Apr 06 12:37:24 <archer884>	This guy has his sample `main` marked with `#[cfg(feature = "unstable")]`, which I've never seen before. 
Apr 06 12:37:27 <mbrubeck>	archer884: Ah, are you using a dependency that has an feature named "unstable"?
Apr 06 12:37:32 <archer884>	Probably.
Apr 06 12:37:34 <archer884>	:)
Apr 06 12:38:57 <mbrubeck>	archer884: In your Cargo.toml dependencies section, you can do `crate_name = { version = "0.0.1", features = ["unstable"] }`
Apr 06 12:38:57 <archer884>	I figure this means I need to do something in my toml, but I'm not familiar with that process.
Apr 06 12:38:57 <archer884>	Thank you!
Apr 06 12:38:57 <mbrubeck>	For more details see http://doc.crates.io/manifest.html#the-features-section
Apr 06 12:39:58 <blashyrk>	panicbit: this looks much nicer, thanks!
Apr 06 12:40:27 <blashyrk>	if a bit cryptic 
Apr 06 12:40:38 <blashyrk>	at least to my newbie eyes
Apr 06 12:40:47 <panicbit>	blashyrk: You could have also used if-let to return true/false from the filter, but this is still simpler. It comes with the visual cost of another indentation though :)
Apr 06 12:41:10 <panicbit>	blashyrk: It is definitily clearer IMO
Apr 06 12:42:01 <blashyrk>	yeah, definitely
Apr 06 12:42:05 <mbrubeck>	blashyrk, panicbit: https://crates.io/crates/matches could be useful here too
Apr 06 12:42:36 <panicbit>	Ah nice
Apr 06 12:43:08 <blashyrk>	mbrubeck: if this could work with enums and I suppose it does, then I could use it to replace enum_set completely! 
Apr 06 12:43:14 <mbrubeck>	.filter(|&e| matches!(*e, TestEnum::A(_))
Apr 06 12:43:38 <mbrubeck>	It just generates the same `match` expression that you had originally
Apr 06 12:44:19 <blashyrk>	I was thinking about using this to "emulate" an enum set. since the one in std::collections isn't stable yet and the enum_set crate has one but it needs coding/decoding each enum to a u32
Apr 06 12:45:00 <blashyrk>	that is, if this "|" or-like thingy would work with enum variants
Apr 06 12:48:37 <panicbit>	blashyrk: Well, you could use the bitwise or (|) to combine your enum values
Apr 06 12:48:52 <panicbit>	blashyrk: But you'd have to define a variant for each permutation
Apr 06 12:49:26 <panicbit>	e.g. for an enum with variants A and B, you'd also have to add a variant AB
Apr 06 12:49:43 <panicbit>	For A,B,C you'd need AB, AC, BC, and ABC
Apr 06 12:49:54 <blashyrk>	yeah, someone told me that before, possibly you :)
Apr 06 12:50:02 <panicbit>	Nope I didn't =D
Apr 06 12:50:09 <mbrubeck>	You can use `TestEnum::A(..) | TestEnum::B(..)` syntax in a `match` expression or `matches!` macro, though.
Apr 06 12:50:12 <panicbit>	Ok, so you know
Apr 06 12:50:21 <blashyrk>	that's why I opted for using the enum_set crate instead
Apr 06 12:50:39 <blashyrk>	mbrubeck: I know, but what I needed was to define "
Apr 06 12:50:57 <blashyrk>	allowed enum variants and store that as a struct field
Apr 06 12:51:23 <blashyrk>	and an enum_set works fine for that, the only pesky thing is that coding from/to u32
Apr 06 12:51:53 <blashyrk>	I don't know how the std implementation of EnumSet will work once it's stable, I'm hoping that sort of thing will be done automatically behind the scenes
Apr 06 13:05:31 <panicbit>	LambdaComplex: What exactly doesn't work?
**** BEGIN LOGGING AT Thu Apr  7 16:42:47 2016

Apr 07 16:42:47 *	Now talking on #rust-beginners
Apr 07 16:42:47 *	Topic for #rust-beginners is: Beginner's Rust discussion, unlogged. Ask away! |  Playground  https://play.rust-lang.org | Forum  https://users.rust-lang.org | Conduct   https://www.rust-lang.org/conduct.html 
Apr 07 16:42:47 *	Topic for #rust-beginners set by steveklabnik!root@moz-fft.uo8.55.45.IP (Wed Feb 17 21:12:56 2016)
Apr 07 17:18:58 <leaper>	Hi, is there a guide somewhere that sets put how to install Rust (under Rustup) and MSYS2, on Windows 7, using the GNU version of the Rust distributable, so that it all just works?
Apr 07 17:20:41 <leaper>	I can install one or the other, but c/c++ libraries I compile and install under MSYS2 are not available to Rust.
Apr 07 17:21:00 <leaper>	And Rust won't run in MSYS2.
Apr 07 17:21:24 <peschkaj>	https://github.com/rust-lang/rust#mingw
Apr 07 17:23:09 <leaper>	Thanks, peschkaj I'll give that a whirl: compiling Rust from within MSYS2. Bye.
Apr 07 17:23:31 <peschkaj>	leaper: IIRC, unless you go to great lengths to make MSYS aware of things outside of the MSYS install, it's not going to see them. Best of luck!
Apr 07 17:23:48 <leaper>	OK thanks.
Apr 07 17:24:48 <peschkaj>	Once you have an msys2 you're happy with, you can probably use the rustup instructions for rustup.sh
Apr 07 17:32:46 <blashyrk>	is there some sort of built in mechanism to parse hex strings to numbers? str::parse() doesn't seem to do that
Apr 07 17:33:21 <blashyrk>	oh, nvm, there's a crate for that
Apr 07 17:33:31 <bluss>	blashyrk: integers have methods for it
Apr 07 17:33:43 <bluss>	playbot: u32::from_str_radix("ffe", 16)
Apr 07 17:33:44 -playbot/#rust-beginners-	Ok(4094)
Apr 07 17:34:06 <bluss>	playbot: u32::from_str_radix("F", 16)
Apr 07 17:34:07 -playbot/#rust-beginners-	Ok(15)
Apr 07 17:34:11 <bluss>	ok
Apr 07 17:34:25 <blashyrk>	hmmm what about 0x... notation?
Apr 07 17:34:39 <bluss>	probably not supported. You can slice it away
Apr 07 17:34:43 <bluss>	playbot: u32::from_str_radix("0xF", 16)
Apr 07 17:34:45 -playbot/#rust-beginners-	Err(ParseIntError { kind: InvalidDigit })
Apr 07 17:34:52 <blashyrk>	guess so, thanks!
Apr 07 17:40:55 <mbrubeck>	You can use `.trim_left_matches("0x")` to trim off an optional 0x prefix
Apr 07 17:45:48 <chainsaw10>	How can I convert a number (specifically u32 in this case) to a string? I'm trying `i.to_string().chars().collect::<String>()`, and I'm getting various type errors. (Relevant point: I'm trying to concatenate two of them and save them in a variable)
Apr 07 17:46:19 <chainsaw10>	Wait nevermind, just reread that, sorry :0
Apr 07 17:46:24 <blashyrk>	mbrubeck: great, thannks!
Apr 07 17:46:25 <ivan>	playbot: format!("{}", 3u32)
Apr 07 17:46:26 -playbot/#rust-beginners-	"3"
Apr 07 17:46:37 <mbrubeck>	playbot: 3.to_string()
Apr 07 17:46:39 -playbot/#rust-beginners-	"3"
Apr 07 17:49:18 <chainsaw10>	Thanks! Slightly better question: I'm trying to convert two numbers to string, then concatenate them. I'm trying `let forward = i.to_string() + j.to_string();`, and the type checker doesn't like that for some reason. Any idea why?
Apr 07 17:50:05 <blashyrk>	what's the most idiomatic way to take some values upfront from the iterator, then skip iterating upon those values?
Apr 07 17:50:38 <mbrubeck>	chainsaw10: I think String only implements Add<&str>, so you need to take a reference to the second one: `i.to_string() + &j.to_string()`
Apr 07 17:50:50 <mbrubeck>	chainsaw10: format!("{}{}", i, j) is also a common way to do this
Apr 07 17:52:42 <chainsaw10>	mbrubeck: Thanks! That fixed the compile error. Which way is more readable to someone that actually knows Rust?
Apr 07 17:53:03 <mbrubeck>	I have no strong preference between the two...
Apr 07 17:53:59 *	ChanServ gives channel operator status to niconii
Apr 07 17:54:30 <chainsaw10>	mbrubeck: Okay, thanks again.
Apr 07 18:03:11 <ijks>	Is there a method/function to flatten a Vec<Vec<T>> -> Vec<T>? I can't seem to find one.
Apr 07 18:05:18 <ijks>	I suppose I could write it as a fold using append(), would that be idiomatic?
Apr 07 18:05:41 <bluss>	ijks: yes, methods .concat() or .join(sep)
Apr 07 18:05:43 <kefin_>	ijks: That seems like an unneeded overhead, why not create an iterator instead that wraps linearly?
Apr 07 18:05:59 <Xion>	I thought join() only works on strings.
Apr 07 18:06:02 <bluss>	ijks: although these methods are based on copying all T
Apr 07 18:06:09 <bluss>	Xion: it works on slices too
Apr 07 18:06:33 <Xion>	If you want a vector output then you kind need to copy the elements.
Apr 07 18:06:40 <bluss>	ijks: using flat_map will be easy at least, if you want to move all the elements
Apr 07 18:06:47 <Xion>	Otherwise you probably have to write your own iterator.
Apr 07 18:06:50 <bluss>	Xion: you don't need a rust level copy
Apr 07 18:06:58 <kefin_>	Xion: can't he move the elements out and then move them into the new vector?
Apr 07 18:07:16 <mbrubeck>	I was going to say `vec.into_iter().flat_map(|v| v).collect();` but `vec.concat()` is better.
Apr 07 18:07:33 <bluss>	they do different things
Apr 07 18:07:38 <Xion>	Ahem.
Apr 07 18:07:40 <bluss>	so pick the one you need :)
Apr 07 18:07:51 <Xion>	Call it however you want but these contiguous blocks of memory you'll be merging.
Apr 07 18:08:35 <bluss>	Xion: we just need to keep straight when we talk of copying in rust semantics or if copying memory
Apr 07 18:09:20 <ijks>	bluss: I'm silly, just found out I was already using concat.
Apr 07 18:09:40 <moriarty>	is there a better way to convert a &[u8] to [u16; N] other than repeatedly calling byteorder::ReadBytesExt::read_u16? can I make its reader yield an array directly?
Apr 07 18:10:22 <Xion>	bluss: What's "copying in Rust semantics" though? My intuition is "moving of Copy objects" which I'm inclined to simplify to just "moving".
Apr 07 18:10:59 <bluss>	Clone is the generalization of copying values
Apr 07 18:11:32 <Xion>	Right, but Clone is explicit and can be called cloning :)
Apr 07 18:12:09 <bluss>	it's explicit in a way
Apr 07 18:13:18 <snirk>	Any kind of complex data could impl Clone and be cloned with .clone(), but types implementing Copy should be assumed to be light enough or special to be implicitly copied around
Apr 07 18:14:12 <bluss>	I don't agree that they can be assumed to be light as in just a few bytes
Apr 07 18:15:53 <Xion>	Nothing prevents you from implementing Copy on a huge type. Then again, the feet are always a convenient target to shoot at :)
Apr 07 18:16:20 <snirk>	That's not shooting at your feet, that's just putting on concrete galoshes
Apr 07 18:16:45 <snirk>	But yeah, if you need to call .clone() on something all the time, you've probably got borrowing issues
Apr 07 18:16:46 <ubsan_>	I don't agree, implementing Copy is fine on large types
Apr 07 18:16:52 <ijks>	snirk: and jumping into a lake?
Apr 07 18:17:03 <snirk>	Just make sure you add some ampersands around and you'll be fine :P
Apr 07 18:17:07 <Xion>	snirk :)
Apr 07 18:17:09 <ubsan_>	if you need to memcpy, you need to memcpy
Apr 07 18:17:19 <ubsan_>	and you should be using references otherwise
Apr 07 18:31:36 <chainsaw10>	Is there an exponent operator or function in rust? Couldn't find it with a quick Google.
Apr 07 18:32:33 <Xion>	There are pow?() methods
Apr 07 18:32:47 <Xion>	playbot: 42.pow(2)
Apr 07 18:32:47 -playbot/#rust-beginners-	<anon>:9:12: 9:18 error: no method named `pow` found for type `_` in the current scope
Apr 07 18:32:48 -playbot/#rust-beginners-	<anon>:9         42.pow(2)
Apr 07 18:32:48 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/22gamsX
Apr 07 18:32:52 <Xion>	Or maybe not.
Apr 07 18:33:20 <Xion>	playbot: (42 as i32).pow(2)
Apr 07 18:33:21 -playbot/#rust-beginners-	1764
Apr 07 18:33:44 <huon>	playbot: 42_i32.pow(2) // (can use suffixes as well as/instead of casts)
Apr 07 18:33:45 -playbot/#rust-beginners-	1764
Apr 07 18:33:52 <chainsaw10>	Xion: Thanks!
Apr 07 18:34:16 <Xion>	playbot: 42_usize_i32.pow(2) // am I taking this too far?
Apr 07 18:34:17 -playbot/#rust-beginners-	<anon>:9:9: 9:21 error: invalid suffix `usize_i32` for numeric literal
Apr 07 18:34:17 -playbot/#rust-beginners-	<anon>:9         42_usize_i32.pow(2) // am I taking this too far?
Apr 07 18:34:17 -playbot/#rust-beginners-	output truncated; full output at: http://bit.ly/1VBPf41
Apr 07 18:34:20 <Xion>	Appears so.
Apr 07 18:35:23 <chainsaw10>	Is there a difference between 42i32 or 42_i32? I've been using 42i32, is something else more idiomatic?
Apr 07 18:35:51 <bluss>	chainsaw10: it's just a style choice
Apr 07 18:36:12 <bstrie>	chainsaw10: typically I only see underscores used to separate digits when there are a lot of them, like 1_000_000
Apr 07 18:36:45 <bstrie>	chainsaw10: also I typically avoid `let x = 42i32` when I can, in favor of `let x: i32 = 42`. but this is up to you
Apr 07 18:37:48 <chainsaw10>	bstrie: thanks. I assumed `let x = 42i32` was more idiomatic for some reason. I guess I'll start doing `let x: i32 = 42` instead
Apr 07 18:38:09 <ijks>	playbot: let x = 42 as i32;
Apr 07 18:38:10 -playbot/#rust-beginners-	()
Apr 07 18:38:16 <bstrie>	chainsaw10: it's subjective, that's just my personal preference :)
Apr 07 18:38:17 <ijks>	playbot: let x = 42 as i32; x
Apr 07 18:38:18 -playbot/#rust-beginners-	42
Apr 07 18:38:29 <ijks>	I suppose that works as well
Apr 07 18:38:31 <blashyrk>	is there a concept of "returning ownership"? say I want to pass something into a function, and the function should decide whether to retain or "return" ownership to the caller?
Apr 07 18:38:36 <bstrie>	ijks: I rarely see `as` being used like that, I'd prefer either of the two prior options
Apr 07 18:38:48 <ijks>	bstrie: agreed, was just wondering if it was possible.
Apr 07 18:38:52 <panicbit>	blashyrk: Sounds's like Cow
Apr 07 18:39:10 <bstrie>	blashyrk: if you know that you want to return ownership, then it's idiomatic to have `fn blah(x: Foo) -> Foo`
Apr 07 18:39:17 <bstrie>	and just give the parameter back when you're done
Apr 07 18:39:21 <chainsaw10>	ijks: bstrie: bluss: Thanks! I ought to give the Rust style guide a read :)
Apr 07 18:39:27 <mbrubeck>	blashyrk: Some functions have signatures like `f(x: T) -> Result<U, T>` so they can give back ownership in the error case
Apr 07 18:40:00 <mbrubeck>	blashyrk: For example http://doc.rust-lang.org/std/sync/mpsc/struct.Sender.html#method.send
Apr 07 18:40:02 <ijks>	bstrie: when is that form preferred vs a `&mut T`?
Apr 07 18:40:50 <ijks>	bstrie: seems like they both give the function temporary access to a value, though the owned version does a move and all that, I think.
Apr 07 18:40:57 <bstrie>	chainsaw10: personally, I only use the `42i32` form when the integer is part of a larger expression, because in that case it might be a pain to type out the entire type on the left-hand-side. so something like `let x = &[42u8, 43, 44]` might be preferable to `let x: &[u8] = [42, 43, 44]`
Apr 07 18:41:02 <blashyrk>	the problem is, I want to return something completely different, and implicitly return ownership if the object is not used. my function has this signature fn func(something: Something) -> Option<SomethingElse> 
Apr 07 18:41:34 <blashyrk>	so I guess I'd have to rewrite it so that it becomes: fn func(something: Something) -> Result<Option<SomethingElse>, Something> and check the result ? 
Apr 07 18:41:55 <blashyrk>	or simply  fn func(something: Something) -> Result<SomethingElse, Something>
Apr 07 18:41:57 <chainsaw10>	bstrie: yeah, that makes sense. (And for me, at the moment, I usually *can't* type out the entire type on the left, if it's complicated ;)
Apr 07 18:42:00 <ijks>	blashyrk: does the function need to own the `Something` to produce the `SomethingElse`?
Apr 07 18:42:06 <bstrie>	blashyrk: check out https://doc.rust-lang.org/std/borrow/enum.Cow.html
Apr 07 18:42:30 <blashyrk>	ijks: the function transfers ownership of something into SomethingElse, if that SomethingElse can be constructed
Apr 07 18:42:46 <blashyrk>	bstrie: thanks, I'll read that now
Apr 07 18:42:55 <ijks>	blashyrk: ah, I see.
Apr 07 18:43:58 <mbrubeck>	blashyrk: Yes, Result<SomethingElse, Something> should work for your use case
Apr 07 18:46:57 <panicbit>	Looks like the same pattern that Rc::try_unwrap uses http://doc.rust-lang.org/nightly/std/rc/struct.Rc.html#method.try_unwrap
Apr 07 18:48:39 FiSHLiM plugin unloaded
Apr 07 18:48:39 Python interface unloaded
**** ENDING LOGGING AT Thu Apr  7 18:48:39 2016

